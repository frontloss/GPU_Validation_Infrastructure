namespace Intel.VPG.Display.Automation
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Windows.Automation;
    using System.Xml;

    internal class BLATool
    {
        internal void InstallBLA()
        {
            Process BLAInstallProcess = new Process();
            BLAInstallProcess = CommonExtensions.StartProcess("BLATool.exe", " install", 0);
            BLAInstallProcess.StandardInput.WriteLine("y");
            while (BLAInstallProcess.StandardOutput.ReadLine() != null)
            {
                BLAInstallProcess.StandardInput.Flush();
                for (int numCount = 0; numCount <= 1; numCount++)
                {
                    Condition regCondition = null;
                    AutomationElement appElement = null;
                    AutomationElement _rootElement = AutomationElement.RootElement;
                    regCondition = new PropertyCondition(AutomationElement.NameProperty, "Install");
                    appElement = _rootElement.FindFirst(TreeScope.Descendants, regCondition);
                    if (appElement != null)
                    {
                        InvokePattern pattern = appElement.GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                        pattern.Invoke();
                        Thread.Sleep(5000);
                    }
                }
            }
            BLAInstallProcess.Close();
        }

        internal bool SetMethod(CSParam argCSParam)
        {
            InstallBLA();
            string[] csvFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.csv*");
            foreach (string file in csvFiles)
            {
                File.Delete(file);
            }
            FileVersionInfo blaFileVersionInfo = FileVersionInfo.GetVersionInfo("BLATool.exe");
            Log.Message("BLA Tool version {0}", blaFileVersionInfo.FileVersion);

            int resumeTime = (int)argCSParam.Delay + 5;
            Log.Verbose("Running BLA tool for {0} sec ", resumeTime);
            CommonExtensions.StartProcess("BLATool.exe", " capture cst:" + resumeTime + ",poll=1000", 4);
            return true;
        }

        internal bool GetCPUState(CPU_C_STATE state)
        {
            #region read CSV file generated by BLA
            for (int timmer = 0; timmer < 40; timmer++)
            { 
                Thread.Sleep(3000);
                if (File.Exists("CPU C-State.csv"))
                    break;
            }
            string[] lines = File.ReadAllLines("CPU C-State.csv");
            string[] container = lines.Where(pkgStr => pkgStr.Contains(state.ToString())).FirstOrDefault().Split(new[] { ',', '\t' });
            if (container == null)
                Log.Verbose("CPU has't entered into {0} state. ", state.ToString());
            else
            {
                if (Convert.ToDouble(container[3]) == 0)
                    Log.Verbose("CPU {0} recedency value is: 0", state.ToString());
                else
                {
                    Log.Verbose("CPU entered into {0} state, and recedency value is: {1}", state.ToString(), container[3]);
                    return true;
                }
            }
            return false;
            #endregion
        }
    }
}
