using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverDisplay;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IntelGfxDriverDisplayTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Intel-Gfx-Driver-Display";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x6f556899), unchecked((short) 0x027a), unchecked((short) 0x45ec), 0xa3, 0xf5, 0xc5, 0x8e, 0x7f, 0xb9, 0x4f, 0xf5);
        public enum Keywords : long
        {
            Osl = 0x1,
            Hal = 0x2,
            Protocol = 0x4,
            Diagnostics = 0x8,
            Hdcp = 0x10,
            Hdmi = 0x20,
            Dp = 0x40,
            Mipi = 0x80,
            Modeset = 0x100,
            Audio = 0x200,
            Flip = 0x400,
            Displaypowercons = 0x800,
        };

        public IntelGfxDriverDisplayTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<Aux_t> AuxDPCDRead
        {
            add
            {
                source.RegisterEventTemplate(AuxDPCDReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<Aux_t> AuxDPCDWrite
        {
            add
            {
                source.RegisterEventTemplate(AuxDPCDWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<DBufInfo_t> DBuf
        {
            add
            {
                source.RegisterEventTemplate(DBufTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<DebugPrint_t> DebugPrint
        {
            add
            {
                source.RegisterEventTemplate(DebugPrintTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<DdiSetBrightnessData_t> DisplayBacklightApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 145, ProviderGuid);
            }
        }
        public event Action<DdiSetBrightnessStateData_t> DisplayBacklightAssociate
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightAssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 146, ProviderGuid);
            }
        }
        public event Action<BlcCalculatePwmControlRegFreq_t> DisplayBacklightCalculate
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 149, ProviderGuid);
            }
        }
        public event Action<DdiSetBacklightOptimizationData_t> DisplayBacklightProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 147, ProviderGuid);
            }
        }
        public event Action<PortSetBrightnessData_t> DisplayBacklightProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 150, ProviderGuid);
            }
        }
        public event Action<PortEnableDisableBacklightData_t> DisplayBacklightSetup
        {
            add
            {
                source.RegisterEventTemplate(DisplayBacklightSetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 148, ProviderGuid);
            }
        }
        public event Action<Display_Caps_t> DisplayCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<SinkEdid_t> DisplayCapsEDID
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsEDIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<DPRxCaps_t> DisplayCapsRxCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnostics
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsError
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsMayDay
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsMayDayTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsWarning
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<BlcApplyData_t> DisplayPcBLCApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBLCApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 99, ProviderGuid);
            }
        }
        public event Action<BlcMapUserSettingData_t> DisplayPcBLCAssociate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBLCAssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
            }
        }
        public event Action<BlcComputeNewPercentageData_t> DisplayPcBLCCalculate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBLCCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 100, ProviderGuid);
            }
        }
        public event Action<PcBlcDpstClientEventHandlerData_t> DisplayPcBLCClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBLCClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
            }
        }
        public event Action<BlcInitializeData_t> DisplayPcBLCInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBLCInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 98, ProviderGuid);
            }
        }
        public event Action<DpsEventHandlerData_t> DisplayPcDPSEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 117, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcDPSExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 116, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcDPSInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
            }
        }
        public event Action<DpsInitializeData_t> DisplayPcDPSInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 113, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcDpsMamDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 123, ProviderGuid);
            }
        }
        public event Action<DpsMamEventHandlerData_t> DisplayPcDpsMamEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 122, ProviderGuid);
            }
        }
        public event Action<DpsMamInitializeData_t> DisplayPcDpsMamInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcDpsMamReply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 126, ProviderGuid);
            }
        }
        public event Action<PcPhaseCoordinatorDpsMamStartTimer_t> DisplayPcDpsMamStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 124, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcDpsMamStop
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 125, ProviderGuid);
            }
        }
        public event Action<DpsMamWorkItemCallbackData_t> DisplayPcDpsMamWorkItem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDpsMamWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 127, ProviderGuid);
            }
        }
        public event Action<DpsAlgorithmData_t> DisplayPcDPSProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 118, ProviderGuid);
            }
        }
        public event Action<DpsGetUserDpsParamsData_t> DisplayPcDPSRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 119, ProviderGuid);
            }
        }
        public event Action<DpsInitSupportedPStatesData_t> DisplayPcDPSSetup
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSSetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 115, ProviderGuid);
            }
        }
        public event Action<DpstAlgorithmResultData_t> DisplayPcDPST
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 133, ProviderGuid);
            }
        }
        public event Action<PcBlcDpstClientEventHandlerData_t> DisplayPcDPSTClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 131, ProviderGuid);
            }
        }
        public event Action<DpstHistogramDisableData_t> DisplayPcDPSTDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 137, ProviderGuid);
            }
        }
        public event Action<DpstHistogramData_t> DisplayPcDPSTEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 136, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcDPSTExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 130, ProviderGuid);
            }
        }
        public event Action<DpstInitializeData_t> DisplayPcDPSTInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 128, ProviderGuid);
            }
        }
        public event Action<DpstProgramDietRegsData_t> DisplayPcDPSTProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 134, ProviderGuid);
            }
        }
        public event Action<DpstHistogramGetStatusData_t> DisplayPcDPSTRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 129, ProviderGuid);
            }
        }
        public event Action<DpstHistogramData_t> DisplayPcDPSTReset
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 138, ProviderGuid);
            }
        }
        public event Action<DpstHistDpcWorkItemCallbackData_t> DisplayPcDPSTWorkItem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 132, ProviderGuid);
            }
        }
        public event Action<DpstHistogramData_t> DisplayPcDPSTWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 135, ProviderGuid);
            }
        }
        public event Action<DpsSetUserDpsParamsData_t> DisplayPcDPSWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 120, ProviderGuid);
            }
        }
        public event Action<PwrConsEscapeData_t> DisplayPcEscape
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 139, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcEventNotificationProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventNotificationProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 92, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcEventNotificationReceive
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventNotificationReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
            }
        }
        public event Action<PwrConsLoadPolicyTableData_t> DisplayPcInitInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 142, ProviderGuid);
            }
        }
        public event Action<PcVbtInfoData_t> DisplayPcInitRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 140, ProviderGuid);
            }
        }
        public event Action<PcLfpEncoderData_t> DisplayPcInitSystem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 141, ProviderGuid);
            }
        }
        public event Action<LaceApplyIeData_t> DisplayPcLACEApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 158, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEApplyFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
            }
        }
        public event Action<LaceClientEventHandler_t> DisplayPcLACEClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 160, ProviderGuid);
            }
        }
        public event Action<LaceControlData_t> DisplayPcLACEDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
            }
        }
        public event Action<LaceControlData_t> DisplayPcLACEEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcLACEExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 159, ProviderGuid);
            }
        }
        public event Action<LaceHistogramReadData_t> DisplayPcLACERead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 157, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEStop
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
            }
        }
        public event Action<PcRegValueFullPathDword_t> DisplayPcLACEWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 161, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorApplyFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorApplyFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorProgramFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorProgramFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorProgramAdjustData_t> DisplayPcPhaseCoordinatorProgramStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorProgramStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorReset
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorSetupDpstPhasing_t> DisplayPcPhaseCoordinatorSetup
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
            }
        }
        public event Action<PcPhaseCoordinatorDpsMamStartTimer_t> DisplayPcPhaseCoordinatorStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcPhaseCoordinatorStop
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcPhaseCoordinatorWorkItem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
            }
        }
        public event Action<PsrClientEventHandlerData_t> DisplayPcPSRClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPSRClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 97, ProviderGuid);
            }
        }
        public event Action<PsrParams_t> DisplayPcPSRDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPSRDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 95, ProviderGuid);
            }
        }
        public event Action<PsrParams_t> DisplayPcPSREnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPSREnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 94, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcPSRExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPSRExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 96, ProviderGuid);
            }
        }
        public event Action<PsrInitializeData_t> DisplayPcPSRInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPSRInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 93, ProviderGuid);
            }
        }
        public event Action<PwrConsUserPolicyData_t> DisplayPcUserPreference
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcUserPreferenceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 143, ProviderGuid);
            }
        }
        public event Action<PcPowerPlanRegValueData_t> DisplayPcUtilRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcUtilReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 144, ProviderGuid);
            }
        }
        public event Action<TestData_t> DisplayTest
        {
            add
            {
                source.RegisterEventTemplate(DisplayTestTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<UR_Info_t> DispPipeUnderRun
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<UR_Dbuf_Data_t> DispPipeUnderRunDBuf
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunDBufTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<UR_Dbuf_Data_t> DispPipeUnderRunGen10Legacy
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunGen10LegacyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<UR_PlaneData_t> DispPipeUnderRunPlane
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DispPipeUnderRunScaler
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunScalerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<UR_Watermark_Data> DispPipeUnderRunSystem
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<SidebandMsg_t> DPSidebandMsgReceive
        {
            add
            {
                source.RegisterEventTemplate(DPSidebandMsgReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<SidebandMsg_t> DPSidebandMsgSend
        {
            add
            {
                source.RegisterEventTemplate(DPSidebandMsgSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<EscapeData_t> Escape
        {
            add
            {
                source.RegisterEventTemplate(EscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 74, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> EventViewerPrint
        {
            add
            {
                source.RegisterEventTemplate(EventViewerPrintTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<FeatureControl_t> FeatureControl
        {
            add
            {
                source.RegisterEventTemplate(FeatureControlTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
            }
        }
        public event Action<FlipAllParam_t> FlipAllParam
        {
            add
            {
                source.RegisterEventTemplate(FlipAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
            }
        }
        public event Action<FlipAddress_t> FlipAsync
        {
            add
            {
                source.RegisterEventTemplate(FlipAsyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, ProviderGuid);
            }
        }
        public event Action<FlipAddress_t> FlipSync
        {
            add
            {
                source.RegisterEventTemplate(FlipSyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, ProviderGuid);
            }
        }
        public event Action<FunctionTrack_t> FunctionTrack
        {
            add
            {
                source.RegisterEventTemplate(FunctionTrackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<PortEncryption_t> HDCPEncryption
        {
            add
            {
                source.RegisterEventTemplate(HDCPEncryptionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<HdcpPortAccess_t> HdcpPortAccess
        {
            add
            {
                source.RegisterEventTemplate(HdcpPortAccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
            }
        }
        public event Action<TranscoderEncryption_t> HDCPTranscoder
        {
            add
            {
                source.RegisterEventTemplate(HDCPTranscoderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<HPD_t> HotPlugDetect
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<HPDLiveState_t> HotPlugDetectLiveState
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectLiveStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<SPI_t> HotPlugDetectSPI
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectSPITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<Aux_t> I2CAuxRead
        {
            add
            {
                source.RegisterEventTemplate(I2CAuxReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<Aux_t> I2CAuxWrite
        {
            add
            {
                source.RegisterEventTemplate(I2CAuxWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<I2C_t> I2CRead
        {
            add
            {
                source.RegisterEventTemplate(I2CReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<I2C_t> I2CWrite
        {
            add
            {
                source.RegisterEventTemplate(I2CWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipPlaneIn_t> Mpo3FlipPlane
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipIn_t> Mpo3FlipStart
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipOut_t> Mpo3FlipStop
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, ProviderGuid);
            }
        }
        public event Action<NotifyVSyncMpo2_Info_t> NotifyVSync
        {
            add
            {
                source.RegisterEventTemplate(NotifyVSyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 76, ProviderGuid);
            }
        }
        public event Action<NotifyVSyncMpo2_Layer_t> NotifyVSyncPlane
        {
            add
            {
                source.RegisterEventTemplate(NotifyVSyncPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 77, ProviderGuid);
            }
        }
        public event Action<Opregion_t> Opregion
        {
            add
            {
                source.RegisterEventTemplate(OpregionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
            }
        }
        public event Action<Pps_t> PanelPowerSeq
        {
            add
            {
                source.RegisterEventTemplate(PanelPowerSeqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 75, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfiler
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfilerStart
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfilerStop
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<RmCaps_t> ResourceManagerInitialize
        {
            add
            {
                source.RegisterEventTemplate(ResourceManagerInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
            }
        }
        public event Action<SetTimingData_t> SetTiming
        {
            add
            {
                source.RegisterEventTemplate(SetTimingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<ColorPixelDesc_t> SetTimingColor
        {
            add
            {
                source.RegisterEventTemplate(SetTimingColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<StructureDump_t> StructureDump
        {
            add
            {
                source.RegisterEventTemplate(StructureDumpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> SystemDetailsCapability
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, ProviderGuid);
            }
        }
        public event Action<SystemInfo_t> SystemDetailsInfo
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
            }
        }
        public event Action<Target_Mode_t> SystemDetailsMode
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
            }
        }
        public event Action<Display_Caps_t> SystemDetailsRxCaps
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, ProviderGuid);
            }
        }
        public event Action<Target_Info_t> SystemDetailsSink
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsSinkTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
            }
        }
        public event Action<SetTimingData_t> SystemDetailsTranscoder
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsTranscoderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
            }
        }
        public event Action<Target_Info_t> Target
        {
            add
            {
                source.RegisterEventTemplate(TargetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<Target_Edid> TargetEDID
        {
            add
            {
                source.RegisterEventTemplate(TargetEDIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<Target_Mode_t> TargetMode
        {
            add
            {
                source.RegisterEventTemplate(TargetModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeA
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeB
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeBTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeC
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeCTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeD
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeVirtual
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeVirtualTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkCursor
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkCursorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<WaterMarkInfo_t> WaterMarkInfo
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkLPWM
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkLPWMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkTransWM
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkTransWMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private Aux_t AuxDPCDReadTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 5, 15, "AuxDPCD", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private Aux_t AuxDPCDWriteTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 4, 15, "AuxDPCD", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private DBufInfo_t DBufTemplate(Action<DBufInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DBufInfo_t(action, 39, 19, "DBuf", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DebugPrint_t DebugPrintTemplate(Action<DebugPrint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DebugPrint_t(action, 1, 1, "DebugPrint", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DdiSetBrightnessData_t DisplayBacklightApplyTemplate(Action<DdiSetBrightnessData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DdiSetBrightnessData_t(action, 145, 56, "DisplayBacklight", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private DdiSetBrightnessStateData_t DisplayBacklightAssociateTemplate(Action<DdiSetBrightnessStateData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DdiSetBrightnessStateData_t(action, 146, 56, "DisplayBacklight", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private BlcCalculatePwmControlRegFreq_t DisplayBacklightCalculateTemplate(Action<BlcCalculatePwmControlRegFreq_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcCalculatePwmControlRegFreq_t(action, 149, 56, "DisplayBacklight", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private DdiSetBacklightOptimizationData_t DisplayBacklightProcessTemplate(Action<DdiSetBacklightOptimizationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DdiSetBacklightOptimizationData_t(action, 147, 56, "DisplayBacklight", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private PortSetBrightnessData_t DisplayBacklightProgramTemplate(Action<PortSetBrightnessData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PortSetBrightnessData_t(action, 150, 56, "DisplayBacklight", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private PortEnableDisableBacklightData_t DisplayBacklightSetupTemplate(Action<PortEnableDisableBacklightData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PortEnableDisableBacklightData_t(action, 148, 56, "DisplayBacklight", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private Display_Caps_t DisplayCapsTemplate(Action<Display_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Display_Caps_t(action, 34, 30, "DisplayCaps", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SinkEdid_t DisplayCapsEDIDTemplate(Action<SinkEdid_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SinkEdid_t(action, 35, 30, "DisplayCaps", Guid.Empty, 35, "EDID", ProviderGuid, ProviderName );
        }
        static private DPRxCaps_t DisplayCapsRxCapsTemplate(Action<DPRxCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DPRxCaps_t(action, 36, 30, "DisplayCaps", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 28, 25, "DisplayDiagnostics", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsErrorTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 25, 25, "DisplayDiagnostics", Guid.Empty, 23, "Error", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsInfoTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 27, 25, "DisplayDiagnostics", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsMayDayTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 24, 25, "DisplayDiagnostics", Guid.Empty, 32, "MayDay", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsWarningTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 26, 25, "DisplayDiagnostics", Guid.Empty, 24, "Warning", ProviderGuid, ProviderName );
        }
        static private BlcApplyData_t DisplayPcBLCApplyTemplate(Action<BlcApplyData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcApplyData_t(action, 99, 47, "DisplayPcBLC", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private BlcMapUserSettingData_t DisplayPcBLCAssociateTemplate(Action<BlcMapUserSettingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcMapUserSettingData_t(action, 101, 47, "DisplayPcBLC", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private BlcComputeNewPercentageData_t DisplayPcBLCCalculateTemplate(Action<BlcComputeNewPercentageData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcComputeNewPercentageData_t(action, 100, 47, "DisplayPcBLC", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private PcBlcDpstClientEventHandlerData_t DisplayPcBLCClientTemplate(Action<PcBlcDpstClientEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcBlcDpstClientEventHandlerData_t(action, 102, 47, "DisplayPcBLC", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private BlcInitializeData_t DisplayPcBLCInitializeTemplate(Action<BlcInitializeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcInitializeData_t(action, 98, 47, "DisplayPcBLC", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private DpsEventHandlerData_t DisplayPcDPSEventHandlerTemplate(Action<DpsEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsEventHandlerData_t(action, 117, 49, "DisplayPcDPS", Guid.Empty, 64, "EventHandler", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcDPSExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 116, 49, "DisplayPcDPS", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcDPSInfoTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 114, 49, "DisplayPcDPS", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DpsInitializeData_t DisplayPcDPSInitializeTemplate(Action<DpsInitializeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsInitializeData_t(action, 113, 49, "DisplayPcDPS", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcDpsMamDisableTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 123, 50, "DisplayPcDpsMam", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private DpsMamEventHandlerData_t DisplayPcDpsMamEventHandlerTemplate(Action<DpsMamEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsMamEventHandlerData_t(action, 122, 50, "DisplayPcDpsMam", Guid.Empty, 64, "EventHandler", ProviderGuid, ProviderName );
        }
        static private DpsMamInitializeData_t DisplayPcDpsMamInitializeTemplate(Action<DpsMamInitializeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsMamInitializeData_t(action, 121, 50, "DisplayPcDpsMam", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcDpsMamReplyTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 126, 50, "DisplayPcDpsMam", Guid.Empty, 6, "Reply", ProviderGuid, ProviderName );
        }
        static private PcPhaseCoordinatorDpsMamStartTimer_t DisplayPcDpsMamStartTemplate(Action<PcPhaseCoordinatorDpsMamStartTimer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcPhaseCoordinatorDpsMamStartTimer_t(action, 124, 50, "DisplayPcDpsMam", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcDpsMamStopTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 125, 50, "DisplayPcDpsMam", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private DpsMamWorkItemCallbackData_t DisplayPcDpsMamWorkItemTemplate(Action<DpsMamWorkItemCallbackData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsMamWorkItemCallbackData_t(action, 127, 50, "DisplayPcDpsMam", Guid.Empty, 61, "WorkItem", ProviderGuid, ProviderName );
        }
        static private DpsAlgorithmData_t DisplayPcDPSProgramTemplate(Action<DpsAlgorithmData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsAlgorithmData_t(action, 118, 49, "DisplayPcDPS", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private DpsGetUserDpsParamsData_t DisplayPcDPSReadTemplate(Action<DpsGetUserDpsParamsData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsGetUserDpsParamsData_t(action, 119, 49, "DisplayPcDPS", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DpsInitSupportedPStatesData_t DisplayPcDPSSetupTemplate(Action<DpsInitSupportedPStatesData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsInitSupportedPStatesData_t(action, 115, 49, "DisplayPcDPS", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private DpstAlgorithmResultData_t DisplayPcDPSTTemplate(Action<DpstAlgorithmResultData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstAlgorithmResultData_t(action, 133, 51, "DisplayPcDPST", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PcBlcDpstClientEventHandlerData_t DisplayPcDPSTClientTemplate(Action<PcBlcDpstClientEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcBlcDpstClientEventHandlerData_t(action, 131, 51, "DisplayPcDPST", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private DpstHistogramDisableData_t DisplayPcDPSTDisableTemplate(Action<DpstHistogramDisableData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogramDisableData_t(action, 137, 51, "DisplayPcDPST", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private DpstHistogramData_t DisplayPcDPSTEnableTemplate(Action<DpstHistogramData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogramData_t(action, 136, 51, "DisplayPcDPST", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcDPSTExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 130, 51, "DisplayPcDPST", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private DpstInitializeData_t DisplayPcDPSTInitializeTemplate(Action<DpstInitializeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstInitializeData_t(action, 128, 51, "DisplayPcDPST", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private DpstProgramDietRegsData_t DisplayPcDPSTProgramTemplate(Action<DpstProgramDietRegsData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstProgramDietRegsData_t(action, 134, 51, "DisplayPcDPST", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private DpstHistogramGetStatusData_t DisplayPcDPSTReadTemplate(Action<DpstHistogramGetStatusData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogramGetStatusData_t(action, 129, 51, "DisplayPcDPST", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DpstHistogramData_t DisplayPcDPSTResetTemplate(Action<DpstHistogramData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogramData_t(action, 138, 51, "DisplayPcDPST", Guid.Empty, 58, "Reset", ProviderGuid, ProviderName );
        }
        static private DpstHistDpcWorkItemCallbackData_t DisplayPcDPSTWorkItemTemplate(Action<DpstHistDpcWorkItemCallbackData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistDpcWorkItemCallbackData_t(action, 132, 51, "DisplayPcDPST", Guid.Empty, 61, "WorkItem", ProviderGuid, ProviderName );
        }
        static private DpstHistogramData_t DisplayPcDPSTWriteTemplate(Action<DpstHistogramData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogramData_t(action, 135, 51, "DisplayPcDPST", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private DpsSetUserDpsParamsData_t DisplayPcDPSWriteTemplate(Action<DpsSetUserDpsParamsData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsSetUserDpsParamsData_t(action, 120, 49, "DisplayPcDPS", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private PwrConsEscapeData_t DisplayPcEscapeTemplate(Action<PwrConsEscapeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PwrConsEscapeData_t(action, 139, 52, "DisplayPcEscape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcEventNotificationProcessTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 92, 45, "DisplayPcEventNotification", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcEventNotificationReceiveTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 91, 45, "DisplayPcEventNotification", Guid.Empty, 22, "Receive", ProviderGuid, ProviderName );
        }
        static private PwrConsLoadPolicyTableData_t DisplayPcInitInitializeTemplate(Action<PwrConsLoadPolicyTableData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PwrConsLoadPolicyTableData_t(action, 142, 53, "DisplayPcInit", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PcVbtInfoData_t DisplayPcInitReadTemplate(Action<PcVbtInfoData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcVbtInfoData_t(action, 140, 53, "DisplayPcInit", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private PcLfpEncoderData_t DisplayPcInitSystemTemplate(Action<PcLfpEncoderData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcLfpEncoderData_t(action, 141, 53, "DisplayPcInit", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private LaceApplyIeData_t DisplayPcLACEApplyTemplate(Action<LaceApplyIeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceApplyIeData_t(action, 158, 57, "DisplayPcLACE", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEApplyFinishTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 156, 57, "DisplayPcLACE", Guid.Empty, 66, "ApplyFinish", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEApplyStartTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 155, 57, "DisplayPcLACE", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private LaceClientEventHandler_t DisplayPcLACEClientTemplate(Action<LaceClientEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceClientEventHandler_t(action, 160, 57, "DisplayPcLACE", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private LaceControlData_t DisplayPcLACEDisableTemplate(Action<LaceControlData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceControlData_t(action, 152, 57, "DisplayPcLACE", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private LaceControlData_t DisplayPcLACEEnableTemplate(Action<LaceControlData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceControlData_t(action, 151, 57, "DisplayPcLACE", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcLACEExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 159, 57, "DisplayPcLACE", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private LaceHistogramReadData_t DisplayPcLACEReadTemplate(Action<LaceHistogramReadData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceHistogramReadData_t(action, 157, 57, "DisplayPcLACE", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEStartTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 153, 57, "DisplayPcLACE", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEStopTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 154, 57, "DisplayPcLACE", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PcRegValueFullPathDword_t DisplayPcLACEWriteTemplate(Action<PcRegValueFullPathDword_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcRegValueFullPathDword_t(action, 161, 57, "DisplayPcLACE", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorApplyFinishTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 109, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 66, "ApplyFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorApplyStartTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 108, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorInitializeTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 103, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorProgramFinishTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 111, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 68, "ProgramFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorProgramAdjustData_t DisplayPcPhaseCoordinatorProgramStartTemplate(Action<PhaseCoordinatorProgramAdjustData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorProgramAdjustData_t(action, 110, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 67, "ProgramStart", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorResetTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 106, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 58, "Reset", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorSetupDpstPhasing_t DisplayPcPhaseCoordinatorSetupTemplate(Action<PhaseCoordinatorSetupDpstPhasing_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorSetupDpstPhasing_t(action, 112, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private PcPhaseCoordinatorDpsMamStartTimer_t DisplayPcPhaseCoordinatorStartTemplate(Action<PcPhaseCoordinatorDpsMamStartTimer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcPhaseCoordinatorDpsMamStartTimer_t(action, 104, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcPhaseCoordinatorStopTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 105, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcPhaseCoordinatorWorkItemTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 107, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 61, "WorkItem", ProviderGuid, ProviderName );
        }
        static private PsrClientEventHandlerData_t DisplayPcPSRClientTemplate(Action<PsrClientEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrClientEventHandlerData_t(action, 97, 46, "DisplayPcPSR", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private PsrParams_t DisplayPcPSRDisableTemplate(Action<PsrParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrParams_t(action, 95, 46, "DisplayPcPSR", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private PsrParams_t DisplayPcPSREnableTemplate(Action<PsrParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrParams_t(action, 94, 46, "DisplayPcPSR", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcPSRExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 96, 46, "DisplayPcPSR", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private PsrInitializeData_t DisplayPcPSRInitializeTemplate(Action<PsrInitializeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrInitializeData_t(action, 93, 46, "DisplayPcPSR", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PwrConsUserPolicyData_t DisplayPcUserPreferenceTemplate(Action<PwrConsUserPolicyData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PwrConsUserPolicyData_t(action, 143, 54, "DisplayPcUserPreference", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PcPowerPlanRegValueData_t DisplayPcUtilReadTemplate(Action<PcPowerPlanRegValueData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcPowerPlanRegValueData_t(action, 144, 55, "DisplayPcUtil", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private TestData_t DisplayTestTemplate(Action<TestData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TestData_t(action, 20, 5, "DisplayTest", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private UR_Info_t DispPipeUnderRunTemplate(Action<UR_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Info_t(action, 14, 26, "DispPipeUnderRun", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private UR_Dbuf_Data_t DispPipeUnderRunDBufTemplate(Action<UR_Dbuf_Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Dbuf_Data_t(action, 16, 26, "DispPipeUnderRun", Guid.Empty, 27, "DBuf", ProviderGuid, ProviderName );
        }
        static private UR_Dbuf_Data_t DispPipeUnderRunGen10LegacyTemplate(Action<UR_Dbuf_Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Dbuf_Data_t(action, 19, 26, "DispPipeUnderRun", Guid.Empty, 31, "Gen10Legacy", ProviderGuid, ProviderName );
        }
        static private UR_PlaneData_t DispPipeUnderRunPlaneTemplate(Action<UR_PlaneData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_PlaneData_t(action, 15, 26, "DispPipeUnderRun", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DispPipeUnderRunScalerTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 17, 26, "DispPipeUnderRun", Guid.Empty, 29, "Scaler", ProviderGuid, ProviderName );
        }
        static private UR_Watermark_Data DispPipeUnderRunSystemTemplate(Action<UR_Watermark_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Watermark_Data(action, 18, 26, "DispPipeUnderRun", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private SidebandMsg_t DPSidebandMsgReceiveTemplate(Action<SidebandMsg_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SidebandMsg_t(action, 11, 24, "DPSidebandMsg", Guid.Empty, 240, "Receive", ProviderGuid, ProviderName );
        }
        static private SidebandMsg_t DPSidebandMsgSendTemplate(Action<SidebandMsg_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SidebandMsg_t(action, 10, 24, "DPSidebandMsg", Guid.Empty, 9, "Send", ProviderGuid, ProviderName );
        }
        static private EscapeData_t EscapeTemplate(Action<EscapeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EscapeData_t(action, 74, 38, "Escape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData EventViewerPrintTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 13, 4, "EventViewerPrint", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FeatureControl_t FeatureControlTemplate(Action<FeatureControl_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FeatureControl_t(action, 84, 44, "FeatureControl", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FlipAllParam_t FlipAllParamTemplate(Action<FlipAllParam_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAllParam_t(action, 71, 37, "Flip", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private FlipAddress_t FlipAsyncTemplate(Action<FlipAddress_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAddress_t(action, 73, 37, "Flip", Guid.Empty, 54, "Async", ProviderGuid, ProviderName );
        }
        static private FlipAddress_t FlipSyncTemplate(Action<FlipAddress_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAddress_t(action, 72, 37, "Flip", Guid.Empty, 53, "Sync", ProviderGuid, ProviderName );
        }
        static private FunctionTrack_t FunctionTrackTemplate(Action<FunctionTrack_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FunctionTrack_t(action, 2, 2, "FunctionTrack", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PortEncryption_t HDCPEncryptionTemplate(Action<PortEncryption_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PortEncryption_t(action, 37, 31, "HDCP", Guid.Empty, 38, "Encryption", ProviderGuid, ProviderName );
        }
        static private HdcpPortAccess_t HdcpPortAccessTemplate(Action<HdcpPortAccess_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdcpPortAccess_t(action, 81, 42, "HdcpPortAccess", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private TranscoderEncryption_t HDCPTranscoderTemplate(Action<TranscoderEncryption_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TranscoderEncryption_t(action, 38, 31, "HDCP", Guid.Empty, 39, "Transcoder", ProviderGuid, ProviderName );
        }
        static private HPD_t HotPlugDetectTemplate(Action<HPD_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HPD_t(action, 9, 16, "HotPlugDetect", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private HPDLiveState_t HotPlugDetectLiveStateTemplate(Action<HPDLiveState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HPDLiveState_t(action, 12, 16, "HotPlugDetect", Guid.Empty, 19, "LiveState", ProviderGuid, ProviderName );
        }
        static private SPI_t HotPlugDetectSPITemplate(Action<SPI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SPI_t(action, 8, 16, "HotPlugDetect", Guid.Empty, 18, "SPI", ProviderGuid, ProviderName );
        }
        static private Aux_t I2CAuxReadTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 6, 23, "I2CAux", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private Aux_t I2CAuxWriteTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 7, 23, "I2CAux", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private I2C_t I2CReadTemplate(Action<I2C_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new I2C_t(action, 29, 14, "I2C", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private I2C_t I2CWriteTemplate(Action<I2C_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new I2C_t(action, 30, 14, "I2C", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipPlaneIn_t Mpo3FlipPlaneTemplate(Action<Mpo3FlipPlaneIn_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipPlaneIn_t(action, 80, 41, "Mpo3Flip", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipIn_t Mpo3FlipStartTemplate(Action<Mpo3FlipIn_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipIn_t(action, 78, 41, "Mpo3Flip", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipOut_t Mpo3FlipStopTemplate(Action<Mpo3FlipOut_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipOut_t(action, 79, 41, "Mpo3Flip", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private NotifyVSyncMpo2_Info_t NotifyVSyncTemplate(Action<NotifyVSyncMpo2_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVSyncMpo2_Info_t(action, 76, 40, "NotifyVSync", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private NotifyVSyncMpo2_Layer_t NotifyVSyncPlaneTemplate(Action<NotifyVSyncMpo2_Layer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVSyncMpo2_Layer_t(action, 77, 40, "NotifyVSync", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private Opregion_t OpregionTemplate(Action<Opregion_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Opregion_t(action, 70, 36, "Opregion", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Pps_t PanelPowerSeqTemplate(Action<Pps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Pps_t(action, 75, 39, "PanelPowerSeq", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 22, 27, "PerfProfiler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerStartTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 21, 27, "PerfProfiler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerStopTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 23, 27, "PerfProfiler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private RmCaps_t ResourceManagerInitializeTemplate(Action<RmCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RmCaps_t(action, 82, 43, "ResourceManager", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private SetTimingData_t SetTimingTemplate(Action<SetTimingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SetTimingData_t(action, 45, 32, "SetTiming", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ColorPixelDesc_t SetTimingColorTemplate(Action<ColorPixelDesc_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ColorPixelDesc_t(action, 46, 32, "SetTiming", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private StructureDump_t StructureDumpTemplate(Action<StructureDump_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StructureDump_t(action, 3, 3, "StructureDump", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData SystemDetailsCapabilityTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 63, 29, "SystemDetails", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private SystemInfo_t SystemDetailsInfoTemplate(Action<SystemInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SystemInfo_t(action, 83, 29, "SystemDetails", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Target_Mode_t SystemDetailsModeTemplate(Action<Target_Mode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Mode_t(action, 62, 29, "SystemDetails", Guid.Empty, 36, "Mode", ProviderGuid, ProviderName );
        }
        static private Display_Caps_t SystemDetailsRxCapsTemplate(Action<Display_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Display_Caps_t(action, 64, 29, "SystemDetails", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private Target_Info_t SystemDetailsSinkTemplate(Action<Target_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Info_t(action, 61, 29, "SystemDetails", Guid.Empty, 50, "Sink", ProviderGuid, ProviderName );
        }
        static private SetTimingData_t SystemDetailsTranscoderTemplate(Action<SetTimingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SetTimingData_t(action, 60, 29, "SystemDetails", Guid.Empty, 39, "Transcoder", ProviderGuid, ProviderName );
        }
        static private Target_Info_t TargetTemplate(Action<Target_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Info_t(action, 31, 28, "Target", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Target_Edid TargetEDIDTemplate(Action<Target_Edid> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Edid(action, 32, 28, "Target", Guid.Empty, 35, "EDID", ProviderGuid, ProviderName );
        }
        static private Target_Mode_t TargetModeTemplate(Action<Target_Mode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Mode_t(action, 33, 28, "Target", Guid.Empty, 36, "Mode", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeATemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 47, 33, "VBlankInterrupt", Guid.Empty, 45, "PipeA", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeBTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 48, 33, "VBlankInterrupt", Guid.Empty, 46, "PipeB", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeCTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 49, 33, "VBlankInterrupt", Guid.Empty, 47, "PipeC", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeDTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 50, 33, "VBlankInterrupt", Guid.Empty, 48, "PipeD", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeVirtualTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 51, 33, "VBlankInterrupt", Guid.Empty, 49, "PipeVirtual", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkCursorTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 42, 18, "WaterMark", Guid.Empty, 41, "Cursor", ProviderGuid, ProviderName );
        }
        static private WaterMarkInfo_t WaterMarkInfoTemplate(Action<WaterMarkInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkInfo_t(action, 40, 18, "WaterMark", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkLPWMTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 43, 18, "WaterMark", Guid.Empty, 42, "LPWM", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkTransWMTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 44, 18, "WaterMark", Guid.Empty, 43, "TransWM", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[141];
                templates[0] = DebugPrintTemplate(null);
                templates[1] = FunctionTrackTemplate(null);
                templates[2] = StructureDumpTemplate(null);
                templates[3] = AuxDPCDReadTemplate(null);
                templates[4] = AuxDPCDWriteTemplate(null);
                templates[5] = I2CAuxReadTemplate(null);
                templates[6] = I2CAuxWriteTemplate(null);
                templates[7] = HotPlugDetectSPITemplate(null);
                templates[8] = HotPlugDetectTemplate(null);
                templates[9] = DPSidebandMsgSendTemplate(null);
                templates[10] = DPSidebandMsgReceiveTemplate(null);
                templates[11] = HotPlugDetectLiveStateTemplate(null);
                templates[12] = EventViewerPrintTemplate(null);
                templates[13] = DispPipeUnderRunTemplate(null);
                templates[14] = DispPipeUnderRunPlaneTemplate(null);
                templates[15] = DispPipeUnderRunDBufTemplate(null);
                templates[16] = DispPipeUnderRunScalerTemplate(null);
                templates[17] = DispPipeUnderRunSystemTemplate(null);
                templates[18] = DispPipeUnderRunGen10LegacyTemplate(null);
                templates[19] = DisplayTestTemplate(null);
                templates[20] = PerfProfilerStartTemplate(null);
                templates[21] = PerfProfilerTemplate(null);
                templates[22] = PerfProfilerStopTemplate(null);
                templates[23] = DisplayDiagnosticsMayDayTemplate(null);
                templates[24] = DisplayDiagnosticsErrorTemplate(null);
                templates[25] = DisplayDiagnosticsWarningTemplate(null);
                templates[26] = DisplayDiagnosticsInfoTemplate(null);
                templates[27] = DisplayDiagnosticsTemplate(null);
                templates[28] = I2CReadTemplate(null);
                templates[29] = I2CWriteTemplate(null);
                templates[30] = TargetTemplate(null);
                templates[31] = TargetEDIDTemplate(null);
                templates[32] = TargetModeTemplate(null);
                templates[33] = DisplayCapsTemplate(null);
                templates[34] = DisplayCapsEDIDTemplate(null);
                templates[35] = DisplayCapsRxCapsTemplate(null);
                templates[36] = HDCPEncryptionTemplate(null);
                templates[37] = HDCPTranscoderTemplate(null);
                templates[38] = DBufTemplate(null);
                templates[39] = WaterMarkInfoTemplate(null);
                templates[40] = WaterMarkCursorTemplate(null);
                templates[41] = WaterMarkLPWMTemplate(null);
                templates[42] = WaterMarkTransWMTemplate(null);
                templates[43] = SetTimingTemplate(null);
                templates[44] = SetTimingColorTemplate(null);
                templates[45] = VBlankInterruptPipeATemplate(null);
                templates[46] = VBlankInterruptPipeBTemplate(null);
                templates[47] = VBlankInterruptPipeCTemplate(null);
                templates[48] = VBlankInterruptPipeDTemplate(null);
                templates[49] = VBlankInterruptPipeVirtualTemplate(null);
                templates[50] = SystemDetailsTranscoderTemplate(null);
                templates[51] = SystemDetailsSinkTemplate(null);
                templates[52] = SystemDetailsModeTemplate(null);
                templates[53] = SystemDetailsCapabilityTemplate(null);
                templates[54] = SystemDetailsRxCapsTemplate(null);
                templates[55] = OpregionTemplate(null);
                templates[56] = FlipAllParamTemplate(null);
                templates[57] = FlipSyncTemplate(null);
                templates[58] = FlipAsyncTemplate(null);
                templates[59] = EscapeTemplate(null);
                templates[60] = PanelPowerSeqTemplate(null);
                templates[61] = NotifyVSyncTemplate(null);
                templates[62] = NotifyVSyncPlaneTemplate(null);
                templates[63] = Mpo3FlipStartTemplate(null);
                templates[64] = Mpo3FlipStopTemplate(null);
                templates[65] = Mpo3FlipPlaneTemplate(null);
                templates[66] = HdcpPortAccessTemplate(null);
                templates[67] = ResourceManagerInitializeTemplate(null);
                templates[68] = SystemDetailsInfoTemplate(null);
                templates[69] = FeatureControlTemplate(null);
                templates[70] = DisplayPcEventNotificationReceiveTemplate(null);
                templates[71] = DisplayPcEventNotificationProcessTemplate(null);
                templates[72] = DisplayPcPSRInitializeTemplate(null);
                templates[73] = DisplayPcPSREnableTemplate(null);
                templates[74] = DisplayPcPSRDisableTemplate(null);
                templates[75] = DisplayPcPSRExternalTemplate(null);
                templates[76] = DisplayPcPSRClientTemplate(null);
                templates[77] = DisplayPcBLCInitializeTemplate(null);
                templates[78] = DisplayPcBLCApplyTemplate(null);
                templates[79] = DisplayPcBLCCalculateTemplate(null);
                templates[80] = DisplayPcBLCAssociateTemplate(null);
                templates[81] = DisplayPcBLCClientTemplate(null);
                templates[82] = DisplayPcPhaseCoordinatorInitializeTemplate(null);
                templates[83] = DisplayPcPhaseCoordinatorStartTemplate(null);
                templates[84] = DisplayPcPhaseCoordinatorStopTemplate(null);
                templates[85] = DisplayPcPhaseCoordinatorResetTemplate(null);
                templates[86] = DisplayPcPhaseCoordinatorWorkItemTemplate(null);
                templates[87] = DisplayPcPhaseCoordinatorApplyStartTemplate(null);
                templates[88] = DisplayPcPhaseCoordinatorApplyFinishTemplate(null);
                templates[89] = DisplayPcPhaseCoordinatorProgramStartTemplate(null);
                templates[90] = DisplayPcPhaseCoordinatorProgramFinishTemplate(null);
                templates[91] = DisplayPcPhaseCoordinatorSetupTemplate(null);
                templates[92] = DisplayPcDPSInitializeTemplate(null);
                templates[93] = DisplayPcDPSInfoTemplate(null);
                templates[94] = DisplayPcDPSSetupTemplate(null);
                templates[95] = DisplayPcDPSExternalTemplate(null);
                templates[96] = DisplayPcDPSEventHandlerTemplate(null);
                templates[97] = DisplayPcDPSProgramTemplate(null);
                templates[98] = DisplayPcDPSReadTemplate(null);
                templates[99] = DisplayPcDPSWriteTemplate(null);
                templates[100] = DisplayPcDpsMamInitializeTemplate(null);
                templates[101] = DisplayPcDpsMamEventHandlerTemplate(null);
                templates[102] = DisplayPcDpsMamDisableTemplate(null);
                templates[103] = DisplayPcDpsMamStartTemplate(null);
                templates[104] = DisplayPcDpsMamStopTemplate(null);
                templates[105] = DisplayPcDpsMamReplyTemplate(null);
                templates[106] = DisplayPcDpsMamWorkItemTemplate(null);
                templates[107] = DisplayPcDPSTInitializeTemplate(null);
                templates[108] = DisplayPcDPSTReadTemplate(null);
                templates[109] = DisplayPcDPSTExternalTemplate(null);
                templates[110] = DisplayPcDPSTClientTemplate(null);
                templates[111] = DisplayPcDPSTWorkItemTemplate(null);
                templates[112] = DisplayPcDPSTTemplate(null);
                templates[113] = DisplayPcDPSTProgramTemplate(null);
                templates[114] = DisplayPcDPSTWriteTemplate(null);
                templates[115] = DisplayPcDPSTEnableTemplate(null);
                templates[116] = DisplayPcDPSTDisableTemplate(null);
                templates[117] = DisplayPcDPSTResetTemplate(null);
                templates[118] = DisplayPcEscapeTemplate(null);
                templates[119] = DisplayPcInitReadTemplate(null);
                templates[120] = DisplayPcInitSystemTemplate(null);
                templates[121] = DisplayPcInitInitializeTemplate(null);
                templates[122] = DisplayPcUserPreferenceTemplate(null);
                templates[123] = DisplayPcUtilReadTemplate(null);
                templates[124] = DisplayBacklightApplyTemplate(null);
                templates[125] = DisplayBacklightAssociateTemplate(null);
                templates[126] = DisplayBacklightProcessTemplate(null);
                templates[127] = DisplayBacklightSetupTemplate(null);
                templates[128] = DisplayBacklightCalculateTemplate(null);
                templates[129] = DisplayBacklightProgramTemplate(null);
                templates[130] = DisplayPcLACEEnableTemplate(null);
                templates[131] = DisplayPcLACEDisableTemplate(null);
                templates[132] = DisplayPcLACEStartTemplate(null);
                templates[133] = DisplayPcLACEStopTemplate(null);
                templates[134] = DisplayPcLACEApplyStartTemplate(null);
                templates[135] = DisplayPcLACEApplyFinishTemplate(null);
                templates[136] = DisplayPcLACEReadTemplate(null);
                templates[137] = DisplayPcLACEApplyTemplate(null);
                templates[138] = DisplayPcLACEExternalTemplate(null);
                templates[139] = DisplayPcLACEClientTemplate(null);
                templates[140] = DisplayPcLACEWriteTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverDisplay
{
    public sealed class Aux_t : TraceEvent
    {
        public AUX_CHANNEL_TYPE Channel { get { return (AUX_CHANNEL_TYPE)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public DPCD_ADD Address { get { return (DPCD_ADD)GetInt32At(8); } }
        public int Size { get { return GetInt16At(12); } }
        public byte[] Data { get { return GetByteArrayAt(14, Size); } }

        #region Private
        internal Aux_t(Action<Aux_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+14));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Aux_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Channel", Channel);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Channel", "Status", "Address", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Channel;
                case 1:
                    return Status;
                case 2:
                    return Address;
                case 3:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Aux_t> m_target;
        #endregion
    }
    public sealed class DBufInfo_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int NumPlanes { get { return GetByteAt(4); } }
        public bool InSufficientDbuf { get { return GetInt32At(5) != 0; } }
        public int CurStart { get { return GetInt16At(9); } }
        public int CurEnd { get { return GetInt16At(11); } }
        public int P0_Start { get { return GetInt16At(13); } }
        public int P0_End { get { return GetInt16At(15); } }
        public int P1_Start { get { return GetInt16At(17); } }
        public int P1_End { get { return GetInt16At(19); } }
        public int P2_Start { get { return GetInt16At(21); } }
        public int P2_End { get { return GetInt16At(23); } }

        #region Private
        internal DBufInfo_t(Action<DBufInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 25));
            Debug.Assert(!(Version > 0 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DBufInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "NumPlanes", NumPlanes);
             XmlAttrib(sb, "InSufficientDbuf", InSufficientDbuf);
             XmlAttrib(sb, "CurStart", CurStart);
             XmlAttrib(sb, "CurEnd", CurEnd);
             XmlAttrib(sb, "P0_Start", P0_Start);
             XmlAttrib(sb, "P0_End", P0_End);
             XmlAttrib(sb, "P1_Start", P1_Start);
             XmlAttrib(sb, "P1_End", P1_End);
             XmlAttrib(sb, "P2_Start", P2_Start);
             XmlAttrib(sb, "P2_End", P2_End);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "NumPlanes", "InSufficientDbuf", "CurStart", "CurEnd", "P0_Start", "P0_End", "P1_Start", "P1_End", "P2_Start", "P2_End"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return NumPlanes;
                case 2:
                    return InSufficientDbuf;
                case 3:
                    return CurStart;
                case 4:
                    return CurEnd;
                case 5:
                    return P0_Start;
                case 6:
                    return P0_End;
                case 7:
                    return P1_Start;
                case 8:
                    return P1_End;
                case 9:
                    return P2_Start;
                case 10:
                    return P2_End;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DBufInfo_t> m_target;
        #endregion
    }
    public sealed class DebugPrint_t : TraceEvent
    {
        public int Level { get { return GetInt32At(0); } }
        public string Message { get { return GetUTF8StringAt(4); } }
        public string Function { get { return GetUTF8StringAt(SkipUTF8String(4)); } }
        public int Line { get { return GetInt32At(SkipUTF8String(SkipUTF8String(4))); } }

        #region Private
        internal DebugPrint_t(Action<DebugPrint_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(4))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DebugPrint_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Line", Line);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Level", "Message", "Function", "Line"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Level;
                case 1:
                    return Message;
                case 2:
                    return Function;
                case 3:
                    return Line;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DebugPrint_t> m_target;
        #endregion
    }
    public sealed class DdiSetBrightnessData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Brightness { get { return GetInt32At(8); } }

        #region Private
        internal DdiSetBrightnessData_t(Action<DdiSetBrightnessData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DdiSetBrightnessData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Brightness", Brightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Brightness"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Brightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DdiSetBrightnessData_t> m_target;
        #endregion
    }
    public sealed class DdiSetBrightnessStateData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BrightnessStateValue { get { return GetInt32At(8); } }

        #region Private
        internal DdiSetBrightnessStateData_t(Action<DdiSetBrightnessStateData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DdiSetBrightnessStateData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BrightnessStateValue", BrightnessStateValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BrightnessStateValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BrightnessStateValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DdiSetBrightnessStateData_t> m_target;
        #endregion
    }
    public sealed class BlcCalculatePwmControlRegFreq_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ReferenceFreq { get { return GetInt32At(8); } }
        public int PWMInverterFreqency { get { return GetInt32At(12); } }
        public int Divider { get { return GetInt32At(16); } }

        #region Private
        internal BlcCalculatePwmControlRegFreq_t(Action<BlcCalculatePwmControlRegFreq_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcCalculatePwmControlRegFreq_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ReferenceFreq", ReferenceFreq);
             XmlAttrib(sb, "PWMInverterFreqency", PWMInverterFreqency);
             XmlAttrib(sb, "Divider", Divider);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ReferenceFreq", "PWMInverterFreqency", "Divider"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ReferenceFreq;
                case 2:
                    return PWMInverterFreqency;
                case 3:
                    return Divider;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcCalculatePwmControlRegFreq_t> m_target;
        #endregion
    }
    public sealed class DdiSetBacklightOptimizationData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int OptimizationLevel { get { return GetInt32At(8); } }

        #region Private
        internal DdiSetBacklightOptimizationData_t(Action<DdiSetBacklightOptimizationData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DdiSetBacklightOptimizationData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "OptimizationLevel", OptimizationLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "OptimizationLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return OptimizationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DdiSetBacklightOptimizationData_t> m_target;
        #endregion
    }
    public sealed class PortSetBrightnessData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int PwmFreqOffset { get { return GetInt32At(8); } }
        public int PwmControlRegFreq { get { return GetInt32At(12); } }
        public int PwmControlRegDutyCycleOffset { get { return GetInt32At(16); } }
        public int PwmControlRegDutyCycle { get { return GetInt32At(20); } }
        public int BrightnessPercent { get { return GetInt32At(24); } }

        #region Private
        internal PortSetBrightnessData_t(Action<PortSetBrightnessData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PortSetBrightnessData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PwmFreqOffset", PwmFreqOffset);
             XmlAttrib(sb, "PwmControlRegFreq", PwmControlRegFreq);
             XmlAttrib(sb, "PwmControlRegDutyCycleOffset", PwmControlRegDutyCycleOffset);
             XmlAttrib(sb, "PwmControlRegDutyCycle", PwmControlRegDutyCycle);
             XmlAttrib(sb, "BrightnessPercent", BrightnessPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PwmFreqOffset", "PwmControlRegFreq", "PwmControlRegDutyCycleOffset", "PwmControlRegDutyCycle", "BrightnessPercent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PwmFreqOffset;
                case 2:
                    return PwmControlRegFreq;
                case 3:
                    return PwmControlRegDutyCycleOffset;
                case 4:
                    return PwmControlRegDutyCycle;
                case 5:
                    return BrightnessPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PortSetBrightnessData_t> m_target;
        #endregion
    }
    public sealed class PortEnableDisableBacklightData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BacklightEnable { get { return GetInt32At(8); } }
        public int BrightnessPercent { get { return GetInt32At(12); } }

        #region Private
        internal PortEnableDisableBacklightData_t(Action<PortEnableDisableBacklightData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PortEnableDisableBacklightData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BacklightEnable", BacklightEnable);
             XmlAttrib(sb, "BrightnessPercent", BrightnessPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BacklightEnable", "BrightnessPercent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BacklightEnable;
                case 2:
                    return BrightnessPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PortEnableDisableBacklightData_t> m_target;
        #endregion
    }
    public sealed class Display_Caps_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int SinkIndex { get { return GetByteAt(4); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(5); } }
        public string MonitorName { get { return GetUTF8StringAt(9); } }
        public bool AudioSupport { get { return GetInt32At(SkipUTF8String(9)) != 0; } }
        public HDCP_VERSION HDCPVersion { get { return (HDCP_VERSION)GetInt32At(SkipUTF8String(9)+4); } }
        public PSR_SUPPORT PSRSupport { get { return (PSR_SUPPORT)GetInt32At(SkipUTF8String(9)+8); } }
        public EDID_TYPE EdidType { get { return (EDID_TYPE)GetInt32At(SkipUTF8String(9)+12); } }
        public int EdidSize { get { return GetInt16At(SkipUTF8String(9)+16); } }
        public byte[] EdidData { get { return GetByteArrayAt(SkipUTF8String(9)+18, EdidSize); } }

        #region Private
        internal Display_Caps_t(Action<Display_Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(9)+18));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(9)+18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Display_Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "MonitorName", MonitorName);
             XmlAttrib(sb, "AudioSupport", AudioSupport);
             XmlAttrib(sb, "HDCPVersion", HDCPVersion);
             XmlAttrib(sb, "PSRSupport", PSRSupport);
             XmlAttrib(sb, "EdidType", EdidType);
             XmlAttrib(sb, "EdidSize", EdidSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "SinkIndex", "VOT", "MonitorName", "AudioSupport", "HDCPVersion", "PSRSupport", "EdidType", "EdidSize", "EdidData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return SinkIndex;
                case 2:
                    return VOT;
                case 3:
                    return MonitorName;
                case 4:
                    return AudioSupport;
                case 5:
                    return HDCPVersion;
                case 6:
                    return PSRSupport;
                case 7:
                    return EdidType;
                case 8:
                    return EdidSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Display_Caps_t> m_target;
        #endregion
    }
    public sealed class SinkEdid_t : TraceEvent
    {
        public EDID_TYPE Type { get { return (EDID_TYPE)GetInt32At(0); } }
        public int Size { get { return GetInt16At(4); } }
        public byte[] Data { get { return GetByteArrayAt(6, Size); } }

        #region Private
        internal SinkEdid_t(Action<SinkEdid_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+6));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SinkEdid_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SinkEdid_t> m_target;
        #endregion
    }
    public sealed class DPRxCaps_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int Rev { get { return GetByteAt(4); } }
        public int MaxLinkRate { get { return GetInt32At(5); } }
        public int MaxLanes { get { return GetByteAt(9); } }
        public int MaxRxPorts { get { return GetByteAt(10); } }
        public bool AudioSupport { get { return GetInt32At(11) != 0; } }
        public bool SscSupport { get { return GetInt32At(15) != 0; } }
        public bool FastLinkTraining { get { return GetInt32At(19) != 0; } }
        public bool MST { get { return GetInt32At(23) != 0; } }
        public bool DownStreamPresent { get { return GetInt32At(27) != 0; } }
        public int NumDownStreamPorts { get { return GetByteAt(31); } }
        public int TrainingPattern { get { return GetInt32At(32); } }
        public int Size { get { return GetByteAt(36); } }
        public int RawData { get { return GetByteAt(37); } }

        #region Private
        internal DPRxCaps_t(Action<DPRxCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 51));
            Debug.Assert(!(Version > 0 && EventDataLength < 51));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DPRxCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Rev", Rev);
             XmlAttrib(sb, "MaxLinkRate", MaxLinkRate);
             XmlAttrib(sb, "MaxLanes", MaxLanes);
             XmlAttrib(sb, "MaxRxPorts", MaxRxPorts);
             XmlAttrib(sb, "AudioSupport", AudioSupport);
             XmlAttrib(sb, "SscSupport", SscSupport);
             XmlAttrib(sb, "FastLinkTraining", FastLinkTraining);
             XmlAttrib(sb, "MST", MST);
             XmlAttrib(sb, "DownStreamPresent", DownStreamPresent);
             XmlAttrib(sb, "NumDownStreamPorts", NumDownStreamPorts);
             XmlAttrib(sb, "TrainingPattern", TrainingPattern);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Rev", "MaxLinkRate", "MaxLanes", "MaxRxPorts", "AudioSupport", "SscSupport", "FastLinkTraining", "MST", "DownStreamPresent", "NumDownStreamPorts", "TrainingPattern", "Size", "RawData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Rev;
                case 2:
                    return MaxLinkRate;
                case 3:
                    return MaxLanes;
                case 4:
                    return MaxRxPorts;
                case 5:
                    return AudioSupport;
                case 6:
                    return SscSupport;
                case 7:
                    return FastLinkTraining;
                case 8:
                    return MST;
                case 9:
                    return DownStreamPresent;
                case 10:
                    return NumDownStreamPorts;
                case 11:
                    return TrainingPattern;
                case 12:
                    return Size;
                case 13:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DPRxCaps_t> m_target;
        #endregion
    }
    public sealed class DiagnosticData_t : TraceEvent
    {
        public DIAGNOSTIC_SOURCE Source { get { return (DIAGNOSTIC_SOURCE)GetInt32At(0); } }
        public int Param1 { get { return GetInt32At(4); } }
        public int Param2 { get { return GetInt32At(8); } }
        public int Param3 { get { return GetInt32At(12); } }
        public int Param4 { get { return GetInt32At(16); } }

        #region Private
        internal DiagnosticData_t(Action<DiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Source", Source);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Source", "Param1", "Param2", "Param3", "Param4"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Source;
                case 1:
                    return Param1;
                case 2:
                    return Param2;
                case 3:
                    return Param3;
                case 4:
                    return Param4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DiagnosticData_t> m_target;
        #endregion
    }
    public sealed class BlcApplyData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BacklightDataSize { get { return GetInt32At(8); } }
        public byte[] BacklightData { get { return GetByteArrayAt(12, BacklightDataSize); } }

        #region Private
        internal BlcApplyData_t(Action<BlcApplyData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (BacklightDataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (BacklightDataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcApplyData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BacklightDataSize", BacklightDataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BacklightDataSize", "BacklightData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BacklightDataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcApplyData_t> m_target;
        #endregion
    }
    public sealed class BlcMapUserSettingData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int UserBrightnessSource { get { return GetInt32At(8); } }
        public int ReturnBrightness { get { return GetInt32At(12); } }
        public int BCLMTableDataSize { get { return GetInt32At(16); } }
        public byte[] BCLMTableData { get { return GetByteArrayAt(20, BCLMTableDataSize); } }

        #region Private
        internal BlcMapUserSettingData_t(Action<BlcMapUserSettingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (BCLMTableDataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (BCLMTableDataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcMapUserSettingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "UserBrightnessSource", UserBrightnessSource);
             XmlAttrib(sb, "ReturnBrightness", ReturnBrightness);
             XmlAttrib(sb, "BCLMTableDataSize", BCLMTableDataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "UserBrightnessSource", "ReturnBrightness", "BCLMTableDataSize", "BCLMTableData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return UserBrightnessSource;
                case 2:
                    return ReturnBrightness;
                case 3:
                    return BCLMTableDataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcMapUserSettingData_t> m_target;
        #endregion
    }
    public sealed class BlcComputeNewPercentageData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Percent { get { return GetInt32At(8); } }
        public int User { get { return GetInt32At(12); } }
        public int DpstAdjust { get { return GetInt32At(16); } }
        public int DptfAdjust { get { return GetInt32At(20); } }
        public int MinBrightnessPercent { get { return GetInt32At(24); } }

        #region Private
        internal BlcComputeNewPercentageData_t(Action<BlcComputeNewPercentageData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcComputeNewPercentageData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Percent", Percent);
             XmlAttrib(sb, "User", User);
             XmlAttrib(sb, "DpstAdjust", DpstAdjust);
             XmlAttrib(sb, "DptfAdjust", DptfAdjust);
             XmlAttrib(sb, "MinBrightnessPercent", MinBrightnessPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Percent", "User", "DpstAdjust", "DptfAdjust", "MinBrightnessPercent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Percent;
                case 2:
                    return User;
                case 3:
                    return DpstAdjust;
                case 4:
                    return DptfAdjust;
                case 5:
                    return MinBrightnessPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcComputeNewPercentageData_t> m_target;
        #endregion
    }
    public sealed class PcBlcDpstClientEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal PcBlcDpstClientEventHandlerData_t(Action<PcBlcDpstClientEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcBlcDpstClientEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcBlcDpstClientEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class BlcInitializeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BacklightDataSize { get { return GetInt32At(8); } }
        public byte[] BacklightData { get { return GetByteArrayAt(12, BacklightDataSize); } }
        public int InitStatus { get { return GetInt32At(0+ (BacklightDataSize*1)+12); } }

        #region Private
        internal BlcInitializeData_t(Action<BlcInitializeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (BacklightDataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (BacklightDataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcInitializeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BacklightDataSize", BacklightDataSize);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BacklightDataSize", "BacklightData", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BacklightDataSize;
                case 2:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcInitializeData_t> m_target;
        #endregion
    }
    public sealed class DpsEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpsRestrictionsSize { get { return GetInt32At(8); } }
        public byte[] DpsRestrictionsData { get { return GetByteArrayAt(12, DpsRestrictionsSize); } }
        public int FSFlipAccumulator { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+12); } }
        public int CurrentState { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+16); } }
        public int NewState { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+20); } }

        #region Private
        internal DpsEventHandlerData_t(Action<DpsEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRestrictionsSize*1)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRestrictionsSize*1)+24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsRestrictionsSize", DpsRestrictionsSize);
             XmlAttrib(sb, "FSFlipAccumulator", FSFlipAccumulator);
             XmlAttrib(sb, "CurrentState", CurrentState);
             XmlAttrib(sb, "NewState", NewState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsRestrictionsSize", "DpsRestrictionsData", "FSFlipAccumulator", "CurrentState", "NewState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsRestrictionsSize;
                case 2:
                    return FSFlipAccumulator;
                case 3:
                    return CurrentState;
                case 4:
                    return NewState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class PcEventNotificationData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Operation { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, Operation); } }

        #region Private
        internal PcEventNotificationData_t(Action<PcEventNotificationData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Operation*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Operation*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcEventNotificationData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcEventNotificationData_t> m_target;
        #endregion
    }
    public sealed class PcTimePoint_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }

        #region Private
        internal PcTimePoint_t(Action<PcTimePoint_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcTimePoint_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcTimePoint_t> m_target;
        #endregion
    }
    public sealed class DpsInitializeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IsDpsInitialized { get { return GetInt32At(8); } }
        public int IsLFPRefreshRateList { get { return GetInt32At(12); } }
        public int EnableCuiStaticDrrs { get { return GetInt32At(16); } }
        public int DpsPanelType { get { return GetInt32At(20); } }
        public int MamSupported { get { return GetInt32At(24); } }
        public int Status { get { return GetInt32At(28); } }

        #region Private
        internal DpsInitializeData_t(Action<DpsInitializeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsInitializeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsDpsInitialized", IsDpsInitialized);
             XmlAttrib(sb, "IsLFPRefreshRateList", IsLFPRefreshRateList);
             XmlAttrib(sb, "EnableCuiStaticDrrs", EnableCuiStaticDrrs);
             XmlAttrib(sb, "DpsPanelType", DpsPanelType);
             XmlAttrib(sb, "MamSupported", MamSupported);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsDpsInitialized", "IsLFPRefreshRateList", "EnableCuiStaticDrrs", "DpsPanelType", "MamSupported", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsDpsInitialized;
                case 2:
                    return IsLFPRefreshRateList;
                case 3:
                    return EnableCuiStaticDrrs;
                case 4:
                    return DpsPanelType;
                case 5:
                    return MamSupported;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsInitializeData_t> m_target;
        #endregion
    }
    public sealed class DpsMamEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpsRestrictionsSize { get { return GetInt32At(8); } }
        public byte[] DpsRestrictions { get { return GetByteArrayAt(12, DpsRestrictionsSize); } }
        public int FSFlipAccumulator { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+12); } }
        public int DpsMamCtxt_bMotionArtMit { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+16); } }
        public int DpsMamCtxt_bCursorMoved { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+20); } }
        public int DpsMamCtxt_bNotifyImmediate { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+24); } }
        public int MamEnabled { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+28); } }

        #region Private
        internal DpsMamEventHandlerData_t(Action<DpsMamEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRestrictionsSize*1)+32));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRestrictionsSize*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsMamEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsRestrictionsSize", DpsRestrictionsSize);
             XmlAttrib(sb, "FSFlipAccumulator", FSFlipAccumulator);
             XmlAttrib(sb, "DpsMamCtxt_bMotionArtMit", DpsMamCtxt_bMotionArtMit);
             XmlAttrib(sb, "DpsMamCtxt_bCursorMoved", DpsMamCtxt_bCursorMoved);
             XmlAttrib(sb, "DpsMamCtxt_bNotifyImmediate", DpsMamCtxt_bNotifyImmediate);
             XmlAttrib(sb, "MamEnabled", MamEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsRestrictionsSize", "DpsRestrictions", "FSFlipAccumulator", "DpsMamCtxt_bMotionArtMit", "DpsMamCtxt_bCursorMoved", "DpsMamCtxt_bNotifyImmediate", "MamEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsRestrictionsSize;
                case 2:
                    return FSFlipAccumulator;
                case 3:
                    return DpsMamCtxt_bMotionArtMit;
                case 4:
                    return DpsMamCtxt_bCursorMoved;
                case 5:
                    return DpsMamCtxt_bNotifyImmediate;
                case 6:
                    return MamEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsMamEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class DpsMamInitializeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int MamEnabled { get { return GetInt32At(8); } }
        public long ExpireTime { get { return GetInt64At(12); } }
        public int DpsMamCtxt_bMotionArtMit { get { return GetInt32At(20); } }
        public int DpsMamCtxt_bCursorMoved { get { return GetInt32At(24); } }
        public int DpsMamCtxt_bNotifyImmediate { get { return GetInt32At(28); } }

        #region Private
        internal DpsMamInitializeData_t(Action<DpsMamInitializeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsMamInitializeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "MamEnabled", MamEnabled);
             XmlAttrib(sb, "ExpireTime", ExpireTime);
             XmlAttrib(sb, "DpsMamCtxt_bMotionArtMit", DpsMamCtxt_bMotionArtMit);
             XmlAttrib(sb, "DpsMamCtxt_bCursorMoved", DpsMamCtxt_bCursorMoved);
             XmlAttrib(sb, "DpsMamCtxt_bNotifyImmediate", DpsMamCtxt_bNotifyImmediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "MamEnabled", "ExpireTime", "DpsMamCtxt_bMotionArtMit", "DpsMamCtxt_bCursorMoved", "DpsMamCtxt_bNotifyImmediate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return MamEnabled;
                case 2:
                    return ExpireTime;
                case 3:
                    return DpsMamCtxt_bMotionArtMit;
                case 4:
                    return DpsMamCtxt_bCursorMoved;
                case 5:
                    return DpsMamCtxt_bNotifyImmediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsMamInitializeData_t> m_target;
        #endregion
    }
    public sealed class PcPhaseCoordinatorDpsMamStartTimer_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public long PhaseTimeOut { get { return GetInt64At(8); } }

        #region Private
        internal PcPhaseCoordinatorDpsMamStartTimer_t(Action<PcPhaseCoordinatorDpsMamStartTimer_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcPhaseCoordinatorDpsMamStartTimer_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PhaseTimeOut", PhaseTimeOut);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PhaseTimeOut"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PhaseTimeOut;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcPhaseCoordinatorDpsMamStartTimer_t> m_target;
        #endregion
    }
    public sealed class DpsMamWorkItemCallbackData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpsMamCtxt_bCursorMoved { get { return GetInt32At(8); } }

        #region Private
        internal DpsMamWorkItemCallbackData_t(Action<DpsMamWorkItemCallbackData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsMamWorkItemCallbackData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsMamCtxt_bCursorMoved", DpsMamCtxt_bCursorMoved);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsMamCtxt_bCursorMoved"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsMamCtxt_bCursorMoved;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsMamWorkItemCallbackData_t> m_target;
        #endregion
    }
    public sealed class DpsAlgorithmData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int SeamLessRrArgSize { get { return GetInt32At(8); } }
        public byte[] SeamLessRrArg { get { return GetByteArrayAt(12, SeamLessRrArgSize); } }
        public int CurrentDpsRrType { get { return GetInt32At(0+ (SeamLessRrArgSize*1)+12); } }

        #region Private
        internal DpsAlgorithmData_t(Action<DpsAlgorithmData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (SeamLessRrArgSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (SeamLessRrArgSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsAlgorithmData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "SeamLessRrArgSize", SeamLessRrArgSize);
             XmlAttrib(sb, "CurrentDpsRrType", CurrentDpsRrType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "SeamLessRrArgSize", "SeamLessRrArg", "CurrentDpsRrType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return SeamLessRrArgSize;
                case 2:
                    return CurrentDpsRrType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsAlgorithmData_t> m_target;
        #endregion
    }
    public sealed class DpsGetUserDpsParamsData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IsSupportForStaticDRRS { get { return GetInt32At(8); } }
        public int BaseLowRefreshRate { get { return GetInt32At(12); } }
        public int NumOfRefreshRates { get { return GetInt32At(16); } }
        public int DpsRefreshRateSize { get { return GetInt32At(20); } }
        public byte[] DpsRefreshRate { get { return GetByteArrayAt(24, DpsRefreshRateSize); } }
        public int LastUserSelectedModeSetRR { get { return GetInt32At(0+ (DpsRefreshRateSize*1)+24); } }

        #region Private
        internal DpsGetUserDpsParamsData_t(Action<DpsGetUserDpsParamsData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRefreshRateSize*1)+28));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRefreshRateSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsGetUserDpsParamsData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsSupportForStaticDRRS", IsSupportForStaticDRRS);
             XmlAttrib(sb, "BaseLowRefreshRate", BaseLowRefreshRate);
             XmlAttrib(sb, "NumOfRefreshRates", NumOfRefreshRates);
             XmlAttrib(sb, "DpsRefreshRateSize", DpsRefreshRateSize);
             XmlAttrib(sb, "LastUserSelectedModeSetRR", LastUserSelectedModeSetRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsSupportForStaticDRRS", "BaseLowRefreshRate", "NumOfRefreshRates", "DpsRefreshRateSize", "DpsRefreshRate", "LastUserSelectedModeSetRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsSupportForStaticDRRS;
                case 2:
                    return BaseLowRefreshRate;
                case 3:
                    return NumOfRefreshRates;
                case 4:
                    return DpsRefreshRateSize;
                case 5:
                    return LastUserSelectedModeSetRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsGetUserDpsParamsData_t> m_target;
        #endregion
    }
    public sealed class DpsInitSupportedPStatesData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int NumOfUserSelectableBaseLoRRs { get { return GetInt32At(8); } }
        public int UserSelectableBaseLoRRListSize { get { return GetInt32At(12); } }
        public byte[] UserSelectableBaseLoRRList { get { return GetByteArrayAt(16, UserSelectableBaseLoRRListSize); } }
        public int UserSelectedBaseLoRR { get { return GetInt32At(0+ (UserSelectableBaseLoRRListSize*1)+16); } }
        public int LastUserSelectedModeSetRRSize { get { return GetInt32At(0+ (UserSelectableBaseLoRRListSize*1)+20); } }
        public byte[] LastUserSelectedModeSetRR { get { return GetByteArrayAt(0+ (UserSelectableBaseLoRRListSize*1)+24, LastUserSelectedModeSetRRSize); } }
        public int IsDpsInitialized { get { return GetInt32At(0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+24); } }
        public int IsLFPRefreshRateList { get { return GetInt32At(0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+28); } }
        public int CurrentDpsRrType { get { return GetInt32At(0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+32); } }

        #region Private
        internal DpsInitSupportedPStatesData_t(Action<DpsInitSupportedPStatesData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+36));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsInitSupportedPStatesData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "NumOfUserSelectableBaseLoRRs", NumOfUserSelectableBaseLoRRs);
             XmlAttrib(sb, "UserSelectableBaseLoRRListSize", UserSelectableBaseLoRRListSize);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             XmlAttrib(sb, "LastUserSelectedModeSetRRSize", LastUserSelectedModeSetRRSize);
             XmlAttrib(sb, "IsDpsInitialized", IsDpsInitialized);
             XmlAttrib(sb, "IsLFPRefreshRateList", IsLFPRefreshRateList);
             XmlAttrib(sb, "CurrentDpsRrType", CurrentDpsRrType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "NumOfUserSelectableBaseLoRRs", "UserSelectableBaseLoRRListSize", "UserSelectableBaseLoRRList", "UserSelectedBaseLoRR", "LastUserSelectedModeSetRRSize", "LastUserSelectedModeSetRR", "IsDpsInitialized", "IsLFPRefreshRateList", "CurrentDpsRrType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return NumOfUserSelectableBaseLoRRs;
                case 2:
                    return UserSelectableBaseLoRRListSize;
                case 3:
                    return UserSelectedBaseLoRR;
                case 4:
                    return LastUserSelectedModeSetRRSize;
                case 5:
                    return IsDpsInitialized;
                case 6:
                    return IsLFPRefreshRateList;
                case 7:
                    return CurrentDpsRrType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsInitSupportedPStatesData_t> m_target;
        #endregion
    }
    public sealed class DpstAlgorithmResultData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BacklightAdjust { get { return GetInt32At(8); } }
        public int LUTDataSize { get { return GetInt32At(12); } }
        public byte[] LUTData { get { return GetByteArrayAt(16, LUTDataSize); } }
        public long TotalHighlightPixels { get { return GetInt64At(0+ (LUTDataSize*1)+16); } }
        public int DpstImageSize { get { return GetInt32At(0+ (LUTDataSize*1)+24); } }

        #region Private
        internal DpstAlgorithmResultData_t(Action<DpstAlgorithmResultData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (LUTDataSize*1)+28));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (LUTDataSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstAlgorithmResultData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BacklightAdjust", BacklightAdjust);
             XmlAttrib(sb, "LUTDataSize", LUTDataSize);
             XmlAttrib(sb, "TotalHighlightPixels", TotalHighlightPixels);
             XmlAttrib(sb, "DpstImageSize", DpstImageSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BacklightAdjust", "LUTDataSize", "LUTData", "TotalHighlightPixels", "DpstImageSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BacklightAdjust;
                case 2:
                    return LUTDataSize;
                case 3:
                    return TotalHighlightPixels;
                case 4:
                    return DpstImageSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstAlgorithmResultData_t> m_target;
        #endregion
    }
    public sealed class DpstHistogramDisableData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpstControlReg { get { return GetInt32At(8); } }
        public int DpstControlValue { get { return GetInt32At(12); } }
        public int DpstGuardbandReg { get { return GetInt32At(16); } }
        public int DpstGuardbandValue { get { return GetInt32At(20); } }

        #region Private
        internal DpstHistogramDisableData_t(Action<DpstHistogramDisableData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstHistogramDisableData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpstControlReg", DpstControlReg);
             XmlAttrib(sb, "DpstControlValue", DpstControlValue);
             XmlAttrib(sb, "DpstGuardbandReg", DpstGuardbandReg);
             XmlAttrib(sb, "DpstGuardbandValue", DpstGuardbandValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpstControlReg", "DpstControlValue", "DpstGuardbandReg", "DpstGuardbandValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpstControlReg;
                case 2:
                    return DpstControlValue;
                case 3:
                    return DpstGuardbandReg;
                case 4:
                    return DpstGuardbandValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstHistogramDisableData_t> m_target;
        #endregion
    }
    public sealed class DpstHistogramData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpstGuardbandReg { get { return GetInt32At(8); } }
        public int DpstGuardbandValue { get { return GetInt32At(12); } }

        #region Private
        internal DpstHistogramData_t(Action<DpstHistogramData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstHistogramData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpstGuardbandReg", DpstGuardbandReg);
             XmlAttrib(sb, "DpstGuardbandValue", DpstGuardbandValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpstGuardbandReg", "DpstGuardbandValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpstGuardbandReg;
                case 2:
                    return DpstGuardbandValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstHistogramData_t> m_target;
        #endregion
    }
    public sealed class DpstInitializeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int AlgorithmSize { get { return GetInt32At(8); } }
        public byte[] Algorithm { get { return GetByteArrayAt(12, AlgorithmSize); } }
        public int InitStatus { get { return GetInt32At(0+ (AlgorithmSize*1)+12); } }

        #region Private
        internal DpstInitializeData_t(Action<DpstInitializeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (AlgorithmSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (AlgorithmSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstInitializeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "AlgorithmSize", AlgorithmSize);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "AlgorithmSize", "Algorithm", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return AlgorithmSize;
                case 2:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstInitializeData_t> m_target;
        #endregion
    }
    public sealed class DpstProgramDietRegsData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal DpstProgramDietRegsData_t(Action<DpstProgramDietRegsData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstProgramDietRegsData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstProgramDietRegsData_t> m_target;
        #endregion
    }
    public sealed class DpstHistogramGetStatusData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal DpstHistogramGetStatusData_t(Action<DpstHistogramGetStatusData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstHistogramGetStatusData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstHistogramGetStatusData_t> m_target;
        #endregion
    }
    public sealed class DpstHistDpcWorkItemCallbackData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Pipe { get { return GetInt32At(8); } }

        #region Private
        internal DpstHistDpcWorkItemCallbackData_t(Action<DpstHistDpcWorkItemCallbackData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstHistDpcWorkItemCallbackData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Pipe", Pipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Pipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Pipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstHistDpcWorkItemCallbackData_t> m_target;
        #endregion
    }
    public sealed class DpsSetUserDpsParamsData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int UserSelectedBaseLoRR { get { return GetInt32At(8); } }

        #region Private
        internal DpsSetUserDpsParamsData_t(Action<DpsSetUserDpsParamsData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsSetUserDpsParamsData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "UserSelectedBaseLoRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return UserSelectedBaseLoRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsSetUserDpsParamsData_t> m_target;
        #endregion
    }
    public sealed class PwrConsEscapeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Operation { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, DataSize); } }

        #region Private
        internal PwrConsEscapeData_t(Action<PwrConsEscapeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PwrConsEscapeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PwrConsEscapeData_t> m_target;
        #endregion
    }
    public sealed class PwrConsLoadPolicyTableData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal PwrConsLoadPolicyTableData_t(Action<PwrConsLoadPolicyTableData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PwrConsLoadPolicyTableData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PwrConsLoadPolicyTableData_t> m_target;
        #endregion
    }
    public sealed class PcVbtInfoData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal PcVbtInfoData_t(Action<PcVbtInfoData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcVbtInfoData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcVbtInfoData_t> m_target;
        #endregion
    }
    public sealed class PcLfpEncoderData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int LfpEncoderDataSize { get { return GetInt32At(8); } }
        public byte[] LfpEncoderData { get { return GetByteArrayAt(12, LfpEncoderDataSize); } }
        public int ActivePowerSrc { get { return GetInt32At(0+ (LfpEncoderDataSize*1)+12); } }

        #region Private
        internal PcLfpEncoderData_t(Action<PcLfpEncoderData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (LfpEncoderDataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (LfpEncoderDataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcLfpEncoderData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "LfpEncoderDataSize", LfpEncoderDataSize);
             XmlAttrib(sb, "ActivePowerSrc", ActivePowerSrc);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "LfpEncoderDataSize", "LfpEncoderData", "ActivePowerSrc"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return LfpEncoderDataSize;
                case 2:
                    return ActivePowerSrc;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcLfpEncoderData_t> m_target;
        #endregion
    }
    public sealed class LaceApplyIeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Row { get { return GetInt32At(8); } }
        public int Column { get { return GetInt32At(12); } }
        public int DataSize { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, DataSize); } }

        #region Private
        internal LaceApplyIeData_t(Action<LaceApplyIeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceApplyIeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceApplyIeData_t> m_target;
        #endregion
    }
    public sealed class LaceClientEventHandler_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal LaceClientEventHandler_t(Action<LaceClientEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceClientEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceClientEventHandler_t> m_target;
        #endregion
    }
    public sealed class LaceControlData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlData { get { return GetInt32At(8); } }

        #region Private
        internal LaceControlData_t(Action<LaceControlData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceControlData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceControlData_t> m_target;
        #endregion
    }
    public sealed class LaceHistogramReadData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Row { get { return GetInt32At(8); } }
        public int Column { get { return GetInt32At(12); } }
        public int DataSize { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, DataSize); } }

        #region Private
        internal LaceHistogramReadData_t(Action<LaceHistogramReadData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceHistogramReadData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceHistogramReadData_t> m_target;
        #endregion
    }
    public sealed class PcRegValueFullPathDword_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public string Path { get { return GetUnicodeStringAt(8); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public int Data { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(8))); } }
        public int ReturnStatus { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(8))+4); } }

        #region Private
        internal PcRegValueFullPathDword_t(Action<PcRegValueFullPathDword_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcRegValueFullPathDword_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Path", "Name", "Data", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Path;
                case 2:
                    return Name;
                case 3:
                    return Data;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcRegValueFullPathDword_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorContextData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] DpstPhaseAdjustInfo { get { return GetByteArrayAt(12, DataSize); } }
        public byte[] BlcUserAdjustInfo { get { return GetByteArrayAt(0+ (DataSize*1)+12, DataSize); } }
        public byte[] DptfPhaseAdjustInfo { get { return GetByteArrayAt(0+ (DataSize*1)+ (DataSize*1)+12, DataSize); } }

        #region Private
        internal PhaseCoordinatorContextData_t(Action<PhaseCoordinatorContextData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorContextData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "DpstPhaseAdjustInfo", "BlcUserAdjustInfo", "DptfPhaseAdjustInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorContextData_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorProgramAdjustData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Adjust { get { return GetInt32At(8); } }
        public int Feature { get { return GetInt32At(12); } }
        public int Immediate { get { return GetInt32At(16); } }

        #region Private
        internal PhaseCoordinatorProgramAdjustData_t(Action<PhaseCoordinatorProgramAdjustData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorProgramAdjustData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Adjust", Adjust);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "Immediate", Immediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Adjust", "Feature", "Immediate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Adjust;
                case 2:
                    return Feature;
                case 3:
                    return Immediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorProgramAdjustData_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorSetupDpstPhasing_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IncrementPerMil { get { return GetInt32At(8); } }

        #region Private
        internal PhaseCoordinatorSetupDpstPhasing_t(Action<PhaseCoordinatorSetupDpstPhasing_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorSetupDpstPhasing_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IncrementPerMil", IncrementPerMil);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IncrementPerMil"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IncrementPerMil;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorSetupDpstPhasing_t> m_target;
        #endregion
    }
    public sealed class PsrClientEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int EventType { get { return GetInt32At(8); } }
        public int EventParamSize { get { return GetInt32At(12); } }
        public byte[] EventParamData { get { return GetByteArrayAt(16, EventParamSize); } }

        #region Private
        internal PsrClientEventHandlerData_t(Action<PsrClientEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (EventParamSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (EventParamSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrClientEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "EventParamSize", EventParamSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "EventType", "EventParamSize", "EventParamData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return EventType;
                case 2:
                    return EventParamSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrClientEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class PsrParams_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal PsrParams_t(Action<PsrParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrParams_t> m_target;
        #endregion
    }
    public sealed class PsrInitializeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int PsrDisplayCapsSize { get { return GetInt32At(8); } }
        public byte[] PsrDisplayCaps { get { return GetByteArrayAt(12, PsrDisplayCapsSize); } }
        public int Status { get { return GetInt32At(0+ (PsrDisplayCapsSize*1)+12); } }

        #region Private
        internal PsrInitializeData_t(Action<PsrInitializeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (PsrDisplayCapsSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (PsrDisplayCapsSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrInitializeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PsrDisplayCapsSize", PsrDisplayCapsSize);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PsrDisplayCapsSize", "PsrDisplayCaps", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PsrDisplayCapsSize;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrInitializeData_t> m_target;
        #endregion
    }
    public sealed class PwrConsUserPolicyData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal PwrConsUserPolicyData_t(Action<PwrConsUserPolicyData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PwrConsUserPolicyData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PwrConsUserPolicyData_t> m_target;
        #endregion
    }
    public sealed class PcPowerPlanRegValueData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int OsPowerPlan { get { return GetInt32At(8); } }
        public int PowerSource { get { return GetInt32At(12); } }
        public int GraphicsPowerPlan { get { return GetInt32At(16); } }
        public int ReturnStatus { get { return GetInt32At(20); } }

        #region Private
        internal PcPowerPlanRegValueData_t(Action<PcPowerPlanRegValueData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcPowerPlanRegValueData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "OsPowerPlan", OsPowerPlan);
             XmlAttrib(sb, "PowerSource", PowerSource);
             XmlAttrib(sb, "GraphicsPowerPlan", GraphicsPowerPlan);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "OsPowerPlan", "PowerSource", "GraphicsPowerPlan", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return OsPowerPlan;
                case 2:
                    return PowerSource;
                case 3:
                    return GraphicsPowerPlan;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcPowerPlanRegValueData_t> m_target;
        #endregion
    }
    public sealed class TestData_t : TraceEvent
    {
        public int Param1 { get { return GetInt32At(0); } }
        public int Param2 { get { return GetInt32At(4); } }
        public string Function { get { return GetUTF8StringAt(8); } }
        public string Message { get { return GetUnicodeStringAt(SkipUTF8String(8)); } }

        #region Private
        internal TestData_t(Action<TestData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUTF8String(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUTF8String(8))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TestData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Param1", "Param2", "Function", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Param1;
                case 1:
                    return Param2;
                case 2:
                    return Function;
                case 3:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TestData_t> m_target;
        #endregion
    }
    public sealed class UR_Info_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }

        #region Private
        internal UR_Info_t(Action<UR_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Info_t> m_target;
        #endregion
    }
    public sealed class UR_Dbuf_Data_t : TraceEvent
    {
        public int Slice { get { return GetByteAt(0); } }
        public int CTL { get { return GetInt32At(1); } }
        public int STATUS { get { return GetInt32At(5); } }
        public int ECC_STAT { get { return GetInt32At(9); } }

        #region Private
        internal UR_Dbuf_Data_t(Action<UR_Dbuf_Data_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Dbuf_Data_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Slice", Slice);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "STATUS", STATUS);
             XmlAttrib(sb, "ECC_STAT", ECC_STAT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Slice", "CTL", "STATUS", "ECC_STAT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Slice;
                case 1:
                    return CTL;
                case 2:
                    return STATUS;
                case 3:
                    return ECC_STAT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Dbuf_Data_t> m_target;
        #endregion
    }
    public sealed class UR_PlaneData_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int CTL { get { return GetInt32At(4); } }
        public int DbufStartEnd { get { return GetInt32At(8); } }
        public int Stride { get { return GetInt32At(12); } }
        public int Size { get { return GetInt32At(16); } }
        public int Offset { get { return GetInt32At(20); } }

        #region Private
        internal UR_PlaneData_t(Action<UR_PlaneData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_PlaneData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "DbufStartEnd", DbufStartEnd);
             XmlAttrib(sb, "Stride", Stride);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Offset", Offset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "CTL", "DbufStartEnd", "Stride", "Size", "Offset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return CTL;
                case 2:
                    return DbufStartEnd;
                case 3:
                    return Stride;
                case 4:
                    return Size;
                case 5:
                    return Offset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_PlaneData_t> m_target;
        #endregion
    }
    public sealed class UR_Watermark_Data : TraceEvent
    {
        public int LP_WM { get { return GetInt32At(0); } }
        public int TransWM { get { return GetInt32At(32); } }
        public int LineTime { get { return GetInt32At(36); } }

        #region Private
        internal UR_Watermark_Data(Action<UR_Watermark_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Watermark_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LP_WM", LP_WM);
             XmlAttrib(sb, "TransWM", TransWM);
             XmlAttrib(sb, "LineTime", LineTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LP_WM", "TransWM", "LineTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LP_WM;
                case 1:
                    return TransWM;
                case 2:
                    return LineTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Watermark_Data> m_target;
        #endregion
    }
    public sealed class SidebandMsg_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public SIDEBAND_MSG_ID MsgId { get { return (SIDEBAND_MSG_ID)GetInt32At(8); } }
        public SIDEBAND_MSG_TYPE MsgType { get { return (SIDEBAND_MSG_TYPE)GetInt32At(12); } }
        public int Size { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, Size); } }

        #region Private
        internal SidebandMsg_t(Action<SidebandMsg_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SidebandMsg_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "MsgId", MsgId);
             XmlAttrib(sb, "MsgType", MsgType);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Status", "MsgId", "MsgType", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Status;
                case 2:
                    return MsgId;
                case 3:
                    return MsgType;
                case 4:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SidebandMsg_t> m_target;
        #endregion
    }
    public sealed class EscapeData_t : TraceEvent
    {
        public int OpCode { get { return GetInt32At(0); } }
        public int Status { get { return GetInt32At(4); } }

        #region Private
        internal EscapeData_t(Action<EscapeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EscapeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OpCode", OpCode);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OpCode", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OpCode;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EscapeData_t> m_target;
        #endregion
    }
    public sealed class FeatureControl_t : TraceEvent
    {
        public int Display { get { return GetInt32At(0); } }
        public int PowerConservation { get { return GetInt32At(4); } }
        // Skipping Reserved1
        // Skipping Reserved2
        public int SkuTableSize { get { return GetInt32At(16); } }
        public byte[] SkuData { get { return GetByteArrayAt(20, SkuTableSize); } }
        public int WaTableSize { get { return GetInt32At(0+ (SkuTableSize*1)+20); } }
        public byte[] WaData { get { return GetByteArrayAt(0+ (SkuTableSize*1)+24, WaTableSize); } }

        #region Private
        internal FeatureControl_t(Action<FeatureControl_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (WaTableSize*1)+ (SkuTableSize*1)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (WaTableSize*1)+ (SkuTableSize*1)+24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FeatureControl_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Display", Display);
             XmlAttrib(sb, "PowerConservation", PowerConservation);
             XmlAttrib(sb, "SkuTableSize", SkuTableSize);
             XmlAttrib(sb, "WaTableSize", WaTableSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Display", "PowerConservation", "SkuTableSize", "SkuData", "WaTableSize", "WaData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Display;
                case 1:
                    return PowerConservation;
                case 2:
                    return SkuTableSize;
                case 3:
                    return WaTableSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FeatureControl_t> m_target;
        #endregion
    }
    public sealed class FlipAllParam_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int Enabled { get { return GetByteAt(5); } }
        public PIXEL_FMT PixelFmt { get { return (PIXEL_FMT)GetInt32At(6); } }
        public int SurfMemType { get { return GetInt32At(10); } }
        public int ScanX { get { return GetInt32At(14); } }
        public int ScanY { get { return GetInt32At(18); } }
        public int Orientation { get { return GetInt32At(22); } }
        public int PosX { get { return GetInt32At(26); } }
        public int PosY { get { return GetInt32At(30); } }
        public int Address { get { return GetInt32At(34); } }
        public int AlphaBlend { get { return GetByteAt(38); } }
        public int Decryption { get { return GetInt32At(39); } }
        public int ScanLineCount { get { return GetInt32At(43); } }
        public int FrameCount { get { return GetInt32At(47); } }

        #region Private
        internal FlipAllParam_t(Action<FlipAllParam_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 51));
            Debug.Assert(!(Version > 0 && EventDataLength < 51));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipAllParam_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Enabled", Enabled);
             XmlAttrib(sb, "PixelFmt", PixelFmt);
             XmlAttrib(sb, "SurfMemType", SurfMemType);
             XmlAttrib(sb, "ScanX", ScanX);
             XmlAttrib(sb, "ScanY", ScanY);
             XmlAttrib(sb, "Orientation", Orientation);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "AlphaBlend", AlphaBlend);
             XmlAttrib(sb, "Decryption", Decryption);
             XmlAttrib(sb, "ScanLineCount", ScanLineCount);
             XmlAttrib(sb, "FrameCount", FrameCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "Enabled", "PixelFmt", "SurfMemType", "ScanX", "ScanY", "Orientation", "PosX", "PosY", "Address", "AlphaBlend", "Decryption", "ScanLineCount", "FrameCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return Enabled;
                case 3:
                    return PixelFmt;
                case 4:
                    return SurfMemType;
                case 5:
                    return ScanX;
                case 6:
                    return ScanY;
                case 7:
                    return Orientation;
                case 8:
                    return PosX;
                case 9:
                    return PosY;
                case 10:
                    return Address;
                case 11:
                    return AlphaBlend;
                case 12:
                    return Decryption;
                case 13:
                    return ScanLineCount;
                case 14:
                    return FrameCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipAllParam_t> m_target;
        #endregion
    }
    public sealed class FlipAddress_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public bool Async { get { return GetInt32At(5) != 0; } }
        public int Address { get { return GetInt32At(9); } }
        public int ScanLineCount { get { return GetInt32At(13); } }
        public int FrameCount { get { return GetInt32At(17); } }

        #region Private
        internal FlipAddress_t(Action<FlipAddress_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 21));
            Debug.Assert(!(Version > 0 && EventDataLength < 21));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipAddress_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Async", Async);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "ScanLineCount", ScanLineCount);
             XmlAttrib(sb, "FrameCount", FrameCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "Async", "Address", "ScanLineCount", "FrameCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return Async;
                case 3:
                    return Address;
                case 4:
                    return ScanLineCount;
                case 5:
                    return FrameCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipAddress_t> m_target;
        #endregion
    }
    public sealed class FunctionTrack_t : TraceEvent
    {
        public string Function { get { return GetUTF8StringAt(0); } }
        public int Stage { get { return GetInt32At(SkipUTF8String(0)); } }
        public int ErrorCode { get { return GetInt32At(SkipUTF8String(0)+4); } }

        #region Private
        internal FunctionTrack_t(Action<FunctionTrack_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FunctionTrack_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Stage", Stage);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Stage", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Stage;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FunctionTrack_t> m_target;
        #endregion
    }
    public sealed class PortEncryption_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(4); } }
        public HDCP_TYPE Status { get { return (HDCP_TYPE)GetInt32At(8); } }

        #region Private
        internal PortEncryption_t(Action<PortEncryption_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PortEncryption_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PortEncryption_t> m_target;
        #endregion
    }
    public sealed class HdcpPortAccess_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DD_HDCP_PORT_ACCESS ReqType { get { return (DD_HDCP_PORT_ACCESS)GetInt32At(4); } }
        public int Size { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, Size); } }

        #region Private
        internal HdcpPortAccess_t(Action<HdcpPortAccess_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdcpPortAccess_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "ReqType", ReqType);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "ReqType", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return ReqType;
                case 2:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdcpPortAccess_t> m_target;
        #endregion
    }
    public sealed class TranscoderEncryption_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(4); } }
        public bool HdmiSignalling { get { return GetInt32At(8) != 0; } }
        public bool Mst_Hdcp { get { return GetInt32At(12) != 0; } }

        #region Private
        internal TranscoderEncryption_t(Action<TranscoderEncryption_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TranscoderEncryption_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "HdmiSignalling", HdmiSignalling);
             XmlAttrib(sb, "Mst_Hdcp", Mst_Hdcp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "HdmiSignalling", "Mst_Hdcp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return HdmiSignalling;
                case 3:
                    return Mst_Hdcp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TranscoderEncryption_t> m_target;
        #endregion
    }
    public sealed class HPD_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public HPD_EVENT Event { get { return (HPD_EVENT)GetInt32At(4); } }

        #region Private
        internal HPD_t(Action<HPD_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HPD_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Event"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HPD_t> m_target;
        #endregion
    }
    public sealed class HPDLiveState_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public bool Attached { get { return GetInt32At(4) != 0; } }

        #region Private
        internal HPDLiveState_t(Action<HPDLiveState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HPDLiveState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Attached", Attached);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Attached"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Attached;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HPDLiveState_t> m_target;
        #endregion
    }
    public sealed class SPI_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DP_SPI_REASON Reasons { get { return (DP_SPI_REASON)GetInt32At(4); } }

        #region Private
        internal SPI_t(Action<SPI_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SPI_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Reasons", Reasons);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Reasons"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Reasons;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SPI_t> m_target;
        #endregion
    }
    public sealed class I2C_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int Slave { get { return GetInt32At(4); } }
        public int Index { get { return GetInt32At(8); } }
        public int Flags { get { return GetInt32At(12); } }
        public int DataSize { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, DataSize); } }

        #region Private
        internal I2C_t(Action<I2C_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<I2C_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Slave", Slave);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Slave", "Index", "Flags", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Slave;
                case 2:
                    return Index;
                case 3:
                    return Flags;
                case 4:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<I2C_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipPlaneIn_t : TraceEvent
    {
        public int LayerIndex { get { return GetInt32At(0); } }
        public DXGK_PLANE_SPECIFIC_INPUT_FLAGS Flags { get { return (DXGK_PLANE_SPECIFIC_INPUT_FLAGS)GetInt32At(4); } }
        public long PresentID { get { return GetInt64At(8); } }
        public int MaxImmFlipLine { get { return GetInt32At(16); } }
        public int PlaneAttribFlag { get { return GetInt32At(20); } }
        public int Blend { get { return GetInt32At(24); } }
        public int ClrSpace { get { return GetInt32At(28); } }
        public int Rotation { get { return GetInt32At(32); } }
        public int StretchQuality { get { return GetInt32At(36); } }
        public int SDRWhiteLevel { get { return GetInt32At(40); } }

        #region Private
        internal Mpo3FlipPlaneIn_t(Action<Mpo3FlipPlaneIn_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 44));
            Debug.Assert(!(Version > 0 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipPlaneIn_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "MaxImmFlipLine", MaxImmFlipLine);
             XmlAttrib(sb, "PlaneAttribFlag", PlaneAttribFlag);
             XmlAttrib(sb, "Blend", Blend);
             XmlAttrib(sb, "ClrSpace", ClrSpace);
             XmlAttrib(sb, "Rotation", Rotation);
             XmlAttrib(sb, "StretchQuality", StretchQuality);
             XmlAttrib(sb, "SDRWhiteLevel", SDRWhiteLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LayerIndex", "Flags", "PresentID", "MaxImmFlipLine", "PlaneAttribFlag", "Blend", "ClrSpace", "Rotation", "StretchQuality", "SDRWhiteLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LayerIndex;
                case 1:
                    return Flags;
                case 2:
                    return PresentID;
                case 3:
                    return MaxImmFlipLine;
                case 4:
                    return PlaneAttribFlag;
                case 5:
                    return Blend;
                case 6:
                    return ClrSpace;
                case 7:
                    return Rotation;
                case 8:
                    return StretchQuality;
                case 9:
                    return SDRWhiteLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipPlaneIn_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipIn_t : TraceEvent
    {
        public int SourcceID { get { return GetInt32At(0); } }
        public DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS Flags { get { return (DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS)GetInt32At(4); } }
        public int PlaneCount { get { return GetInt32At(8); } }
        public int Duration { get { return GetInt32At(12); } }

        #region Private
        internal Mpo3FlipIn_t(Action<Mpo3FlipIn_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipIn_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourcceID", SourcceID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PlaneCount", PlaneCount);
             XmlAttrib(sb, "Duration", Duration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourcceID", "Flags", "PlaneCount", "Duration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourcceID;
                case 1:
                    return Flags;
                case 2:
                    return PlaneCount;
                case 3:
                    return Duration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipIn_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipOut_t : TraceEvent
    {
        public DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS Flags { get { return (DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS)GetInt32At(0); } }

        #region Private
        internal Mpo3FlipOut_t(Action<Mpo3FlipOut_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipOut_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipOut_t> m_target;
        #endregion
    }
    public sealed class NotifyVSyncMpo2_Info_t : TraceEvent
    {
        public DD_DXGK_INTERRUPT_TYPE Type { get { return (DD_DXGK_INTERRUPT_TYPE)GetInt32At(0); } }
        public int TargetID { get { return GetInt32At(4); } }
        public DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS Flags { get { return (DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS)GetInt32At(8); } }
        public int DataCount { get { return GetInt32At(12); } }

        #region Private
        internal NotifyVSyncMpo2_Info_t(Action<NotifyVSyncMpo2_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVSyncMpo2_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "DataCount", DataCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "TargetID", "Flags", "DataCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return TargetID;
                case 2:
                    return Flags;
                case 3:
                    return DataCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVSyncMpo2_Info_t> m_target;
        #endregion
    }
    public sealed class NotifyVSyncMpo2_Layer_t : TraceEvent
    {
        public int LayerIndex { get { return GetInt32At(0); } }
        public long PresentID { get { return GetInt64At(4); } }
        public DXGKCB_NOTIFY_MPO_VSYNC_FLAGS Flags { get { return (DXGKCB_NOTIFY_MPO_VSYNC_FLAGS)GetInt32At(12); } }

        #region Private
        internal NotifyVSyncMpo2_Layer_t(Action<NotifyVSyncMpo2_Layer_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVSyncMpo2_Layer_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LayerIndex", "PresentID", "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LayerIndex;
                case 1:
                    return PresentID;
                case 2:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVSyncMpo2_Layer_t> m_target;
        #endregion
    }
    public sealed class Opregion_t : TraceEvent
    {
        public int Version { get { return GetInt32At(0); } }
        public int Size { get { return GetInt32At(4); } }
        public byte[] Data { get { return GetByteArrayAt(8, Size); } }

        #region Private
        internal Opregion_t(Action<Opregion_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Opregion_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Opregion_t> m_target;
        #endregion
    }
    public sealed class Pps_t : TraceEvent
    {
        public PPS_SIGNAL Pps_Signal { get { return (PPS_SIGNAL)GetInt32At(0); } }
        public OFF_ON Pps_State { get { return (OFF_ON)GetInt32At(4); } }

        #region Private
        internal Pps_t(Action<Pps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Pps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pps_Signal", Pps_Signal);
             XmlAttrib(sb, "Pps_State", Pps_State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pps_Signal", "Pps_State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pps_Signal;
                case 1:
                    return Pps_State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Pps_t> m_target;
        #endregion
    }
    public sealed class ProfilingData_t : TraceEvent
    {
        public int Session { get { return GetInt32At(0); } }
        public int SubState { get { return GetInt32At(4); } }
        public string Function { get { return GetUTF8StringAt(8); } }

        #region Private
        internal ProfilingData_t(Action<ProfilingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(8)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ProfilingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Session", Session);
             XmlAttrib(sb, "SubState", SubState);
             XmlAttrib(sb, "Function", Function);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Session", "SubState", "Function"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Session;
                case 1:
                    return SubState;
                case 2:
                    return Function;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ProfilingData_t> m_target;
        #endregion
    }
    public sealed class RmCaps_t : TraceEvent
    {
        public int MaxPipes { get { return GetInt32At(0); } }
        public int MaxPlanes { get { return GetInt32At(4); } }
        public int MaxDbuf { get { return GetInt32At(8); } }
        public int Latency { get { return GetInt16At(12); } }
        public int MaxLevel { get { return GetInt16At(28); } }
        public int MaxRgbPlanes { get { return GetInt32At(30); } }
        public int MaxYuvPlanes { get { return GetInt32At(34); } }
        public int NumScalars { get { return GetInt32At(38); } }
        public int PixelFormatMask { get { return GetInt32At(42); } }
        public int StretchFactor { get { return GetInt32At(46); } }
        public int ShrinkFactor { get { return GetInt32At(50); } }
        public PLANE_CAPS Caps { get { return (PLANE_CAPS)GetInt32At(54); } }

        #region Private
        internal RmCaps_t(Action<RmCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 58));
            Debug.Assert(!(Version > 0 && EventDataLength < 58));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RmCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MaxPipes", MaxPipes);
             XmlAttrib(sb, "MaxPlanes", MaxPlanes);
             XmlAttrib(sb, "MaxDbuf", MaxDbuf);
             XmlAttrib(sb, "Latency", Latency);
             XmlAttrib(sb, "MaxLevel", MaxLevel);
             XmlAttrib(sb, "MaxRgbPlanes", MaxRgbPlanes);
             XmlAttrib(sb, "MaxYuvPlanes", MaxYuvPlanes);
             XmlAttrib(sb, "NumScalars", NumScalars);
             XmlAttrib(sb, "PixelFormatMask", PixelFormatMask);
             XmlAttrib(sb, "StretchFactor", StretchFactor);
             XmlAttrib(sb, "ShrinkFactor", ShrinkFactor);
             XmlAttrib(sb, "Caps", Caps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MaxPipes", "MaxPlanes", "MaxDbuf", "Latency", "MaxLevel", "MaxRgbPlanes", "MaxYuvPlanes", "NumScalars", "PixelFormatMask", "StretchFactor", "ShrinkFactor", "Caps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MaxPipes;
                case 1:
                    return MaxPlanes;
                case 2:
                    return MaxDbuf;
                case 3:
                    return Latency;
                case 4:
                    return MaxLevel;
                case 5:
                    return MaxRgbPlanes;
                case 6:
                    return MaxYuvPlanes;
                case 7:
                    return NumScalars;
                case 8:
                    return PixelFormatMask;
                case 9:
                    return StretchFactor;
                case 10:
                    return ShrinkFactor;
                case 11:
                    return Caps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RmCaps_t> m_target;
        #endregion
    }
    public sealed class SetTimingData_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(4); } }
        public int SinkIndex { get { return GetByteAt(8); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(9); } }
        public bool Enable { get { return GetInt32At(13) != 0; } }
        public int SrcX { get { return GetInt32At(17); } }
        public int ScrY { get { return GetInt32At(21); } }
        public PIXEL_FMT PixelFmt { get { return (PIXEL_FMT)GetInt32At(25); } }
        public int HActive { get { return GetInt32At(29); } }
        public int VActive { get { return GetInt32At(33); } }
        public int HTotal { get { return GetInt32At(37); } }
        public int VTotal { get { return GetInt32At(41); } }
        public int RR { get { return GetInt32At(45); } }
        public int DotClock { get { return GetInt32At(49); } }
        public DD_SCALING Scaling { get { return (DD_SCALING)GetInt32At(53); } }
        public bool FMS { get { return GetInt32At(57) != 0; } }

        #region Private
        internal SetTimingData_t(Action<SetTimingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 61));
            Debug.Assert(!(Version > 0 && EventDataLength < 61));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SetTimingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "SrcX", SrcX);
             XmlAttrib(sb, "ScrY", ScrY);
             XmlAttrib(sb, "PixelFmt", PixelFmt);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "Scaling", Scaling);
             XmlAttrib(sb, "FMS", FMS);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "SinkIndex", "VOT", "Enable", "SrcX", "ScrY", "PixelFmt", "HActive", "VActive", "HTotal", "VTotal", "RR", "DotClock", "Scaling", "FMS"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return SinkIndex;
                case 3:
                    return VOT;
                case 4:
                    return Enable;
                case 5:
                    return SrcX;
                case 6:
                    return ScrY;
                case 7:
                    return PixelFmt;
                case 8:
                    return HActive;
                case 9:
                    return VActive;
                case 10:
                    return HTotal;
                case 11:
                    return VTotal;
                case 12:
                    return RR;
                case 13:
                    return DotClock;
                case 14:
                    return Scaling;
                case 15:
                    return FMS;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SetTimingData_t> m_target;
        #endregion
    }
    public sealed class ColorPixelDesc_t : TraceEvent
    {
        public int Model { get { return GetInt32At(0); } }
        public int RangeType { get { return GetInt32At(4); } }
        public int Encoding { get { return GetInt32At(8); } }
        public int Gamut { get { return GetInt32At(12); } }
        public int OpticalDesc { get { return GetInt32At(16); } }
        public int BPC { get { return GetByteAt(20); } }
        public int YCBCR_Subsampling { get { return GetInt32At(21); } }
        public int Chromaticity { get { return GetInt32At(25); } }

        #region Private
        internal ColorPixelDesc_t(Action<ColorPixelDesc_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 29));
            Debug.Assert(!(Version > 0 && EventDataLength < 29));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ColorPixelDesc_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Model", Model);
             XmlAttrib(sb, "RangeType", RangeType);
             XmlAttrib(sb, "Encoding", Encoding);
             XmlAttrib(sb, "Gamut", Gamut);
             XmlAttrib(sb, "OpticalDesc", OpticalDesc);
             XmlAttrib(sb, "BPC", BPC);
             XmlAttrib(sb, "YCBCR_Subsampling", YCBCR_Subsampling);
             XmlAttrib(sb, "Chromaticity", Chromaticity);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Model", "RangeType", "Encoding", "Gamut", "OpticalDesc", "BPC", "YCBCR_Subsampling", "Chromaticity"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Model;
                case 1:
                    return RangeType;
                case 2:
                    return Encoding;
                case 3:
                    return Gamut;
                case 4:
                    return OpticalDesc;
                case 5:
                    return BPC;
                case 6:
                    return YCBCR_Subsampling;
                case 7:
                    return Chromaticity;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ColorPixelDesc_t> m_target;
        #endregion
    }
    public sealed class StructureDump_t : TraceEvent
    {
        public string StructureName { get { return GetUTF8StringAt(0); } }
        public int Size { get { return GetInt32At(SkipUTF8String(0)); } }
        public byte[] Data { get { return GetByteArrayAt(SkipUTF8String(0)+4, Size); } }
        public string Message { get { return GetUTF8StringAt(SkipUTF8String(0)+4); } }
        public string Function { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0)+4)); } }
        public int Line { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+4))); } }

        #region Private
        internal StructureDump_t(Action<StructureDump_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+4))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<StructureDump_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "StructureName", StructureName);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Line", Line);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "StructureName", "Size", "Data", "Message", "Function", "Line"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return StructureName;
                case 1:
                    return Size;
                case 2:
                    return Message;
                case 3:
                    return Function;
                case 4:
                    return Line;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<StructureDump_t> m_target;
        #endregion
    }
    public sealed class SystemInfo_t : TraceEvent
    {
        public DD_PRODUCT_FAMILY ProductFamily { get { return (DD_PRODUCT_FAMILY)GetInt32At(0); } }
        public DD_PLATFORM_TYPE PlatformType { get { return (DD_PLATFORM_TYPE)GetInt32At(4); } }
        public DD_CPUTYPE CpuType { get { return (DD_CPUTYPE)GetInt32At(8); } }
        public int DiD { get { return GetInt32At(12); } }
        public int RevID { get { return GetInt32At(16); } }
        public int PCHDiD { get { return GetInt32At(20); } }
        public int PchRevID { get { return GetInt32At(24); } }
        public int GtType { get { return GetInt32At(28); } }
        public int HyperVisorType { get { return GetInt32At(32); } }
        public int VirtualEnvType { get { return GetInt32At(36); } }
        public int OsVerion { get { return GetInt32At(40); } }
        public int WddmVer { get { return GetInt32At(44); } }
        public BUILD_TYPE BuildType { get { return (BUILD_TYPE)GetInt32At(48); } }
        public string BuildDate { get { return GetUTF8StringAt(52); } }
        public string BuildTime { get { return GetUTF8StringAt(SkipUTF8String(52)); } }
        public string AdapterString { get { return GetUnicodeStringAt(SkipUTF8String(SkipUTF8String(52))); } }
        public string ChipTypeString { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52)))); } }

        #region Private
        internal SystemInfo_t(Action<SystemInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SystemInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProductFamily", ProductFamily);
             XmlAttrib(sb, "PlatformType", PlatformType);
             XmlAttrib(sb, "CpuType", CpuType);
             XmlAttrib(sb, "DiD", DiD);
             XmlAttrib(sb, "RevID", RevID);
             XmlAttrib(sb, "PCHDiD", PCHDiD);
             XmlAttrib(sb, "PchRevID", PchRevID);
             XmlAttrib(sb, "GtType", GtType);
             XmlAttrib(sb, "HyperVisorType", HyperVisorType);
             XmlAttrib(sb, "VirtualEnvType", VirtualEnvType);
             XmlAttrib(sb, "OsVerion", OsVerion);
             XmlAttrib(sb, "WddmVer", WddmVer);
             XmlAttrib(sb, "BuildType", BuildType);
             XmlAttrib(sb, "BuildDate", BuildDate);
             XmlAttrib(sb, "BuildTime", BuildTime);
             XmlAttrib(sb, "AdapterString", AdapterString);
             XmlAttrib(sb, "ChipTypeString", ChipTypeString);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProductFamily", "PlatformType", "CpuType", "DiD", "RevID", "PCHDiD", "PchRevID", "GtType", "HyperVisorType", "VirtualEnvType", "OsVerion", "WddmVer", "BuildType", "BuildDate", "BuildTime", "AdapterString", "ChipTypeString"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProductFamily;
                case 1:
                    return PlatformType;
                case 2:
                    return CpuType;
                case 3:
                    return DiD;
                case 4:
                    return RevID;
                case 5:
                    return PCHDiD;
                case 6:
                    return PchRevID;
                case 7:
                    return GtType;
                case 8:
                    return HyperVisorType;
                case 9:
                    return VirtualEnvType;
                case 10:
                    return OsVerion;
                case 11:
                    return WddmVer;
                case 12:
                    return BuildType;
                case 13:
                    return BuildDate;
                case 14:
                    return BuildTime;
                case 15:
                    return AdapterString;
                case 16:
                    return ChipTypeString;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SystemInfo_t> m_target;
        #endregion
    }
    public sealed class Target_Mode_t : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int H_Active { get { return GetInt32At(4); } }
        public int V_Active { get { return GetInt32At(8); } }
        public int H_Total { get { return GetInt32At(12); } }
        public int V_Total { get { return GetInt32At(16); } }
        public int RR { get { return GetInt32At(20); } }
        public int DotClock { get { return GetInt32At(24); } }
        public bool IsInterlaced { get { return GetInt32At(28) != 0; } }
        public bool IsPreferred { get { return GetInt32At(32) != 0; } }
        public MODE_TYPE Origin { get { return (MODE_TYPE)GetInt32At(36); } }

        #region Private
        internal Target_Mode_t(Action<Target_Mode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Mode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "H_Active", H_Active);
             XmlAttrib(sb, "V_Active", V_Active);
             XmlAttrib(sb, "H_Total", H_Total);
             XmlAttrib(sb, "V_Total", V_Total);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsPreferred", IsPreferred);
             XmlAttrib(sb, "Origin", Origin);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "H_Active", "V_Active", "H_Total", "V_Total", "RR", "DotClock", "IsInterlaced", "IsPreferred", "Origin"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return H_Active;
                case 2:
                    return V_Active;
                case 3:
                    return H_Total;
                case 4:
                    return V_Total;
                case 5:
                    return RR;
                case 6:
                    return DotClock;
                case 7:
                    return IsInterlaced;
                case 8:
                    return IsPreferred;
                case 9:
                    return Origin;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Mode_t> m_target;
        #endregion
    }
    public sealed class Target_Info_t : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int TargetID { get { return GetInt32At(4); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(8); } }
        public CON_STATE ConnectionState { get { return (CON_STATE)GetInt32At(12); } }
        public bool IsTiled { get { return GetInt32At(16) != 0; } }
        public int NumSrcModes { get { return GetInt32At(20); } }
        public int NumTgtModes { get { return GetInt32At(24); } }
        public int Rsvd1 { get { return GetInt32At(28); } }
        public int Rsvd2 { get { return GetInt32At(32); } }
        public int Rsvd3 { get { return GetInt32At(36); } }
        public int Rsvd4 { get { return GetInt32At(40); } }

        #region Private
        internal Target_Info_t(Action<Target_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 44));
            Debug.Assert(!(Version > 0 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "ConnectionState", ConnectionState);
             XmlAttrib(sb, "IsTiled", IsTiled);
             XmlAttrib(sb, "NumSrcModes", NumSrcModes);
             XmlAttrib(sb, "NumTgtModes", NumTgtModes);
             XmlAttrib(sb, "Rsvd1", Rsvd1);
             XmlAttrib(sb, "Rsvd2", Rsvd2);
             XmlAttrib(sb, "Rsvd3", Rsvd3);
             XmlAttrib(sb, "Rsvd4", Rsvd4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "TargetID", "VOT", "ConnectionState", "IsTiled", "NumSrcModes", "NumTgtModes", "Rsvd1", "Rsvd2", "Rsvd3", "Rsvd4"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return TargetID;
                case 2:
                    return VOT;
                case 3:
                    return ConnectionState;
                case 4:
                    return IsTiled;
                case 5:
                    return NumSrcModes;
                case 6:
                    return NumTgtModes;
                case 7:
                    return Rsvd1;
                case 8:
                    return Rsvd2;
                case 9:
                    return Rsvd3;
                case 10:
                    return Rsvd4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Info_t> m_target;
        #endregion
    }
    public sealed class Target_Edid : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Block { get { return GetByteAt(4); } }
        public int Size { get { return GetInt16At(5); } }
        public byte[] Edid { get { return GetByteArrayAt(7, Size); } }

        #region Private
        internal Target_Edid(Action<Target_Edid> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+7));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+7));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Edid>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Block", Block);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Block", "Size", "Edid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Block;
                case 2:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Edid> m_target;
        #endregion
    }
    public sealed class PipeVBI_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int CRC_CTL { get { return GetInt32At(4); } }
        public int CRC_Result { get { return GetInt32At(8); } }

        #region Private
        internal PipeVBI_t(Action<PipeVBI_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PipeVBI_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "CRC_CTL", CRC_CTL);
             XmlAttrib(sb, "CRC_Result", CRC_Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "CRC_CTL", "CRC_Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return CRC_CTL;
                case 2:
                    return CRC_Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PipeVBI_t> m_target;
        #endregion
    }
    public sealed class WaterMarkData_t : TraceEvent
    {
        public int Level { get { return GetByteAt(0); } }
        public int Enable { get { return GetByteAt(1); } }
        public int IgnoreLines { get { return GetByteAt(2); } }
        public int Lines { get { return GetInt16At(3); } }
        public int Blocks { get { return GetInt16At(5); } }

        #region Private
        internal WaterMarkData_t(Action<WaterMarkData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 7));
            Debug.Assert(!(Version > 0 && EventDataLength < 7));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WaterMarkData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "IgnoreLines", IgnoreLines);
             XmlAttrib(sb, "Lines", Lines);
             XmlAttrib(sb, "Blocks", Blocks);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Level", "Enable", "IgnoreLines", "Lines", "Blocks"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Level;
                case 1:
                    return Enable;
                case 2:
                    return IgnoreLines;
                case 3:
                    return Lines;
                case 4:
                    return Blocks;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WaterMarkData_t> m_target;
        #endregion
    }
    public sealed class WaterMarkInfo_t : TraceEvent
    {
        public DD_PIPE_ID Pipe { get { return (DD_PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int EnabledWms { get { return GetByteAt(5); } }

        #region Private
        internal WaterMarkInfo_t(Action<WaterMarkInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WaterMarkInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "EnabledWms", EnabledWms);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "EnabledWms"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return EnabledWms;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WaterMarkInfo_t> m_target;
        #endregion
    }
    public enum AUX_CHANNEL_TYPE
    {
        AUX_A = 0x0,
        AUX_B = 0x1,
        AUX_C = 0x2,
        AUX_D = 0x3,
    }
    public enum BUILD_TYPE
    {
        Release = 0x1,
        ReleaseInternal = 0x2,
        Debug = 0x3,
    }
    public enum CON_STATE
    {
        UNKNOWN = 0x0,
        PLUG = 0x1,
        UNPLUG = 0x2,
        REPLUG = 0x3,
    }
    public enum DD_CPUTYPE
    {
        CORE_i3 = 0x1,
        CORE_i5 = 0x2,
        CORE_i7 = 0x3,
        PENTIUM = 0x4,
        CELERON = 0x5,
        CORE = 0x6,
        VPRO = 0x7,
        SUPER_SKU = 0x8,
        ATOM = 0x9,
    }
    public enum DD_DXGK_INTERRUPT_TYPE
    {
        DMA_COMPLETE = 0x1,
        DMA_PREEMPTED = 0x2,
        CRTC_VSYNC = 0x3,
        DISPLAYONLY_VSYNC = 0x5,
        CRTC_VSYNC_WITH_MPO = 0x7,
        CRTC_VSYNC_WITH_MPO_2 = 0xa,
    }
    public enum DD_HDCP_PORT_ACCESS
    {
        UNKNOWN = 0x0,
        GET_VERSION = 0x1,
        GET_RX_STATUS = 0x2,
        SEND_HDCP2_MSG = 0x3,
        RECEIVE_HDCP2_MSG = 0x4,
        READ_BKSV = 0x5,
        READ_BCAPS = 0x6,
        READ_BSTATUS = 0x7,
        READ_KSVLIST = 0x8,
        READ_PRIMEV = 0x9,
        READ_RI = 0xa,
        READ_BINFO = 0xb,
        SEND_AN = 0xc,
        SEND_AKSV = 0xd,
    }
    public enum DD_PIPE_ID
    {
        PIPE_A = 0x0,
        PIPE_B = 0x1,
        PIPE_C = 0x2,
        PIPE_D = 0x3,
    }
    public enum DD_PLATFORM_TYPE
    {
        DESKTOP = 0x1,
        MOBILE = 0x2,
        TABLET = 0x3,
    }
    public enum DD_PRODUCT_FAMILY
    {
        GEMINILAKE = 0x17,
        GLENVIEW = 0x18,
        GOLDWATERLAKE = 0x19,
        CANNONLAKE = 0x1a,
        CNX_G = 0x1b,
        ICELAKE = 0x1c,
        ICELAKE_LP = 0x1d,
        LAKEFIELD = 0x1e,
        TIGERLAKE_LP = 0x1f,
        TIGERLAKE_HP = 0x20,
    }
    public enum DD_SCALING
    {
        SCALING_UNINITIALIZED = 0x0,
        SCALING_IDENTITY = 0x1,
        SCALING_CENTERED = 0x2,
        SCALING_STRETCHED = 0x4,
        SCALING_ASPECTRATIOCENTEREDMAX = 0x8,
        SCALING_CUSTOM = 0x10,
    }
    public enum DD_VOT
    {
        VGA = 0x1,
        DVI = 0x2,
        HDMI = 0x3,
        DP = 0x4,
        eDP = 0x5,
        MIPI = 0x6,
        Virtual = 0x7,
        WDE = 0x8,
    }
    public enum DDSTATUS
    {
        SUCCESS = 0x0,
    }
    public enum DIAGNOSTIC_SOURCE
    {
        PIPE_UNDER_RUN = 0x1,
        MODESET_FAILED = 0x2,
    }
    [Flags]
    public enum DP_SPI_REASON
    {
        NONE = 0x0,
        ATR = 0x1,
        HDCP = 0x2,
        DWN_REPLY = 0x4,
        UP_REQ = 0x8,
        LINK_LOSS = 0x10,
        DETECT = 0x20,
        MCCS = 0x40,
    }
    public enum DPCD_ADD
    {
        RX_REV = 0x0,
        EDP_CONFIGURATION_CAP = 0xe,
        RX_TRAINING_AUX_RD_INTERVAL = 0xf,
        RX_MSTM_CAP = 0x21,
        RX_MST_NUM_AUD_ENDPOINTS = 0x22,
        SINK_DSC_COLOR_FORMAT_CAPS = 0x69,
        SINK_DSC_COLOR_DEPTH_CAPS = 0x6a,
        SINK_PSR_VERSION = 0x70,
        SINK_PSR_CAPS = 0x71,
        LINK_BW_SET = 0x100,
        LANE_COUNT_SET = 0x101,
        TRAINING_PATTERN_SET = 0x102,
        TRAINING_LANE0_SET = 0x103,
        LINK_RATE = 0x115,
        SINK_COUNT = 0x200,
        SINK_STATUS = 0x205,
        ADJUST_D_STATE = 0x600,
        EDP_GENERAL_CAPS_1 = 0x700,
        BKSV = 0x68000,
        RI = 0x68005,
        AKSV = 0x68007,
        AN = 0x6800c,
        VPRIME_H0 = 0x68014,
        BCAPS = 0x68028,
        BSTATUS = 0x68029,
        BINFO = 0x6802a,
        KSV_FIFO = 0x6802c,
        HDCP2_RTX = 0x69000,
        HDCP2_CERT_RX = 0x6900b,
        HDCP2_RXCAPS = 0x6921d,
        HDCP2_EKPUB_KM = 0x69220,
        HDCP2_EKH_KM_TX = 0x692a0,
        HDCP2_HPRIME = 0x692c0,
    }
    [Flags]
    public enum DXGK_PLANE_SPECIFIC_INPUT_FLAGS
    {
        Enabled = 0x1,
        FlipImmediate = 0x2,
        FlipOnNextVSync = 0x4,
        SharedPrimaryTransition = 0x8,
        IndependentFlipExclusive = 0x10,
    }
    [Flags]
    public enum DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS
    {
        FlipStereo = 0x1,
        FlipStereoTemporaryMono = 0x2,
        FlipStereoPreferRight = 0x4,
        RetryAtLowerIrql = 0x8,
    }
    [Flags]
    public enum DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS
    {
        PrePresentNeeded = 0x1,
    }
    [Flags]
    public enum DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS
    {
        ValidPhysicalAdapterMask = 0x1,
        HsyncFlipCompletion = 0x2,
    }
    [Flags]
    public enum DXGKCB_NOTIFY_MPO_VSYNC_FLAGS
    {
        NEED_POST_PRESENT = 0x1,
    }
    public enum EDID_TYPE
    {
        DEFAULT = 0x0,
    }
    public enum HDCP_TYPE
    {
        HDCP_OFF = 0x0,
        HDCP_ON_TYPE0 = 0x1,
        HDCP_ON_TYPE1 = 0x2,
    }
    public enum HDCP_VERSION
    {
        UNSUPPORTED = 0x0,
        HDCP_1_x = 0x1,
        HDCP_2_2 = 0x2,
    }
    [Flags]
    public enum HPD_EVENT
    {
        NONE = 0x0,
        SHORT_PULSE = 0x1,
        LONG_PULSE = 0x2,
    }
    public enum MODE_TYPE
    {
        UNKNOWN = 0x0,
        EDID_MODE = 0x1,
        NO_EDID_DEFAULT_MODE = 0x2,
        MEDIA_RR_MODE = 0x3,
        OS_ADDL_MODE = 0x4,
    }
    public enum OFF_ON
    {
        OFF = 0x0,
        ON = 0x1,
    }
    public enum PIXEL_FMT
    {
        INDEXED_8BPP = 0x0,
        B5G6R5X0 = 0x1,
        B8G8R8X8 = 0x2,
        R8G8B8X8 = 0x3,
        B10G10R10X2 = 0x4,
        R10G10B10X2 = 0x5,
        R10G10B10X2_XR_BIAS = 0x6,
        R16G16B16X16F = 0x7,
        YUV422 = 0x8,
        YUV444_8 = 0x9,
        YUV444_10 = 0xa,
        NV12YUV420 = 0xb,
        P010YUV420 = 0xc,
        P012YUV420 = 0xd,
        P016YUV420 = 0xe,
    }
    [Flags]
    public enum PLANE_CAPS
    {
        Rotation = 0x1,
        VerticalFlip = 0x2,
        HorizontalFlip = 0x4,
        StretchRGB = 0x8,
        StretchYUV = 0x10,
        BilinearFilter = 0x20,
        HighFilter = 0x40,
        Shared = 0x80,
        Immediate = 0x100,
    }
    public enum PORT_TYPES
    {
        PORT_A = 0x0,
        PORT_B = 0x1,
        PORT_C = 0x2,
        PORT_D = 0x3,
        PORT_E = 0x4,
        PORT_F = 0x5,
        MIPI_A = 0x6,
        MIPI_C = 0x7,
        WG = 0x8,
        VIRTUAL = 0x9,
    }
    public enum PPS_SIGNAL
    {
        VDD = 0x0,
        DATA = 0x1,
        PWM = 0x2,
        BKLT = 0x3,
    }
    [Flags]
    public enum PSR_SUPPORT
    {
        NA = 0x0,
        PSR = 0x1,
        SU = 0x2,
        SFU = 0x4,
    }
    public enum SIDEBAND_MSG_ID
    {
        MSG_VERSION = 0x0,
        LINK_ADDRESS = 0x1,
        CONN_STATUS_NOTIFY = 0x2,
        ENUM_PATH_RES = 0x10,
        ALLOCATE_PAYLOAD = 0x11,
        QUERY_PAYLOAD = 0x12,
        RES_STATUS_NOTIFY = 0x13,
        CLEAR_PAYLOAD_ID_TABLE = 0x14,
        REMOTE_DPCD_READ = 0x20,
        REMOTE_DPCD_WRITE = 0x21,
        REMOTE_I2C_READ = 0x22,
        REMOTE_I2C_WRITE = 0x23,
        POWER_UP_PHY = 0x24,
        POWER_DOWN_PHY = 0x25,
    }
    public enum SIDEBAND_MSG_TYPE
    {
        UP_REQ = 0x0,
        UP_REPLY = 0x1,
        DOWN_REQ = 0x2,
        DOWN_REPLY = 0x3,
    }
}
