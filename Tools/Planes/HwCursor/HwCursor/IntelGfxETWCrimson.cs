using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriver;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IntelGfxDriverTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Intel-Gfx-Driver";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x6381f857), unchecked((short) 0x7661), unchecked((short) 0x4b04), 0x95, 0x21, 0x28, 0x83, 0x19, 0xe7, 0x5f, 0x12);
        public enum Keywords : long
        {
            Dxgkddi = 0x1,
            Kmdr = 0x2,
            Gmm = 0x4,
            PowerConservation = 0x8,
            CpAndHdcp = 0x10,
            DisplayMiniport = 0x20,
            Softbios = 0x40,
            Cui = 0x80,
            Audio = 0x100,
            Modeset = 0x200,
            Modeenumeration = 0x400,
            Interrupt = 0x800,
            Flip = 0x1000,
            WigigFeature = 0x2000,
            Rtd3Events = 0x4000,
            GraphicsClientSubmissionViaIdart = 0x8000,
            Encoder = 0x10000,
            Hdmi = 0x20000,
            Dp = 0x40000,
            Pagefault = 0x80000,
        };

        public IntelGfxDriverTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<t_AlsOpRegHandlerData> AlsOpRegHandler
        {
            add
            {
                source.RegisterEventTemplate(AlsOpRegHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 724, ProviderGuid);
            }
        }
        public event Action<t_AudioProtocol_SetAudioData> AudioProtocol_SetAudioData
        {
            add
            {
                source.RegisterEventTemplate(AudioProtocol_SetAudioDataTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 656, ProviderGuid);
            }
        }
        public event Action<t_WriteAudioEELDData> AudioProtocol_SetAudioDataEELDData
        {
            add
            {
                source.RegisterEventTemplate(AudioProtocol_SetAudioDataEELDDataTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 657, ProviderGuid);
            }
        }
        public event Action<t_AUXTransaction> AUXTransaction
        {
            add
            {
                source.RegisterEventTemplate(AUXTransactionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 680, ProviderGuid);
            }
        }
        public event Action<t_BackLightControl> BackLightControlBacklight
        {
            add
            {
                source.RegisterEventTemplate(BackLightControlBacklightTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 705, ProviderGuid);
            }
        }
        public event Action<t_BackLightControl> BackLightControlPanelPower
        {
            add
            {
                source.RegisterEventTemplate(BackLightControlPanelPowerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 677, ProviderGuid);
            }
        }
        public event Action<t_BackLightControl> BackLightControlPWM
        {
            add
            {
                source.RegisterEventTemplate(BackLightControlPWMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 676, ProviderGuid);
            }
        }
        public event Action<t_BackLightControl> BackLightControlVDD
        {
            add
            {
                source.RegisterEventTemplate(BackLightControlVDDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 706, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry> BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStart
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 291, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit> BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStop
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 292, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> BASEDISPLAY_GetMonitorNameStart
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_GetMonitorNameStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 289, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_GetMonitorName_Exit> BASEDISPLAY_GetMonitorNameStop
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_GetMonitorNameStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 290, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_IsPreferredTiming_Entry> BASEDISPLAY_IsPreferredTimingStart
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_IsPreferredTimingStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 285, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_IsPreferredTiming_Exit> BASEDISPLAY_IsPreferredTimingStop
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_IsPreferredTimingStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 286, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_RetrieveEDIDBlock_Entry> BASEDISPLAY_RetrieveEDIDBlockStart
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_RetrieveEDIDBlockStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 283, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_RetrieveEDIDBlock_Exit> BASEDISPLAY_RetrieveEDIDBlockStop
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_RetrieveEDIDBlockStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 284, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_UpdateEDID_Entry> BASEDISPLAY_UpdateEDIDStart
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_UpdateEDIDStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 287, ProviderGuid);
            }
        }
        public event Action<t_BASEDISPLAY_UpdateEDID_Exit> BASEDISPLAY_UpdateEDIDStop
        {
            add
            {
                source.RegisterEventTemplate(BASEDISPLAY_UpdateEDIDStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 288, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_GetDisplayIDs_Entry> BASEENCODER_GetDisplayIDsStart
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_GetDisplayIDsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 273, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_GetDisplayIDs_Exit> BASEENCODER_GetDisplayIDsStop
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_GetDisplayIDsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 274, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_GetDisplayInfo_Entry> BASEENCODER_GetDisplayInfoStart
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_GetDisplayInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 275, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> BASEENCODER_GetDisplayInfoStop
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_GetDisplayInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 276, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry> BASEENCODER_IsActiveDetectionRequiredWithDelayStart
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_IsActiveDetectionRequiredWithDelayStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 279, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit> BASEENCODER_IsActiveDetectionRequiredWithDelayStop
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_IsActiveDetectionRequiredWithDelayStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 280, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_IsDisplayInFutureConfig_Entry> BASEENCODER_IsDisplayInFutureConfigStart
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_IsDisplayInFutureConfigStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 281, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_IsDisplayInFutureConfig_Exit> BASEENCODER_IsDisplayInFutureConfigStop
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_IsDisplayInFutureConfigStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 282, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_WGGetSetCSC_Entry> BASEENCODER_WGGetSetCSCStart
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_WGGetSetCSCStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 277, ProviderGuid);
            }
        }
        public event Action<t_BASEENCODER_WGGetSetCSC_Exit> BASEENCODER_WGGetSetCSCStop
        {
            add
            {
                source.RegisterEventTemplate(BASEENCODER_WGGetSetCSCStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 278, ProviderGuid);
            }
        }
        public event Action<t_BlcClientEventHandlerData> BlcClientEventHandler
        {
            add
            {
                source.RegisterEventTemplate(BlcClientEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 728, ProviderGuid);
            }
        }
        public event Action<t_BlcComputeNewPercentageData> BlcComputeNewPercentage
        {
            add
            {
                source.RegisterEventTemplate(BlcComputeNewPercentageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 727, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> BlcInitHardwareStart
        {
            add
            {
                source.RegisterEventTemplate(BlcInitHardwareStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 804, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> BlcInitHardwareStop
        {
            add
            {
                source.RegisterEventTemplate(BlcInitHardwareStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 805, ProviderGuid);
            }
        }
        public event Action<t_BlcInitialize> BlcInitialize
        {
            add
            {
                source.RegisterEventTemplate(BlcInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 801, ProviderGuid);
            }
        }
        public event Action<t_BlcMapUserSettingData> BlcMapUserSetting
        {
            add
            {
                source.RegisterEventTemplate(BlcMapUserSettingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 806, ProviderGuid);
            }
        }
        public event Action<t_BlcOpRegHandlerData> BlcOpRegHandler
        {
            add
            {
                source.RegisterEventTemplate(BlcOpRegHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 725, ProviderGuid);
            }
        }
        public event Action<t_BlcPwmActivate_GEN7_5_Data> BlcPwmActivate_GEN7_5
        {
            add
            {
                source.RegisterEventTemplate(BlcPwmActivate_GEN7_5Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 734, ProviderGuid);
            }
        }
        public event Action<t_BlcPwmActivate_Gen9lp_Data> BlcPwmActivate_Gen9lp
        {
            add
            {
                source.RegisterEventTemplate(BlcPwmActivate_Gen9lpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 735, ProviderGuid);
            }
        }
        public event Action<t_BlcPwmApply_GEN7_5_Data> BlcPwmApply_GEN7_5
        {
            add
            {
                source.RegisterEventTemplate(BlcPwmApply_GEN7_5Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 736, ProviderGuid);
            }
        }
        public event Action<t_BlcPwmApply_Gen9lp_Data> BlcPwmApply_Gen9lp
        {
            add
            {
                source.RegisterEventTemplate(BlcPwmApply_Gen9lpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 737, ProviderGuid);
            }
        }
        public event Action<t_BlcReferenceClockUpdateData> BlcReferenceClockUpdate
        {
            add
            {
                source.RegisterEventTemplate(BlcReferenceClockUpdateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 729, ProviderGuid);
            }
        }
        public event Action<t_BlcSetAdtAmbientLightLevelData> BlcSetAdtAmbientLightLevel
        {
            add
            {
                source.RegisterEventTemplate(BlcSetAdtAmbientLightLevelTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 731, ProviderGuid);
            }
        }
        public event Action<t_BlcSetAdtBrightnessLevelData> BlcSetAdtBrightnessLevel
        {
            add
            {
                source.RegisterEventTemplate(BlcSetAdtBrightnessLevelTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 732, ProviderGuid);
            }
        }
        public event Action<t_BlcSetAdtStateData> BlcSetAdtState
        {
            add
            {
                source.RegisterEventTemplate(BlcSetAdtStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 730, ProviderGuid);
            }
        }
        public event Action<t_BlcSetDisplayBrightness_Cabc_Data> BlcSetDisplayBrightness_Cabc
        {
            add
            {
                source.RegisterEventTemplate(BlcSetDisplayBrightness_CabcTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 738, ProviderGuid);
            }
        }
        public event Action<t_BlcSetPWMGranularityMode_GEN9_Data> BlcSetPWMGranularityMode_GEN9
        {
            add
            {
                source.RegisterEventTemplate(BlcSetPWMGranularityMode_GEN9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 733, ProviderGuid);
            }
        }
        public event Action<t_CalculateWaterMark> CalculateWaterMarkGen9
        {
            add
            {
                source.RegisterEventTemplate(CalculateWaterMarkGen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 683, ProviderGuid);
            }
        }
        public event Action<t_CommitInfo> Commit_Task
        {
            add
            {
                source.RegisterEventTemplate(Commit_TaskTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> Commit_TaskFailed
        {
            add
            {
                source.RegisterEventTemplate(Commit_TaskFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, ProviderGuid);
            }
        }
        public event Action<t_CommitEntry> Commit_TaskStart
        {
            add
            {
                source.RegisterEventTemplate(Commit_TaskStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> Commit_TaskStop
        {
            add
            {
                source.RegisterEventTemplate(Commit_TaskStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<t_ConfigurePowerWell> ConfigurePowerWell
        {
            add
            {
                source.RegisterEventTemplate(ConfigurePowerWellTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 687, ProviderGuid);
            }
        }
        public event Action<t_CriticalFailLog> CriticalFailureFailed
        {
            add
            {
                source.RegisterEventTemplate(CriticalFailureFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_AddCustomMode_Entry> CSLBASE_AddCustomModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AddCustomModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 451, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_AddCustomModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AddCustomModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 452, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_AtomicI2CAccess_Entry> CSLBASE_AtomicI2CAccessStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AtomicI2CAccessStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 373, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_AtomicI2CAccess_Exit> CSLBASE_AtomicI2CAccessStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AtomicI2CAccessStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 374, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_AuxAccess_Entry> CSLBASE_AuxAccessStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AuxAccessStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 375, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_AuxAccess_Exit> CSLBASE_AuxAccessStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_AuxAccessStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 376, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_BIOSBrightnessNotification_Entry> CSLBASE_BIOSBrightnessNotificationStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_BIOSBrightnessNotificationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 561, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_BIOSBrightnessNotification_Exit> CSLBASE_BIOSBrightnessNotificationStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_BIOSBrightnessNotificationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 562, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_BlankVideo_Entry> CSLBASE_BlankVideoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_BlankVideoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 347, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_BlankVideo_Exit> CSLBASE_BlankVideoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_BlankVideoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 348, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_CalculateWaterMarkStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CalculateWaterMarkStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 441, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CalculateWaterMark_Exit> CSLBASE_CalculateWaterMarkStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CalculateWaterMarkStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 442, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ChangeCDClock_Entry> CSLBASE_ChangeCDClockStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ChangeCDClockStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 595, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ChangeCDClock_Exit> CSLBASE_ChangeCDClockStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ChangeCDClockStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 596, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CheckCRCInterruptCount_Entry> CSLBASE_CheckCRCInterruptCountStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CheckCRCInterruptCountStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 485, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_CheckCRCInterruptCountStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CheckCRCInterruptCountStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 486, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CheckMPOSupport_Entry> CSLBASE_CheckMPOSupportStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CheckMPOSupportStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 229, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CheckMPOSupportExit> CSLBASE_CheckMPOSupportStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CheckMPOSupportStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 230, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ComplianceAuxWA_Entry> CSLBASE_ComplianceAuxWAStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ComplianceAuxWAStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 489, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ComplianceAuxWA_Exit> CSLBASE_ComplianceAuxWAStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ComplianceAuxWAStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 490, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CursorService_Entry> CSLBASE_CursorServiceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CursorServiceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 415, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_CursorService_Exit> CSLBASE_CursorServiceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_CursorServiceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 416, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_DestroyStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_DestroyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 325, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_DestroyStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_DestroyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 326, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_DeviceConfigValid_Entry> CSLBASE_DeviceConfigValidStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_DeviceConfigValidStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 607, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_DeviceConfigValidStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_DeviceConfigValidStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 608, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_EnableBacklightWorkItemStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableBacklightWorkItemStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 597, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EnableBacklightWorkItem_Exit> CSLBASE_EnableBacklightWorkItemStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableBacklightWorkItemStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 598, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EnableDisableAudioDevice_Entry> CSLBASE_EnableDisableAudioDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableDisableAudioDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 547, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EnableDisableAudioDevice_Exit> CSLBASE_EnableDisableAudioDeviceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableDisableAudioDeviceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 548, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EnableScaler_Entry> CSLBASE_EnableScalerStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableScalerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 533, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EnableScaler_Exit> CSLBASE_EnableScalerStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EnableScalerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 534, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_NotifyEventEntry> CSLBASE_Event_Notification
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_Event_NotificationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 234, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_EventNotificationEntry> CSLBASE_EventNotification
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_EventNotificationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 231, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GammaHandler_Entry> CSLBASE_GammaHandlerStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GammaHandlerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 419, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GammaHandler_Exit> CSLBASE_GammaHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GammaHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 420, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GenerateTimings_Entry> CSLBASE_GenerateTimingsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GenerateTimingsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 509, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GenerateTimings_Exit> CSLBASE_GenerateTimingsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GenerateTimingsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 510, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetActiveDisplayInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetActiveDisplayInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 503, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetActiveDisplayInfo_Entry> CSLBASE_GetActiveDisplayInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetActiveDisplayInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 504, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetAudioData_Entry> CSLBASE_GetAudioDataStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetAudioDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 541, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetAudioData_Exit> CSLBASE_GetAudioDataStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetAudioDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 542, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetAudioProtocolType_Entry> CSLBASE_GetAudioProtocolTypeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetAudioProtocolTypeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 535, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetAudioProtocolTypeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetAudioProtocolTypeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 536, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCompensation_Entry> CSLBASE_GetCompensationStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCompensationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 339, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCompensation_Exit> CSLBASE_GetCompensationStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCompensationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 340, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetCompleteDP12TopologyStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCompleteDP12TopologyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 523, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCompleteDP12Topology_Exit> CSLBASE_GetCompleteDP12TopologyStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCompleteDP12TopologyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 524, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetConnectorModeInfo_Entry> CSLBASE_GetConnectorModeInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetConnectorModeInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 449, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetConnectorModeInfo_Exit> CSLBASE_GetConnectorModeInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetConnectorModeInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 450, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetControllerInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetControllerInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 383, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetControllerInfo_Exit> CSLBASE_GetControllerInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetControllerInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 384, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCSCUsage_Entry> CSLBASE_GetCSCUsageStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCSCUsageStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 491, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCSCUsage_Exit> CSLBASE_GetCSCUsageStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCSCUsageStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 492, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCurrentPalette_Entry> CSLBASE_GetCurrentPaletteStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCurrentPaletteStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 329, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCurrentPalette_Exit> CSLBASE_GetCurrentPaletteStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCurrentPaletteStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 330, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCustomModeInfo_Entry> CSLBASE_GetCustomModeInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCustomModeInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 453, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetCustomModeInfo_Exit> CSLBASE_GetCustomModeInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetCustomModeInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 454, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDDCEdid_Entry> CSLBASE_GetDDCEdidStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDDCEdidStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 369, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDDCEdid_Exit> CSLBASE_GetDDCEdidStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDDCEdidStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 370, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetDetailedInfoForDP12SinkStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDetailedInfoForDP12SinkStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 525, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDetailedInfoForDP12Sink_Exit> CSLBASE_GetDetailedInfoForDP12SinkStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDetailedInfoForDP12SinkStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 526, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDevicePMCaps_Entry> CSLBASE_GetDevicePMCapsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDevicePMCapsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 349, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDevicePMCaps_Exit> CSLBASE_GetDevicePMCapsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDevicePMCapsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 350, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayDetect_Entry> CSLBASE_GetDisplayDetectStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayDetectStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 601, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayDetect_Exit> CSLBASE_GetDisplayDetectStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayDetectStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 602, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayDevice_Entry> CSLBASE_GetDisplayDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 599, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayDevice_Exit> CSLBASE_GetDisplayDeviceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayDeviceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 600, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayInfo_Entry> CSLBASE_GetDisplayInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 333, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayInfo_Exit> CSLBASE_GetDisplayInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 334, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayPortDetails_Entry> CSLBASE_GetDisplayPortDetailsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayPortDetailsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 341, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayPortDetails_Exit> CSLBASE_GetDisplayPortDetailsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayPortDetailsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 342, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayStart_Entry> CSLBASE_GetDisplayStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 423, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayStartMPO_Entry> CSLBASE_GetDisplayStartMPOStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayStartMPOStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 365, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayStartMPO_Exit> CSLBASE_GetDisplayStartMPOStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayStartMPOStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 366, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDisplayStart_Exit> CSLBASE_GetDisplayStartStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDisplayStartStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 424, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetDockStatusStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDockStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 439, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDockStatus_Exit> CSLBASE_GetDockStatusStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDockStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 440, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetDVMTSettingsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDVMTSettingsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 391, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetDVMTSettings_Exit> CSLBASE_GetDVMTSettingsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetDVMTSettingsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 392, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetEnabledInterrupts_Entry> CSLBASE_GetEnabledInterruptsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetEnabledInterruptsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 411, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetEnabledInterrupts_Exit> CSLBASE_GetEnabledInterruptsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetEnabledInterruptsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 412, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetEventObjectIndex_Entry> CSLBASE_GetEventObjectIndexStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetEventObjectIndexStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 465, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetEventObjectIndex_Exit> CSLBASE_GetEventObjectIndexStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetEventObjectIndexStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 466, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetHwS3DState_Entry> CSLBASE_GetHwS3DStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetHwS3DStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 507, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetHwS3DState_Exit> CSLBASE_GetHwS3DStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetHwS3DStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 508, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetIntelAudioDriverPresenceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetIntelAudioDriverPresenceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 589, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetIntelAudioDriverPresenceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetIntelAudioDriverPresenceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 590, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetInterruptSource_Entry> CSLBASE_GetInterruptSourceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetInterruptSourceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 409, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetInterruptSource_Exit> CSLBASE_GetInterruptSourceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetInterruptSourceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 410, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetLidStatus_Entry> CSLBASE_GetLidStatusStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetLidStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 609, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetLidStatus_Exit> CSLBASE_GetLidStatusStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetLidStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 610, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetMaxSupportedPlanesStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMaxSupportedPlanesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 355, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetMaxSupportedPlanes_Exit> CSLBASE_GetMaxSupportedPlanesStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMaxSupportedPlanesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 356, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetModeSupport_Entry> CSLBASE_GetModeSupportStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetModeSupportStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 381, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetModeSupport_Exit> CSLBASE_GetModeSupportStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetModeSupportStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 382, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetMPOCaps_Entry> CSLBASE_GetMPOCapsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMPOCapsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 359, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetMPOCaps_Exit> CSLBASE_GetMPOCapsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMPOCapsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 360, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetMPOGroupCaps_Entry> CSLBASE_GetMPOGroupCapsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMPOGroupCapsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 361, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetMPOGroupCaps_Exit> CSLBASE_GetMPOGroupCapsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetMPOGroupCapsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 362, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetPciCfgInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPciCfgInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 581, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPciCfgInfo_Exit> CSLBASE_GetPciCfgInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPciCfgInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 582, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPlane_Entry> CSLBASE_GetPlaneStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlaneStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 353, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPlane_Exit> CSLBASE_GetPlaneStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlaneStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 354, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPlaneZOrder_Entry> CSLBASE_GetPlaneZOrderStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlaneZOrderStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 357, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPlaneZOrder_Exit> CSLBASE_GetPlaneZOrderStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlaneZOrderStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 358, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetPlatformConfigInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlatformConfigInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 433, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPlatformConfigInfo_Exit> CSLBASE_GetPlatformConfigInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPlatformConfigInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 434, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetPNMPixelClkDataStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPNMPixelClkDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 469, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPNMPixelClkData_Exit> CSLBASE_GetPNMPixelClkDataStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPNMPixelClkDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 470, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPossibleTiledAlloc_Entry> CSLBASE_GetPossibleTiledAllocStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPossibleTiledAllocStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 563, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPossibleTiledAlloc_Exit> CSLBASE_GetPossibleTiledAllocStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPossibleTiledAllocStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 564, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetPSRResCounterStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPSRResCounterStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 467, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetPSRResCounter_Exit> CSLBASE_GetPSRResCounterStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetPSRResCounterStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 468, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetRefreshRate_Entry> CSLBASE_GetRefreshRateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetRefreshRateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 377, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetRefreshRate_Exit> CSLBASE_GetRefreshRateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetRefreshRateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 378, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetRelationForSourceTargetMode_Entry> CSLBASE_GetRelationForSourceTargetModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetRelationForSourceTargetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 403, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetRelationForSourceTargetMode_Exit> CSLBASE_GetRelationForSourceTargetModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetRelationForSourceTargetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 404, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetROMBIOSInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetROMBIOSInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 385, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetROMBIOSInfo_Exit> CSLBASE_GetROMBIOSInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetROMBIOSInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 386, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetS3DCaps_Entry> CSLBASE_GetS3DCapsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetS3DCapsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 505, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetS3DCaps_Exit> CSLBASE_GetS3DCapsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetS3DCapsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 506, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetScanLineInfo_Entry> CSLBASE_GetScanLineInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetScanLineInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 413, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetScanLineInfo_Exit> CSLBASE_GetScanLineInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetScanLineInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 414, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetClkBendingInfo_Entry> CSLBASE_GetSetClkBendingInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetClkBendingInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 501, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetClkBendingInfo_Exit> CSLBASE_GetSetClkBendingInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetClkBendingInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 502, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetCSC_Entry> CSLBASE_GetSetCSCStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetCSCStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 473, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetCSC_Exit> CSLBASE_GetSetCSCStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetCSCStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 474, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetParameters_Entry> CSLBASE_GetSetParametersStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetParametersStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 389, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetParameters_Exit> CSLBASE_GetSetParametersStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetParametersStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 390, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetXVYCCCtrl_Entry> CSLBASE_GetSetXVYCCCtrlStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetXVYCCCtrlStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 479, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSetXVYCCCtrl_Exit> CSLBASE_GetSetXVYCCCtrlStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSetXVYCCCtrlStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 480, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSourceModeList_Entry> CSLBASE_GetSourceModeListStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSourceModeListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 395, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSourceModeList_Exit> CSLBASE_GetSourceModeListStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSourceModeListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 396, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSPIData_Entry> CSLBASE_GetSPIDataStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSPIDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 459, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetSPIData_Exit> CSLBASE_GetSPIDataStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetSPIDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 460, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetTargetDetailsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetDetailsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 393, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTargetDetails_Exit> CSLBASE_GetTargetDetailsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetDetailsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 394, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTargetModeListForSourceMode_Entry> CSLBASE_GetTargetModeListForSourceModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetModeListForSourceModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 399, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTargetModeListForSourceMode_Exit> CSLBASE_GetTargetModeListForSourceModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetModeListForSourceModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 400, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTargetModeList_Entry> CSLBASE_GetTargetModeListStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetModeListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 397, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTargetModeList_Exit> CSLBASE_GetTargetModeListStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTargetModeListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 398, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTimingInfo_Entry> CSLBASE_GetTimingInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTimingInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 379, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetTimingInfo_Exit> CSLBASE_GetTimingInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetTimingInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 380, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GetVBTToggleListStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetVBTToggleListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 437, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GetVBTToggleList_Exit> CSLBASE_GetVBTToggleListStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GetVBTToggleListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 438, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_GrmTDRHandlerStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GrmTDRHandlerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 585, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_GrmTDRHandler_Exit> CSLBASE_GrmTDRHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_GrmTDRHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 586, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HandleATR_Entry> CSLBASE_HandleATRStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandleATRStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 487, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_HandleATRStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandleATRStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 488, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_HandleLPSPPreSetModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandleLPSPPreSetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 545, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HandleLPSPPreSetMode_Exit> CSLBASE_HandleLPSPPreSetModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandleLPSPPreSetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 546, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry> CSLBASE_HandlePipeCRCDoneInterruptStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandlePipeCRCDoneInterruptStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 481, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_HandlePipeCRCDoneInterruptStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandlePipeCRCDoneInterruptStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 482, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry> CSLBASE_HandlePipeCRCErrorInterruptStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandlePipeCRCErrorInterruptStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 483, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_HandlePipeCRCErrorInterruptStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HandlePipeCRCErrorInterruptStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 484, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HotPlug_Entry> CSLBASE_HotPlugStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HotPlugStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 335, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_HotPlug_Exit> CSLBASE_HotPlugStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_HotPlugStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 336, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_I2CAccess_Entry> CSLBASE_I2CAccessStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_I2CAccessStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 371, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_I2CAccess_Exit> CSLBASE_I2CAccessStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_I2CAccessStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 372, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_InitializeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InitializeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 327, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_Initialize_Exit> CSLBASE_InitializeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InitializeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 328, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_InitStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InitStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 323, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_InitStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InitStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 324, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_InterruptServices_Entry> CSLBASE_InterruptServicesStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InterruptServicesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 407, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_InterruptServices_Exit> CSLBASE_InterruptServicesStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_InterruptServicesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 408, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_IsAudioControllerEnabledStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsAudioControllerEnabledStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 445, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsAudioControllerEnabled_Exit> CSLBASE_IsAudioControllerEnabledStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsAudioControllerEnabledStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 446, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsCDClockChangeRequired_Entry> CSLBASE_IsCDClockChangeRequiredStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsCDClockChangeRequiredStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 593, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsCDClockChangeRequired_Exit> CSLBASE_IsCDClockChangeRequiredStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsCDClockChangeRequiredStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 594, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_IsCDClockChangeSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsCDClockChangeSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 591, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsCDClockChangeSupported_Exit> CSLBASE_IsCDClockChangeSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsCDClockChangeSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 592, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsFastModeSetPossible_Entry> CSLBASE_IsFastModeSetPossibleStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsFastModeSetPossibleStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 531, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsFastModeSetPossible_Exit> CSLBASE_IsFastModeSetPossibleStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsFastModeSetPossibleStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 532, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsFlipCompleted_Entry> CSLBASE_IsFlipCompletedStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsFlipCompletedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 443, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsFlipCompleted_Exit> CSLBASE_IsFlipCompletedStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsFlipCompletedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 444, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsHwCursorPossible_Entry> CSLBASE_IsHwCursorPossibleStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsHwCursorPossibleStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 567, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsHwCursorPossible_Exit> CSLBASE_IsHwCursorPossibleStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsHwCursorPossibleStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 568, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsOpRegionMailBoxSupported_Entry> CSLBASE_IsOpRegionMailBoxSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsOpRegionMailBoxSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 427, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsOpRegionMailBoxSupported_Exit> CSLBASE_IsOpRegionMailBoxSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsOpRegionMailBoxSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 428, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsScalingAppliedInMPOPath_Entry> CSLBASE_IsScalingAppliedInMPOPathStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsScalingAppliedInMPOPathStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 363, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsScalingAppliedInMPOPath_Exit> CSLBASE_IsScalingAppliedInMPOPathStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsScalingAppliedInMPOPathStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 364, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsSFSupported_Entry> CSLBASE_IsSFSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsSFSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 565, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsSFSupported_Exit> CSLBASE_IsSFSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsSFSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 566, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_IsSpriteDownScaleSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsSpriteDownScaleSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 583, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsSpriteDownScaleSupported_Exit> CSLBASE_IsSpriteDownScaleSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsSpriteDownScaleSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 584, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsTwinSupportedInClone_Entry> CSLBASE_IsTwinSupportedInCloneStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsTwinSupportedInCloneStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 447, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_IsTwinSupportedInClone_Exit> CSLBASE_IsTwinSupportedInCloneStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_IsTwinSupportedInCloneStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 448, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_LH_NotifyPowerState_Entry> CSLBASE_LH_NotifyPowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_LH_NotifyPowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 603, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_LH_NotifyPowerState_Exit> CSLBASE_LH_NotifyPowerStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_LH_NotifyPowerStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 604, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_LH_SetDisplayPowerState_Entry> CSLBASE_LH_SetDisplayPowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_LH_SetDisplayPowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 605, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_LH_SetDisplayPowerState_Exit> CSLBASE_LH_SetDisplayPowerStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_LH_SetDisplayPowerStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 606, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_NotifyCommitEndStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyCommitEndStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 543, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_NotifyCommitEnd_Exit> CSLBASE_NotifyCommitEndStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyCommitEndStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 544, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_NotifyModeSetComplete_Entry> CSLBASE_NotifyModeSetCompleteStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyModeSetCompleteStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 549, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_NotifyModeSetComplete_Exit> CSLBASE_NotifyModeSetCompleteStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyModeSetCompleteStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 550, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_NotifyPowerState_Entry> CSLBASE_NotifyPowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyPowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 345, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_NotifyPowerStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_NotifyPowerStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 346, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_OverrideMonitorModeList_Entry> CSLBASE_OverrideMonitorModeListStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_OverrideMonitorModeListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 401, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_OverrideMonitorModeList_Exit> CSLBASE_OverrideMonitorModeListStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_OverrideMonitorModeListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 402, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_PopulateContainerIDArgs_Entry> CSLBASE_PopulateContainerIDArgsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_PopulateContainerIDArgsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 521, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_PopulateContainerIDArgs_Exit> CSLBASE_PopulateContainerIDArgsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_PopulateContainerIDArgsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 522, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_ProcessPSREventStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ProcessPSREventStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 461, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_ProcessPSREventStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ProcessPSREventStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 462, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryDispConfig_Entry> CSLBASE_QueryDispConfigStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryDispConfigStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 569, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryDispConfig_Exit> CSLBASE_QueryDispConfigStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryDispConfigStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 570, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryDisplayDetails_Entry> CSLBASE_QueryDisplayDetailsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryDisplayDetailsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 351, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryDisplayDetails_Exit> CSLBASE_QueryDisplayDetailsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryDisplayDetailsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 352, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryHWConfig_Entry> CSLBASE_QueryHWConfigStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryHWConfigStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 493, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryHWConfig_Exit> CSLBASE_QueryHWConfigStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryHWConfigStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 494, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_QueryResourceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryResourceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 573, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_QueryResource_Exit> CSLBASE_QueryResourceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_QueryResourceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 574, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReadOpRegionMailBox_Entry> CSLBASE_ReadOpRegionMailBoxStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReadOpRegionMailBoxStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 429, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReadOpRegionMailBox_Exit> CSLBASE_ReadOpRegionMailBoxStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReadOpRegionMailBoxStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 430, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReleaseDevice_Entry> CSLBASE_ReleaseDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReleaseDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 577, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReleaseDevice_Exit> CSLBASE_ReleaseDeviceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReleaseDeviceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 578, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_RemoveCustomMode_Entry> CSLBASE_RemoveCustomModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_RemoveCustomModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 455, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_RemoveCustomMode_Exit> CSLBASE_RemoveCustomModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_RemoveCustomModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 456, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReserveVideoBW_Entry> CSLBASE_ReserveVideoBWStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReserveVideoBWStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 575, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReserveVideoBW_Exit> CSLBASE_ReserveVideoBWStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReserveVideoBWStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 576, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReTrainLink_Entry> CSLBASE_ReTrainLinkStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReTrainLinkStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 463, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ReTrainLink_Exit> CSLBASE_ReTrainLinkStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ReTrainLinkStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 464, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_ServiceConnectionStatusNotifyStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ServiceConnectionStatusNotifyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 553, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ServiceConnectionStatusNotify_Exit> CSLBASE_ServiceConnectionStatusNotifyStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ServiceConnectionStatusNotifyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 554, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_ServiceHotPlugInterruptStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ServiceHotPlugInterruptStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 417, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ServiceHotPlugInterrupt_Exit> CSLBASE_ServiceHotPlugInterruptStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ServiceHotPlugInterruptStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 418, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADBrightness_Entry> CSLBASE_SetADBrightnessStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADBrightnessStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 557, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADBrightness_Exit> CSLBASE_SetADBrightnessStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADBrightnessStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 558, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADLux_Entry> CSLBASE_SetADLuxStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADLuxStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 559, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADLux_Exit> CSLBASE_SetADLuxStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADLuxStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 560, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADState_Entry> CSLBASE_SetADStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 555, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetADState_Exit> CSLBASE_SetADStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetADStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 556, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetAudioData_Entry> CSLBASE_SetAudioDataStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetAudioDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 537, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetAudioData_Exit> CSLBASE_SetAudioDataStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetAudioDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 538, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetAudioEncryptionPreference_Entry> CSLBASE_SetAudioEncryptionPreferenceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetAudioEncryptionPreferenceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 539, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetAudioEncryptionPreference_Exit> CSLBASE_SetAudioEncryptionPreferenceStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetAudioEncryptionPreferenceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 540, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetCompensation_Entry> CSLBASE_SetCompensationStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetCompensationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 337, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_SetCompensationStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetCompensationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 338, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetCustomScalingInfo_Entry> CSLBASE_SetCustomScalingInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetCustomScalingInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 405, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_SetCustomScalingInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetCustomScalingInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 406, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayDevice_Entry> CSLBASE_SetDisplayDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 228, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayPowerStateEntry> CSLBASE_SetDisplayPowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayPowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 225, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayStartEntry> CSLBASE_SetDisplayStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 226, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayStartMPOEntry> CSLBASE_SetDisplayStartMPOStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayStartMPOStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 232, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayStartExit> CSLBASE_SetDisplayStartMPOStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayStartMPOStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 233, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDisplayStartExit> CSLBASE_SetDisplayStartStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDisplayStartStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 227, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_SetDP12SinkListforEachPortStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDP12SinkListforEachPortStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 527, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetDP12SinkListforEachPort_Exit> CSLBASE_SetDP12SinkListforEachPortStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetDP12SinkListforEachPortStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 528, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetHDCPStatus_Entry> CSLBASE_SetHDCPStatusStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetHDCPStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 497, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetHDCPStatus_Exit> CSLBASE_SetHDCPStatusStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetHDCPStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 498, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetModePState_Entry> CSLBASE_SetModePStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetModePStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 435, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetModePState_Exit> CSLBASE_SetModePStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetModePStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 436, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetModeEntry> CSLBASE_SetModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 223, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetModeExit> CSLBASE_SetModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 224, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetNVHGDisplays_Entry> CSLBASE_SetNVHGDisplaysStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetNVHGDisplaysStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 475, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetNVHGDisplays_Exit> CSLBASE_SetNVHGDisplaysStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetNVHGDisplaysStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 476, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPanelPower_Entry> CSLBASE_SetPanelPowerStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPanelPowerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 477, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPanelPower_Exit> CSLBASE_SetPanelPowerStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPanelPowerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 478, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPlaneOrientation_Entry> CSLBASE_SetPlaneOrientationStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPlaneOrientationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 425, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPlaneOrientation_Exit> CSLBASE_SetPlaneOrientationStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPlaneOrientationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 426, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPNMPixelClkData_Entry> CSLBASE_SetPNMPixelClkDataStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPNMPixelClkDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 471, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPNMPixelClkData_Exit> CSLBASE_SetPNMPixelClkDataStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPNMPixelClkDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 472, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPsrState_Entry> CSLBASE_SetPsrStateStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPsrStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 519, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetPsrState_Exit> CSLBASE_SetPsrStateStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetPsrStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 520, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetS3DParameters_Entry> CSLBASE_SetS3DParametersStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetS3DParametersStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 511, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetS3DParameters_Exit> CSLBASE_SetS3DParametersStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetS3DParametersStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 512, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetS3DPlaneParameters_Entry> CSLBASE_SetS3DPlaneParametersStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetS3DPlaneParametersStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 513, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetS3DPlaneParameters_Exit> CSLBASE_SetS3DPlaneParametersStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetS3DPlaneParametersStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 514, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_SetScratchFlagsStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetScratchFlagsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 387, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetScratchFlags_Exit> CSLBASE_SetScratchFlagsStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetScratchFlagsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 388, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetVBIOSDispConfig_Entry> CSLBASE_SetVBIOSDispConfigStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetVBIOSDispConfigStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 515, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetVBIOSDispConfig_Exit> CSLBASE_SetVBIOSDispConfigStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetVBIOSDispConfigStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 516, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetVGAPipe_Entry> CSLBASE_SetVGAPipeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetVGAPipeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 331, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SetVGAPipe_Exit> CSLBASE_SetVGAPipeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SetVGAPipeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 332, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SimulateDP12Topology_Entry> CSLBASE_SimulateDP12TopologyStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SimulateDP12TopologyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 529, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SimulateDP12Topology_Exit> CSLBASE_SimulateDP12TopologyStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SimulateDP12TopologyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 530, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SwapPlanes_Entry> CSLBASE_SwapPlanesStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SwapPlanesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 367, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_SwapPlanes_Exit> CSLBASE_SwapPlanesStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_SwapPlanesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 368, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_TDRHandler_Entry> CSLBASE_TDRHandlerStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_TDRHandlerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 421, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_TDRHandler_Exit> CSLBASE_TDRHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_TDRHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 422, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_TrimModeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_TrimModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 579, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_TrimMode_Exit> CSLBASE_TrimModeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_TrimModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 580, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Entry> CSLBASE_UpdateAndGetSinkCapabilitesStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateAndGetSinkCapabilitesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 517, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Exit> CSLBASE_UpdateAndGetSinkCapabilitesStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateAndGetSinkCapabilitesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 518, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateCDClock_Entry> CSLBASE_UpdateCDClockStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateCDClockStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 611, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateCDClock_Exit> CSLBASE_UpdateCDClockStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateCDClockStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 612, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateEncoderCapsInfo_Entry> CSLBASE_UpdateEncoderCapsInfoStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateEncoderCapsInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 495, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateEncoderCapsInfo_Exit> CSLBASE_UpdateEncoderCapsInfoStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateEncoderCapsInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 496, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateTPVSupportedModeList_Entry> CSLBASE_UpdateTPVSupportedModeListStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateTPVSupportedModeListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 499, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_UpdateTPVSupportedModeList_Exit> CSLBASE_UpdateTPVSupportedModeListStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_UpdateTPVSupportedModeListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 500, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ValidateDispConfig_Entry> CSLBASE_ValidateDispConfigStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ValidateDispConfigStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 571, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_ValidateDispConfig_Exit> CSLBASE_ValidateDispConfigStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_ValidateDispConfigStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 572, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_VerifyMMIOAddressInRange_Entry> CSLBASE_VerifyMMIOAddressInRangeStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_VerifyMMIOAddressInRangeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 551, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_VerifyMMIOAddressInRange_Exit> CSLBASE_VerifyMMIOAddressInRangeStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_VerifyMMIOAddressInRangeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 552, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_WaitForVBlank_Entry> CSLBASE_WaitForVBlankStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_WaitForVBlankStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 457, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CSLBASE_WaitForVBlankStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_WaitForVBlankStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 458, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_WriteOpRegionMailBox_Entry> CSLBASE_WriteOpRegionMailBoxStart
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_WriteOpRegionMailBoxStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 431, ProviderGuid);
            }
        }
        public event Action<t_CSLBASE_WriteOpRegionMailBox_Exit> CSLBASE_WriteOpRegionMailBoxStop
        {
            add
            {
                source.RegisterEventTemplate(CSLBASE_WriteOpRegionMailBoxStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 432, ProviderGuid);
            }
        }
        public event Action<t_CUIEscapeEntry> CUIEscapeStart
        {
            add
            {
                source.RegisterEventTemplate(CUIEscapeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> CUIEscapeStop
        {
            add
            {
                source.RegisterEventTemplate(CUIEscapeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<t_CxsrClearPlaneLPWms> CxsrClearPlaneLPWms
        {
            add
            {
                source.RegisterEventTemplate(CxsrClearPlaneLPWmsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 759, ProviderGuid);
            }
        }
        public event Action<t_CxsrClientEventHandler> CxsrClientEventHandler
        {
            add
            {
                source.RegisterEventTemplate(CxsrClientEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 762, ProviderGuid);
            }
        }
        public event Action<t_CxsrEnable> CxsrEnable
        {
            add
            {
                source.RegisterEventTemplate(CxsrEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 760, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> CxsrEnableStop
        {
            add
            {
                source.RegisterEventTemplate(CxsrEnableStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 783, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> CxsrExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(CxsrExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 776, ProviderGuid);
            }
        }
        public event Action<t_CxsrInitialize> CxsrInitialize
        {
            add
            {
                source.RegisterEventTemplate(CxsrInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 803, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> CxsrPlaneLPWmPush
        {
            add
            {
                source.RegisterEventTemplate(CxsrPlaneLPWmPushTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 761, ProviderGuid);
            }
        }
        public event Action<t_CxsrProgramPlaneLPWms> CxsrProgramPlaneLPWms
        {
            add
            {
                source.RegisterEventTemplate(CxsrProgramPlaneLPWmsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 758, ProviderGuid);
            }
        }
        public event Action<t_DecoupledMMIOArgs> Decoupled_MMIO_AccessDCR_MMIO_Access
        {
            add
            {
                source.RegisterEventTemplate(Decoupled_MMIO_AccessDCR_MMIO_AccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 663, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Entry> DISPLAYIDPARSER_AddEDIDModeToListStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_AddEDIDModeToListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 309, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Exit> DISPLAYIDPARSER_AddEDIDModeToListStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_AddEDIDModeToListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 310, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DISPLAYIDPARSER_GetColorBitDepthStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetColorBitDepthStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 305, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYIDPARSER_GetColorBitDepth_Exit> DISPLAYIDPARSER_GetColorBitDepthStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetColorBitDepthStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 306, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry> DISPLAYIDPARSER_GetDisplayIDDataBlockStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetDisplayIDDataBlockStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 307, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DISPLAYIDPARSER_GetDisplayIDDataBlockStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetDisplayIDDataBlockStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 308, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DISPLAYIDPARSER_GetVICListStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetVICListStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 311, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYIDPARSER_GetVICList_Exit> DISPLAYIDPARSER_GetVICListStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYIDPARSER_GetVICListStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 312, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry> DISPLAYINFOROUTINES_GetDTDFromTimingInfoStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYINFOROUTINES_GetDTDFromTimingInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 295, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit> DISPLAYINFOROUTINES_GetDTDFromTimingInfoStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYINFOROUTINES_GetDTDFromTimingInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 296, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry> DISPLAYINFOROUTINES_IsSupportedCeModeStart
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYINFOROUTINES_IsSupportedCeModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 293, ProviderGuid);
            }
        }
        public event Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit> DISPLAYINFOROUTINES_IsSupportedCeModeStop
        {
            add
            {
                source.RegisterEventTemplate(DISPLAYINFOROUTINES_IsSupportedCeModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 294, ProviderGuid);
            }
        }
        public event Action<t_DP_LinkTraining_FastLinkTraining> DP_LinkTrainingFastLinkTraining
        {
            add
            {
                source.RegisterEventTemplate(DP_LinkTrainingFastLinkTrainingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 699, ProviderGuid);
            }
        }
        public event Action<t_DP_LinkTraining_Start> DP_LinkTrainingStart
        {
            add
            {
                source.RegisterEventTemplate(DP_LinkTrainingStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 689, ProviderGuid);
            }
        }
        public event Action<t_DP_LinkTraining_Stop> DP_LinkTrainingStop
        {
            add
            {
                source.RegisterEventTemplate(DP_LinkTrainingStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 698, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> DpsExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DpsExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 777, ProviderGuid);
            }
        }
        public event Action<t_DpsExternalEventHandler_Finish> DpsExternalEventHandlerStop
        {
            add
            {
                source.RegisterEventTemplate(DpsExternalEventHandlerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 808, ProviderGuid);
            }
        }
        public event Action<t_DpsGetUserDpsParams> DpsGetUserDpsParams
        {
            add
            {
                source.RegisterEventTemplate(DpsGetUserDpsParamsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 812, ProviderGuid);
            }
        }
        public event Action<t_DpsInitialize> DpsInitialize
        {
            add
            {
                source.RegisterEventTemplate(DpsInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 809, ProviderGuid);
            }
        }
        public event Action<t_DpsInitSupportedPStates> DpsInitSupportedPStates
        {
            add
            {
                source.RegisterEventTemplate(DpsInitSupportedPStatesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 807, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetMaxLaneCount_Entry> DPSINK_GetMaxLaneCountStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetMaxLaneCountStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 249, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetMaxLaneCount_Exit> DPSINK_GetMaxLaneCountStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetMaxLaneCountStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 250, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetMaxLinkRate_Entry> DPSINK_GetMaxLinkRateStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetMaxLinkRateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 247, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetMaxLinkRate_Exit> DPSINK_GetMaxLinkRateStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetMaxLinkRateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 248, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetSinkCount_Entry> DPSINK_GetSinkCountStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetSinkCountStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 253, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetSinkCount_Exit> DPSINK_GetSinkCountStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetSinkCountStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 254, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetSinkType_Entry> DPSINK_GetSinkTypeStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetSinkTypeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 251, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_GetSinkType_Exit> DPSINK_GetSinkTypeStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_GetSinkTypeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 252, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_Initialize_Entry> DPSINK_InitializeStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_InitializeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 245, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_Initialize_Exit> DPSINK_InitializeStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_InitializeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 246, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_SetTrainingLevel_Entry> DPSINK_SetTrainingLevelStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_SetTrainingLevelStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 257, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_SetTrainingLevel_Exit> DPSINK_SetTrainingLevelStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_SetTrainingLevelStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 258, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_SetTrainingPattern_Entry> DPSINK_SetTrainingPatternStart
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_SetTrainingPatternStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 255, ProviderGuid);
            }
        }
        public event Action<t_DPSINK_SetTrainingPattern_Exit> DPSINK_SetTrainingPatternStop
        {
            add
            {
                source.RegisterEventTemplate(DPSINK_SetTrainingPatternStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 256, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> DpsMamCancelTimer
        {
            add
            {
                source.RegisterEventTemplate(DpsMamCancelTimerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 817, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> DpsMamDisable
        {
            add
            {
                source.RegisterEventTemplate(DpsMamDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 815, ProviderGuid);
            }
        }
        public event Action<t_DpsMamEventHandler> DpsMamEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DpsMamEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 814, ProviderGuid);
            }
        }
        public event Action<t_DpsMamInitialize> DpsMamInitialize
        {
            add
            {
                source.RegisterEventTemplate(DpsMamInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 813, ProviderGuid);
            }
        }
        public event Action<t_DpsMamStartTimer> DpsMamStartTimer
        {
            add
            {
                source.RegisterEventTemplate(DpsMamStartTimerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 816, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> DpsMamTimerCallback
        {
            add
            {
                source.RegisterEventTemplate(DpsMamTimerCallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 818, ProviderGuid);
            }
        }
        public event Action<t_DpsMamWorkItemCallback> DpsMamWorkItemCallback
        {
            add
            {
                source.RegisterEventTemplate(DpsMamWorkItemCallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 819, ProviderGuid);
            }
        }
        public event Action<t_DpsModeArgs> DpsSetModePStateSwLegacy
        {
            add
            {
                source.RegisterEventTemplate(DpsSetModePStateSwLegacyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 775, ProviderGuid);
            }
        }
        public event Action<t_DpsSetUserDpsParams> DpsSetUserDpsParams
        {
            add
            {
                source.RegisterEventTemplate(DpsSetUserDpsParamsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 811, ProviderGuid);
            }
        }
        public event Action<t_DpstAlgorithmResultData> DpstAlgorithmResult
        {
            add
            {
                source.RegisterEventTemplate(DpstAlgorithmResultTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 747, ProviderGuid);
            }
        }
        public event Action<t_DpstClientEventHandlerData> DpstClientEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DpstClientEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 745, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> DpstExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DpstExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 778, ProviderGuid);
            }
        }
        public event Action<t_DpstHistDpcWorkItemCallbackData> DpstHistDpcWorkItemCallback
        {
            add
            {
                source.RegisterEventTemplate(DpstHistDpcWorkItemCallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 746, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramDisableData> DpstHistogramDisable
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 743, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramEnableData> DpstHistogramEnable
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 742, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramEnable_Gen6_Data> DpstHistogramEnable_Gen6
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramEnable_Gen6Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 741, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramGetStatusData> DpstHistogramGetStatus
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramGetStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 740, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramResetData> DpstHistogramReset
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 744, ProviderGuid);
            }
        }
        public event Action<t_DpstHistogramUpdateGuardbandData> DpstHistogramUpdateGuardband
        {
            add
            {
                source.RegisterEventTemplate(DpstHistogramUpdateGuardbandTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 739, ProviderGuid);
            }
        }
        public event Action<t_DpstInitialize> DpstInitialize
        {
            add
            {
                source.RegisterEventTemplate(DpstInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 802, ProviderGuid);
            }
        }
        public event Action<t_DpstProgramDietRegsData> DpstProgramDietRegs
        {
            add
            {
                source.RegisterEventTemplate(DpstProgramDietRegsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 748, ProviderGuid);
            }
        }
        public event Action<t_PcVbiState> DpsVBINotificationEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DpsVBINotificationEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 810, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiAddDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiAddDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 67, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiAddDeviceStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiAddDeviceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 68, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiBlcSetBacklightOptimizationData> DxgkDdiBlcSetBacklightOptimization
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiBlcSetBacklightOptimizationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 723, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiBlcSetBrightnessData> DxgkDdiBlcSetBrightness
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiBlcSetBrightnessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 721, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiBlcSetBrightnessStateData> DxgkDdiBlcSetBrightnessState
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiBlcSetBrightnessStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 722, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> DxgkDdiCheckMultiPlaneOverlaySupport3
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCheckMultiPlaneOverlaySupport3Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 833, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiCheckMultiPlaneOverlaySupport3Start
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCheckMultiPlaneOverlaySupport3StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 834, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiCheckMultiPlaneOverlaySupport3> DxgkDdiCheckMultiPlaneOverlaySupport3Stop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCheckMultiPlaneOverlaySupport3StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 835, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiCheckMultiPlaneOverlaySupportEntry> DxgkDdiCheckMultiPlaneOverlaySupportStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCheckMultiPlaneOverlaySupportStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 87, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiCheckMultiPlaneOverlaySupportExit> DxgkDdiCheckMultiPlaneOverlaySupportStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCheckMultiPlaneOverlaySupportStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 88, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiCollectDbgInfo> DxgkDdiCollectDbgInfo
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCollectDbgInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 712, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiCollectDbgInfo_Analysis> DxgkDdiCollectDbgInfoAnalysisResult
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiCollectDbgInfoAnalysisResultTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 713, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiControlInterruptEntry> DxgkDdiControlInterrupt
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiControlInterruptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiControlInterrupt2Entry> DxgkDdiControlInterrupt2
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiControlInterrupt2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiControlInterrupt2Stop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiControlInterrupt2StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiControlInterruptStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiControlInterruptStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiControlModeBehavior_Info> DxgkDdiControlModeBehavior
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiControlModeBehaviorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 708, ProviderGuid);
            }
        }
        public event Action<t_EVCMInfo> DxgkDdiEnumVidPnCofuncModality
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> DxgkDdiEnumVidPnCofuncModalityFailed
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalityFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }
        public event Action<t_EVCMSourceInfo> DxgkDdiEnumVidPnCofuncModalitySourceInfo 
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalitySourceInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<t_EVCMEntry> DxgkDdiEnumVidPnCofuncModalityStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalityStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiEnumVidPnCofuncModalityStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalityStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<t_EVCMTargetInfo> DxgkDdiEnumVidPnCofuncModalityTargetInfo
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiEnumVidPnCofuncModalityTargetInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiGetScanLineEntry> DxgkDdiGetScanLineStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiGetScanLineStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiGetScanLineStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiGetScanLineStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<t_ISVInfo> DxgkDdiIsSupportedVidPn
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiIsSupportedVidPnTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> DxgkDdiIsSupportedVidPnFailed
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiIsSupportedVidPnFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, ProviderGuid);
            }
        }
        public event Action<t_ISVPathInfo> DxgkDdiIsSupportedVidPnPathInfo
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiIsSupportedVidPnPathInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiIsSupportedVidPnStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiIsSupportedVidPnStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<t_ISVExit> DxgkDdiIsSupportedVidPnStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiIsSupportedVidPnStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiNotifyAcpiEventEntry> DxgkDdiNotifyAcpiEventStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiNotifyAcpiEventStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiNotifyAcpiEventStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiNotifyAcpiEventStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiNotifySurpriseRemovalStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiNotifySurpriseRemovalStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 69, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiNotifySurpriseRemovalStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiNotifySurpriseRemovalStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiPresentDisplayOnly> DxgkDdiPresentDisplayOnly
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiPresentDisplayOnlyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 715, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiQueryAdapterInfo> DxgkDdiQueryAdapterInfoStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryAdapterInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiQueryAdapterInfoStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryAdapterInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiQueryChildRelationsStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryChildRelationsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 123, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiQueryChildRelationsStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryChildRelationsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 124, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiQueryChildStatusEntry> DxgkDdiQueryChildStatusStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryChildStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiQueryChildStatusStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryChildStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiQueryDeviceDescriptorEntry> DxgkDdiQueryDeviceDescriptorStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryDeviceDescriptorStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiQueryDeviceDescriptorStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryDeviceDescriptorStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiQueryInterfaceEntry> DxgkDdiQueryInterfaceStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryInterfaceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiQueryInterfaceExit> DxgkDdiQueryInterfaceStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiQueryInterfaceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 74, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRecommendFunctionalVidPnStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRecommendFunctionalVidPnStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRecommendFunctionalVidPnStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRecommendFunctionalVidPnStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRecommendVidPnTopologyStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRecommendVidPnTopologyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRecommendVidPnTopologyStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRecommendVidPnTopologyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiResetFromTimeoutDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiResetFromTimeoutDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 76, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiResetFromTimeoutStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiResetFromTimeoutStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 75, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRestartFromTimeoutStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRestartFromTimeoutStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiRestartFromTimeoutStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiRestartFromTimeoutStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetPointerShapeEntry> DxgkDdiSetPointerShapeStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPointerShapeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetPointerShapeExit> DxgkDdiSetPointerShapeStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPointerShapeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetPowerComponentFStateEntry> DxgkDdiSetPowerComponentFStateStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPowerComponentFStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetPowerComponentFStateStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPowerComponentFStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<t_DxgkddiSetPowerStateEntry> DxgkDdiSetPowerState_taskStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPowerState_taskStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetPowerState_taskStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetPowerState_taskStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> DxgkDdiSetVidPnSourceAddressFailed
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<t_SetVidpnSourceAddressEntry> DxgkDdiSetVidPnSourceAddressStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetVidPnSourceAddressStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<t_SSAMPO3_pPostComposition> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PipeScaler
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PipeScalerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 832, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Plane
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 831, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Start
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 829, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Stop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 830, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayFailed
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 86, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 85, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceVisibilityEntry> DxgkDdiSetVidPnSourceVisibilityStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceVisibilityStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceVisibilityExit> DxgkDdiSetVidPnSourceVisibilityStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSetVidPnSourceVisibilityStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiStartDeviceStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiStartDeviceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 637, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiStartDeviceExit> DxgkDdiStartDeviceStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiStartDeviceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 638, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry> DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 77, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit> DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSubmitCommand> DxgkDdiSubmitCommand
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiSubmitCommandTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 664, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiUnloadStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUnloadStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiUnloadStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUnloadStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiSetVidPnSourceAddressFail> DxgkDdiUpdateActiveVidPnPresentPathFailed
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUpdateActiveVidPnPresentPathFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiUpdateActiveVidPnPresentPathEntry> DxgkDdiUpdateActiveVidPnPresentPathStart
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUpdateActiveVidPnPresentPathStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> DxgkDdiUpdateActiveVidPnPresentPathStop
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUpdateActiveVidPnPresentPathStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiUpdateMonitorLinkInfo_Info> DxgkDdiUpdateMonitorLinkInfo
        {
            add
            {
                source.RegisterEventTemplate(DxgkDdiUpdateMonitorLinkInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 707, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_Add4kx2kMode_Entry> EDIDPARSER_Add4kx2kModeStart
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_Add4kx2kModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 297, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_Add4kx2kMode_Exit> EDIDPARSER_Add4kx2kModeStop
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_Add4kx2kModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 298, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_ExtractInfoFromCVT_Entry> EDIDPARSER_ExtractInfoFromCVTStart
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ExtractInfoFromCVTStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 303, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> EDIDPARSER_ExtractInfoFromCVTStop
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ExtractInfoFromCVTStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 304, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_ParseVTBExt_DTDs_Entry> EDIDPARSER_ParseVTBExt_DTDsStart
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ParseVTBExt_DTDsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 301, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_ParseVTBExt_DTDs_Exit> EDIDPARSER_ParseVTBExt_DTDsStop
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ParseVTBExt_DTDsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 302, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_ValidateVTBExtension_Entry> EDIDPARSER_ValidateVTBExtensionStart
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ValidateVTBExtensionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 299, ProviderGuid);
            }
        }
        public event Action<t_EDIDPARSER_ValidateVTBExtension_Exit> EDIDPARSER_ValidateVTBExtensionStop
        {
            add
            {
                source.RegisterEventTemplate(EDIDPARSER_ValidateVTBExtensionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 300, ProviderGuid);
            }
        }
        public event Action<t_EventServiceEntry> EventServiceStart
        {
            add
            {
                source.RegisterEventTemplate(EventServiceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> EventServiceStop
        {
            add
            {
                source.RegisterEventTemplate(EventServiceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<t_FbcRegData> FbcDisable_Gen9
        {
            add
            {
                source.RegisterEventTemplate(FbcDisable_Gen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 763, ProviderGuid);
            }
        }
        public event Action<t_FbcRegData> FbcEnable_Gen9
        {
            add
            {
                source.RegisterEventTemplate(FbcEnable_Gen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 764, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> FbcExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(FbcExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 779, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> FbcInvalidateLineSegments
        {
            add
            {
                source.RegisterEventTemplate(FbcInvalidateLineSegmentsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 765, ProviderGuid);
            }
        }
        public event Action<t_FbcRegData> FbcSetCompressionControl
        {
            add
            {
                source.RegisterEventTemplate(FbcSetCompressionControlTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 766, ProviderGuid);
            }
        }
        public event Action<t_FbcRegData> FbcSetCpuFenceControl
        {
            add
            {
                source.RegisterEventTemplate(FbcSetCpuFenceControlTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 767, ProviderGuid);
            }
        }
        public event Action<t_FbcSetupGmmData> FbcSetupGmmData
        {
            add
            {
                source.RegisterEventTemplate(FbcSetupGmmDataTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 768, ProviderGuid);
            }
        }
        public event Action<t_GEN9HDMICONTROLLER_NotifyPowerWellChange> GEN9HDMICONTROLLER_NotifyPowerWellChange
        {
            add
            {
                source.RegisterEventTemplate(GEN9HDMICONTROLLER_NotifyPowerWellChangeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 653, ProviderGuid);
            }
        }
        public event Action<t_NotifyPowerWellChangeEntry> GEN9HDMICONTROLLER_NotifyPowerWellChangeStart
        {
            add
            {
                source.RegisterEventTemplate(GEN9HDMICONTROLLER_NotifyPowerWellChangeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 652, ProviderGuid);
            }
        }
        public event Action<t_GenericTest> Generic_Test1
        {
            add
            {
                source.RegisterEventTemplate(Generic_Test1Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 125, ProviderGuid);
            }
        }
        public event Action<t_GenericTest> Generic_Test2
        {
            add
            {
                source.RegisterEventTemplate(Generic_Test2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 126, ProviderGuid);
            }
        }
        public event Action<t_GenericTest> Generic_Test3
        {
            add
            {
                source.RegisterEventTemplate(Generic_Test3Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 127, ProviderGuid);
            }
        }
        public event Action<t_SystemInfoExit> GetSystemInfo
        {
            add
            {
                source.RegisterEventTemplate(GetSystemInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 90, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GetSystemInfoStart
        {
            add
            {
                source.RegisterEventTemplate(GetSystemInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 89, ProviderGuid);
            }
        }
        public event Action<t_GetSystemPowerState_Entry> GetSystemPowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(GetSystemPowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 587, ProviderGuid);
            }
        }
        public event Action<t_GetSystemPowerState_Exit> GetSystemPowerStateStop
        {
            add
            {
                source.RegisterEventTemplate(GetSystemPowerStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 588, ProviderGuid);
            }
        }
        public event Action<t_GfxCheckPresentDurationSupportInfo> GfxCheckPresentDurationSupport
        {
            add
            {
                source.RegisterEventTemplate(GfxCheckPresentDurationSupportTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 97, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxCheckPresentDurationSupportStart
        {
            add
            {
                source.RegisterEventTemplate(GfxCheckPresentDurationSupportStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
            }
        }
        public event Action<t_CheckPresentDurationSupportExit> GfxCheckPresentDurationSupportStop
        {
            add
            {
                source.RegisterEventTemplate(GfxCheckPresentDurationSupportStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 92, ProviderGuid);
            }
        }
        public event Action<t_GfxClientAllocateResourceFailure> GfxClientAllocateResourceFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientAllocateResourceFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 196, ProviderGuid);
            }
        }
        public event Action<t_GfxClientAllocateResourceEntry> GfxClientAllocateResourceStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientAllocateResourceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 194, ProviderGuid);
            }
        }
        public event Action<t_GfxClientAllocateResourceExit> GfxClientAllocateResourceStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientAllocateResourceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 195, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCloseGPUFailure> GfxClientCloseGPUFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientCloseGPUFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 193, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCloseGPU> GfxClientCloseGPUStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientCloseGPUStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 191, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCloseGPU> GfxClientCloseGPUStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientCloseGPUStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 192, ProviderGuid);
            }
        }
        public event Action<t_GfxClientDeallocateResourceFailure> GfxClientDeallocateResourceFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientDeallocateResourceFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 199, ProviderGuid);
            }
        }
        public event Action<t_GfxClientDeallocateResourceEntry> GfxClientDeallocateResourceStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientDeallocateResourceStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 197, ProviderGuid);
            }
        }
        public event Action<t_GfxClientDeallocateResourceExit> GfxClientDeallocateResourceStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientDeallocateResourceStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 198, ProviderGuid);
            }
        }
        public event Action<t_GfxClientEngineReset> GfxClientEngineResetStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientEngineResetStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 210, ProviderGuid);
            }
        }
        public event Action<t_GfxClientEngineReset> GfxClientEngineResetStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientEngineResetStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 211, ProviderGuid);
            }
        }
        public event Action<t_GfxClientMapBufferFailure> GfxClientMapBufferFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientMapBufferFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 202, ProviderGuid);
            }
        }
        public event Action<t_GfxClientUnmapBufferEntry> GfxClientMapBufferStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientMapBufferStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 200, ProviderGuid);
            }
        }
        public event Action<t_GfxClientUnmapBufferExit> GfxClientMapBufferStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientMapBufferStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 201, ProviderGuid);
            }
        }
        public event Action<t_GfxClientOpenGPUFailure> GfxClientOpenGPUFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientOpenGPUFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 190, ProviderGuid);
            }
        }
        public event Action<t_GfxClientOpenGPU> GfxClientOpenGPUStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientOpenGPUStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 188, ProviderGuid);
            }
        }
        public event Action<t_GfxClientOpenGPU> GfxClientOpenGPUStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientOpenGPUStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 189, ProviderGuid);
            }
        }
        public event Action<t_GfxClientPowerStateTransition> GfxClientPowerStateTransitionStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientPowerStateTransitionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 212, ProviderGuid);
            }
        }
        public event Action<t_GfxClientPowerStateTransition> GfxClientPowerStateTransitionStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientPowerStateTransitionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 213, ProviderGuid);
            }
        }
        public event Action<t_GfxClientQueryGPU> GfxClientQueryGPUStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientQueryGPUStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 186, ProviderGuid);
            }
        }
        public event Action<t_GfxClientQueryGPU> GfxClientQueryGPUStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientQueryGPUStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 187, ProviderGuid);
            }
        }
        public event Action<t_GfxClientTdrReset> GfxClientTdrResetStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientTdrResetStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 206, ProviderGuid);
            }
        }
        public event Action<t_GfxClientTdrReset> GfxClientTdrResetStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientTdrResetStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 207, ProviderGuid);
            }
        }
        public event Action<t_GfxClientTdrRestart> GfxClientTdrRestart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientTdrRestartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 208, ProviderGuid);
            }
        }
        public event Action<t_GfxClientTdrRestart> GfxClientTdrRestartStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientTdrRestartStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 209, ProviderGuid);
            }
        }
        public event Action<t_GfxClientUnmapBufferFailure> GfxClientUnmapBufferFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxClientUnmapBufferFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 205, ProviderGuid);
            }
        }
        public event Action<t_GfxClientUnmapBufferEntry> GfxClientUnmapBufferStart
        {
            add
            {
                source.RegisterEventTemplate(GfxClientUnmapBufferStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 203, ProviderGuid);
            }
        }
        public event Action<t_GfxClientUnmapBufferExit> GfxClientUnmapBufferStop
        {
            add
            {
                source.RegisterEventTemplate(GfxClientUnmapBufferStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 204, ProviderGuid);
            }
        }
        public event Action<t_GfxConfigHDCPForLPAudioInfo> GfxConfigHDCPForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxConfigHDCPForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 116, ProviderGuid);
            }
        }
        public event Action<t_GfxControlDisplayDevicePowerStateEntry> GfxControlDisplayDevicePowerStateStart
        {
            add
            {
                source.RegisterEventTemplate(GfxControlDisplayDevicePowerStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxControlDisplayDevicePowerStateStop
        {
            add
            {
                source.RegisterEventTemplate(GfxControlDisplayDevicePowerStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<t_GfxEnableDisableInterruptForLPAudioInfo> GfxDisableInterruptForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxDisableInterruptForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 122, ProviderGuid);
            }
        }
        public event Action<t_GfxEnableDisableInterruptForLPAudioInfo> GfxEnableInterruptForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxEnableInterruptForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> GfxFastSetModeFailed
        {
            add
            {
                source.RegisterEventTemplate(GfxFastSetModeFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 166, ProviderGuid);
            }
        }
        public event Action<t_GfxFastSetModeEntry> GfxFastSetModeStart
        {
            add
            {
                source.RegisterEventTemplate(GfxFastSetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 98, ProviderGuid);
            }
        }
        public event Action<t_GfxFastSetModeExit> GfxFastSetModeStop
        {
            add
            {
                source.RegisterEventTemplate(GfxFastSetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 100, ProviderGuid);
            }
        }
        public event Action<t_GfxGetConfigForLPAudioInfo> GfxGetConfigForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxGetConfigForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxGetHwConfigForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxGetHwConfigForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
            }
        }
        public event Action<t_GfxGuC2HostMessage> GfxGuc2HostInterrupt
        {
            add
            {
                source.RegisterEventTemplate(GfxGuc2HostInterruptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 665, ProviderGuid);
            }
        }
        public event Action<t_GfxIndicateChildStatusEntry> GfxIndicateChildStatusStart
        {
            add
            {
                source.RegisterEventTemplate(GfxIndicateChildStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxIndicateChildStatusStop
        {
            add
            {
                source.RegisterEventTemplate(GfxIndicateChildStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxInitSSTInterfaceForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxInitSSTInterfaceForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxInterfaceExitForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxInterfaceExitForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
            }
        }
        public event Action<t_GfxNotifyLPAudioEventInfo> GfxNotifyLPAudioEvent
        {
            add
            {
                source.RegisterEventTemplate(GfxNotifyLPAudioEventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 119, ProviderGuid);
            }
        }
        public event Action<t_GfxNotifyLPAudioHdcpNotificationStatusInfo> GfxNotifyLPAudioHdcpNotificationStatus
        {
            add
            {
                source.RegisterEventTemplate(GfxNotifyLPAudioHdcpNotificationStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 120, ProviderGuid);
            }
        }
        public event Action<t_GfxNotifyLPAudioISRInfo> GfxNotifyLPAudioISR
        {
            add
            {
                source.RegisterEventTemplate(GfxNotifyLPAudioISRTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 118, ProviderGuid);
            }
        }
        public event Action<t_GfxPageFaultInfo> GfxPageFault
        {
            add
            {
                source.RegisterEventTemplate(GfxPageFaultTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 670, ProviderGuid);
            }
        }
        public event Action<t_GfxPageFaultFeatureStatus> GfxPageFaultSupport
        {
            add
            {
                source.RegisterEventTemplate(GfxPageFaultSupportTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 669, ProviderGuid);
            }
        }
        public event Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> GfxReadDeviceSpaceForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxReadDeviceSpaceForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 113, ProviderGuid);
            }
        }
        public event Action<t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo> GfxReadModifyWriteDeviceSpaceForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxReadModifyWriteDeviceSpaceForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 115, ProviderGuid);
            }
        }
        public event Action<t_GfxSetConfigForLPAudioInfo> GfxSetConfigForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxSetConfigForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
            }
        }
        public event Action<t_GfxSetModeEntry> GfxSetModeStart
        {
            add
            {
                source.RegisterEventTemplate(GfxSetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> GfxSetModeStop
        {
            add
            {
                source.RegisterEventTemplate(GfxSetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
            }
        }
        public event Action<t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo> GfxSetSstToDxgkInterfaceStateForLPEAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxSetSstToDxgkInterfaceStateForLPEAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 117, ProviderGuid);
            }
        }
        public event Action<t_GenericTest> GfxTest4
        {
            add
            {
                source.RegisterEventTemplate(GfxTest4Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 167, ProviderGuid);
            }
        }
        public event Action<t_GenericTest> GfxTest5
        {
            add
            {
                source.RegisterEventTemplate(GfxTest5Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 168, ProviderGuid);
            }
        }
        public event Action<t_GenericUpdateAudioStateInfo> GfxUpdateCPReadyAudioState
        {
            add
            {
                source.RegisterEventTemplate(GfxUpdateCPReadyAudioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
            }
        }
        public event Action<t_GenericUpdateAudioStateInfo> GfxUpdateELDAudioState
        {
            add
            {
                source.RegisterEventTemplate(GfxUpdateELDAudioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
            }
        }
        public event Action<t_GenericUpdateAudioStateInfo> GfxUpdateELDAudioStateForLegacy
        {
            add
            {
                source.RegisterEventTemplate(GfxUpdateELDAudioStateForLegacyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
            }
        }
        public event Action<t_GenericUpdateAudioStateInfo> GfxUpdateIAAudioState
        {
            add
            {
                source.RegisterEventTemplate(GfxUpdateIAAudioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
            }
        }
        public event Action<t_GenericUpdateAudioStateInfo> GfxUpdatePDAudioState
        {
            add
            {
                source.RegisterEventTemplate(GfxUpdatePDAudioStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
            }
        }
        public event Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> GfxWriteDeviceSpaceForLPAudio
        {
            add
            {
                source.RegisterEventTemplate(GfxWriteDeviceSpaceForLPAudioTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
            }
        }
        public event Action<t_GmmBlockEntryValidationFailure> GMM_block_entry_validationFailed
        {
            add
            {
                source.RegisterEventTemplate(GMM_block_entry_validationFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 219, ProviderGuid);
            }
        }
        public event Action<t_GfxclientContextValidationFailure> Graphics_client_context_validationFailed
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_context_validationFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 218, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCallbackFailure> Graphics_client_makes_a_callback_to_graphics_driverFailed
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_makes_a_callback_to_graphics_driverFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 185, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCallbackEntry> Graphics_client_makes_a_callback_to_graphics_driverStart
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_makes_a_callback_to_graphics_driverStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 183, ProviderGuid);
            }
        }
        public event Action<t_GfxClientCallbackSuccess> Graphics_client_makes_a_callback_to_graphics_driverStop
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_makes_a_callback_to_graphics_driverStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 184, ProviderGuid);
            }
        }
        public event Action<t_GfxClientSubmissionDestroy> Graphics_client_submission_context_destroyStart
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_submission_context_destroyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 180, ProviderGuid);
            }
        }
        public event Action<t_GfxClientSubmissionDestroy> Graphics_client_submission_context_destroyStop
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_submission_context_destroyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 181, ProviderGuid);
            }
        }
        public event Action<t_GfxClientSubmissionInitFailure> Graphics_client_submission_context_initializationFailed
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_submission_context_initializationFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 179, ProviderGuid);
            }
        }
        public event Action<t_GfxClientSubmissionInit> Graphics_client_submission_context_initializationStart
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_submission_context_initializationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 177, ProviderGuid);
            }
        }
        public event Action<t_GfxClientSubmissionInit> Graphics_client_submission_context_initializationStop
        {
            add
            {
                source.RegisterEventTemplate(Graphics_client_submission_context_initializationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 178, ProviderGuid);
            }
        }
        public event Action<t_GTCControl> GTCControlPSR2
        {
            add
            {
                source.RegisterEventTemplate(GTCControlPSR2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 672, ProviderGuid);
            }
        }
        public event Action<t_HDCPEncryptionStatus> HDCP_EncryptionStatus
        {
            add
            {
                source.RegisterEventTemplate(HDCP_EncryptionStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 633, ProviderGuid);
            }
        }
        public event Action<t_HDCP2DebugMesage> HDCP2_DebugMessage
        {
            add
            {
                source.RegisterEventTemplate(HDCP2_DebugMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 627, ProviderGuid);
            }
        }
        public event Action<t_TargetID_Status> HDCP2KMD_Authenticate
        {
            add
            {
                source.RegisterEventTemplate(HDCP2KMD_AuthenticateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 631, ProviderGuid);
            }
        }
        public event Action<t_HDCP2Escape> HDCP2KMD_Escape
        {
            add
            {
                source.RegisterEventTemplate(HDCP2KMD_EscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 628, ProviderGuid);
            }
        }
        public event Action<t_HDCP2Datapacket> HDCP2KMD_QueueDataPacket
        {
            add
            {
                source.RegisterEventTemplate(HDCP2KMD_QueueDataPacketTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 629, ProviderGuid);
            }
        }
        public event Action<t_HDCP2SetStreamData> HDCP2KMD_SetStream
        {
            add
            {
                source.RegisterEventTemplate(HDCP2KMD_SetStreamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 632, ProviderGuid);
            }
        }
        public event Action<t_TargetID_Status> HDCP2KMD_SyncProcDone
        {
            add
            {
                source.RegisterEventTemplate(HDCP2KMD_SyncProcDoneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 630, ProviderGuid);
            }
        }
        public event Action<t_HDCP2AuthStepState> HDCP2UMD_AuthencationStepState
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_AuthencationStepStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 616, ProviderGuid);
            }
        }
        public event Action<t_TargetID_Status> HDCP2UMD_AuthenticateStart
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_AuthenticateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 621, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> HDCP2UMD_AuthenticateStop
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_AuthenticateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 622, ProviderGuid);
            }
        }
        public event Action<t_HDCP2AuthStatus> HDCP2UMD_AuthenticationStaus
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_AuthenticationStausTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 620, ProviderGuid);
            }
        }
        public event Action<t_HDCPUMD_DevInstance> HDCP2UMD_DeviceInstance
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_DeviceInstanceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 643, ProviderGuid);
            }
        }
        public event Action<t_HDCP2Error> HDCP2UMD_Error
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_ErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 617, ProviderGuid);
            }
        }
        public event Action<t_HDCP2Information> HDCP2UMD_Information
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_InformationTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 618, ProviderGuid);
            }
        }
        public event Action<t_HDCP2_MsgPacket> HDCP2UMD_MessagePacketRead
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_MessagePacketReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 614, ProviderGuid);
            }
        }
        public event Action<t_HDCP2_MsgPacket> HDCP2UMD_MessagePacketWrite
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_MessagePacketWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 615, ProviderGuid);
            }
        }
        public event Action<t_HDCPUMDProcKmdPacket> HDCP2UMD_ProcessKMDPacket
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_ProcessKMDPacketTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 642, ProviderGuid);
            }
        }
        public event Action<t_HDCP2RxStatusDP> HDCP2UMD_RxStatusDP
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_RxStatusDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 626, ProviderGuid);
            }
        }
        public event Action<t_HDCP2RxStatusHDMI> HDCP2UMD_RxStatusHDMI
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_RxStatusHDMITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 625, ProviderGuid);
            }
        }
        public event Action<t_HDCPUMD_KMDQueueHeader> HDCP2UMD_ServiceKMDEvent
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_ServiceKMDEventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 640, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> HDCP2UMD_ServiceKMDEventStart
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_ServiceKMDEventStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 639, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> HDCP2UMD_ServiceKMDEventStop
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_ServiceKMDEventStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 641, ProviderGuid);
            }
        }
        public event Action<t_HDCP2SetStreamData> HDCP2UMD_SetStreamTypeStart
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_SetStreamTypeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 623, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> HDCP2UMD_SetStreamTypeStop
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_SetStreamTypeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 624, ProviderGuid);
            }
        }
        public event Action<t_HDCP2Warning> HDCP2UMD_Warning
        {
            add
            {
                source.RegisterEventTemplate(HDCP2UMD_WarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 619, ProviderGuid);
            }
        }
        public event Action<t_HDRCaps_Info> HDRCaps
        {
            add
            {
                source.RegisterEventTemplate(HDRCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 700, ProviderGuid);
            }
        }
        public event Action<t_HDRCaps_CSL_Info> HDRCapsCSL_Info
        {
            add
            {
                source.RegisterEventTemplate(HDRCapsCSL_InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 701, ProviderGuid);
            }
        }
        public event Action<t_HECI_IO_MSG> HECI_IO_Message
        {
            add
            {
                source.RegisterEventTemplate(HECI_IO_MessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 661, ProviderGuid);
            }
        }
        public event Action<t_HPD_AND_SPI_Spi> HPD_AND_SPI
        {
            add
            {
                source.RegisterEventTemplate(HPD_AND_SPITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 678, ProviderGuid);
            }
        }
        public event Action<t_HPD_AND_SPI_Lpi> HPD_AND_SPILPI
        {
            add
            {
                source.RegisterEventTemplate(HPD_AND_SPILPITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 679, ProviderGuid);
            }
        }
        public event Action<t_I2CTransaction> I2CTransaction
        {
            add
            {
                source.RegisterEventTemplate(I2CTransactionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 681, ProviderGuid);
            }
        }
        public event Action<t_InterruptRepartition> Interrupt_event_task
        {
            add
            {
                source.RegisterEventTemplate(Interrupt_event_taskTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 668, ProviderGuid);
            }
        }
        public event Action<t_DxgkDdiInterruptRoutine> Interrupt_event_taskOpcode_for_interrupts
        {
            add
            {
                source.RegisterEventTemplate(Interrupt_event_taskOpcode_for_interruptsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 217, ProviderGuid);
            }
        }
        public event Action<t_InterruptRepartition> Interrupt_event_taskStart
        {
            add
            {
                source.RegisterEventTemplate(Interrupt_event_taskStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 666, ProviderGuid);
            }
        }
        public event Action<t_InterruptRepartition> Interrupt_event_taskStop
        {
            add
            {
                source.RegisterEventTemplate(Interrupt_event_taskStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 667, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_IsDisplayAttached_Entry> INTHDMIENCODER_IsDisplayAttachedStart
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_IsDisplayAttachedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 235, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_IsDisplayAttached_Exit> INTHDMIENCODER_IsDisplayAttachedStop
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_IsDisplayAttachedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 236, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_IsHotPlugSupported_Entry> INTHDMIENCODER_IsHotPlugSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_IsHotPlugSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 237, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_IsHotPlugSupported_Exit> INTHDMIENCODER_IsHotPlugSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_IsHotPlugSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 238, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_SendHDMIInfo_Entry> INTHDMIENCODER_SendHDMIInfoStart
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_SendHDMIInfoStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 243, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> INTHDMIENCODER_SendHDMIInfoStop
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_SendHDMIInfoStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 244, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry> INTHDMIENCODER_ServiceHotPlugInterruptStart
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_ServiceHotPlugInterruptStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 241, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit> INTHDMIENCODER_ServiceHotPlugInterruptStop
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_ServiceHotPlugInterruptStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 242, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_SetHotPlug_Entry> INTHDMIENCODER_SetHotPlugStart
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_SetHotPlugStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 239, ProviderGuid);
            }
        }
        public event Action<t_INTHDMIENCODER_SetHotPlug_Exit> INTHDMIENCODER_SetHotPlugStop
        {
            add
            {
                source.RegisterEventTemplate(INTHDMIENCODER_SetHotPlugStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 240, ProviderGuid);
            }
        }
        public event Action<t_IPC> IPC
        {
            add
            {
                source.RegisterEventTemplate(IPCTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 686, ProviderGuid);
            }
        }
        public event Action<t_IsAudioENabledInBIOS> IsAudioEnabledInBIOS
        {
            add
            {
                source.RegisterEventTemplate(IsAudioEnabledInBIOSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 655, ProviderGuid);
            }
        }
        public event Action<t_OverlayDBUFData> IsDBUFAllocatedForOverlay
        {
            add
            {
                source.RegisterEventTemplate(IsDBUFAllocatedForOverlayTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 714, ProviderGuid);
            }
        }
        public event Action<t_IsIntelAudioDriverPresent> IsIntelAudioDriverPresent
        {
            add
            {
                source.RegisterEventTemplate(IsIntelAudioDriverPresentTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 654, ProviderGuid);
            }
        }
        public event Action<t_LaceApplyIeData> LaceApplyIe
        {
            add
            {
                source.RegisterEventTemplate(LaceApplyIeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 752, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> LaceApplyIeStart
        {
            add
            {
                source.RegisterEventTemplate(LaceApplyIeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 751, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> LaceApplyIeStop
        {
            add
            {
                source.RegisterEventTemplate(LaceApplyIeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 785, ProviderGuid);
            }
        }
        public event Action<t_LaceClientEventHandlerData> LaceClientEventHandler
        {
            add
            {
                source.RegisterEventTemplate(LaceClientEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 755, ProviderGuid);
            }
        }
        public event Action<t_LaceDisableData> LaceDisable
        {
            add
            {
                source.RegisterEventTemplate(LaceDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 754, ProviderGuid);
            }
        }
        public event Action<t_LaceEnableData> LaceEnable
        {
            add
            {
                source.RegisterEventTemplate(LaceEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 753, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> LaceExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(LaceExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 780, ProviderGuid);
            }
        }
        public event Action<t_LaceHistogramData> LaceHistogramRead
        {
            add
            {
                source.RegisterEventTemplate(LaceHistogramReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 750, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> LaceHistogramReadStart
        {
            add
            {
                source.RegisterEventTemplate(LaceHistogramReadStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 749, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> LaceHistogramReadStop
        {
            add
            {
                source.RegisterEventTemplate(LaceHistogramReadStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 784, ProviderGuid);
            }
        }
        public event Action<t_LSPCON_AuxAccess> LSPCON_AuxAccess
        {
            add
            {
                source.RegisterEventTemplate(LSPCON_AuxAccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 662, ProviderGuid);
            }
        }
        public event Action<t_MapLHArgsToSBArgs_Entry> MapLHArgsToSBArgsStart
        {
            add
            {
                source.RegisterEventTemplate(MapLHArgsToSBArgsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 343, ProviderGuid);
            }
        }
        public event Action<t_MapLHArgsToSBArgs_Exit> MapLHArgsToSBArgsStop
        {
            add
            {
                source.RegisterEventTemplate(MapLHArgsToSBArgsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 344, ProviderGuid);
            }
        }
        public event Action<t_MarkerData> MarkerEvent
        {
            add
            {
                source.RegisterEventTemplate(MarkerEventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
            }
        }
        public event Action<t_DebugMessage> MiniportDebugMessage
        {
            add
            {
                source.RegisterEventTemplate(MiniportDebugMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 645, ProviderGuid);
            }
        }
        public event Action<t_MMIOAccessData> MMIORead
        {
            add
            {
                source.RegisterEventTemplate(MMIOReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 703, ProviderGuid);
            }
        }
        public event Action<t_MMIOAccessData> MMIOWrite
        {
            add
            {
                source.RegisterEventTemplate(MMIOWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 644, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_AddDisplayModes_Entry> MODESMANAGER_AddDisplayModesStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_AddDisplayModesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 259, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> MODESMANAGER_AddDisplayModesStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_AddDisplayModesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 260, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_AddVBTModes_Entry> MODESMANAGER_AddVBTModesStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_AddVBTModesStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 261, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> MODESMANAGER_AddVBTModesStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_AddVBTModesStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 262, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_GetLastSetModeData_Entry> MODESMANAGER_GetLastSetModeDataStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_GetLastSetModeDataStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 269, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_GetLastSetModeData_Exit> MODESMANAGER_GetLastSetModeDataStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_GetLastSetModeDataStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 270, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_GetModeSupport_Entry> MODESMANAGER_GetModeSupportStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_GetModeSupportStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 267, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_GetModeSupport_Exit> MODESMANAGER_GetModeSupportStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_GetModeSupportStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 268, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> MODESMANAGER_NotifyCommitEndStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_NotifyCommitEndStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 263, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_NotifyCommitEnd_Exit> MODESMANAGER_NotifyCommitEndStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_NotifyCommitEndStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 264, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_SetModePState_Entry> MODESMANAGER_SetModePStateStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_SetModePStateStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 265, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_SetModePState_Exit> MODESMANAGER_SetModePStateStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_SetModePStateStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 266, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_SetMode_Entry> MODESMANAGER_SetModeStart
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_SetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 271, ProviderGuid);
            }
        }
        public event Action<t_MODESMANAGER_SetMode_Exit> MODESMANAGER_SetModeStop
        {
            add
            {
                source.RegisterEventTemplate(MODESMANAGER_SetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 272, ProviderGuid);
            }
        }
        public event Action<t_NotifyGfxStatus> Notify_graphics_client_graphics_drivers_statusNotifications_from_graphics_driver_to_graphics_client_or_vice_versa
        {
            add
            {
                source.RegisterEventTemplate(Notify_graphics_client_graphics_drivers_statusNotifications_from_graphics_driver_to_graphics_client_or_vice_versaTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 182, ProviderGuid);
            }
        }
        public event Action<t_GfxClientNotifyStatusFailure> Notify_graphics_driver_graphics_clients_statusFailed
        {
            add
            {
                source.RegisterEventTemplate(Notify_graphics_driver_graphics_clients_statusFailedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 216, ProviderGuid);
            }
        }
        public event Action<t_GfxClientNotifyStatus> Notify_graphics_driver_graphics_clients_statusStart
        {
            add
            {
                source.RegisterEventTemplate(Notify_graphics_driver_graphics_clients_statusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 214, ProviderGuid);
            }
        }
        public event Action<t_GfxClientNotifyStatus> Notify_graphics_driver_graphics_clients_statusStop
        {
            add
            {
                source.RegisterEventTemplate(Notify_graphics_driver_graphics_clients_statusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 215, ProviderGuid);
            }
        }
        public event Action<t_GfxNotifyPCEntry> Notify_PowerConservationStart
        {
            add
            {
                source.RegisterEventTemplate(Notify_PowerConservationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> Notify_PowerConservationStop
        {
            add
            {
                source.RegisterEventTemplate(Notify_PowerConservationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<t_OPMConfigureProtectedOutput> OPM_ConfigureProtectedOutput
        {
            add
            {
                source.RegisterEventTemplate(OPM_ConfigureProtectedOutputTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 635, ProviderGuid);
            }
        }
        public event Action<t_OPMCreateProtectedOutput> OPM_CreateProtectedOutput
        {
            add
            {
                source.RegisterEventTemplate(OPM_CreateProtectedOutputTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 634, ProviderGuid);
            }
        }
        public event Action<t_OPMCreateProtectedOutput> OPM_DestroyProtectedOutput
        {
            add
            {
                source.RegisterEventTemplate(OPM_DestroyProtectedOutputTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 636, ProviderGuid);
            }
        }
        public event Action<t_TargetID_Status> OPMGetSetParametersLockAcquired
        {
            add
            {
                source.RegisterEventTemplate(OPMGetSetParametersLockAcquiredTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 659, ProviderGuid);
            }
        }
        public event Action<t_OPMGetSetParamData> OPMGetSetParametersStart
        {
            add
            {
                source.RegisterEventTemplate(OPMGetSetParametersStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 658, ProviderGuid);
            }
        }
        public event Action<t_OPMGetSetParamData> OPMGetSetParametersStop
        {
            add
            {
                source.RegisterEventTemplate(OPMGetSetParametersStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 660, ProviderGuid);
            }
        }
        public event Action<t_PathSetModeEntry> PathSetModeStart
        {
            add
            {
                source.RegisterEventTemplate(PathSetModeStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> PathSetModeStop
        {
            add
            {
                source.RegisterEventTemplate(PathSetModeStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 54, ProviderGuid);
            }
        }
        public event Action<t_PathSetScanLine> PathSetScanLineStart
        {
            add
            {
                source.RegisterEventTemplate(PathSetScanLineStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> PathSetScanLineStop
        {
            add
            {
                source.RegisterEventTemplate(PathSetScanLineStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, ProviderGuid);
            }
        }
        public event Action<t_PathSetVisibilityEntry> PathSetVisibilityStart
        {
            add
            {
                source.RegisterEventTemplate(PathSetVisibilityStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> PathSetVisibilityStop
        {
            add
            {
                source.RegisterEventTemplate(PathSetVisibilityStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 55, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> PAVP_AutoTearDown
        {
            add
            {
                source.RegisterEventTemplate(PAVP_AutoTearDownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 704, ProviderGuid);
            }
        }
        public event Action<t_PavpInfo> PavpInfo
        {
            add
            {
                source.RegisterEventTemplate(PavpInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 716, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> PcEventNotificationProcessing
        {
            add
            {
                source.RegisterEventTemplate(PcEventNotificationProcessingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 718, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> PcEventNotificationReceived
        {
            add
            {
                source.RegisterEventTemplate(PcEventNotificationReceivedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 717, ProviderGuid);
            }
        }
        public event Action<t_PcGfxRegValueBinary> PcGfxRegValueBinaryRead
        {
            add
            {
                source.RegisterEventTemplate(PcGfxRegValueBinaryReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 824, ProviderGuid);
            }
        }
        public event Action<t_PcGfxRegValueBinary> PcGfxRegValueBinaryWrite
        {
            add
            {
                source.RegisterEventTemplate(PcGfxRegValueBinaryWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 825, ProviderGuid);
            }
        }
        public event Action<t_PcGfxRegValueDword> PcGfxRegValueDwordRead
        {
            add
            {
                source.RegisterEventTemplate(PcGfxRegValueDwordReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 822, ProviderGuid);
            }
        }
        public event Action<t_PcGfxRegValueDword> PcGfxRegValueDwordWrite
        {
            add
            {
                source.RegisterEventTemplate(PcGfxRegValueDwordWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 823, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> PcMediaWorkloadDetection
        {
            add
            {
                source.RegisterEventTemplate(PcMediaWorkloadDetectionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 756, ProviderGuid);
            }
        }
        public event Action<t_PcPowerPlanRegValue> PcPowerPlanRegValueRead
        {
            add
            {
                source.RegisterEventTemplate(PcPowerPlanRegValueReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 828, ProviderGuid);
            }
        }
        public event Action<t_PcRegValueFullPathDword> PcRegValueFullPathDwordRead
        {
            add
            {
                source.RegisterEventTemplate(PcRegValueFullPathDwordReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 826, ProviderGuid);
            }
        }
        public event Action<t_PcRegValueFullPathDword> PcRegValueFullPathDwordWrite
        {
            add
            {
                source.RegisterEventTemplate(PcRegValueFullPathDwordWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 827, ProviderGuid);
            }
        }
        public event Action<t_PcVbiState> PcVbiState
        {
            add
            {
                source.RegisterEventTemplate(PcVbiStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 757, ProviderGuid);
            }
        }
        public event Action<t_PFMBOpRegHandlerData> PFMBOpRegHandler
        {
            add
            {
                source.RegisterEventTemplate(PFMBOpRegHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 726, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorApplyStart
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 788, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorApplyStop
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorApplyStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 789, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> PhaseCoordinatorCancelTimer
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorCancelTimerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 791, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorInitialize
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 786, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorProgramAdjust> PhaseCoordinatorProgramAdjustStart
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorProgramAdjustStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 792, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorProgramAdjustStop
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorProgramAdjustStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 793, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorResetAdjust
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorResetAdjustTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 794, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorSetupDpstPhasing> PhaseCoordinatorSetupDpstPhasing
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorSetupDpstPhasingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 796, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorStartTimer> PhaseCoordinatorStartTimer
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorStartTimerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 790, ProviderGuid);
            }
        }
        public event Action<t_PhaseCoordinatorContext> PhaseCoordinatorTimerCallback
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorTimerCallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 787, ProviderGuid);
            }
        }
        public event Action<t_PcTimePoint> PhaseCoordinatorWorkItemCallback
        {
            add
            {
                source.RegisterEventTemplate(PhaseCoordinatorWorkItemCallbackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 795, ProviderGuid);
            }
        }
        public event Action<t_PipeUnderRun_BasicInfo> PipeUnderRun
        {
            add
            {
                source.RegisterEventTemplate(PipeUnderRunTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 690, ProviderGuid);
            }
        }
        public event Action<t_PipeUnderRun_MemoryInfo> PipeUnderRunMemoryInfo
        {
            add
            {
                source.RegisterEventTemplate(PipeUnderRunMemoryInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 691, ProviderGuid);
            }
        }
        public event Action<t_PipeUnderRun_PipeScaler> PipeUnderRunPipeScaler
        {
            add
            {
                source.RegisterEventTemplate(PipeUnderRunPipeScalerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 694, ProviderGuid);
            }
        }
        public event Action<t_PipeUnderRun_Plane> PipeUnderRunPlane
        {
            add
            {
                source.RegisterEventTemplate(PipeUnderRunPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 692, ProviderGuid);
            }
        }
        public event Action<t_PipeUnderRun_Plane_WM> PipeUnderRunPlane_WM
        {
            add
            {
                source.RegisterEventTemplate(PipeUnderRunPlane_WMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 693, ProviderGuid);
            }
        }
        public event Action<t_DisplayDoubleBuffSync> PlaneProgrammingDisplayDBSToggle
        {
            add
            {
                source.RegisterEventTemplate(PlaneProgrammingDisplayDBSToggleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 711, ProviderGuid);
            }
        }
        public event Action<t_DisplayPlaneArming> PlaneProgrammingDisplayPlaneWrite
        {
            add
            {
                source.RegisterEventTemplate(PlaneProgrammingDisplayPlaneWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 709, ProviderGuid);
            }
        }
        public event Action<t_DisplayScalerArming> PlaneProgrammingDisplayScalerArming
        {
            add
            {
                source.RegisterEventTemplate(PlaneProgrammingDisplayScalerArmingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 710, ProviderGuid);
            }
        }
        public event Action<t_PoshEvent_Info> PoshEvent
        {
            add
            {
                source.RegisterEventTemplate(PoshEventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 821, ProviderGuid);
            }
        }
        public event Action<t_ProgramDBuf> ProgramDBufGen9
        {
            add
            {
                source.RegisterEventTemplate(ProgramDBufGen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 685, ProviderGuid);
            }
        }
        public event Action<t_ProgramWaterMark> ProgramWaterMarkGen9
        {
            add
            {
                source.RegisterEventTemplate(ProgramWaterMarkGen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 684, ProviderGuid);
            }
        }
        public event Action<t_PSR_Features_MBO> PSR_FeaturesMBO
        {
            add
            {
                source.RegisterEventTemplate(PSR_FeaturesMBOTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 675, ProviderGuid);
            }
        }
        public event Action<t_PSR_Features_PSR1> PSR_FeaturesPSR1
        {
            add
            {
                source.RegisterEventTemplate(PSR_FeaturesPSR1Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 673, ProviderGuid);
            }
        }
        public event Action<t_PSR_Features_PSR2> PSR_FeaturesPSR2
        {
            add
            {
                source.RegisterEventTemplate(PSR_FeaturesPSR2Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 674, ProviderGuid);
            }
        }
        public event Action<t_PsrCapability> PsrCapability
        {
            add
            {
                source.RegisterEventTemplate(PsrCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 671, ProviderGuid);
            }
        }
        public event Action<t_PsrClientEventHandler> PsrClientEventHandler
        {
            add
            {
                source.RegisterEventTemplate(PsrClientEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 774, ProviderGuid);
            }
        }
        public event Action<t_PsrParams> PsrEnter
        {
            add
            {
                source.RegisterEventTemplate(PsrEnterTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 769, ProviderGuid);
            }
        }
        public event Action<t_PsrParams> PsrExit
        {
            add
            {
                source.RegisterEventTemplate(PsrExitTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 770, ProviderGuid);
            }
        }
        public event Action<t_PcEventNotificationData> PsrExternalEventHandler
        {
            add
            {
                source.RegisterEventTemplate(PsrExternalEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 781, ProviderGuid);
            }
        }
        public event Action<t_PsrParams> PsrSendSfu
        {
            add
            {
                source.RegisterEventTemplate(PsrSendSfuTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 771, ProviderGuid);
            }
        }
        public event Action<t_PsrParams> PsrSetMediaPlaybackState
        {
            add
            {
                source.RegisterEventTemplate(PsrSetMediaPlaybackStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 772, ProviderGuid);
            }
        }
        public event Action<t_PsrParams> PsrSetSfuMode
        {
            add
            {
                source.RegisterEventTemplate(PsrSetSfuModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 773, ProviderGuid);
            }
        }
        public event Action<t_PcVbtInfo> PwrConsEnableDisablePCFeaturesFromVBT
        {
            add
            {
                source.RegisterEventTemplate(PwrConsEnableDisablePCFeaturesFromVBTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 798, ProviderGuid);
            }
        }
        public event Action<t_PwrConsEscapeData> PwrConsEscape
        {
            add
            {
                source.RegisterEventTemplate(PwrConsEscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 719, ProviderGuid);
            }
        }
        public event Action<t_PwrConsLfpCapabilities> PwrConsGetLfpCapabilities
        {
            add
            {
                source.RegisterEventTemplate(PwrConsGetLfpCapabilitiesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 797, ProviderGuid);
            }
        }
        public event Action<t_PcVbtInfo> PwrConsGetUserBootInfo
        {
            add
            {
                source.RegisterEventTemplate(PwrConsGetUserBootInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 799, ProviderGuid);
            }
        }
        public event Action<t_FbcRegData> PwrConsInitFbcCpuTracking
        {
            add
            {
                source.RegisterEventTemplate(PwrConsInitFbcCpuTrackingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 800, ProviderGuid);
            }
        }
        public event Action<t_PwrConsLoadPolicyTable> PwrConsLoadPolicyTable
        {
            add
            {
                source.RegisterEventTemplate(PwrConsLoadPolicyTableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 782, ProviderGuid);
            }
        }
        public event Action<t_PwrConsUpdateMamData> PwrConsUpdateMamData
        {
            add
            {
                source.RegisterEventTemplate(PwrConsUpdateMamDataTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 820, ProviderGuid);
            }
        }
        public event Action<t_PwrConsUserPolicyData> PwrConsUserPolicy
        {
            add
            {
                source.RegisterEventTemplate(PwrConsUserPolicyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 720, ProviderGuid);
            }
        }
        public event Action<t_PresentID> ReportPresentIDFlipDone
        {
            add
            {
                source.RegisterEventTemplate(ReportPresentIDFlipDoneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 836, ProviderGuid);
            }
        }
        public event Action<t_PresentID> ReportPresentIDVBI
        {
            add
            {
                source.RegisterEventTemplate(ReportPresentIDVBITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 837, ProviderGuid);
            }
        }
        public event Action<t_RTD3_DCState> RTD3_TaskRTD3_DCState_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(RTD3_TaskRTD3_DCState_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 172, ProviderGuid);
            }
        }
        public event Action<t_RTD3> RTD3_TaskRTD3_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(RTD3_TaskRTD3_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 171, ProviderGuid);
            }
        }
        public event Action<t_SetDCState> SetDCState
        {
            add
            {
                source.RegisterEventTemplate(SetDCStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 688, ProviderGuid);
            }
        }
        public event Action<t_SetDisplayStart> SetDisplayStart
        {
            add
            {
                source.RegisterEventTemplate(SetDisplayStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 695, ProviderGuid);
            }
        }
        public event Action<t_SetHDRMetaData> SetHDRMetaData
        {
            add
            {
                source.RegisterEventTemplate(SetHDRMetaDataTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 702, ProviderGuid);
            }
        }
        public event Action<t_SetMode_EnablePort> SetModeEnablePort
        {
            add
            {
                source.RegisterEventTemplate(SetModeEnablePortTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 697, ProviderGuid);
            }
        }
        public event Action<t_SetMode_PostDisplayDisable> SetModePostDisplayDisable
        {
            add
            {
                source.RegisterEventTemplate(SetModePostDisplayDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 696, ProviderGuid);
            }
        }
        public event Action<t_GfxValStubDivaUlt> Task_pertaining_to_Events_generated_for_DIVA_ULT_from_Gfx_Val_Stub
        {
            add
            {
                source.RegisterEventTemplate(TaskpertainingtoEventsgeneratedforDIVAULTfromGfxValStubTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 838, ProviderGuid);
            }
        }
        public event Action<t_GfxPinning> This_is_task_associated_with_Gfx_PinningPinning_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinning_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 173, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningCBInfo> This_is_task_associated_with_Gfx_PinningPinningCB_Info
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningCB_InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 222, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningArgs> This_is_task_associated_with_Gfx_PinningPinningInterface_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningInterface_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 174, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningRequestInfo> This_is_task_associated_with_Gfx_PinningPinningRequest_Info
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningRequest_InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 221, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningResInfo> This_is_task_associated_with_Gfx_PinningPinningResMgr_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningResMgr_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 176, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningSchedulerInfo> This_is_task_associated_with_Gfx_PinningPinningScheduler_EventInfo
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningScheduler_EventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 175, ProviderGuid);
            }
        }
        public event Action<t_GfxPinningStatusInfo> This_is_task_associated_with_Gfx_PinningPinningStatus_Info
        {
            add
            {
                source.RegisterEventTemplate(This_is_task_associated_with_Gfx_PinningPinningStatus_InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 220, ProviderGuid);
            }
        }
        public event Action<t_GfxEngineReset> This_task_is_associated_with_Engine_Reset_and_Media_Reset
        {
            add
            {
                source.RegisterEventTemplate(This_task_is_associated_with_Engine_Reset_and_Media_ResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 613, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> VBIsPipe_A
        {
            add
            {
                source.RegisterEventTemplate(VBIsPipe_ATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 93, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> VBIsPipe_B
        {
            add
            {
                source.RegisterEventTemplate(VBIsPipe_BTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 94, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> VBIsPipe_C
        {
            add
            {
                source.RegisterEventTemplate(VBIsPipe_CTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 95, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> VBIsPipe_WiDi
        {
            add
            {
                source.RegisterEventTemplate(VBIsPipe_WiDiTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 96, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_EDPFillSimilarPnPId_Entry> VBTMANAGER_EDPFillSimilarPnPIdStart
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_EDPFillSimilarPnPIdStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 317, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_EDPFillSimilarPnPId_Exit> VBTMANAGER_EDPFillSimilarPnPIdStop
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_EDPFillSimilarPnPIdStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 318, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_FillSimilarPnPId_Entry> VBTMANAGER_FillSimilarPnPIdStart
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_FillSimilarPnPIdStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 319, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_FillSimilarPnPId_Exit> VBTMANAGER_FillSimilarPnPIdStop
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_FillSimilarPnPIdStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 320, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_GetBIOSDataBlockByID_Entry> VBTMANAGER_GetBIOSDataBlockByID
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_GetBIOSDataBlockByIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 321, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> VBTMANAGER_GetBIOSDataBlockByIDStop
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_GetBIOSDataBlockByIDStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 322, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_GetPSRDetails_Entry> VBTMANAGER_GetPSRDetailsStart
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_GetPSRDetailsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 313, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_GetPSRDetails_Exit> VBTMANAGER_GetPSRDetailsStop
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_GetPSRDetailsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 314, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_IsDisplayTypeSupported_Entry> VBTMANAGER_IsDisplayTypeSupportedStart
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_IsDisplayTypeSupportedStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 315, ProviderGuid);
            }
        }
        public event Action<t_VBTMANAGER_IsDisplayTypeSupported_Exit> VBTMANAGER_IsDisplayTypeSupportedStop
        {
            add
            {
                source.RegisterEventTemplate(VBTMANAGER_IsDisplayTypeSupportedStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 316, ProviderGuid);
            }
        }
        public event Action<t_WaterMarkInitialize> WaterMarkInitializeGen9
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkInitializeGen9Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 682, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WiDi_PAVP_SessionEstablished
        {
            add
            {
                source.RegisterEventTemplate(WiDi_PAVP_SessionEstablishedTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 647, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WiDi_PAVP_SessionTearDown
        {
            add
            {
                source.RegisterEventTemplate(WiDi_PAVP_SessionTearDownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 646, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WiDi_PAVP_SessionTerminate
        {
            add
            {
                source.RegisterEventTemplate(WiDi_PAVP_SessionTerminateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 648, ProviderGuid);
            }
        }
        public event Action<t_WiDiOpenLoop> WiDiOpenLoopStatus
        {
            add
            {
                source.RegisterEventTemplate(WiDiOpenLoopStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 170, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WiDiPAVPAutoTearDown
        {
            add
            {
                source.RegisterEventTemplate(WiDiPAVPAutoTearDownTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 169, ProviderGuid);
            }
        }
        public event Action<t_IGD_ALLOC_CHANNEL_BW_ARGS> WIGIG_AllocateChannelBWStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_AllocateChannelBWStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 148, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_AllocateChannelBWStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_AllocateChannelBWStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 149, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WIGIG_CreateWGBoxBufferStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_CreateWGBoxBufferStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
            }
        }
        public event Action<t_GMM_EncodeState> WIGIG_CreateWGBoxBufferWiGig_encode_state_buffer
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_CreateWGBoxBufferWiGig_encode_state_bufferTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
            }
        }
        public event Action<t_GMM_EncodeDisRefSurface> WIGIG_CreateWGBoxBufferWiGig_EncodeDisplaySurface
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_CreateWGBoxBufferWiGig_EncodeDisplaySurfaceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
            }
        }
        public event Action<t_GMM_EncodeDisRefSurface> WIGIG_CreateWGBoxBufferWiGig_EncodeReferenceSurface
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_CreateWGBoxBufferWiGig_EncodeReferenceSurfaceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 157, ProviderGuid);
            }
        }
        public event Action<t_GMM_EncodeTfdSurface> WIGIG_CreateWGBoxBufferWiGig_EncodeTfdSurface
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_CreateWGBoxBufferWiGig_EncodeTfdSurfaceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 164, ProviderGuid);
            }
        }
        public event Action<t_CriticalDDIFail> WiGig_Failure
        {
            add
            {
                source.RegisterEventTemplate(WiGig_FailureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 163, ProviderGuid);
            }
        }
        public event Action<t_GMMResFree> WIGIG_GmmResFree
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_GmmResFreeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 165, ProviderGuid);
            }
        }
        public event Action<t_WIGIG_IGDCallBackFunctionInfo> WIGIG_IGDCallBackFunctionStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCallBackFunctionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 130, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WIGIG_IGDCallBackFunctionStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCallBackFunctionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 131, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WIGIG_IGDCB_GetRefClkCounterStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_GetRefClkCounterStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 136, ProviderGuid);
            }
        }
        public event Action<t_WNIC_CLK_REF_COUNTER_ARGS> WIGIG_IGDCB_GetRefClkCounterStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_GetRefClkCounterStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 137, ProviderGuid);
            }
        }
        public event Action<t_WIGIG_PASSTHROUGH_DATA> WIGIG_IGDCB_NotifyIGDAsPassThroughStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyIGDAsPassThroughStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 132, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_IGDCB_NotifyIGDAsPassThroughStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyIGDAsPassThroughStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 133, ProviderGuid);
            }
        }
        public event Action<t_WNIC_RECEIVER_CONNECTIVITY_ARGS> WIGIG_IGDCB_NotifyReceiverStatusStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyReceiverStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 140, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_IGDCB_NotifyReceiverStatusStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyReceiverStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 141, ProviderGuid);
            }
        }
        public event Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 134, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 135, ProviderGuid);
            }
        }
        public event Action<t_WNIC_IGD_STATUS_ARGS> WIGIG_IGDCB_NotifyWNICStatusStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyWNICStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 138, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_IGDCB_NotifyWNICStatusStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_IGDCB_NotifyWNICStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 139, ProviderGuid);
            }
        }
        public event Action<t_WGBOX1_CAPTURE_COMPLETE> WIGIG_INTERRUPTWIGIG_CAPTURE_COMPLETE
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_INTERRUPTWIGIG_CAPTURE_COMPLETETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 650, ProviderGuid);
            }
        }
        public event Action<t_WGBOX1_END_OF_FRAME_INTERRUPT> WIGIG_INTERRUPTWIGIG_END_OF_FRAME
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_INTERRUPTWIGIG_END_OF_FRAMETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 649, ProviderGuid);
            }
        }
        public event Action<t_WGBOX1_LATE_RUN> WIGIG_INTERRUPTWIGIG_LATE_RUN_STATUS
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_INTERRUPTWIGIG_LATE_RUN_STATUSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 651, ProviderGuid);
            }
        }
        public event Action<t_WNIC_IGD_STATUS_ARGS> WIGIG_NotifyIGDStatusStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyIGDStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_NotifyIGDStatusStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyIGDStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
            }
        }
        public event Action<t_WIGIG_PASSTHROUGH_DATA> WIGIG_NotifySinkAsPassThroughStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifySinkAsPassThroughStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 142, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_NotifySinkAsPassThroughStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifySinkAsPassThroughStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 143, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_NotifyTerminateSession
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTerminateSessionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
            }
        }
        public event Action<t_IGD_TERMINATE_ARGS> WIGIG_NotifyTerminateSessionStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTerminateSessionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 150, ProviderGuid);
            }
        }
        public event Action<t_IGD_NOTIFY_TFD_PTR_ARGS> WIGIG_NotifyTFDAllocationStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTFDAllocationStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 146, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_NotifyTFDAllocationStop
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTFDAllocationStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 147, ProviderGuid);
            }
        }
        public event Action<t_WiGIGRetStatus> WIGIG_NotifyTFDTailPointerStatus
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTFDTailPointerStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 145, ProviderGuid);
            }
        }
        public event Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> WIGIG_NotifyTFDTailPointerStatusStart
        {
            add
            {
                source.RegisterEventTemplate(WIGIG_NotifyTFDTailPointerStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 144, ProviderGuid);
            }
        }
        public event Action<t_WiGigEventData> WiGigEventObjectHandlerClear_the_event
        {
            add
            {
                source.RegisterEventTemplate(WiGigEventObjectHandlerClear_the_eventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 159, ProviderGuid);
            }
        }
        public event Action<t_WiGigEventData> WiGigEventObjectHandlerEnd_of_the_wait_for_event
        {
            add
            {
                source.RegisterEventTemplate(WiGigEventObjectHandlerEnd_of_the_wait_for_eventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 162, ProviderGuid);
            }
        }
        public event Action<t_WiGigEventData> WiGigEventObjectHandlerRead_the_event
        {
            add
            {
                source.RegisterEventTemplate(WiGigEventObjectHandlerRead_the_eventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 160, ProviderGuid);
            }
        }
        public event Action<t_WiGigEventData> WiGigEventObjectHandlerSet_the_Event
        {
            add
            {
                source.RegisterEventTemplate(WiGigEventObjectHandlerSet_the_EventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 158, ProviderGuid);
            }
        }
        public event Action<t_WiGigEventData> WiGigEventObjectHandlerStarting_of_the_wait_for_event
        {
            add
            {
                source.RegisterEventTemplate(WiGigEventObjectHandlerStarting_of_the_wait_for_eventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 161, ProviderGuid);
            }
        }
        public event Action<t_RegDeRegCallBackEntry> WiGigRegDeRegCallBackStart
        {
            add
            {
                source.RegisterEventTemplate(WiGigRegDeRegCallBackStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 128, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> WiGigRegDeRegCallBackStop
        {
            add
            {
                source.RegisterEventTemplate(WiGigRegDeRegCallBackStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 129, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private t_AlsOpRegHandlerData AlsOpRegHandlerTemplate(Action<t_AlsOpRegHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_AlsOpRegHandlerData(action, 724, 390, "AlsOpRegHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_AudioProtocol_SetAudioData AudioProtocol_SetAudioDataTemplate(Action<t_AudioProtocol_SetAudioData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_AudioProtocol_SetAudioData(action, 656, 344, "AudioProtocol_SetAudioData", Guid.Empty, 52, "SetAudioData", ProviderGuid, ProviderName );
        }
        static private t_WriteAudioEELDData AudioProtocol_SetAudioDataEELDDataTemplate(Action<t_WriteAudioEELDData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WriteAudioEELDData(action, 657, 344, "AudioProtocol_SetAudioData", Guid.Empty, 51, "EELDData", ProviderGuid, ProviderName );
        }
        static private t_AUXTransaction AUXTransactionTemplate(Action<t_AUXTransaction> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_AUXTransaction(action, 680, 360, "AUXTransaction", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BackLightControl BackLightControlBacklightTemplate(Action<t_BackLightControl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BackLightControl(action, 705, 358, "BackLightControl", Guid.Empty, 71, "Backlight", ProviderGuid, ProviderName );
        }
        static private t_BackLightControl BackLightControlPanelPowerTemplate(Action<t_BackLightControl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BackLightControl(action, 677, 358, "BackLightControl", Guid.Empty, 59, "PanelPower", ProviderGuid, ProviderName );
        }
        static private t_BackLightControl BackLightControlPWMTemplate(Action<t_BackLightControl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BackLightControl(action, 676, 358, "BackLightControl", Guid.Empty, 58, "PWM", ProviderGuid, ProviderName );
        }
        static private t_BackLightControl BackLightControlVDDTemplate(Action<t_BackLightControl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BackLightControl(action, 706, 358, "BackLightControl", Guid.Empty, 72, "VDD", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStartTemplate(Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry(action, 291, 152, "BASEDISPLAY_CreateFakeEDIDFromVBTTimings", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStopTemplate(Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit(action, 292, 152, "BASEDISPLAY_CreateFakeEDIDFromVBTTimings", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData BASEDISPLAY_GetMonitorNameStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 289, 151, "BASEDISPLAY_GetMonitorName", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_GetMonitorName_Exit BASEDISPLAY_GetMonitorNameStopTemplate(Action<t_BASEDISPLAY_GetMonitorName_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_GetMonitorName_Exit(action, 290, 151, "BASEDISPLAY_GetMonitorName", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_IsPreferredTiming_Entry BASEDISPLAY_IsPreferredTimingStartTemplate(Action<t_BASEDISPLAY_IsPreferredTiming_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_IsPreferredTiming_Entry(action, 285, 149, "BASEDISPLAY_IsPreferredTiming", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_IsPreferredTiming_Exit BASEDISPLAY_IsPreferredTimingStopTemplate(Action<t_BASEDISPLAY_IsPreferredTiming_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_IsPreferredTiming_Exit(action, 286, 149, "BASEDISPLAY_IsPreferredTiming", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_RetrieveEDIDBlock_Entry BASEDISPLAY_RetrieveEDIDBlockStartTemplate(Action<t_BASEDISPLAY_RetrieveEDIDBlock_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_RetrieveEDIDBlock_Entry(action, 283, 148, "BASEDISPLAY_RetrieveEDIDBlock", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_RetrieveEDIDBlock_Exit BASEDISPLAY_RetrieveEDIDBlockStopTemplate(Action<t_BASEDISPLAY_RetrieveEDIDBlock_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_RetrieveEDIDBlock_Exit(action, 284, 148, "BASEDISPLAY_RetrieveEDIDBlock", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_UpdateEDID_Entry BASEDISPLAY_UpdateEDIDStartTemplate(Action<t_BASEDISPLAY_UpdateEDID_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_UpdateEDID_Entry(action, 287, 150, "BASEDISPLAY_UpdateEDID", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEDISPLAY_UpdateEDID_Exit BASEDISPLAY_UpdateEDIDStopTemplate(Action<t_BASEDISPLAY_UpdateEDID_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEDISPLAY_UpdateEDID_Exit(action, 288, 150, "BASEDISPLAY_UpdateEDID", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_GetDisplayIDs_Entry BASEENCODER_GetDisplayIDsStartTemplate(Action<t_BASEENCODER_GetDisplayIDs_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_GetDisplayIDs_Entry(action, 273, 143, "BASEENCODER_GetDisplayIDs", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_GetDisplayIDs_Exit BASEENCODER_GetDisplayIDsStopTemplate(Action<t_BASEENCODER_GetDisplayIDs_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_GetDisplayIDs_Exit(action, 274, 143, "BASEENCODER_GetDisplayIDs", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_GetDisplayInfo_Entry BASEENCODER_GetDisplayInfoStartTemplate(Action<t_BASEENCODER_GetDisplayInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_GetDisplayInfo_Entry(action, 275, 144, "BASEENCODER_GetDisplayInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData BASEENCODER_GetDisplayInfoStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 276, 144, "BASEENCODER_GetDisplayInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry BASEENCODER_IsActiveDetectionRequiredWithDelayStartTemplate(Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry(action, 279, 146, "BASEENCODER_IsActiveDetectionRequiredWithDelay", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit BASEENCODER_IsActiveDetectionRequiredWithDelayStopTemplate(Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit(action, 280, 146, "BASEENCODER_IsActiveDetectionRequiredWithDelay", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_IsDisplayInFutureConfig_Entry BASEENCODER_IsDisplayInFutureConfigStartTemplate(Action<t_BASEENCODER_IsDisplayInFutureConfig_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_IsDisplayInFutureConfig_Entry(action, 281, 147, "BASEENCODER_IsDisplayInFutureConfig", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_IsDisplayInFutureConfig_Exit BASEENCODER_IsDisplayInFutureConfigStopTemplate(Action<t_BASEENCODER_IsDisplayInFutureConfig_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_IsDisplayInFutureConfig_Exit(action, 282, 147, "BASEENCODER_IsDisplayInFutureConfig", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_WGGetSetCSC_Entry BASEENCODER_WGGetSetCSCStartTemplate(Action<t_BASEENCODER_WGGetSetCSC_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_WGGetSetCSC_Entry(action, 277, 145, "BASEENCODER_WGGetSetCSC", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_BASEENCODER_WGGetSetCSC_Exit BASEENCODER_WGGetSetCSCStopTemplate(Action<t_BASEENCODER_WGGetSetCSC_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BASEENCODER_WGGetSetCSC_Exit(action, 278, 145, "BASEENCODER_WGGetSetCSC", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BlcClientEventHandlerData BlcClientEventHandlerTemplate(Action<t_BlcClientEventHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcClientEventHandlerData(action, 728, 394, "BlcClientEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcComputeNewPercentageData BlcComputeNewPercentageTemplate(Action<t_BlcComputeNewPercentageData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcComputeNewPercentageData(action, 727, 393, "BlcComputeNewPercentage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint BlcInitHardwareStartTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 804, 464, "BlcInitHardware", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint BlcInitHardwareStopTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 805, 464, "BlcInitHardware", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_BlcInitialize BlcInitializeTemplate(Action<t_BlcInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcInitialize(action, 801, 461, "BlcInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcMapUserSettingData BlcMapUserSettingTemplate(Action<t_BlcMapUserSettingData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcMapUserSettingData(action, 806, 465, "BlcMapUserSetting", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcOpRegHandlerData BlcOpRegHandlerTemplate(Action<t_BlcOpRegHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcOpRegHandlerData(action, 725, 391, "BlcOpRegHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcPwmActivate_GEN7_5_Data BlcPwmActivate_GEN7_5Template(Action<t_BlcPwmActivate_GEN7_5_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcPwmActivate_GEN7_5_Data(action, 734, 401, "BlcPwmActivate_GEN7_5", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcPwmActivate_Gen9lp_Data BlcPwmActivate_Gen9lpTemplate(Action<t_BlcPwmActivate_Gen9lp_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcPwmActivate_Gen9lp_Data(action, 735, 402, "BlcPwmActivate_Gen9lp", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcPwmApply_GEN7_5_Data BlcPwmApply_GEN7_5Template(Action<t_BlcPwmApply_GEN7_5_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcPwmApply_GEN7_5_Data(action, 736, 403, "BlcPwmApply_GEN7_5", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcPwmApply_Gen9lp_Data BlcPwmApply_Gen9lpTemplate(Action<t_BlcPwmApply_Gen9lp_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcPwmApply_Gen9lp_Data(action, 737, 404, "BlcPwmApply_Gen9lp", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcReferenceClockUpdateData BlcReferenceClockUpdateTemplate(Action<t_BlcReferenceClockUpdateData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcReferenceClockUpdateData(action, 729, 396, "BlcReferenceClockUpdate", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcSetAdtAmbientLightLevelData BlcSetAdtAmbientLightLevelTemplate(Action<t_BlcSetAdtAmbientLightLevelData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcSetAdtAmbientLightLevelData(action, 731, 398, "BlcSetAdtAmbientLightLevel", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcSetAdtBrightnessLevelData BlcSetAdtBrightnessLevelTemplate(Action<t_BlcSetAdtBrightnessLevelData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcSetAdtBrightnessLevelData(action, 732, 399, "BlcSetAdtBrightnessLevel", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcSetAdtStateData BlcSetAdtStateTemplate(Action<t_BlcSetAdtStateData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcSetAdtStateData(action, 730, 397, "BlcSetAdtState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcSetDisplayBrightness_Cabc_Data BlcSetDisplayBrightness_CabcTemplate(Action<t_BlcSetDisplayBrightness_Cabc_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcSetDisplayBrightness_Cabc_Data(action, 738, 405, "BlcSetDisplayBrightness_Cabc", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_BlcSetPWMGranularityMode_GEN9_Data BlcSetPWMGranularityMode_GEN9Template(Action<t_BlcSetPWMGranularityMode_GEN9_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_BlcSetPWMGranularityMode_GEN9_Data(action, 733, 400, "BlcSetPWMGranularityMode_GEN9", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CalculateWaterMark CalculateWaterMarkGen9Template(Action<t_CalculateWaterMark> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CalculateWaterMark(action, 683, 376, "CalculateWaterMark", Guid.Empty, 62, "Gen9", ProviderGuid, ProviderName );
        }
        static private t_CommitInfo Commit_TaskTemplate(Action<t_CommitInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CommitInfo(action, 61, 3, "Commit_Task", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail Commit_TaskFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 59, 3, "Commit_Task", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_CommitEntry Commit_TaskStartTemplate(Action<t_CommitEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CommitEntry(action, 3, 3, "Commit_Task", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData Commit_TaskStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 4, 3, "Commit_Task", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_ConfigurePowerWell ConfigurePowerWellTemplate(Action<t_ConfigurePowerWell> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ConfigurePowerWell(action, 687, 367, "ConfigurePowerWell", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CriticalFailLog CriticalFailureFailedTemplate(Action<t_CriticalFailLog> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalFailLog(action, 58, 34, "CriticalFailure", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_AddCustomMode_Entry CSLBASE_AddCustomModeStartTemplate(Action<t_CSLBASE_AddCustomMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_AddCustomMode_Entry(action, 451, 245, "CSLBASE_AddCustomMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_AddCustomModeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 452, 245, "CSLBASE_AddCustomMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_AtomicI2CAccess_Entry CSLBASE_AtomicI2CAccessStartTemplate(Action<t_CSLBASE_AtomicI2CAccess_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_AtomicI2CAccess_Entry(action, 373, 193, "CSLBASE_AtomicI2CAccess", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_AtomicI2CAccess_Exit CSLBASE_AtomicI2CAccessStopTemplate(Action<t_CSLBASE_AtomicI2CAccess_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_AtomicI2CAccess_Exit(action, 374, 193, "CSLBASE_AtomicI2CAccess", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_AuxAccess_Entry CSLBASE_AuxAccessStartTemplate(Action<t_CSLBASE_AuxAccess_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_AuxAccess_Entry(action, 375, 194, "CSLBASE_AuxAccess", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_AuxAccess_Exit CSLBASE_AuxAccessStopTemplate(Action<t_CSLBASE_AuxAccess_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_AuxAccess_Exit(action, 376, 194, "CSLBASE_AuxAccess", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_BIOSBrightnessNotification_Entry CSLBASE_BIOSBrightnessNotificationStartTemplate(Action<t_CSLBASE_BIOSBrightnessNotification_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_BIOSBrightnessNotification_Entry(action, 561, 288, "CSLBASE_BIOSBrightnessNotification", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_BIOSBrightnessNotification_Exit CSLBASE_BIOSBrightnessNotificationStopTemplate(Action<t_CSLBASE_BIOSBrightnessNotification_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_BIOSBrightnessNotification_Exit(action, 562, 288, "CSLBASE_BIOSBrightnessNotification", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_BlankVideo_Entry CSLBASE_BlankVideoStartTemplate(Action<t_CSLBASE_BlankVideo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_BlankVideo_Entry(action, 347, 183, "CSLBASE_BlankVideo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_BlankVideo_Exit CSLBASE_BlankVideoStopTemplate(Action<t_CSLBASE_BlankVideo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_BlankVideo_Exit(action, 348, 183, "CSLBASE_BlankVideo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_CalculateWaterMarkStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 441, 309, "CSLBASE_CalculateWaterMark", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CalculateWaterMark_Exit CSLBASE_CalculateWaterMarkStopTemplate(Action<t_CSLBASE_CalculateWaterMark_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CalculateWaterMark_Exit(action, 442, 309, "CSLBASE_CalculateWaterMark", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ChangeCDClock_Entry CSLBASE_ChangeCDClockStartTemplate(Action<t_CSLBASE_ChangeCDClock_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ChangeCDClock_Entry(action, 595, 305, "CSLBASE_ChangeCDClock", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ChangeCDClock_Exit CSLBASE_ChangeCDClockStopTemplate(Action<t_CSLBASE_ChangeCDClock_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ChangeCDClock_Exit(action, 596, 305, "CSLBASE_ChangeCDClock", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CheckCRCInterruptCount_Entry CSLBASE_CheckCRCInterruptCountStartTemplate(Action<t_CSLBASE_CheckCRCInterruptCount_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CheckCRCInterruptCount_Entry(action, 485, 254, "CSLBASE_CheckCRCInterruptCount", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_CheckCRCInterruptCountStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 486, 254, "CSLBASE_CheckCRCInterruptCount", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CheckMPOSupport_Entry CSLBASE_CheckMPOSupportStartTemplate(Action<t_CSLBASE_CheckMPOSupport_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CheckMPOSupport_Entry(action, 229, 120, "CSLBASE_CheckMPOSupport", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CheckMPOSupportExit CSLBASE_CheckMPOSupportStopTemplate(Action<t_CSLBASE_CheckMPOSupportExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CheckMPOSupportExit(action, 230, 120, "CSLBASE_CheckMPOSupport", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ComplianceAuxWA_Entry CSLBASE_ComplianceAuxWAStartTemplate(Action<t_CSLBASE_ComplianceAuxWA_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ComplianceAuxWA_Entry(action, 489, 256, "CSLBASE_ComplianceAuxWA", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ComplianceAuxWA_Exit CSLBASE_ComplianceAuxWAStopTemplate(Action<t_CSLBASE_ComplianceAuxWA_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ComplianceAuxWA_Exit(action, 490, 256, "CSLBASE_ComplianceAuxWA", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CursorService_Entry CSLBASE_CursorServiceStartTemplate(Action<t_CSLBASE_CursorService_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CursorService_Entry(action, 415, 235, "CSLBASE_CursorService", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_CursorService_Exit CSLBASE_CursorServiceStopTemplate(Action<t_CSLBASE_CursorService_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_CursorService_Exit(action, 416, 235, "CSLBASE_CursorService", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_DestroyStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 325, 169, "CSLBASE_Destroy", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_DestroyStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 326, 169, "CSLBASE_Destroy", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_DeviceConfigValid_Entry CSLBASE_DeviceConfigValidStartTemplate(Action<t_CSLBASE_DeviceConfigValid_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_DeviceConfigValid_Entry(action, 607, 310, "CSLBASE_DeviceConfigValid", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_DeviceConfigValidStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 608, 310, "CSLBASE_DeviceConfigValid", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_EnableBacklightWorkItemStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 597, 306, "CSLBASE_EnableBacklightWorkItem", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EnableBacklightWorkItem_Exit CSLBASE_EnableBacklightWorkItemStopTemplate(Action<t_CSLBASE_EnableBacklightWorkItem_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EnableBacklightWorkItem_Exit(action, 598, 306, "CSLBASE_EnableBacklightWorkItem", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EnableDisableAudioDevice_Entry CSLBASE_EnableDisableAudioDeviceStartTemplate(Action<t_CSLBASE_EnableDisableAudioDevice_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EnableDisableAudioDevice_Entry(action, 547, 281, "CSLBASE_EnableDisableAudioDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EnableDisableAudioDevice_Exit CSLBASE_EnableDisableAudioDeviceStopTemplate(Action<t_CSLBASE_EnableDisableAudioDevice_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EnableDisableAudioDevice_Exit(action, 548, 281, "CSLBASE_EnableDisableAudioDevice", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EnableScaler_Entry CSLBASE_EnableScalerStartTemplate(Action<t_CSLBASE_EnableScaler_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EnableScaler_Entry(action, 533, 273, "CSLBASE_EnableScaler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EnableScaler_Exit CSLBASE_EnableScalerStopTemplate(Action<t_CSLBASE_EnableScaler_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EnableScaler_Exit(action, 534, 273, "CSLBASE_EnableScaler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_NotifyEventEntry CSLBASE_Event_NotificationTemplate(Action<t_CSLBASE_NotifyEventEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_NotifyEventEntry(action, 234, 123, "CSLBASE_Event_Notification", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_EventNotificationEntry CSLBASE_EventNotificationTemplate(Action<t_CSLBASE_EventNotificationEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_EventNotificationEntry(action, 231, 121, "CSLBASE_EventNotification", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GammaHandler_Entry CSLBASE_GammaHandlerStartTemplate(Action<t_CSLBASE_GammaHandler_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GammaHandler_Entry(action, 419, 201, "CSLBASE_GammaHandler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GammaHandler_Exit CSLBASE_GammaHandlerStopTemplate(Action<t_CSLBASE_GammaHandler_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GammaHandler_Exit(action, 420, 201, "CSLBASE_GammaHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GenerateTimings_Entry CSLBASE_GenerateTimingsStartTemplate(Action<t_CSLBASE_GenerateTimings_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GenerateTimings_Entry(action, 509, 261, "CSLBASE_GenerateTimings", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GenerateTimings_Exit CSLBASE_GenerateTimingsStopTemplate(Action<t_CSLBASE_GenerateTimings_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GenerateTimings_Exit(action, 510, 261, "CSLBASE_GenerateTimings", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetActiveDisplayInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 503, 258, "CSLBASE_GetActiveDisplayInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetActiveDisplayInfo_Entry CSLBASE_GetActiveDisplayInfoStopTemplate(Action<t_CSLBASE_GetActiveDisplayInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetActiveDisplayInfo_Entry(action, 504, 258, "CSLBASE_GetActiveDisplayInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetAudioData_Entry CSLBASE_GetAudioDataStartTemplate(Action<t_CSLBASE_GetAudioData_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetAudioData_Entry(action, 541, 278, "CSLBASE_GetAudioData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetAudioData_Exit CSLBASE_GetAudioDataStopTemplate(Action<t_CSLBASE_GetAudioData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetAudioData_Exit(action, 542, 278, "CSLBASE_GetAudioData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetAudioProtocolType_Entry CSLBASE_GetAudioProtocolTypeStartTemplate(Action<t_CSLBASE_GetAudioProtocolType_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetAudioProtocolType_Entry(action, 535, 275, "CSLBASE_GetAudioProtocolType", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetAudioProtocolTypeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 536, 275, "CSLBASE_GetAudioProtocolType", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCompensation_Entry CSLBASE_GetCompensationStartTemplate(Action<t_CSLBASE_GetCompensation_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCompensation_Entry(action, 339, 177, "CSLBASE_GetCompensation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCompensation_Exit CSLBASE_GetCompensationStopTemplate(Action<t_CSLBASE_GetCompensation_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCompensation_Exit(action, 340, 177, "CSLBASE_GetCompensation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetCompleteDP12TopologyStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 523, 268, "CSLBASE_GetCompleteDP12Topology", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCompleteDP12Topology_Exit CSLBASE_GetCompleteDP12TopologyStopTemplate(Action<t_CSLBASE_GetCompleteDP12Topology_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCompleteDP12Topology_Exit(action, 524, 268, "CSLBASE_GetCompleteDP12Topology", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetConnectorModeInfo_Entry CSLBASE_GetConnectorModeInfoStartTemplate(Action<t_CSLBASE_GetConnectorModeInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetConnectorModeInfo_Entry(action, 449, 244, "CSLBASE_GetConnectorModeInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetConnectorModeInfo_Exit CSLBASE_GetConnectorModeInfoStopTemplate(Action<t_CSLBASE_GetConnectorModeInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetConnectorModeInfo_Exit(action, 450, 244, "CSLBASE_GetConnectorModeInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetControllerInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 383, 226, "CSLBASE_GetControllerInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetControllerInfo_Exit CSLBASE_GetControllerInfoStopTemplate(Action<t_CSLBASE_GetControllerInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetControllerInfo_Exit(action, 384, 226, "CSLBASE_GetControllerInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCSCUsage_Entry CSLBASE_GetCSCUsageStartTemplate(Action<t_CSLBASE_GetCSCUsage_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCSCUsage_Entry(action, 491, 257, "CSLBASE_GetCSCUsage", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCSCUsage_Exit CSLBASE_GetCSCUsageStopTemplate(Action<t_CSLBASE_GetCSCUsage_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCSCUsage_Exit(action, 492, 257, "CSLBASE_GetCSCUsage", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCurrentPalette_Entry CSLBASE_GetCurrentPaletteStartTemplate(Action<t_CSLBASE_GetCurrentPalette_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCurrentPalette_Entry(action, 329, 171, "CSLBASE_GetCurrentPalette", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCurrentPalette_Exit CSLBASE_GetCurrentPaletteStopTemplate(Action<t_CSLBASE_GetCurrentPalette_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCurrentPalette_Exit(action, 330, 171, "CSLBASE_GetCurrentPalette", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCustomModeInfo_Entry CSLBASE_GetCustomModeInfoStartTemplate(Action<t_CSLBASE_GetCustomModeInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCustomModeInfo_Entry(action, 453, 246, "CSLBASE_GetCustomModeInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetCustomModeInfo_Exit CSLBASE_GetCustomModeInfoStopTemplate(Action<t_CSLBASE_GetCustomModeInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetCustomModeInfo_Exit(action, 454, 246, "CSLBASE_GetCustomModeInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDDCEdid_Entry CSLBASE_GetDDCEdidStartTemplate(Action<t_CSLBASE_GetDDCEdid_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDDCEdid_Entry(action, 369, 192, "CSLBASE_GetDDCEdid", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDDCEdid_Exit CSLBASE_GetDDCEdidStopTemplate(Action<t_CSLBASE_GetDDCEdid_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDDCEdid_Exit(action, 370, 192, "CSLBASE_GetDDCEdid", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetDetailedInfoForDP12SinkStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 525, 269, "CSLBASE_GetDetailedInfoForDP12Sink", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDetailedInfoForDP12Sink_Exit CSLBASE_GetDetailedInfoForDP12SinkStopTemplate(Action<t_CSLBASE_GetDetailedInfoForDP12Sink_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDetailedInfoForDP12Sink_Exit(action, 526, 269, "CSLBASE_GetDetailedInfoForDP12Sink", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDevicePMCaps_Entry CSLBASE_GetDevicePMCapsStartTemplate(Action<t_CSLBASE_GetDevicePMCaps_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDevicePMCaps_Entry(action, 349, 184, "CSLBASE_GetDevicePMCaps", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDevicePMCaps_Exit CSLBASE_GetDevicePMCapsStopTemplate(Action<t_CSLBASE_GetDevicePMCaps_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDevicePMCaps_Exit(action, 350, 184, "CSLBASE_GetDevicePMCaps", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayDetect_Entry CSLBASE_GetDisplayDetectStartTemplate(Action<t_CSLBASE_GetDisplayDetect_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayDetect_Entry(action, 601, 174, "CSLBASE_GetDisplayDetect", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayDetect_Exit CSLBASE_GetDisplayDetectStopTemplate(Action<t_CSLBASE_GetDisplayDetect_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayDetect_Exit(action, 602, 174, "CSLBASE_GetDisplayDetect", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayDevice_Entry CSLBASE_GetDisplayDeviceStartTemplate(Action<t_CSLBASE_GetDisplayDevice_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayDevice_Entry(action, 599, 173, "CSLBASE_GetDisplayDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayDevice_Exit CSLBASE_GetDisplayDeviceStopTemplate(Action<t_CSLBASE_GetDisplayDevice_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayDevice_Exit(action, 600, 173, "CSLBASE_GetDisplayDevice", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayInfo_Entry CSLBASE_GetDisplayInfoStartTemplate(Action<t_CSLBASE_GetDisplayInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayInfo_Entry(action, 333, 175, "CSLBASE_GetDisplayInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayInfo_Exit CSLBASE_GetDisplayInfoStopTemplate(Action<t_CSLBASE_GetDisplayInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayInfo_Exit(action, 334, 175, "CSLBASE_GetDisplayInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayPortDetails_Entry CSLBASE_GetDisplayPortDetailsStartTemplate(Action<t_CSLBASE_GetDisplayPortDetails_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayPortDetails_Entry(action, 341, 178, "CSLBASE_GetDisplayPortDetails", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayPortDetails_Exit CSLBASE_GetDisplayPortDetailsStopTemplate(Action<t_CSLBASE_GetDisplayPortDetails_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayPortDetails_Exit(action, 342, 178, "CSLBASE_GetDisplayPortDetails", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayStart_Entry CSLBASE_GetDisplayStartTemplate(Action<t_CSLBASE_GetDisplayStart_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayStart_Entry(action, 423, 203, "CSLBASE_GetDisplayStart", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayStartMPO_Entry CSLBASE_GetDisplayStartMPOStartTemplate(Action<t_CSLBASE_GetDisplayStartMPO_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayStartMPO_Entry(action, 365, 191, "CSLBASE_GetDisplayStartMPO", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayStartMPO_Exit CSLBASE_GetDisplayStartMPOStopTemplate(Action<t_CSLBASE_GetDisplayStartMPO_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayStartMPO_Exit(action, 366, 191, "CSLBASE_GetDisplayStartMPO", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDisplayStart_Exit CSLBASE_GetDisplayStartStopTemplate(Action<t_CSLBASE_GetDisplayStart_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDisplayStart_Exit(action, 424, 203, "CSLBASE_GetDisplayStart", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetDockStatusStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 439, 205, "CSLBASE_GetDockStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDockStatus_Exit CSLBASE_GetDockStatusStopTemplate(Action<t_CSLBASE_GetDockStatus_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDockStatus_Exit(action, 440, 205, "CSLBASE_GetDockStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetDVMTSettingsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 391, 196, "CSLBASE_GetDVMTSettings", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetDVMTSettings_Exit CSLBASE_GetDVMTSettingsStopTemplate(Action<t_CSLBASE_GetDVMTSettings_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetDVMTSettings_Exit(action, 392, 196, "CSLBASE_GetDVMTSettings", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetEnabledInterrupts_Entry CSLBASE_GetEnabledInterruptsStartTemplate(Action<t_CSLBASE_GetEnabledInterrupts_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetEnabledInterrupts_Entry(action, 411, 199, "CSLBASE_GetEnabledInterrupts", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetEnabledInterrupts_Exit CSLBASE_GetEnabledInterruptsStopTemplate(Action<t_CSLBASE_GetEnabledInterrupts_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetEnabledInterrupts_Exit(action, 412, 199, "CSLBASE_GetEnabledInterrupts", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetEventObjectIndex_Entry CSLBASE_GetEventObjectIndexStartTemplate(Action<t_CSLBASE_GetEventObjectIndex_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetEventObjectIndex_Entry(action, 465, 251, "CSLBASE_GetEventObjectIndex", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetEventObjectIndex_Exit CSLBASE_GetEventObjectIndexStopTemplate(Action<t_CSLBASE_GetEventObjectIndex_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetEventObjectIndex_Exit(action, 466, 251, "CSLBASE_GetEventObjectIndex", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetHwS3DState_Entry CSLBASE_GetHwS3DStateStartTemplate(Action<t_CSLBASE_GetHwS3DState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetHwS3DState_Entry(action, 507, 260, "CSLBASE_GetHwS3DState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetHwS3DState_Exit CSLBASE_GetHwS3DStateStopTemplate(Action<t_CSLBASE_GetHwS3DState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetHwS3DState_Exit(action, 508, 260, "CSLBASE_GetHwS3DState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetIntelAudioDriverPresenceStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 589, 302, "CSLBASE_GetIntelAudioDriverPresence", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetIntelAudioDriverPresenceStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 590, 302, "CSLBASE_GetIntelAudioDriverPresence", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetInterruptSource_Entry CSLBASE_GetInterruptSourceStartTemplate(Action<t_CSLBASE_GetInterruptSource_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetInterruptSource_Entry(action, 409, 234, "CSLBASE_GetInterruptSource", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetInterruptSource_Exit CSLBASE_GetInterruptSourceStopTemplate(Action<t_CSLBASE_GetInterruptSource_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetInterruptSource_Exit(action, 410, 234, "CSLBASE_GetInterruptSource", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetLidStatus_Entry CSLBASE_GetLidStatusStartTemplate(Action<t_CSLBASE_GetLidStatus_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetLidStatus_Entry(action, 609, 311, "CSLBASE_GetLidStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetLidStatus_Exit CSLBASE_GetLidStatusStopTemplate(Action<t_CSLBASE_GetLidStatus_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetLidStatus_Exit(action, 610, 311, "CSLBASE_GetLidStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetMaxSupportedPlanesStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 355, 221, "CSLBASE_GetMaxSupportedPlanes", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetMaxSupportedPlanes_Exit CSLBASE_GetMaxSupportedPlanesStopTemplate(Action<t_CSLBASE_GetMaxSupportedPlanes_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetMaxSupportedPlanes_Exit(action, 356, 221, "CSLBASE_GetMaxSupportedPlanes", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetModeSupport_Entry CSLBASE_GetModeSupportStartTemplate(Action<t_CSLBASE_GetModeSupport_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetModeSupport_Entry(action, 381, 225, "CSLBASE_GetModeSupport", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetModeSupport_Exit CSLBASE_GetModeSupportStopTemplate(Action<t_CSLBASE_GetModeSupport_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetModeSupport_Exit(action, 382, 225, "CSLBASE_GetModeSupport", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetMPOCaps_Entry CSLBASE_GetMPOCapsStartTemplate(Action<t_CSLBASE_GetMPOCaps_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetMPOCaps_Entry(action, 359, 188, "CSLBASE_GetMPOCaps", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetMPOCaps_Exit CSLBASE_GetMPOCapsStopTemplate(Action<t_CSLBASE_GetMPOCaps_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetMPOCaps_Exit(action, 360, 188, "CSLBASE_GetMPOCaps", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetMPOGroupCaps_Entry CSLBASE_GetMPOGroupCapsStartTemplate(Action<t_CSLBASE_GetMPOGroupCaps_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetMPOGroupCaps_Entry(action, 361, 189, "CSLBASE_GetMPOGroupCaps", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetMPOGroupCaps_Exit CSLBASE_GetMPOGroupCapsStopTemplate(Action<t_CSLBASE_GetMPOGroupCaps_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetMPOGroupCaps_Exit(action, 362, 189, "CSLBASE_GetMPOGroupCaps", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetPciCfgInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 581, 298, "CSLBASE_GetPciCfgInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPciCfgInfo_Exit CSLBASE_GetPciCfgInfoStopTemplate(Action<t_CSLBASE_GetPciCfgInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPciCfgInfo_Exit(action, 582, 298, "CSLBASE_GetPciCfgInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPlane_Entry CSLBASE_GetPlaneStartTemplate(Action<t_CSLBASE_GetPlane_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPlane_Entry(action, 353, 186, "CSLBASE_GetPlane", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPlane_Exit CSLBASE_GetPlaneStopTemplate(Action<t_CSLBASE_GetPlane_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPlane_Exit(action, 354, 186, "CSLBASE_GetPlane", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPlaneZOrder_Entry CSLBASE_GetPlaneZOrderStartTemplate(Action<t_CSLBASE_GetPlaneZOrder_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPlaneZOrder_Entry(action, 357, 187, "CSLBASE_GetPlaneZOrder", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPlaneZOrder_Exit CSLBASE_GetPlaneZOrderStopTemplate(Action<t_CSLBASE_GetPlaneZOrder_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPlaneZOrder_Exit(action, 358, 187, "CSLBASE_GetPlaneZOrder", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetPlatformConfigInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 433, 240, "CSLBASE_GetPlatformConfigInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPlatformConfigInfo_Exit CSLBASE_GetPlatformConfigInfoStopTemplate(Action<t_CSLBASE_GetPlatformConfigInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPlatformConfigInfo_Exit(action, 434, 240, "CSLBASE_GetPlatformConfigInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetPNMPixelClkDataStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 469, 209, "CSLBASE_GetPNMPixelClkData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPNMPixelClkData_Exit CSLBASE_GetPNMPixelClkDataStopTemplate(Action<t_CSLBASE_GetPNMPixelClkData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPNMPixelClkData_Exit(action, 470, 209, "CSLBASE_GetPNMPixelClkData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPossibleTiledAlloc_Entry CSLBASE_GetPossibleTiledAllocStartTemplate(Action<t_CSLBASE_GetPossibleTiledAlloc_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPossibleTiledAlloc_Entry(action, 563, 289, "CSLBASE_GetPossibleTiledAlloc", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPossibleTiledAlloc_Exit CSLBASE_GetPossibleTiledAllocStopTemplate(Action<t_CSLBASE_GetPossibleTiledAlloc_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPossibleTiledAlloc_Exit(action, 564, 289, "CSLBASE_GetPossibleTiledAlloc", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetPSRResCounterStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 467, 208, "CSLBASE_GetPSRResCounter", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetPSRResCounter_Exit CSLBASE_GetPSRResCounterStopTemplate(Action<t_CSLBASE_GetPSRResCounter_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetPSRResCounter_Exit(action, 468, 208, "CSLBASE_GetPSRResCounter", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetRefreshRate_Entry CSLBASE_GetRefreshRateStartTemplate(Action<t_CSLBASE_GetRefreshRate_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetRefreshRate_Entry(action, 377, 223, "CSLBASE_GetRefreshRate", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetRefreshRate_Exit CSLBASE_GetRefreshRateStopTemplate(Action<t_CSLBASE_GetRefreshRate_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetRefreshRate_Exit(action, 378, 223, "CSLBASE_GetRefreshRate", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetRelationForSourceTargetMode_Entry CSLBASE_GetRelationForSourceTargetModeStartTemplate(Action<t_CSLBASE_GetRelationForSourceTargetMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetRelationForSourceTargetMode_Entry(action, 403, 232, "CSLBASE_GetRelationForSourceTargetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetRelationForSourceTargetMode_Exit CSLBASE_GetRelationForSourceTargetModeStopTemplate(Action<t_CSLBASE_GetRelationForSourceTargetMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetRelationForSourceTargetMode_Exit(action, 404, 232, "CSLBASE_GetRelationForSourceTargetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetROMBIOSInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 385, 195, "CSLBASE_GetROMBIOSInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetROMBIOSInfo_Exit CSLBASE_GetROMBIOSInfoStopTemplate(Action<t_CSLBASE_GetROMBIOSInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetROMBIOSInfo_Exit(action, 386, 195, "CSLBASE_GetROMBIOSInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetS3DCaps_Entry CSLBASE_GetS3DCapsStartTemplate(Action<t_CSLBASE_GetS3DCaps_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetS3DCaps_Entry(action, 505, 259, "CSLBASE_GetS3DCaps", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetS3DCaps_Exit CSLBASE_GetS3DCapsStopTemplate(Action<t_CSLBASE_GetS3DCaps_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetS3DCaps_Exit(action, 506, 259, "CSLBASE_GetS3DCaps", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetScanLineInfo_Entry CSLBASE_GetScanLineInfoStartTemplate(Action<t_CSLBASE_GetScanLineInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetScanLineInfo_Entry(action, 413, 200, "CSLBASE_GetScanLineInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetScanLineInfo_Exit CSLBASE_GetScanLineInfoStopTemplate(Action<t_CSLBASE_GetScanLineInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetScanLineInfo_Exit(action, 414, 200, "CSLBASE_GetScanLineInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetClkBendingInfo_Entry CSLBASE_GetSetClkBendingInfoStartTemplate(Action<t_CSLBASE_GetSetClkBendingInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetClkBendingInfo_Entry(action, 501, 219, "CSLBASE_GetSetClkBendingInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetClkBendingInfo_Exit CSLBASE_GetSetClkBendingInfoStopTemplate(Action<t_CSLBASE_GetSetClkBendingInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetClkBendingInfo_Exit(action, 502, 219, "CSLBASE_GetSetClkBendingInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetCSC_Entry CSLBASE_GetSetCSCStartTemplate(Action<t_CSLBASE_GetSetCSC_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetCSC_Entry(action, 473, 211, "CSLBASE_GetSetCSC", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetCSC_Exit CSLBASE_GetSetCSCStopTemplate(Action<t_CSLBASE_GetSetCSC_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetCSC_Exit(action, 474, 211, "CSLBASE_GetSetCSC", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetParameters_Entry CSLBASE_GetSetParametersStartTemplate(Action<t_CSLBASE_GetSetParameters_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetParameters_Entry(action, 389, 307, "CSLBASE_GetSetParameters", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetParameters_Exit CSLBASE_GetSetParametersStopTemplate(Action<t_CSLBASE_GetSetParameters_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetParameters_Exit(action, 390, 307, "CSLBASE_GetSetParameters", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetXVYCCCtrl_Entry CSLBASE_GetSetXVYCCCtrlStartTemplate(Action<t_CSLBASE_GetSetXVYCCCtrl_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetXVYCCCtrl_Entry(action, 479, 214, "CSLBASE_GetSetXVYCCCtrl", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSetXVYCCCtrl_Exit CSLBASE_GetSetXVYCCCtrlStopTemplate(Action<t_CSLBASE_GetSetXVYCCCtrl_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSetXVYCCCtrl_Exit(action, 480, 214, "CSLBASE_GetSetXVYCCCtrl", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSourceModeList_Entry CSLBASE_GetSourceModeListStartTemplate(Action<t_CSLBASE_GetSourceModeList_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSourceModeList_Entry(action, 395, 228, "CSLBASE_GetSourceModeList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSourceModeList_Exit CSLBASE_GetSourceModeListStopTemplate(Action<t_CSLBASE_GetSourceModeList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSourceModeList_Exit(action, 396, 228, "CSLBASE_GetSourceModeList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSPIData_Entry CSLBASE_GetSPIDataStartTemplate(Action<t_CSLBASE_GetSPIData_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSPIData_Entry(action, 459, 249, "CSLBASE_GetSPIData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetSPIData_Exit CSLBASE_GetSPIDataStopTemplate(Action<t_CSLBASE_GetSPIData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetSPIData_Exit(action, 460, 249, "CSLBASE_GetSPIData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetTargetDetailsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 393, 197, "CSLBASE_GetTargetDetails", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTargetDetails_Exit CSLBASE_GetTargetDetailsStopTemplate(Action<t_CSLBASE_GetTargetDetails_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTargetDetails_Exit(action, 394, 197, "CSLBASE_GetTargetDetails", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTargetModeListForSourceMode_Entry CSLBASE_GetTargetModeListForSourceModeStartTemplate(Action<t_CSLBASE_GetTargetModeListForSourceMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTargetModeListForSourceMode_Entry(action, 399, 230, "CSLBASE_GetTargetModeListForSourceMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTargetModeListForSourceMode_Exit CSLBASE_GetTargetModeListForSourceModeStopTemplate(Action<t_CSLBASE_GetTargetModeListForSourceMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTargetModeListForSourceMode_Exit(action, 400, 230, "CSLBASE_GetTargetModeListForSourceMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTargetModeList_Entry CSLBASE_GetTargetModeListStartTemplate(Action<t_CSLBASE_GetTargetModeList_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTargetModeList_Entry(action, 397, 229, "CSLBASE_GetTargetModeList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTargetModeList_Exit CSLBASE_GetTargetModeListStopTemplate(Action<t_CSLBASE_GetTargetModeList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTargetModeList_Exit(action, 398, 229, "CSLBASE_GetTargetModeList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTimingInfo_Entry CSLBASE_GetTimingInfoStartTemplate(Action<t_CSLBASE_GetTimingInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTimingInfo_Entry(action, 379, 224, "CSLBASE_GetTimingInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetTimingInfo_Exit CSLBASE_GetTimingInfoStopTemplate(Action<t_CSLBASE_GetTimingInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetTimingInfo_Exit(action, 380, 224, "CSLBASE_GetTimingInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GetVBTToggleListStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 437, 308, "CSLBASE_GetVBTToggleList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GetVBTToggleList_Exit CSLBASE_GetVBTToggleListStopTemplate(Action<t_CSLBASE_GetVBTToggleList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GetVBTToggleList_Exit(action, 438, 308, "CSLBASE_GetVBTToggleList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_GrmTDRHandlerStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 585, 300, "CSLBASE_GrmTDRHandler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_GrmTDRHandler_Exit CSLBASE_GrmTDRHandlerStopTemplate(Action<t_CSLBASE_GrmTDRHandler_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_GrmTDRHandler_Exit(action, 586, 300, "CSLBASE_GrmTDRHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HandleATR_Entry CSLBASE_HandleATRStartTemplate(Action<t_CSLBASE_HandleATR_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HandleATR_Entry(action, 487, 255, "CSLBASE_HandleATR", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_HandleATRStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 488, 255, "CSLBASE_HandleATR", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_HandleLPSPPreSetModeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 545, 280, "CSLBASE_HandleLPSPPreSetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HandleLPSPPreSetMode_Exit CSLBASE_HandleLPSPPreSetModeStopTemplate(Action<t_CSLBASE_HandleLPSPPreSetMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HandleLPSPPreSetMode_Exit(action, 546, 280, "CSLBASE_HandleLPSPPreSetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry CSLBASE_HandlePipeCRCDoneInterruptStartTemplate(Action<t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry(action, 481, 252, "CSLBASE_HandlePipeCRCDoneInterrupt", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_HandlePipeCRCDoneInterruptStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 482, 252, "CSLBASE_HandlePipeCRCDoneInterrupt", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry CSLBASE_HandlePipeCRCErrorInterruptStartTemplate(Action<t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry(action, 483, 253, "CSLBASE_HandlePipeCRCErrorInterrupt", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_HandlePipeCRCErrorInterruptStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 484, 253, "CSLBASE_HandlePipeCRCErrorInterrupt", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HotPlug_Entry CSLBASE_HotPlugStartTemplate(Action<t_CSLBASE_HotPlug_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HotPlug_Entry(action, 335, 220, "CSLBASE_HotPlug", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_HotPlug_Exit CSLBASE_HotPlugStopTemplate(Action<t_CSLBASE_HotPlug_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_HotPlug_Exit(action, 336, 220, "CSLBASE_HotPlug", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_I2CAccess_Entry CSLBASE_I2CAccessStartTemplate(Action<t_CSLBASE_I2CAccess_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_I2CAccess_Entry(action, 371, 313, "CSLBASE_I2CAccess", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_I2CAccess_Exit CSLBASE_I2CAccessStopTemplate(Action<t_CSLBASE_I2CAccess_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_I2CAccess_Exit(action, 372, 313, "CSLBASE_I2CAccess", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_InitializeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 327, 170, "CSLBASE_Initialize", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_Initialize_Exit CSLBASE_InitializeStopTemplate(Action<t_CSLBASE_Initialize_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_Initialize_Exit(action, 328, 170, "CSLBASE_Initialize", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_InitStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 323, 168, "CSLBASE_Init", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_InitStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 324, 168, "CSLBASE_Init", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_InterruptServices_Entry CSLBASE_InterruptServicesStartTemplate(Action<t_CSLBASE_InterruptServices_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_InterruptServices_Entry(action, 407, 233, "CSLBASE_InterruptServices", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_InterruptServices_Exit CSLBASE_InterruptServicesStopTemplate(Action<t_CSLBASE_InterruptServices_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_InterruptServices_Exit(action, 408, 233, "CSLBASE_InterruptServices", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_IsAudioControllerEnabledStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 445, 242, "CSLBASE_IsAudioControllerEnabled", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsAudioControllerEnabled_Exit CSLBASE_IsAudioControllerEnabledStopTemplate(Action<t_CSLBASE_IsAudioControllerEnabled_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsAudioControllerEnabled_Exit(action, 446, 242, "CSLBASE_IsAudioControllerEnabled", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsCDClockChangeRequired_Entry CSLBASE_IsCDClockChangeRequiredStartTemplate(Action<t_CSLBASE_IsCDClockChangeRequired_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsCDClockChangeRequired_Entry(action, 593, 304, "CSLBASE_IsCDClockChangeRequired", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsCDClockChangeRequired_Exit CSLBASE_IsCDClockChangeRequiredStopTemplate(Action<t_CSLBASE_IsCDClockChangeRequired_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsCDClockChangeRequired_Exit(action, 594, 304, "CSLBASE_IsCDClockChangeRequired", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_IsCDClockChangeSupportedStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 591, 303, "CSLBASE_IsCDClockChangeSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsCDClockChangeSupported_Exit CSLBASE_IsCDClockChangeSupportedStopTemplate(Action<t_CSLBASE_IsCDClockChangeSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsCDClockChangeSupported_Exit(action, 592, 303, "CSLBASE_IsCDClockChangeSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsFastModeSetPossible_Entry CSLBASE_IsFastModeSetPossibleStartTemplate(Action<t_CSLBASE_IsFastModeSetPossible_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsFastModeSetPossible_Entry(action, 531, 272, "CSLBASE_IsFastModeSetPossible", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsFastModeSetPossible_Exit CSLBASE_IsFastModeSetPossibleStopTemplate(Action<t_CSLBASE_IsFastModeSetPossible_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsFastModeSetPossible_Exit(action, 532, 272, "CSLBASE_IsFastModeSetPossible", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsFlipCompleted_Entry CSLBASE_IsFlipCompletedStartTemplate(Action<t_CSLBASE_IsFlipCompleted_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsFlipCompleted_Entry(action, 443, 206, "CSLBASE_IsFlipCompleted", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsFlipCompleted_Exit CSLBASE_IsFlipCompletedStopTemplate(Action<t_CSLBASE_IsFlipCompleted_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsFlipCompleted_Exit(action, 444, 206, "CSLBASE_IsFlipCompleted", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsHwCursorPossible_Entry CSLBASE_IsHwCursorPossibleStartTemplate(Action<t_CSLBASE_IsHwCursorPossible_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsHwCursorPossible_Entry(action, 567, 291, "CSLBASE_IsHwCursorPossible", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsHwCursorPossible_Exit CSLBASE_IsHwCursorPossibleStopTemplate(Action<t_CSLBASE_IsHwCursorPossible_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsHwCursorPossible_Exit(action, 568, 291, "CSLBASE_IsHwCursorPossible", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsOpRegionMailBoxSupported_Entry CSLBASE_IsOpRegionMailBoxSupportedStartTemplate(Action<t_CSLBASE_IsOpRegionMailBoxSupported_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsOpRegionMailBoxSupported_Entry(action, 427, 237, "CSLBASE_IsOpRegionMailBoxSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsOpRegionMailBoxSupported_Exit CSLBASE_IsOpRegionMailBoxSupportedStopTemplate(Action<t_CSLBASE_IsOpRegionMailBoxSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsOpRegionMailBoxSupported_Exit(action, 428, 237, "CSLBASE_IsOpRegionMailBoxSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsScalingAppliedInMPOPath_Entry CSLBASE_IsScalingAppliedInMPOPathStartTemplate(Action<t_CSLBASE_IsScalingAppliedInMPOPath_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsScalingAppliedInMPOPath_Entry(action, 363, 190, "CSLBASE_IsScalingAppliedInMPOPath", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsScalingAppliedInMPOPath_Exit CSLBASE_IsScalingAppliedInMPOPathStopTemplate(Action<t_CSLBASE_IsScalingAppliedInMPOPath_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsScalingAppliedInMPOPath_Exit(action, 364, 190, "CSLBASE_IsScalingAppliedInMPOPath", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsSFSupported_Entry CSLBASE_IsSFSupportedStartTemplate(Action<t_CSLBASE_IsSFSupported_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsSFSupported_Entry(action, 565, 290, "CSLBASE_IsSFSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsSFSupported_Exit CSLBASE_IsSFSupportedStopTemplate(Action<t_CSLBASE_IsSFSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsSFSupported_Exit(action, 566, 290, "CSLBASE_IsSFSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_IsSpriteDownScaleSupportedStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 583, 299, "CSLBASE_IsSpriteDownScaleSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsSpriteDownScaleSupported_Exit CSLBASE_IsSpriteDownScaleSupportedStopTemplate(Action<t_CSLBASE_IsSpriteDownScaleSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsSpriteDownScaleSupported_Exit(action, 584, 299, "CSLBASE_IsSpriteDownScaleSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsTwinSupportedInClone_Entry CSLBASE_IsTwinSupportedInCloneStartTemplate(Action<t_CSLBASE_IsTwinSupportedInClone_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsTwinSupportedInClone_Entry(action, 447, 243, "CSLBASE_IsTwinSupportedInClone", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_IsTwinSupportedInClone_Exit CSLBASE_IsTwinSupportedInCloneStopTemplate(Action<t_CSLBASE_IsTwinSupportedInClone_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_IsTwinSupportedInClone_Exit(action, 448, 243, "CSLBASE_IsTwinSupportedInClone", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_LH_NotifyPowerState_Entry CSLBASE_LH_NotifyPowerStateStartTemplate(Action<t_CSLBASE_LH_NotifyPowerState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_LH_NotifyPowerState_Entry(action, 603, 180, "CSLBASE_LH_NotifyPowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_LH_NotifyPowerState_Exit CSLBASE_LH_NotifyPowerStateStopTemplate(Action<t_CSLBASE_LH_NotifyPowerState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_LH_NotifyPowerState_Exit(action, 604, 180, "CSLBASE_LH_NotifyPowerState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_LH_SetDisplayPowerState_Entry CSLBASE_LH_SetDisplayPowerStateStartTemplate(Action<t_CSLBASE_LH_SetDisplayPowerState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_LH_SetDisplayPowerState_Entry(action, 605, 181, "CSLBASE_LH_SetDisplayPowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_LH_SetDisplayPowerState_Exit CSLBASE_LH_SetDisplayPowerStateStopTemplate(Action<t_CSLBASE_LH_SetDisplayPowerState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_LH_SetDisplayPowerState_Exit(action, 606, 181, "CSLBASE_LH_SetDisplayPowerState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_NotifyCommitEndStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 543, 279, "CSLBASE_NotifyCommitEnd", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_NotifyCommitEnd_Exit CSLBASE_NotifyCommitEndStopTemplate(Action<t_CSLBASE_NotifyCommitEnd_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_NotifyCommitEnd_Exit(action, 544, 279, "CSLBASE_NotifyCommitEnd", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_NotifyModeSetComplete_Entry CSLBASE_NotifyModeSetCompleteStartTemplate(Action<t_CSLBASE_NotifyModeSetComplete_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_NotifyModeSetComplete_Entry(action, 549, 282, "CSLBASE_NotifyModeSetComplete", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_NotifyModeSetComplete_Exit CSLBASE_NotifyModeSetCompleteStopTemplate(Action<t_CSLBASE_NotifyModeSetComplete_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_NotifyModeSetComplete_Exit(action, 550, 282, "CSLBASE_NotifyModeSetComplete", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_NotifyPowerState_Entry CSLBASE_NotifyPowerStateStartTemplate(Action<t_CSLBASE_NotifyPowerState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_NotifyPowerState_Entry(action, 345, 182, "CSLBASE_NotifyPowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_NotifyPowerStateStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 346, 182, "CSLBASE_NotifyPowerState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_OverrideMonitorModeList_Entry CSLBASE_OverrideMonitorModeListStartTemplate(Action<t_CSLBASE_OverrideMonitorModeList_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_OverrideMonitorModeList_Entry(action, 401, 231, "CSLBASE_OverrideMonitorModeList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_OverrideMonitorModeList_Exit CSLBASE_OverrideMonitorModeListStopTemplate(Action<t_CSLBASE_OverrideMonitorModeList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_OverrideMonitorModeList_Exit(action, 402, 231, "CSLBASE_OverrideMonitorModeList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_PopulateContainerIDArgs_Entry CSLBASE_PopulateContainerIDArgsStartTemplate(Action<t_CSLBASE_PopulateContainerIDArgs_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_PopulateContainerIDArgs_Entry(action, 521, 267, "CSLBASE_PopulateContainerIDArgs", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_PopulateContainerIDArgs_Exit CSLBASE_PopulateContainerIDArgsStopTemplate(Action<t_CSLBASE_PopulateContainerIDArgs_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_PopulateContainerIDArgs_Exit(action, 522, 267, "CSLBASE_PopulateContainerIDArgs", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_ProcessPSREventStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 461, 207, "CSLBASE_ProcessPSREvent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_ProcessPSREventStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 462, 207, "CSLBASE_ProcessPSREvent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryDispConfig_Entry CSLBASE_QueryDispConfigStartTemplate(Action<t_CSLBASE_QueryDispConfig_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryDispConfig_Entry(action, 569, 292, "CSLBASE_QueryDispConfig", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryDispConfig_Exit CSLBASE_QueryDispConfigStopTemplate(Action<t_CSLBASE_QueryDispConfig_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryDispConfig_Exit(action, 570, 292, "CSLBASE_QueryDispConfig", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryDisplayDetails_Entry CSLBASE_QueryDisplayDetailsStartTemplate(Action<t_CSLBASE_QueryDisplayDetails_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryDisplayDetails_Entry(action, 351, 185, "CSLBASE_QueryDisplayDetails", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryDisplayDetails_Exit CSLBASE_QueryDisplayDetailsStopTemplate(Action<t_CSLBASE_QueryDisplayDetails_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryDisplayDetails_Exit(action, 352, 185, "CSLBASE_QueryDisplayDetails", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryHWConfig_Entry CSLBASE_QueryHWConfigStartTemplate(Action<t_CSLBASE_QueryHWConfig_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryHWConfig_Entry(action, 493, 215, "CSLBASE_QueryHWConfig", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryHWConfig_Exit CSLBASE_QueryHWConfigStopTemplate(Action<t_CSLBASE_QueryHWConfig_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryHWConfig_Exit(action, 494, 215, "CSLBASE_QueryHWConfig", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_QueryResourceStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 573, 294, "CSLBASE_QueryResource", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_QueryResource_Exit CSLBASE_QueryResourceStopTemplate(Action<t_CSLBASE_QueryResource_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_QueryResource_Exit(action, 574, 294, "CSLBASE_QueryResource", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReadOpRegionMailBox_Entry CSLBASE_ReadOpRegionMailBoxStartTemplate(Action<t_CSLBASE_ReadOpRegionMailBox_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReadOpRegionMailBox_Entry(action, 429, 238, "CSLBASE_ReadOpRegionMailBox", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReadOpRegionMailBox_Exit CSLBASE_ReadOpRegionMailBoxStopTemplate(Action<t_CSLBASE_ReadOpRegionMailBox_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReadOpRegionMailBox_Exit(action, 430, 238, "CSLBASE_ReadOpRegionMailBox", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReleaseDevice_Entry CSLBASE_ReleaseDeviceStartTemplate(Action<t_CSLBASE_ReleaseDevice_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReleaseDevice_Entry(action, 577, 296, "CSLBASE_ReleaseDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReleaseDevice_Exit CSLBASE_ReleaseDeviceStopTemplate(Action<t_CSLBASE_ReleaseDevice_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReleaseDevice_Exit(action, 578, 296, "CSLBASE_ReleaseDevice", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_RemoveCustomMode_Entry CSLBASE_RemoveCustomModeStartTemplate(Action<t_CSLBASE_RemoveCustomMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_RemoveCustomMode_Entry(action, 455, 247, "CSLBASE_RemoveCustomMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_RemoveCustomMode_Exit CSLBASE_RemoveCustomModeStopTemplate(Action<t_CSLBASE_RemoveCustomMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_RemoveCustomMode_Exit(action, 456, 247, "CSLBASE_RemoveCustomMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReserveVideoBW_Entry CSLBASE_ReserveVideoBWStartTemplate(Action<t_CSLBASE_ReserveVideoBW_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReserveVideoBW_Entry(action, 575, 295, "CSLBASE_ReserveVideoBW", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReserveVideoBW_Exit CSLBASE_ReserveVideoBWStopTemplate(Action<t_CSLBASE_ReserveVideoBW_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReserveVideoBW_Exit(action, 576, 295, "CSLBASE_ReserveVideoBW", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReTrainLink_Entry CSLBASE_ReTrainLinkStartTemplate(Action<t_CSLBASE_ReTrainLink_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReTrainLink_Entry(action, 463, 250, "CSLBASE_ReTrainLink", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ReTrainLink_Exit CSLBASE_ReTrainLinkStopTemplate(Action<t_CSLBASE_ReTrainLink_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ReTrainLink_Exit(action, 464, 250, "CSLBASE_ReTrainLink", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_ServiceConnectionStatusNotifyStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 553, 284, "CSLBASE_ServiceConnectionStatusNotify", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ServiceConnectionStatusNotify_Exit CSLBASE_ServiceConnectionStatusNotifyStopTemplate(Action<t_CSLBASE_ServiceConnectionStatusNotify_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ServiceConnectionStatusNotify_Exit(action, 554, 284, "CSLBASE_ServiceConnectionStatusNotify", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_ServiceHotPlugInterruptStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 417, 236, "CSLBASE_ServiceHotPlugInterrupt", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ServiceHotPlugInterrupt_Exit CSLBASE_ServiceHotPlugInterruptStopTemplate(Action<t_CSLBASE_ServiceHotPlugInterrupt_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ServiceHotPlugInterrupt_Exit(action, 418, 236, "CSLBASE_ServiceHotPlugInterrupt", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADBrightness_Entry CSLBASE_SetADBrightnessStartTemplate(Action<t_CSLBASE_SetADBrightness_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADBrightness_Entry(action, 557, 286, "CSLBASE_SetADBrightness", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADBrightness_Exit CSLBASE_SetADBrightnessStopTemplate(Action<t_CSLBASE_SetADBrightness_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADBrightness_Exit(action, 558, 286, "CSLBASE_SetADBrightness", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADLux_Entry CSLBASE_SetADLuxStartTemplate(Action<t_CSLBASE_SetADLux_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADLux_Entry(action, 559, 287, "CSLBASE_SetADLux", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADLux_Exit CSLBASE_SetADLuxStopTemplate(Action<t_CSLBASE_SetADLux_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADLux_Exit(action, 560, 287, "CSLBASE_SetADLux", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADState_Entry CSLBASE_SetADStateStartTemplate(Action<t_CSLBASE_SetADState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADState_Entry(action, 555, 285, "CSLBASE_SetADState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetADState_Exit CSLBASE_SetADStateStopTemplate(Action<t_CSLBASE_SetADState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetADState_Exit(action, 556, 285, "CSLBASE_SetADState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetAudioData_Entry CSLBASE_SetAudioDataStartTemplate(Action<t_CSLBASE_SetAudioData_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetAudioData_Entry(action, 537, 276, "CSLBASE_SetAudioData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetAudioData_Exit CSLBASE_SetAudioDataStopTemplate(Action<t_CSLBASE_SetAudioData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetAudioData_Exit(action, 538, 276, "CSLBASE_SetAudioData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetAudioEncryptionPreference_Entry CSLBASE_SetAudioEncryptionPreferenceStartTemplate(Action<t_CSLBASE_SetAudioEncryptionPreference_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetAudioEncryptionPreference_Entry(action, 539, 277, "CSLBASE_SetAudioEncryptionPreference", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetAudioEncryptionPreference_Exit CSLBASE_SetAudioEncryptionPreferenceStopTemplate(Action<t_CSLBASE_SetAudioEncryptionPreference_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetAudioEncryptionPreference_Exit(action, 540, 277, "CSLBASE_SetAudioEncryptionPreference", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetCompensation_Entry CSLBASE_SetCompensationStartTemplate(Action<t_CSLBASE_SetCompensation_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetCompensation_Entry(action, 337, 176, "CSLBASE_SetCompensation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_SetCompensationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 338, 176, "CSLBASE_SetCompensation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetCustomScalingInfo_Entry CSLBASE_SetCustomScalingInfoStartTemplate(Action<t_CSLBASE_SetCustomScalingInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetCustomScalingInfo_Entry(action, 405, 198, "CSLBASE_SetCustomScalingInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_SetCustomScalingInfoStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 406, 198, "CSLBASE_SetCustomScalingInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayDevice_Entry CSLBASE_SetDisplayDeviceStartTemplate(Action<t_CSLBASE_SetDisplayDevice_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayDevice_Entry(action, 228, 119, "CSLBASE_SetDisplayDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayPowerStateEntry CSLBASE_SetDisplayPowerStateStartTemplate(Action<t_CSLBASE_SetDisplayPowerStateEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayPowerStateEntry(action, 225, 117, "CSLBASE_SetDisplayPowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayStartEntry CSLBASE_SetDisplayStartTemplate(Action<t_CSLBASE_SetDisplayStartEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayStartEntry(action, 226, 118, "CSLBASE_SetDisplayStart", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayStartMPOEntry CSLBASE_SetDisplayStartMPOStartTemplate(Action<t_CSLBASE_SetDisplayStartMPOEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayStartMPOEntry(action, 232, 122, "CSLBASE_SetDisplayStartMPO", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayStartExit CSLBASE_SetDisplayStartMPOStopTemplate(Action<t_CSLBASE_SetDisplayStartExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayStartExit(action, 233, 122, "CSLBASE_SetDisplayStartMPO", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDisplayStartExit CSLBASE_SetDisplayStartStopTemplate(Action<t_CSLBASE_SetDisplayStartExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDisplayStartExit(action, 227, 118, "CSLBASE_SetDisplayStart", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_SetDP12SinkListforEachPortStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 527, 270, "CSLBASE_SetDP12SinkListforEachPort", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetDP12SinkListforEachPort_Exit CSLBASE_SetDP12SinkListforEachPortStopTemplate(Action<t_CSLBASE_SetDP12SinkListforEachPort_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetDP12SinkListforEachPort_Exit(action, 528, 270, "CSLBASE_SetDP12SinkListforEachPort", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetHDCPStatus_Entry CSLBASE_SetHDCPStatusStartTemplate(Action<t_CSLBASE_SetHDCPStatus_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetHDCPStatus_Entry(action, 497, 217, "CSLBASE_SetHDCPStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetHDCPStatus_Exit CSLBASE_SetHDCPStatusStopTemplate(Action<t_CSLBASE_SetHDCPStatus_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetHDCPStatus_Exit(action, 498, 217, "CSLBASE_SetHDCPStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetModePState_Entry CSLBASE_SetModePStateStartTemplate(Action<t_CSLBASE_SetModePState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetModePState_Entry(action, 435, 241, "CSLBASE_SetModePState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetModePState_Exit CSLBASE_SetModePStateStopTemplate(Action<t_CSLBASE_SetModePState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetModePState_Exit(action, 436, 241, "CSLBASE_SetModePState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetModeEntry CSLBASE_SetModeStartTemplate(Action<t_CSLBASE_SetModeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetModeEntry(action, 223, 116, "CSLBASE_SetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetModeExit CSLBASE_SetModeStopTemplate(Action<t_CSLBASE_SetModeExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetModeExit(action, 224, 116, "CSLBASE_SetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetNVHGDisplays_Entry CSLBASE_SetNVHGDisplaysStartTemplate(Action<t_CSLBASE_SetNVHGDisplays_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetNVHGDisplays_Entry(action, 475, 212, "CSLBASE_SetNVHGDisplays", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetNVHGDisplays_Exit CSLBASE_SetNVHGDisplaysStopTemplate(Action<t_CSLBASE_SetNVHGDisplays_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetNVHGDisplays_Exit(action, 476, 212, "CSLBASE_SetNVHGDisplays", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPanelPower_Entry CSLBASE_SetPanelPowerStartTemplate(Action<t_CSLBASE_SetPanelPower_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPanelPower_Entry(action, 477, 213, "CSLBASE_SetPanelPower", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPanelPower_Exit CSLBASE_SetPanelPowerStopTemplate(Action<t_CSLBASE_SetPanelPower_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPanelPower_Exit(action, 478, 213, "CSLBASE_SetPanelPower", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPlaneOrientation_Entry CSLBASE_SetPlaneOrientationStartTemplate(Action<t_CSLBASE_SetPlaneOrientation_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPlaneOrientation_Entry(action, 425, 204, "CSLBASE_SetPlaneOrientation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPlaneOrientation_Exit CSLBASE_SetPlaneOrientationStopTemplate(Action<t_CSLBASE_SetPlaneOrientation_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPlaneOrientation_Exit(action, 426, 204, "CSLBASE_SetPlaneOrientation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPNMPixelClkData_Entry CSLBASE_SetPNMPixelClkDataStartTemplate(Action<t_CSLBASE_SetPNMPixelClkData_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPNMPixelClkData_Entry(action, 471, 210, "CSLBASE_SetPNMPixelClkData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPNMPixelClkData_Exit CSLBASE_SetPNMPixelClkDataStopTemplate(Action<t_CSLBASE_SetPNMPixelClkData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPNMPixelClkData_Exit(action, 472, 210, "CSLBASE_SetPNMPixelClkData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPsrState_Entry CSLBASE_SetPsrStateStartTemplate(Action<t_CSLBASE_SetPsrState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPsrState_Entry(action, 519, 266, "CSLBASE_SetPsrState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetPsrState_Exit CSLBASE_SetPsrStateStopTemplate(Action<t_CSLBASE_SetPsrState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetPsrState_Exit(action, 520, 266, "CSLBASE_SetPsrState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetS3DParameters_Entry CSLBASE_SetS3DParametersStartTemplate(Action<t_CSLBASE_SetS3DParameters_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetS3DParameters_Entry(action, 511, 262, "CSLBASE_SetS3DParameters", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetS3DParameters_Exit CSLBASE_SetS3DParametersStopTemplate(Action<t_CSLBASE_SetS3DParameters_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetS3DParameters_Exit(action, 512, 262, "CSLBASE_SetS3DParameters", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetS3DPlaneParameters_Entry CSLBASE_SetS3DPlaneParametersStartTemplate(Action<t_CSLBASE_SetS3DPlaneParameters_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetS3DPlaneParameters_Entry(action, 513, 263, "CSLBASE_SetS3DPlaneParameters", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetS3DPlaneParameters_Exit CSLBASE_SetS3DPlaneParametersStopTemplate(Action<t_CSLBASE_SetS3DPlaneParameters_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetS3DPlaneParameters_Exit(action, 514, 263, "CSLBASE_SetS3DPlaneParameters", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_SetScratchFlagsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 387, 227, "CSLBASE_SetScratchFlags", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetScratchFlags_Exit CSLBASE_SetScratchFlagsStopTemplate(Action<t_CSLBASE_SetScratchFlags_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetScratchFlags_Exit(action, 388, 227, "CSLBASE_SetScratchFlags", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetVBIOSDispConfig_Entry CSLBASE_SetVBIOSDispConfigStartTemplate(Action<t_CSLBASE_SetVBIOSDispConfig_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetVBIOSDispConfig_Entry(action, 515, 264, "CSLBASE_SetVBIOSDispConfig", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetVBIOSDispConfig_Exit CSLBASE_SetVBIOSDispConfigStopTemplate(Action<t_CSLBASE_SetVBIOSDispConfig_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetVBIOSDispConfig_Exit(action, 516, 264, "CSLBASE_SetVBIOSDispConfig", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetVGAPipe_Entry CSLBASE_SetVGAPipeStartTemplate(Action<t_CSLBASE_SetVGAPipe_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetVGAPipe_Entry(action, 331, 172, "CSLBASE_SetVGAPipe", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SetVGAPipe_Exit CSLBASE_SetVGAPipeStopTemplate(Action<t_CSLBASE_SetVGAPipe_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SetVGAPipe_Exit(action, 332, 172, "CSLBASE_SetVGAPipe", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SimulateDP12Topology_Entry CSLBASE_SimulateDP12TopologyStartTemplate(Action<t_CSLBASE_SimulateDP12Topology_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SimulateDP12Topology_Entry(action, 529, 271, "CSLBASE_SimulateDP12Topology", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SimulateDP12Topology_Exit CSLBASE_SimulateDP12TopologyStopTemplate(Action<t_CSLBASE_SimulateDP12Topology_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SimulateDP12Topology_Exit(action, 530, 271, "CSLBASE_SimulateDP12Topology", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SwapPlanes_Entry CSLBASE_SwapPlanesStartTemplate(Action<t_CSLBASE_SwapPlanes_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SwapPlanes_Entry(action, 367, 222, "CSLBASE_SwapPlanes", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_SwapPlanes_Exit CSLBASE_SwapPlanesStopTemplate(Action<t_CSLBASE_SwapPlanes_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_SwapPlanes_Exit(action, 368, 222, "CSLBASE_SwapPlanes", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_TDRHandler_Entry CSLBASE_TDRHandlerStartTemplate(Action<t_CSLBASE_TDRHandler_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_TDRHandler_Entry(action, 421, 202, "CSLBASE_TDRHandler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_TDRHandler_Exit CSLBASE_TDRHandlerStopTemplate(Action<t_CSLBASE_TDRHandler_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_TDRHandler_Exit(action, 422, 202, "CSLBASE_TDRHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_TrimModeStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 579, 297, "CSLBASE_TrimMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_TrimMode_Exit CSLBASE_TrimModeStopTemplate(Action<t_CSLBASE_TrimMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_TrimMode_Exit(action, 580, 297, "CSLBASE_TrimMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateAndGetSinkCapabilites_Entry CSLBASE_UpdateAndGetSinkCapabilitesStartTemplate(Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateAndGetSinkCapabilites_Entry(action, 517, 265, "CSLBASE_UpdateAndGetSinkCapabilites", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateAndGetSinkCapabilites_Exit CSLBASE_UpdateAndGetSinkCapabilitesStopTemplate(Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateAndGetSinkCapabilites_Exit(action, 518, 265, "CSLBASE_UpdateAndGetSinkCapabilites", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateCDClock_Entry CSLBASE_UpdateCDClockStartTemplate(Action<t_CSLBASE_UpdateCDClock_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateCDClock_Entry(action, 611, 312, "CSLBASE_UpdateCDClock", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateCDClock_Exit CSLBASE_UpdateCDClockStopTemplate(Action<t_CSLBASE_UpdateCDClock_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateCDClock_Exit(action, 612, 312, "CSLBASE_UpdateCDClock", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateEncoderCapsInfo_Entry CSLBASE_UpdateEncoderCapsInfoStartTemplate(Action<t_CSLBASE_UpdateEncoderCapsInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateEncoderCapsInfo_Entry(action, 495, 216, "CSLBASE_UpdateEncoderCapsInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateEncoderCapsInfo_Exit CSLBASE_UpdateEncoderCapsInfoStopTemplate(Action<t_CSLBASE_UpdateEncoderCapsInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateEncoderCapsInfo_Exit(action, 496, 216, "CSLBASE_UpdateEncoderCapsInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateTPVSupportedModeList_Entry CSLBASE_UpdateTPVSupportedModeListStartTemplate(Action<t_CSLBASE_UpdateTPVSupportedModeList_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateTPVSupportedModeList_Entry(action, 499, 218, "CSLBASE_UpdateTPVSupportedModeList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_UpdateTPVSupportedModeList_Exit CSLBASE_UpdateTPVSupportedModeListStopTemplate(Action<t_CSLBASE_UpdateTPVSupportedModeList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_UpdateTPVSupportedModeList_Exit(action, 500, 218, "CSLBASE_UpdateTPVSupportedModeList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ValidateDispConfig_Entry CSLBASE_ValidateDispConfigStartTemplate(Action<t_CSLBASE_ValidateDispConfig_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ValidateDispConfig_Entry(action, 571, 293, "CSLBASE_ValidateDispConfig", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_ValidateDispConfig_Exit CSLBASE_ValidateDispConfigStopTemplate(Action<t_CSLBASE_ValidateDispConfig_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_ValidateDispConfig_Exit(action, 572, 293, "CSLBASE_ValidateDispConfig", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_VerifyMMIOAddressInRange_Entry CSLBASE_VerifyMMIOAddressInRangeStartTemplate(Action<t_CSLBASE_VerifyMMIOAddressInRange_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_VerifyMMIOAddressInRange_Entry(action, 551, 283, "CSLBASE_VerifyMMIOAddressInRange", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_VerifyMMIOAddressInRange_Exit CSLBASE_VerifyMMIOAddressInRangeStopTemplate(Action<t_CSLBASE_VerifyMMIOAddressInRange_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_VerifyMMIOAddressInRange_Exit(action, 552, 283, "CSLBASE_VerifyMMIOAddressInRange", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_WaitForVBlank_Entry CSLBASE_WaitForVBlankStartTemplate(Action<t_CSLBASE_WaitForVBlank_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_WaitForVBlank_Entry(action, 457, 248, "CSLBASE_WaitForVBlank", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CSLBASE_WaitForVBlankStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 458, 248, "CSLBASE_WaitForVBlank", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_WriteOpRegionMailBox_Entry CSLBASE_WriteOpRegionMailBoxStartTemplate(Action<t_CSLBASE_WriteOpRegionMailBox_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_WriteOpRegionMailBox_Entry(action, 431, 239, "CSLBASE_WriteOpRegionMailBox", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CSLBASE_WriteOpRegionMailBox_Exit CSLBASE_WriteOpRegionMailBoxStopTemplate(Action<t_CSLBASE_WriteOpRegionMailBox_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CSLBASE_WriteOpRegionMailBox_Exit(action, 432, 239, "CSLBASE_WriteOpRegionMailBox", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CUIEscapeEntry CUIEscapeStartTemplate(Action<t_CUIEscapeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CUIEscapeEntry(action, 50, 30, "CUIEscape", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData CUIEscapeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 51, 30, "CUIEscape", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CxsrClearPlaneLPWms CxsrClearPlaneLPWmsTemplate(Action<t_CxsrClearPlaneLPWms> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CxsrClearPlaneLPWms(action, 759, 424, "CxsrClearPlaneLPWms", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CxsrClientEventHandler CxsrClientEventHandlerTemplate(Action<t_CxsrClientEventHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CxsrClientEventHandler(action, 762, 427, "CxsrClientEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CxsrEnable CxsrEnableTemplate(Action<t_CxsrEnable> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CxsrEnable(action, 760, 425, "CxsrEnable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint CxsrEnableStopTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 783, 425, "CxsrEnable", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData CxsrExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 776, 441, "CxsrExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CxsrInitialize CxsrInitializeTemplate(Action<t_CxsrInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CxsrInitialize(action, 803, 463, "CxsrInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint CxsrPlaneLPWmPushTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 761, 426, "CxsrPlaneLPWmPush", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CxsrProgramPlaneLPWms CxsrProgramPlaneLPWmsTemplate(Action<t_CxsrProgramPlaneLPWms> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CxsrProgramPlaneLPWms(action, 758, 423, "CxsrProgramPlaneLPWms", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DecoupledMMIOArgs Decoupled_MMIO_AccessDCR_MMIO_AccessTemplate(Action<t_DecoupledMMIOArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DecoupledMMIOArgs(action, 663, 350, "Decoupled_MMIO_Access", Guid.Empty, 54, "DCR_MMIO_Access", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYIDPARSER_AddEDIDModeToList_Entry DISPLAYIDPARSER_AddEDIDModeToListStartTemplate(Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYIDPARSER_AddEDIDModeToList_Entry(action, 309, 161, "DISPLAYIDPARSER_AddEDIDModeToList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYIDPARSER_AddEDIDModeToList_Exit DISPLAYIDPARSER_AddEDIDModeToListStopTemplate(Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYIDPARSER_AddEDIDModeToList_Exit(action, 310, 161, "DISPLAYIDPARSER_AddEDIDModeToList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DISPLAYIDPARSER_GetColorBitDepthStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 305, 159, "DISPLAYIDPARSER_GetColorBitDepth", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYIDPARSER_GetColorBitDepth_Exit DISPLAYIDPARSER_GetColorBitDepthStopTemplate(Action<t_DISPLAYIDPARSER_GetColorBitDepth_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYIDPARSER_GetColorBitDepth_Exit(action, 306, 159, "DISPLAYIDPARSER_GetColorBitDepth", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry DISPLAYIDPARSER_GetDisplayIDDataBlockStartTemplate(Action<t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry(action, 307, 160, "DISPLAYIDPARSER_GetDisplayIDDataBlock", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DISPLAYIDPARSER_GetDisplayIDDataBlockStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 308, 160, "DISPLAYIDPARSER_GetDisplayIDDataBlock", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DISPLAYIDPARSER_GetVICListStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 311, 162, "DISPLAYIDPARSER_GetVICList", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYIDPARSER_GetVICList_Exit DISPLAYIDPARSER_GetVICListStopTemplate(Action<t_DISPLAYIDPARSER_GetVICList_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYIDPARSER_GetVICList_Exit(action, 312, 162, "DISPLAYIDPARSER_GetVICList", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry DISPLAYINFOROUTINES_GetDTDFromTimingInfoStartTemplate(Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry(action, 295, 154, "DISPLAYINFOROUTINES_GetDTDFromTimingInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit DISPLAYINFOROUTINES_GetDTDFromTimingInfoStopTemplate(Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit(action, 296, 154, "DISPLAYINFOROUTINES_GetDTDFromTimingInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry DISPLAYINFOROUTINES_IsSupportedCeModeStartTemplate(Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry(action, 293, 153, "DISPLAYINFOROUTINES_IsSupportedCeMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit DISPLAYINFOROUTINES_IsSupportedCeModeStopTemplate(Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit(action, 294, 153, "DISPLAYINFOROUTINES_IsSupportedCeMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DP_LinkTraining_FastLinkTraining DP_LinkTrainingFastLinkTrainingTemplate(Action<t_DP_LinkTraining_FastLinkTraining> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DP_LinkTraining_FastLinkTraining(action, 699, 369, "DP_LinkTraining", Guid.Empty, 69, "FastLinkTraining", ProviderGuid, ProviderName );
        }
        static private t_DP_LinkTraining_Start DP_LinkTrainingStartTemplate(Action<t_DP_LinkTraining_Start> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DP_LinkTraining_Start(action, 689, 369, "DP_LinkTraining", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DP_LinkTraining_Stop DP_LinkTrainingStopTemplate(Action<t_DP_LinkTraining_Stop> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DP_LinkTraining_Stop(action, 698, 369, "DP_LinkTraining", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData DpsExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 777, 442, "DpsExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsExternalEventHandler_Finish DpsExternalEventHandlerStopTemplate(Action<t_DpsExternalEventHandler_Finish> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsExternalEventHandler_Finish(action, 808, 442, "DpsExternalEventHandler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DpsGetUserDpsParams DpsGetUserDpsParamsTemplate(Action<t_DpsGetUserDpsParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsGetUserDpsParams(action, 812, 470, "DpsGetUserDpsParams", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsInitialize DpsInitializeTemplate(Action<t_DpsInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsInitialize(action, 809, 467, "DpsInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsInitSupportedPStates DpsInitSupportedPStatesTemplate(Action<t_DpsInitSupportedPStates> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsInitSupportedPStates(action, 807, 466, "DpsInitSupportedPStates", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetMaxLaneCount_Entry DPSINK_GetMaxLaneCountStartTemplate(Action<t_DPSINK_GetMaxLaneCount_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetMaxLaneCount_Entry(action, 249, 131, "DPSINK_GetMaxLaneCount", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetMaxLaneCount_Exit DPSINK_GetMaxLaneCountStopTemplate(Action<t_DPSINK_GetMaxLaneCount_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetMaxLaneCount_Exit(action, 250, 131, "DPSINK_GetMaxLaneCount", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetMaxLinkRate_Entry DPSINK_GetMaxLinkRateStartTemplate(Action<t_DPSINK_GetMaxLinkRate_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetMaxLinkRate_Entry(action, 247, 130, "DPSINK_GetMaxLinkRate", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetMaxLinkRate_Exit DPSINK_GetMaxLinkRateStopTemplate(Action<t_DPSINK_GetMaxLinkRate_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetMaxLinkRate_Exit(action, 248, 130, "DPSINK_GetMaxLinkRate", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetSinkCount_Entry DPSINK_GetSinkCountStartTemplate(Action<t_DPSINK_GetSinkCount_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetSinkCount_Entry(action, 253, 133, "DPSINK_GetSinkCount", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetSinkCount_Exit DPSINK_GetSinkCountStopTemplate(Action<t_DPSINK_GetSinkCount_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetSinkCount_Exit(action, 254, 133, "DPSINK_GetSinkCount", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetSinkType_Entry DPSINK_GetSinkTypeStartTemplate(Action<t_DPSINK_GetSinkType_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetSinkType_Entry(action, 251, 132, "DPSINK_GetSinkType", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_GetSinkType_Exit DPSINK_GetSinkTypeStopTemplate(Action<t_DPSINK_GetSinkType_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_GetSinkType_Exit(action, 252, 132, "DPSINK_GetSinkType", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_Initialize_Entry DPSINK_InitializeStartTemplate(Action<t_DPSINK_Initialize_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_Initialize_Entry(action, 245, 129, "DPSINK_Initialize", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_Initialize_Exit DPSINK_InitializeStopTemplate(Action<t_DPSINK_Initialize_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_Initialize_Exit(action, 246, 129, "DPSINK_Initialize", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_SetTrainingLevel_Entry DPSINK_SetTrainingLevelStartTemplate(Action<t_DPSINK_SetTrainingLevel_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_SetTrainingLevel_Entry(action, 257, 135, "DPSINK_SetTrainingLevel", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_SetTrainingLevel_Exit DPSINK_SetTrainingLevelStopTemplate(Action<t_DPSINK_SetTrainingLevel_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_SetTrainingLevel_Exit(action, 258, 135, "DPSINK_SetTrainingLevel", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_SetTrainingPattern_Entry DPSINK_SetTrainingPatternStartTemplate(Action<t_DPSINK_SetTrainingPattern_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_SetTrainingPattern_Entry(action, 255, 134, "DPSINK_SetTrainingPattern", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DPSINK_SetTrainingPattern_Exit DPSINK_SetTrainingPatternStopTemplate(Action<t_DPSINK_SetTrainingPattern_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DPSINK_SetTrainingPattern_Exit(action, 256, 134, "DPSINK_SetTrainingPattern", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint DpsMamCancelTimerTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 817, 475, "DpsMamCancelTimer", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint DpsMamDisableTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 815, 473, "DpsMamDisable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsMamEventHandler DpsMamEventHandlerTemplate(Action<t_DpsMamEventHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsMamEventHandler(action, 814, 472, "DpsMamEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsMamInitialize DpsMamInitializeTemplate(Action<t_DpsMamInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsMamInitialize(action, 813, 471, "DpsMamInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsMamStartTimer DpsMamStartTimerTemplate(Action<t_DpsMamStartTimer> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsMamStartTimer(action, 816, 474, "DpsMamStartTimer", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint DpsMamTimerCallbackTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 818, 476, "DpsMamTimerCallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsMamWorkItemCallback DpsMamWorkItemCallbackTemplate(Action<t_DpsMamWorkItemCallback> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsMamWorkItemCallback(action, 819, 477, "DpsMamWorkItemCallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsModeArgs DpsSetModePStateSwLegacyTemplate(Action<t_DpsModeArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsModeArgs(action, 775, 440, "DpsSetModePStateSwLegacy", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpsSetUserDpsParams DpsSetUserDpsParamsTemplate(Action<t_DpsSetUserDpsParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpsSetUserDpsParams(action, 811, 469, "DpsSetUserDpsParams", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstAlgorithmResultData DpstAlgorithmResultTemplate(Action<t_DpstAlgorithmResultData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstAlgorithmResultData(action, 747, 414, "DpstAlgorithmResult", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstClientEventHandlerData DpstClientEventHandlerTemplate(Action<t_DpstClientEventHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstClientEventHandlerData(action, 745, 412, "DpstClientEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData DpstExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 778, 443, "DpstExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistDpcWorkItemCallbackData DpstHistDpcWorkItemCallbackTemplate(Action<t_DpstHistDpcWorkItemCallbackData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistDpcWorkItemCallbackData(action, 746, 413, "DpstHistDpcWorkItemCallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramDisableData DpstHistogramDisableTemplate(Action<t_DpstHistogramDisableData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramDisableData(action, 743, 410, "DpstHistogramDisable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramEnableData DpstHistogramEnableTemplate(Action<t_DpstHistogramEnableData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramEnableData(action, 742, 409, "DpstHistogramEnable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramEnable_Gen6_Data DpstHistogramEnable_Gen6Template(Action<t_DpstHistogramEnable_Gen6_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramEnable_Gen6_Data(action, 741, 408, "DpstHistogramEnable_Gen6", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramGetStatusData DpstHistogramGetStatusTemplate(Action<t_DpstHistogramGetStatusData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramGetStatusData(action, 740, 407, "DpstHistogramGetStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramResetData DpstHistogramResetTemplate(Action<t_DpstHistogramResetData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramResetData(action, 744, 411, "DpstHistogramReset", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstHistogramUpdateGuardbandData DpstHistogramUpdateGuardbandTemplate(Action<t_DpstHistogramUpdateGuardbandData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstHistogramUpdateGuardbandData(action, 739, 406, "DpstHistogramUpdateGuardband", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstInitialize DpstInitializeTemplate(Action<t_DpstInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstInitialize(action, 802, 462, "DpstInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DpstProgramDietRegsData DpstProgramDietRegsTemplate(Action<t_DpstProgramDietRegsData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DpstProgramDietRegsData(action, 748, 415, "DpstProgramDietRegs", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcVbiState DpsVBINotificationEventHandlerTemplate(Action<t_PcVbiState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcVbiState(action, 810, 468, "DpsVBINotificationEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiAddDeviceStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 67, 35, "DxgkDdiAddDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiAddDeviceStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 68, 35, "DxgkDdiAddDevice", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiBlcSetBacklightOptimizationData DxgkDdiBlcSetBacklightOptimizationTemplate(Action<t_DxgkDdiBlcSetBacklightOptimizationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiBlcSetBacklightOptimizationData(action, 723, 389, "DxgkDdiBlcSetBacklightOptimization", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiBlcSetBrightnessData DxgkDdiBlcSetBrightnessTemplate(Action<t_DxgkDdiBlcSetBrightnessData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiBlcSetBrightnessData(action, 721, 387, "DxgkDdiBlcSetBrightness", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiBlcSetBrightnessStateData DxgkDdiBlcSetBrightnessStateTemplate(Action<t_DxgkDdiBlcSetBrightnessStateData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiBlcSetBrightnessStateData(action, 722, 388, "DxgkDdiBlcSetBrightnessState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info DxgkDdiCheckMultiPlaneOverlaySupport3Template(Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info(action, 833, 487, "DxgkDdiCheckMultiPlaneOverlaySupport3", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiCheckMultiPlaneOverlaySupport3StartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 834, 487, "DxgkDdiCheckMultiPlaneOverlaySupport3", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiCheckMultiPlaneOverlaySupport3 DxgkDdiCheckMultiPlaneOverlaySupport3StopTemplate(Action<t_DxgkDdiCheckMultiPlaneOverlaySupport3> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiCheckMultiPlaneOverlaySupport3(action, 835, 487, "DxgkDdiCheckMultiPlaneOverlaySupport3", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiCheckMultiPlaneOverlaySupportEntry DxgkDdiCheckMultiPlaneOverlaySupportStartTemplate(Action<t_DxgkDdiCheckMultiPlaneOverlaySupportEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiCheckMultiPlaneOverlaySupportEntry(action, 87, 45, "DxgkDdiCheckMultiPlaneOverlaySupport", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiCheckMultiPlaneOverlaySupportExit DxgkDdiCheckMultiPlaneOverlaySupportStopTemplate(Action<t_DxgkDdiCheckMultiPlaneOverlaySupportExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiCheckMultiPlaneOverlaySupportExit(action, 88, 45, "DxgkDdiCheckMultiPlaneOverlaySupport", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiCollectDbgInfo DxgkDdiCollectDbgInfoTemplate(Action<t_DxgkDdiCollectDbgInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiCollectDbgInfo(action, 712, 375, "DxgkDdiCollectDbgInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiCollectDbgInfo_Analysis DxgkDdiCollectDbgInfoAnalysisResultTemplate(Action<t_DxgkDdiCollectDbgInfo_Analysis> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiCollectDbgInfo_Analysis(action, 713, 375, "DxgkDdiCollectDbgInfo", Guid.Empty, 73, "AnalysisResult", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiControlInterruptEntry DxgkDdiControlInterruptTemplate(Action<t_DxgkDdiControlInterruptEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiControlInterruptEntry(action, 29, 20, "DxgkDdiControlInterrupt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiControlInterrupt2Entry DxgkDdiControlInterrupt2Template(Action<t_DxgkDdiControlInterrupt2Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiControlInterrupt2Entry(action, 33, 23, "DxgkDdiControlInterrupt2", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiControlInterrupt2StopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 34, 23, "DxgkDdiControlInterrupt2", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiControlInterruptStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 30, 20, "DxgkDdiControlInterrupt", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiControlModeBehavior_Info DxgkDdiControlModeBehaviorTemplate(Action<t_DxgkDdiControlModeBehavior_Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiControlModeBehavior_Info(action, 708, 378, "DxgkDdiControlModeBehavior", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_EVCMInfo DxgkDdiEnumVidPnCofuncModalityTemplate(Action<t_EVCMInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EVCMInfo(action, 63, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail DxgkDdiEnumVidPnCofuncModalityFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 0, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_EVCMSourceInfo DxgkDdiEnumVidPnCofuncModalitySourceInfoTemplate(Action<t_EVCMSourceInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EVCMSourceInfo(action, 36, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 17, "SourceInfo", ProviderGuid, ProviderName );
        }
        static private t_EVCMEntry DxgkDdiEnumVidPnCofuncModalityStartTemplate(Action<t_EVCMEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EVCMEntry(action, 5, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiEnumVidPnCofuncModalityStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 6, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_EVCMTargetInfo DxgkDdiEnumVidPnCofuncModalityTargetInfoTemplate(Action<t_EVCMTargetInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EVCMTargetInfo(action, 35, 4, "DxgkDdiEnumVidPnCofuncModality", Guid.Empty, 16, "TargetInfo", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiGetScanLineEntry DxgkDdiGetScanLineStartTemplate(Action<t_DxgkDdiGetScanLineEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiGetScanLineEntry(action, 19, 11, "DxgkDdiGetScanLine", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiGetScanLineStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 20, 11, "DxgkDdiGetScanLine", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_ISVInfo DxgkDdiIsSupportedVidPnTemplate(Action<t_ISVInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ISVInfo(action, 62, 7, "DxgkDdiIsSupportedVidPn", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail DxgkDdiIsSupportedVidPnFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 65, 7, "DxgkDdiIsSupportedVidPn", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_ISVPathInfo DxgkDdiIsSupportedVidPnPathInfoTemplate(Action<t_ISVPathInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ISVPathInfo(action, 38, 7, "DxgkDdiIsSupportedVidPn", Guid.Empty, 15, "PathInfo", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiIsSupportedVidPnStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 11, 7, "DxgkDdiIsSupportedVidPn", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_ISVExit DxgkDdiIsSupportedVidPnStopTemplate(Action<t_ISVExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ISVExit(action, 12, 7, "DxgkDdiIsSupportedVidPn", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiNotifyAcpiEventEntry DxgkDdiNotifyAcpiEventStartTemplate(Action<t_DxgkDdiNotifyAcpiEventEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiNotifyAcpiEventEntry(action, 25, 18, "DxgkDdiNotifyAcpiEvent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiNotifyAcpiEventStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 26, 18, "DxgkDdiNotifyAcpiEvent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiNotifySurpriseRemovalStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 69, 36, "DxgkDdiNotifySurpriseRemoval", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiNotifySurpriseRemovalStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 70, 36, "DxgkDdiNotifySurpriseRemoval", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiPresentDisplayOnly DxgkDdiPresentDisplayOnlyTemplate(Action<t_DxgkDdiPresentDisplayOnly> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiPresentDisplayOnly(action, 715, 381, "DxgkDdiPresentDisplayOnly", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiQueryAdapterInfo DxgkDdiQueryAdapterInfoStartTemplate(Action<t_DxgkDdiQueryAdapterInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiQueryAdapterInfo(action, 71, 37, "DxgkDdiQueryAdapterInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiQueryAdapterInfoStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 72, 37, "DxgkDdiQueryAdapterInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiQueryChildRelationsStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 123, 70, "DxgkDdiQueryChildRelations", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiQueryChildRelationsStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 124, 70, "DxgkDdiQueryChildRelations", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiQueryChildStatusEntry DxgkDdiQueryChildStatusStartTemplate(Action<t_DxgkDdiQueryChildStatusEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiQueryChildStatusEntry(action, 23, 17, "DxgkDdiQueryChildStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiQueryChildStatusStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 24, 17, "DxgkDdiQueryChildStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiQueryDeviceDescriptorEntry DxgkDdiQueryDeviceDescriptorStartTemplate(Action<t_DxgkDdiQueryDeviceDescriptorEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiQueryDeviceDescriptorEntry(action, 101, 49, "DxgkDdiQueryDeviceDescriptor", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiQueryDeviceDescriptorStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 102, 49, "DxgkDdiQueryDeviceDescriptor", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiQueryInterfaceEntry DxgkDdiQueryInterfaceStartTemplate(Action<t_DxgkDdiQueryInterfaceEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiQueryInterfaceEntry(action, 73, 38, "DxgkDdiQueryInterface", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiQueryInterfaceExit DxgkDdiQueryInterfaceStopTemplate(Action<t_DxgkDdiQueryInterfaceExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiQueryInterfaceExit(action, 74, 38, "DxgkDdiQueryInterface", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRecommendFunctionalVidPnStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 7, 5, "DxgkDdiRecommendFunctionalVidPn", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRecommendFunctionalVidPnStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 8, 5, "DxgkDdiRecommendFunctionalVidPn", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRecommendVidPnTopologyStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 9, 6, "DxgkDdiRecommendVidPnTopology", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRecommendVidPnTopologyStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 10, 6, "DxgkDdiRecommendVidPnTopology", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiResetFromTimeoutDC_StopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 76, 39, "DxgkDdiResetFromTimeout", Guid.Empty, 4, "DC_Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiResetFromTimeoutStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 75, 39, "DxgkDdiResetFromTimeout", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRestartFromTimeoutStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 81, 42, "DxgkDdiRestartFromTimeout", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiRestartFromTimeoutStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 82, 42, "DxgkDdiRestartFromTimeout", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetPointerShapeEntry DxgkDdiSetPointerShapeStartTemplate(Action<t_DxgkDdiSetPointerShapeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetPointerShapeEntry(action, 27, 19, "DxgkDdiSetPointerShape", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetPointerShapeExit DxgkDdiSetPointerShapeStopTemplate(Action<t_DxgkDdiSetPointerShapeExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetPointerShapeExit(action, 28, 19, "DxgkDdiSetPointerShape", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetPowerComponentFStateEntry DxgkDdiSetPowerComponentFStateStartTemplate(Action<t_DxgkDdiSetPowerComponentFStateEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetPowerComponentFStateEntry(action, 31, 21, "DxgkDdiSetPowerComponentFState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetPowerComponentFStateStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 32, 21, "DxgkDdiSetPowerComponentFState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkddiSetPowerStateEntry DxgkDdiSetPowerState_taskStartTemplate(Action<t_DxgkddiSetPowerStateEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkddiSetPowerStateEntry(action, 21, 12, "DxgkDdiSetPowerState_task", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetPowerState_taskStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 22, 12, "DxgkDdiSetPowerState_task", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail DxgkDdiSetVidPnSourceAddressFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 39, 9, "DxgkDdiSetVidPnSourceAddress", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_SetVidpnSourceAddressEntry DxgkDdiSetVidPnSourceAddressStartTemplate(Action<t_SetVidpnSourceAddressEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetVidpnSourceAddressEntry(action, 15, 9, "DxgkDdiSetVidPnSourceAddress", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetVidPnSourceAddressStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 16, 9, "DxgkDdiSetVidPnSourceAddress", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_SSAMPO3_pPostComposition DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PipeScalerTemplate(Action<t_SSAMPO3_pPostComposition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SSAMPO3_pPostComposition(action, 832, 486, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3", Guid.Empty, 66, "PipeScaler", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PlaneTemplate(Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info(action, 831, 486, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3", Guid.Empty, 74, "Plane", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 829, 486, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 830, 486, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 86, 44, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStartTemplate(Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry(action, 84, 44, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 85, 44, "DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceVisibilityEntry DxgkDdiSetVidPnSourceVisibilityStartTemplate(Action<t_DxgkDdiSetVidPnSourceVisibilityEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceVisibilityEntry(action, 17, 10, "DxgkDdiSetVidPnSourceVisibility", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceVisibilityExit DxgkDdiSetVidPnSourceVisibilityStopTemplate(Action<t_DxgkDdiSetVidPnSourceVisibilityExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceVisibilityExit(action, 18, 10, "DxgkDdiSetVidPnSourceVisibility", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiStartDeviceStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 637, 335, "DxgkDdiStartDevice", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiStartDeviceExit DxgkDdiStartDeviceStopTemplate(Action<t_DxgkDdiStartDeviceExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiStartDeviceExit(action, 638, 335, "DxgkDdiStartDevice", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStartTemplate(Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry(action, 77, 40, "DxgkDdiStopDeviceAndReleasePostDisplayOwnership", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStopTemplate(Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit(action, 78, 40, "DxgkDdiStopDeviceAndReleasePostDisplayOwnership", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSubmitCommand DxgkDdiSubmitCommandTemplate(Action<t_DxgkDdiSubmitCommand> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSubmitCommand(action, 664, 351, "DxgkDdiSubmitCommand", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiUnloadStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 79, 41, "DxgkDdiUnload", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiUnloadStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 80, 41, "DxgkDdiUnload", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiSetVidPnSourceAddressFail DxgkDdiUpdateActiveVidPnPresentPathFailedTemplate(Action<t_DxgkDdiSetVidPnSourceAddressFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiSetVidPnSourceAddressFail(action, 40, 8, "DxgkDdiUpdateActiveVidPnPresentPath", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiUpdateActiveVidPnPresentPathEntry DxgkDdiUpdateActiveVidPnPresentPathStartTemplate(Action<t_DxgkDdiUpdateActiveVidPnPresentPathEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiUpdateActiveVidPnPresentPathEntry(action, 13, 8, "DxgkDdiUpdateActiveVidPnPresentPath", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData DxgkDdiUpdateActiveVidPnPresentPathStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 14, 8, "DxgkDdiUpdateActiveVidPnPresentPath", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiUpdateMonitorLinkInfo_Info DxgkDdiUpdateMonitorLinkInfoTemplate(Action<t_DxgkDdiUpdateMonitorLinkInfo_Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiUpdateMonitorLinkInfo_Info(action, 707, 377, "DxgkDdiUpdateMonitorLinkInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_Add4kx2kMode_Entry EDIDPARSER_Add4kx2kModeStartTemplate(Action<t_EDIDPARSER_Add4kx2kMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_Add4kx2kMode_Entry(action, 297, 155, "EDIDPARSER_Add4kx2kMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_Add4kx2kMode_Exit EDIDPARSER_Add4kx2kModeStopTemplate(Action<t_EDIDPARSER_Add4kx2kMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_Add4kx2kMode_Exit(action, 298, 155, "EDIDPARSER_Add4kx2kMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_ExtractInfoFromCVT_Entry EDIDPARSER_ExtractInfoFromCVTStartTemplate(Action<t_EDIDPARSER_ExtractInfoFromCVT_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_ExtractInfoFromCVT_Entry(action, 303, 158, "EDIDPARSER_ExtractInfoFromCVT", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData EDIDPARSER_ExtractInfoFromCVTStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 304, 158, "EDIDPARSER_ExtractInfoFromCVT", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_ParseVTBExt_DTDs_Entry EDIDPARSER_ParseVTBExt_DTDsStartTemplate(Action<t_EDIDPARSER_ParseVTBExt_DTDs_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_ParseVTBExt_DTDs_Entry(action, 301, 157, "EDIDPARSER_ParseVTBExt_DTDs", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_ParseVTBExt_DTDs_Exit EDIDPARSER_ParseVTBExt_DTDsStopTemplate(Action<t_EDIDPARSER_ParseVTBExt_DTDs_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_ParseVTBExt_DTDs_Exit(action, 302, 157, "EDIDPARSER_ParseVTBExt_DTDs", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_ValidateVTBExtension_Entry EDIDPARSER_ValidateVTBExtensionStartTemplate(Action<t_EDIDPARSER_ValidateVTBExtension_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_ValidateVTBExtension_Entry(action, 299, 156, "EDIDPARSER_ValidateVTBExtension", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_EDIDPARSER_ValidateVTBExtension_Exit EDIDPARSER_ValidateVTBExtensionStopTemplate(Action<t_EDIDPARSER_ValidateVTBExtension_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EDIDPARSER_ValidateVTBExtension_Exit(action, 300, 156, "EDIDPARSER_ValidateVTBExtension", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_EventServiceEntry EventServiceStartTemplate(Action<t_EventServiceEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_EventServiceEntry(action, 48, 29, "EventService", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData EventServiceStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 49, 29, "EventService", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_FbcRegData FbcDisable_Gen9Template(Action<t_FbcRegData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcRegData(action, 763, 428, "FbcDisable_Gen9", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_FbcRegData FbcEnable_Gen9Template(Action<t_FbcRegData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcRegData(action, 764, 429, "FbcEnable_Gen9", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData FbcExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 779, 444, "FbcExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint FbcInvalidateLineSegmentsTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 765, 430, "FbcInvalidateLineSegments", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_FbcRegData FbcSetCompressionControlTemplate(Action<t_FbcRegData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcRegData(action, 766, 431, "FbcSetCompressionControl", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_FbcRegData FbcSetCpuFenceControlTemplate(Action<t_FbcRegData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcRegData(action, 767, 432, "FbcSetCpuFenceControl", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_FbcSetupGmmData FbcSetupGmmDataTemplate(Action<t_FbcSetupGmmData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcSetupGmmData(action, 768, 433, "FbcSetupGmmData", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GEN9HDMICONTROLLER_NotifyPowerWellChange GEN9HDMICONTROLLER_NotifyPowerWellChangeTemplate(Action<t_GEN9HDMICONTROLLER_NotifyPowerWellChange> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GEN9HDMICONTROLLER_NotifyPowerWellChange(action, 653, 343, "GEN9HDMICONTROLLER_NotifyPowerWellChange", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_NotifyPowerWellChangeEntry GEN9HDMICONTROLLER_NotifyPowerWellChangeStartTemplate(Action<t_NotifyPowerWellChangeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_NotifyPowerWellChangeEntry(action, 652, 343, "GEN9HDMICONTROLLER_NotifyPowerWellChange", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GenericTest Generic_Test1Template(Action<t_GenericTest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericTest(action, 125, 71, "Generic_Test1", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericTest Generic_Test2Template(Action<t_GenericTest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericTest(action, 126, 72, "Generic_Test2", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericTest Generic_Test3Template(Action<t_GenericTest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericTest(action, 127, 73, "Generic_Test3", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_SystemInfoExit GetSystemInfoTemplate(Action<t_SystemInfoExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SystemInfoExit(action, 90, 46, "GetSystemInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GetSystemInfoStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 89, 46, "GetSystemInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GetSystemPowerState_Entry GetSystemPowerStateStartTemplate(Action<t_GetSystemPowerState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GetSystemPowerState_Entry(action, 587, 301, "GetSystemPowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GetSystemPowerState_Exit GetSystemPowerStateStopTemplate(Action<t_GetSystemPowerState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GetSystemPowerState_Exit(action, 588, 301, "GetSystemPowerState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxCheckPresentDurationSupportInfo GfxCheckPresentDurationSupportTemplate(Action<t_GfxCheckPresentDurationSupportInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxCheckPresentDurationSupportInfo(action, 97, 47, "GfxCheckPresentDurationSupport", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxCheckPresentDurationSupportStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 91, 47, "GfxCheckPresentDurationSupport", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_CheckPresentDurationSupportExit GfxCheckPresentDurationSupportStopTemplate(Action<t_CheckPresentDurationSupportExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CheckPresentDurationSupportExit(action, 92, 47, "GfxCheckPresentDurationSupport", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientAllocateResourceFailure GfxClientAllocateResourceFailedTemplate(Action<t_GfxClientAllocateResourceFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientAllocateResourceFailure(action, 196, 105, "GfxClientAllocateResource", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientAllocateResourceEntry GfxClientAllocateResourceStartTemplate(Action<t_GfxClientAllocateResourceEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientAllocateResourceEntry(action, 194, 105, "GfxClientAllocateResource", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientAllocateResourceExit GfxClientAllocateResourceStopTemplate(Action<t_GfxClientAllocateResourceExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientAllocateResourceExit(action, 195, 105, "GfxClientAllocateResource", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCloseGPUFailure GfxClientCloseGPUFailedTemplate(Action<t_GfxClientCloseGPUFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCloseGPUFailure(action, 193, 104, "GfxClientCloseGPU", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCloseGPU GfxClientCloseGPUStartTemplate(Action<t_GfxClientCloseGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCloseGPU(action, 191, 104, "GfxClientCloseGPU", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCloseGPU GfxClientCloseGPUStopTemplate(Action<t_GfxClientCloseGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCloseGPU(action, 192, 104, "GfxClientCloseGPU", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientDeallocateResourceFailure GfxClientDeallocateResourceFailedTemplate(Action<t_GfxClientDeallocateResourceFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientDeallocateResourceFailure(action, 199, 106, "GfxClientDeallocateResource", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientDeallocateResourceEntry GfxClientDeallocateResourceStartTemplate(Action<t_GfxClientDeallocateResourceEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientDeallocateResourceEntry(action, 197, 106, "GfxClientDeallocateResource", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientDeallocateResourceExit GfxClientDeallocateResourceStopTemplate(Action<t_GfxClientDeallocateResourceExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientDeallocateResourceExit(action, 198, 106, "GfxClientDeallocateResource", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientEngineReset GfxClientEngineResetStartTemplate(Action<t_GfxClientEngineReset> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientEngineReset(action, 210, 112, "GfxClientEngineReset", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientEngineReset GfxClientEngineResetStopTemplate(Action<t_GfxClientEngineReset> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientEngineReset(action, 211, 112, "GfxClientEngineReset", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientMapBufferFailure GfxClientMapBufferFailedTemplate(Action<t_GfxClientMapBufferFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientMapBufferFailure(action, 202, 107, "GfxClientMapBuffer", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientUnmapBufferEntry GfxClientMapBufferStartTemplate(Action<t_GfxClientUnmapBufferEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientUnmapBufferEntry(action, 200, 107, "GfxClientMapBuffer", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientUnmapBufferExit GfxClientMapBufferStopTemplate(Action<t_GfxClientUnmapBufferExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientUnmapBufferExit(action, 201, 107, "GfxClientMapBuffer", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientOpenGPUFailure GfxClientOpenGPUFailedTemplate(Action<t_GfxClientOpenGPUFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientOpenGPUFailure(action, 190, 103, "GfxClientOpenGPU", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientOpenGPU GfxClientOpenGPUStartTemplate(Action<t_GfxClientOpenGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientOpenGPU(action, 188, 103, "GfxClientOpenGPU", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientOpenGPU GfxClientOpenGPUStopTemplate(Action<t_GfxClientOpenGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientOpenGPU(action, 189, 103, "GfxClientOpenGPU", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientPowerStateTransition GfxClientPowerStateTransitionStartTemplate(Action<t_GfxClientPowerStateTransition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientPowerStateTransition(action, 212, 111, "GfxClientPowerStateTransition", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientPowerStateTransition GfxClientPowerStateTransitionStopTemplate(Action<t_GfxClientPowerStateTransition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientPowerStateTransition(action, 213, 111, "GfxClientPowerStateTransition", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientQueryGPU GfxClientQueryGPUStartTemplate(Action<t_GfxClientQueryGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientQueryGPU(action, 186, 102, "GfxClientQueryGPU", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientQueryGPU GfxClientQueryGPUStopTemplate(Action<t_GfxClientQueryGPU> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientQueryGPU(action, 187, 102, "GfxClientQueryGPU", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientTdrReset GfxClientTdrResetStartTemplate(Action<t_GfxClientTdrReset> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientTdrReset(action, 206, 109, "GfxClientTdrReset", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientTdrReset GfxClientTdrResetStopTemplate(Action<t_GfxClientTdrReset> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientTdrReset(action, 207, 109, "GfxClientTdrReset", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientTdrRestart GfxClientTdrRestartTemplate(Action<t_GfxClientTdrRestart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientTdrRestart(action, 208, 110, "GfxClientTdrRestart", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientTdrRestart GfxClientTdrRestartStopTemplate(Action<t_GfxClientTdrRestart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientTdrRestart(action, 209, 110, "GfxClientTdrRestart", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientUnmapBufferFailure GfxClientUnmapBufferFailedTemplate(Action<t_GfxClientUnmapBufferFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientUnmapBufferFailure(action, 205, 108, "GfxClientUnmapBuffer", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientUnmapBufferEntry GfxClientUnmapBufferStartTemplate(Action<t_GfxClientUnmapBufferEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientUnmapBufferEntry(action, 203, 108, "GfxClientUnmapBuffer", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientUnmapBufferExit GfxClientUnmapBufferStopTemplate(Action<t_GfxClientUnmapBufferExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientUnmapBufferExit(action, 204, 108, "GfxClientUnmapBuffer", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxConfigHDCPForLPAudioInfo GfxConfigHDCPForLPAudioTemplate(Action<t_GfxConfigHDCPForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxConfigHDCPForLPAudioInfo(action, 116, 63, "GfxConfigHDCPForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxControlDisplayDevicePowerStateEntry GfxControlDisplayDevicePowerStateStartTemplate(Action<t_GfxControlDisplayDevicePowerStateEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxControlDisplayDevicePowerStateEntry(action, 45, 26, "GfxControlDisplayDevicePowerState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxControlDisplayDevicePowerStateStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 46, 26, "GfxControlDisplayDevicePowerState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxEnableDisableInterruptForLPAudioInfo GfxDisableInterruptForLPAudioTemplate(Action<t_GfxEnableDisableInterruptForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxEnableDisableInterruptForLPAudioInfo(action, 122, 69, "GfxDisableInterruptForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxEnableDisableInterruptForLPAudioInfo GfxEnableInterruptForLPAudioTemplate(Action<t_GfxEnableDisableInterruptForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxEnableDisableInterruptForLPAudioInfo(action, 121, 68, "GfxEnableInterruptForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail GfxFastSetModeFailedTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 166, 28, "GfxFastSetMode", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxFastSetModeEntry GfxFastSetModeStartTemplate(Action<t_GfxFastSetModeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxFastSetModeEntry(action, 98, 28, "GfxFastSetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxFastSetModeExit GfxFastSetModeStopTemplate(Action<t_GfxFastSetModeExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxFastSetModeExit(action, 100, 28, "GfxFastSetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxGetConfigForLPAudioInfo GfxGetConfigForLPAudioTemplate(Action<t_GfxGetConfigForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxGetConfigForLPAudioInfo(action, 110, 57, "GfxGetConfigForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxGetHwConfigForLPAudioTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 112, 59, "GfxGetHwConfigForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxGuC2HostMessage GfxGuc2HostInterruptTemplate(Action<t_GfxGuC2HostMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxGuC2HostMessage(action, 665, 352, "GfxGuc2HostInterrupt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxIndicateChildStatusEntry GfxIndicateChildStatusStartTemplate(Action<t_GfxIndicateChildStatusEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxIndicateChildStatusEntry(action, 43, 25, "GfxIndicateChildStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxIndicateChildStatusStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 44, 25, "GfxIndicateChildStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxInitSSTInterfaceForLPAudioTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 107, 54, "GfxInitSSTInterfaceForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxInterfaceExitForLPAudioTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 108, 55, "GfxInterfaceExitForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxNotifyLPAudioEventInfo GfxNotifyLPAudioEventTemplate(Action<t_GfxNotifyLPAudioEventInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxNotifyLPAudioEventInfo(action, 119, 66, "GfxNotifyLPAudioEvent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxNotifyLPAudioHdcpNotificationStatusInfo GfxNotifyLPAudioHdcpNotificationStatusTemplate(Action<t_GfxNotifyLPAudioHdcpNotificationStatusInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxNotifyLPAudioHdcpNotificationStatusInfo(action, 120, 67, "GfxNotifyLPAudioHdcpNotificationStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxNotifyLPAudioISRInfo GfxNotifyLPAudioISRTemplate(Action<t_GfxNotifyLPAudioISRInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxNotifyLPAudioISRInfo(action, 118, 65, "GfxNotifyLPAudioISR", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxPageFaultInfo GfxPageFaultTemplate(Action<t_GfxPageFaultInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPageFaultInfo(action, 670, 353, "GfxPageFault", Guid.Empty, 55, "PageFault", ProviderGuid, ProviderName );
        }
        static private t_GfxPageFaultFeatureStatus GfxPageFaultSupportTemplate(Action<t_GfxPageFaultFeatureStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPageFaultFeatureStatus(action, 669, 353, "GfxPageFault", Guid.Empty, 80, "Support", ProviderGuid, ProviderName );
        }
        static private t_GfxReadWriteDeviceSpaceForLPAudioInfo GfxReadDeviceSpaceForLPAudioTemplate(Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxReadWriteDeviceSpaceForLPAudioInfo(action, 113, 60, "GfxReadDeviceSpaceForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo GfxReadModifyWriteDeviceSpaceForLPAudioTemplate(Action<t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo(action, 115, 62, "GfxReadModifyWriteDeviceSpaceForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxSetConfigForLPAudioInfo GfxSetConfigForLPAudioTemplate(Action<t_GfxSetConfigForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxSetConfigForLPAudioInfo(action, 109, 56, "GfxSetConfigForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxSetModeEntry GfxSetModeStartTemplate(Action<t_GfxSetModeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxSetModeEntry(action, 47, 27, "GfxSetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData GfxSetModeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 60, 27, "GfxSetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo GfxSetSstToDxgkInterfaceStateForLPEAudioTemplate(Action<t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo(action, 117, 64, "GfxSetSstToDxgkInterfaceStateForLPEAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericTest GfxTest4Template(Action<t_GenericTest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericTest(action, 167, 91, "GfxTest4", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericTest GfxTest5Template(Action<t_GenericTest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericTest(action, 168, 92, "GfxTest5", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericUpdateAudioStateInfo GfxUpdateCPReadyAudioStateTemplate(Action<t_GenericUpdateAudioStateInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericUpdateAudioStateInfo(action, 106, 53, "GfxUpdateCPReadyAudioState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericUpdateAudioStateInfo GfxUpdateELDAudioStateTemplate(Action<t_GenericUpdateAudioStateInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericUpdateAudioStateInfo(action, 105, 52, "GfxUpdateELDAudioState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericUpdateAudioStateInfo GfxUpdateELDAudioStateForLegacyTemplate(Action<t_GenericUpdateAudioStateInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericUpdateAudioStateInfo(action, 111, 58, "GfxUpdateELDAudioStateForLegacy", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericUpdateAudioStateInfo GfxUpdateIAAudioStateTemplate(Action<t_GenericUpdateAudioStateInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericUpdateAudioStateInfo(action, 104, 51, "GfxUpdateIAAudioState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GenericUpdateAudioStateInfo GfxUpdatePDAudioStateTemplate(Action<t_GenericUpdateAudioStateInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GenericUpdateAudioStateInfo(action, 103, 50, "GfxUpdatePDAudioState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxReadWriteDeviceSpaceForLPAudioInfo GfxWriteDeviceSpaceForLPAudioTemplate(Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxReadWriteDeviceSpaceForLPAudioInfo(action, 114, 61, "GfxWriteDeviceSpaceForLPAudio", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GmmBlockEntryValidationFailure GMM_block_entry_validationFailedTemplate(Action<t_GmmBlockEntryValidationFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GmmBlockEntryValidationFailure(action, 219, 115, "GMM_block_entry_validation", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxclientContextValidationFailure Graphics_client_context_validationFailedTemplate(Action<t_GfxclientContextValidationFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxclientContextValidationFailure(action, 218, 114, "Graphics_client_context_validation", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCallbackFailure Graphics_client_makes_a_callback_to_graphics_driverFailedTemplate(Action<t_GfxClientCallbackFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCallbackFailure(action, 185, 101, "Graphics_client_makes_a_callback_to_graphics_driver", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCallbackEntry Graphics_client_makes_a_callback_to_graphics_driverStartTemplate(Action<t_GfxClientCallbackEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCallbackEntry(action, 183, 101, "Graphics_client_makes_a_callback_to_graphics_driver", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientCallbackSuccess Graphics_client_makes_a_callback_to_graphics_driverStopTemplate(Action<t_GfxClientCallbackSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientCallbackSuccess(action, 184, 101, "Graphics_client_makes_a_callback_to_graphics_driver", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientSubmissionDestroy Graphics_client_submission_context_destroyStartTemplate(Action<t_GfxClientSubmissionDestroy> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientSubmissionDestroy(action, 180, 98, "Graphics_client_submission_context_destroy", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientSubmissionDestroy Graphics_client_submission_context_destroyStopTemplate(Action<t_GfxClientSubmissionDestroy> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientSubmissionDestroy(action, 181, 98, "Graphics_client_submission_context_destroy", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxClientSubmissionInitFailure Graphics_client_submission_context_initializationFailedTemplate(Action<t_GfxClientSubmissionInitFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientSubmissionInitFailure(action, 179, 97, "Graphics_client_submission_context_initialization", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientSubmissionInit Graphics_client_submission_context_initializationStartTemplate(Action<t_GfxClientSubmissionInit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientSubmissionInit(action, 177, 97, "Graphics_client_submission_context_initialization", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientSubmissionInit Graphics_client_submission_context_initializationStopTemplate(Action<t_GfxClientSubmissionInit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientSubmissionInit(action, 178, 97, "Graphics_client_submission_context_initialization", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GTCControl GTCControlPSR2Template(Action<t_GTCControl> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GTCControl(action, 672, 356, "GTCControl", Guid.Empty, 56, "PSR2", ProviderGuid, ProviderName );
        }
        static private t_HDCPEncryptionStatus HDCP_EncryptionStatusTemplate(Action<t_HDCPEncryptionStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCPEncryptionStatus(action, 633, 334, "HDCP_EncryptionStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2DebugMesage HDCP2_DebugMessageTemplate(Action<t_HDCP2DebugMesage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2DebugMesage(action, 627, 324, "HDCP2_DebugMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_TargetID_Status HDCP2KMD_AuthenticateTemplate(Action<t_TargetID_Status> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_TargetID_Status(action, 631, 329, "HDCP2KMD_Authenticate", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2Escape HDCP2KMD_EscapeTemplate(Action<t_HDCP2Escape> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2Escape(action, 628, 326, "HDCP2KMD_Escape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2Datapacket HDCP2KMD_QueueDataPacketTemplate(Action<t_HDCP2Datapacket> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2Datapacket(action, 629, 327, "HDCP2KMD_QueueDataPacket", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2SetStreamData HDCP2KMD_SetStreamTemplate(Action<t_HDCP2SetStreamData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2SetStreamData(action, 632, 330, "HDCP2KMD_SetStream", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_TargetID_Status HDCP2KMD_SyncProcDoneTemplate(Action<t_TargetID_Status> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_TargetID_Status(action, 630, 328, "HDCP2KMD_SyncProcDone", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2AuthStepState HDCP2UMD_AuthencationStepStateTemplate(Action<t_HDCP2AuthStepState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2AuthStepState(action, 616, 316, "HDCP2UMD_AuthencationStepState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_TargetID_Status HDCP2UMD_AuthenticateStartTemplate(Action<t_TargetID_Status> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_TargetID_Status(action, 621, 320, "HDCP2UMD_Authenticate", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData HDCP2UMD_AuthenticateStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 622, 320, "HDCP2UMD_Authenticate", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_HDCP2AuthStatus HDCP2UMD_AuthenticationStausTemplate(Action<t_HDCP2AuthStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2AuthStatus(action, 620, 319, "HDCP2UMD_AuthenticationStaus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCPUMD_DevInstance HDCP2UMD_DeviceInstanceTemplate(Action<t_HDCPUMD_DevInstance> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCPUMD_DevInstance(action, 643, 338, "HDCP2UMD_DeviceInstance", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2Error HDCP2UMD_ErrorTemplate(Action<t_HDCP2Error> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2Error(action, 617, 317, "HDCP2UMD_Error", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2Information HDCP2UMD_InformationTemplate(Action<t_HDCP2Information> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2Information(action, 618, 318, "HDCP2UMD_Information", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2_MsgPacket HDCP2UMD_MessagePacketReadTemplate(Action<t_HDCP2_MsgPacket> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2_MsgPacket(action, 614, 315, "HDCP2UMD_MessagePacket", Guid.Empty, 34, "Read", ProviderGuid, ProviderName );
        }
        static private t_HDCP2_MsgPacket HDCP2UMD_MessagePacketWriteTemplate(Action<t_HDCP2_MsgPacket> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2_MsgPacket(action, 615, 315, "HDCP2UMD_MessagePacket", Guid.Empty, 35, "Write", ProviderGuid, ProviderName );
        }
        static private t_HDCPUMDProcKmdPacket HDCP2UMD_ProcessKMDPacketTemplate(Action<t_HDCPUMDProcKmdPacket> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCPUMDProcKmdPacket(action, 642, 337, "HDCP2UMD_ProcessKMDPacket", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDCP2RxStatusDP HDCP2UMD_RxStatusDPTemplate(Action<t_HDCP2RxStatusDP> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2RxStatusDP(action, 626, 323, "HDCP2UMD_RxStatus", Guid.Empty, 36, "DP", ProviderGuid, ProviderName );
        }
        static private t_HDCP2RxStatusHDMI HDCP2UMD_RxStatusHDMITemplate(Action<t_HDCP2RxStatusHDMI> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2RxStatusHDMI(action, 625, 323, "HDCP2UMD_RxStatus", Guid.Empty, 37, "HDMI", ProviderGuid, ProviderName );
        }
        static private t_HDCPUMD_KMDQueueHeader HDCP2UMD_ServiceKMDEventTemplate(Action<t_HDCPUMD_KMDQueueHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCPUMD_KMDQueueHeader(action, 640, 336, "HDCP2UMD_ServiceKMDEvent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData HDCP2UMD_ServiceKMDEventStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 639, 336, "HDCP2UMD_ServiceKMDEvent", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData HDCP2UMD_ServiceKMDEventStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 641, 336, "HDCP2UMD_ServiceKMDEvent", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_HDCP2SetStreamData HDCP2UMD_SetStreamTypeStartTemplate(Action<t_HDCP2SetStreamData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2SetStreamData(action, 623, 321, "HDCP2UMD_SetStreamType", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData HDCP2UMD_SetStreamTypeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 624, 321, "HDCP2UMD_SetStreamType", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_HDCP2Warning HDCP2UMD_WarningTemplate(Action<t_HDCP2Warning> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDCP2Warning(action, 619, 325, "HDCP2UMD_Warning", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDRCaps_Info HDRCapsTemplate(Action<t_HDRCaps_Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDRCaps_Info(action, 700, 373, "HDRCaps", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HDRCaps_CSL_Info HDRCapsCSL_InfoTemplate(Action<t_HDRCaps_CSL_Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HDRCaps_CSL_Info(action, 701, 373, "HDRCaps", Guid.Empty, 70, "CSL_Info", ProviderGuid, ProviderName );
        }
        static private t_HECI_IO_MSG HECI_IO_MessageTemplate(Action<t_HECI_IO_MSG> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HECI_IO_MSG(action, 661, 348, "HECI_IO_Message", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_HPD_AND_SPI_Spi HPD_AND_SPITemplate(Action<t_HPD_AND_SPI_Spi> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HPD_AND_SPI_Spi(action, 678, 359, "HPD_AND_SPI", Guid.Empty, 60, "SPI", ProviderGuid, ProviderName );
        }
        static private t_HPD_AND_SPI_Lpi HPD_AND_SPILPITemplate(Action<t_HPD_AND_SPI_Lpi> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_HPD_AND_SPI_Lpi(action, 679, 359, "HPD_AND_SPI", Guid.Empty, 61, "LPI", ProviderGuid, ProviderName );
        }
        static private t_I2CTransaction I2CTransactionTemplate(Action<t_I2CTransaction> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_I2CTransaction(action, 681, 361, "I2CTransaction", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_InterruptRepartition Interrupt_event_taskTemplate(Action<t_InterruptRepartition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_InterruptRepartition(action, 668, 113, "Interrupt_event_task", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DxgkDdiInterruptRoutine Interrupt_event_taskOpcode_for_interruptsTemplate(Action<t_DxgkDdiInterruptRoutine> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DxgkDdiInterruptRoutine(action, 217, 113, "Interrupt_event_task", Guid.Empty, 30, "Opcode_for_interrupts", ProviderGuid, ProviderName );
        }
        static private t_InterruptRepartition Interrupt_event_taskStartTemplate(Action<t_InterruptRepartition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_InterruptRepartition(action, 666, 113, "Interrupt_event_task", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_InterruptRepartition Interrupt_event_taskStopTemplate(Action<t_InterruptRepartition> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_InterruptRepartition(action, 667, 113, "Interrupt_event_task", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_IsDisplayAttached_Entry INTHDMIENCODER_IsDisplayAttachedStartTemplate(Action<t_INTHDMIENCODER_IsDisplayAttached_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_IsDisplayAttached_Entry(action, 235, 124, "INTHDMIENCODER_IsDisplayAttached", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_IsDisplayAttached_Exit INTHDMIENCODER_IsDisplayAttachedStopTemplate(Action<t_INTHDMIENCODER_IsDisplayAttached_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_IsDisplayAttached_Exit(action, 236, 124, "INTHDMIENCODER_IsDisplayAttached", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_IsHotPlugSupported_Entry INTHDMIENCODER_IsHotPlugSupportedStartTemplate(Action<t_INTHDMIENCODER_IsHotPlugSupported_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_IsHotPlugSupported_Entry(action, 237, 125, "INTHDMIENCODER_IsHotPlugSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_IsHotPlugSupported_Exit INTHDMIENCODER_IsHotPlugSupportedStopTemplate(Action<t_INTHDMIENCODER_IsHotPlugSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_IsHotPlugSupported_Exit(action, 238, 125, "INTHDMIENCODER_IsHotPlugSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_SendHDMIInfo_Entry INTHDMIENCODER_SendHDMIInfoStartTemplate(Action<t_INTHDMIENCODER_SendHDMIInfo_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_SendHDMIInfo_Entry(action, 243, 128, "INTHDMIENCODER_SendHDMIInfo", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData INTHDMIENCODER_SendHDMIInfoStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 244, 128, "INTHDMIENCODER_SendHDMIInfo", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry INTHDMIENCODER_ServiceHotPlugInterruptStartTemplate(Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry(action, 241, 127, "INTHDMIENCODER_ServiceHotPlugInterrupt", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit INTHDMIENCODER_ServiceHotPlugInterruptStopTemplate(Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit(action, 242, 127, "INTHDMIENCODER_ServiceHotPlugInterrupt", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_SetHotPlug_Entry INTHDMIENCODER_SetHotPlugStartTemplate(Action<t_INTHDMIENCODER_SetHotPlug_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_SetHotPlug_Entry(action, 239, 126, "INTHDMIENCODER_SetHotPlug", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_INTHDMIENCODER_SetHotPlug_Exit INTHDMIENCODER_SetHotPlugStopTemplate(Action<t_INTHDMIENCODER_SetHotPlug_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_INTHDMIENCODER_SetHotPlug_Exit(action, 240, 126, "INTHDMIENCODER_SetHotPlug", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_IPC IPCTemplate(Action<t_IPC> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IPC(action, 686, 366, "IPC", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_IsAudioENabledInBIOS IsAudioEnabledInBIOSTemplate(Action<t_IsAudioENabledInBIOS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IsAudioENabledInBIOS(action, 655, 346, "IsAudioEnabledInBIOS", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_OverlayDBUFData IsDBUFAllocatedForOverlayTemplate(Action<t_OverlayDBUFData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OverlayDBUFData(action, 714, 380, "IsDBUFAllocatedForOverlay", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_IsIntelAudioDriverPresent IsIntelAudioDriverPresentTemplate(Action<t_IsIntelAudioDriverPresent> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IsIntelAudioDriverPresent(action, 654, 345, "IsIntelAudioDriverPresent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_LaceApplyIeData LaceApplyIeTemplate(Action<t_LaceApplyIeData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LaceApplyIeData(action, 752, 417, "LaceApplyIe", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint LaceApplyIeStartTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 751, 417, "LaceApplyIe", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint LaceApplyIeStopTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 785, 417, "LaceApplyIe", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_LaceClientEventHandlerData LaceClientEventHandlerTemplate(Action<t_LaceClientEventHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LaceClientEventHandlerData(action, 755, 420, "LaceClientEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_LaceDisableData LaceDisableTemplate(Action<t_LaceDisableData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LaceDisableData(action, 754, 419, "LaceDisable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_LaceEnableData LaceEnableTemplate(Action<t_LaceEnableData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LaceEnableData(action, 753, 418, "LaceEnable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData LaceExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 780, 445, "LaceExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_LaceHistogramData LaceHistogramReadTemplate(Action<t_LaceHistogramData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LaceHistogramData(action, 750, 416, "LaceHistogramRead", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint LaceHistogramReadStartTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 749, 416, "LaceHistogramRead", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint LaceHistogramReadStopTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 784, 416, "LaceHistogramRead", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_LSPCON_AuxAccess LSPCON_AuxAccessTemplate(Action<t_LSPCON_AuxAccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_LSPCON_AuxAccess(action, 662, 349, "LSPCON_AuxAccess", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_MapLHArgsToSBArgs_Entry MapLHArgsToSBArgsStartTemplate(Action<t_MapLHArgsToSBArgs_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MapLHArgsToSBArgs_Entry(action, 343, 179, "MapLHArgsToSBArgs", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MapLHArgsToSBArgs_Exit MapLHArgsToSBArgsStopTemplate(Action<t_MapLHArgsToSBArgs_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MapLHArgsToSBArgs_Exit(action, 344, 179, "MapLHArgsToSBArgs", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MarkerData MarkerEventTemplate(Action<t_MarkerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MarkerData(action, 83, 43, "MarkerEvent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_DebugMessage MiniportDebugMessageTemplate(Action<t_DebugMessage> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DebugMessage(action, 645, 340, "MiniportDebugMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_MMIOAccessData MMIOReadTemplate(Action<t_MMIOAccessData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MMIOAccessData(action, 703, 339, "MMIO", Guid.Empty, 34, "Read", ProviderGuid, ProviderName );
        }
        static private t_MMIOAccessData MMIOWriteTemplate(Action<t_MMIOAccessData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MMIOAccessData(action, 644, 339, "MMIO", Guid.Empty, 35, "Write", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_AddDisplayModes_Entry MODESMANAGER_AddDisplayModesStartTemplate(Action<t_MODESMANAGER_AddDisplayModes_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_AddDisplayModes_Entry(action, 259, 136, "MODESMANAGER_AddDisplayModes", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData MODESMANAGER_AddDisplayModesStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 260, 136, "MODESMANAGER_AddDisplayModes", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_AddVBTModes_Entry MODESMANAGER_AddVBTModesStartTemplate(Action<t_MODESMANAGER_AddVBTModes_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_AddVBTModes_Entry(action, 261, 137, "MODESMANAGER_AddVBTModes", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData MODESMANAGER_AddVBTModesStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 262, 137, "MODESMANAGER_AddVBTModes", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_GetLastSetModeData_Entry MODESMANAGER_GetLastSetModeDataStartTemplate(Action<t_MODESMANAGER_GetLastSetModeData_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_GetLastSetModeData_Entry(action, 269, 141, "MODESMANAGER_GetLastSetModeData", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_GetLastSetModeData_Exit MODESMANAGER_GetLastSetModeDataStopTemplate(Action<t_MODESMANAGER_GetLastSetModeData_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_GetLastSetModeData_Exit(action, 270, 141, "MODESMANAGER_GetLastSetModeData", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_GetModeSupport_Entry MODESMANAGER_GetModeSupportStartTemplate(Action<t_MODESMANAGER_GetModeSupport_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_GetModeSupport_Entry(action, 267, 140, "MODESMANAGER_GetModeSupport", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_GetModeSupport_Exit MODESMANAGER_GetModeSupportStopTemplate(Action<t_MODESMANAGER_GetModeSupport_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_GetModeSupport_Exit(action, 268, 140, "MODESMANAGER_GetModeSupport", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData MODESMANAGER_NotifyCommitEndStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 263, 138, "MODESMANAGER_NotifyCommitEnd", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_NotifyCommitEnd_Exit MODESMANAGER_NotifyCommitEndStopTemplate(Action<t_MODESMANAGER_NotifyCommitEnd_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_NotifyCommitEnd_Exit(action, 264, 138, "MODESMANAGER_NotifyCommitEnd", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_SetModePState_Entry MODESMANAGER_SetModePStateStartTemplate(Action<t_MODESMANAGER_SetModePState_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_SetModePState_Entry(action, 265, 139, "MODESMANAGER_SetModePState", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_SetModePState_Exit MODESMANAGER_SetModePStateStopTemplate(Action<t_MODESMANAGER_SetModePState_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_SetModePState_Exit(action, 266, 139, "MODESMANAGER_SetModePState", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_SetMode_Entry MODESMANAGER_SetModeStartTemplate(Action<t_MODESMANAGER_SetMode_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_SetMode_Entry(action, 271, 142, "MODESMANAGER_SetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_MODESMANAGER_SetMode_Exit MODESMANAGER_SetModeStopTemplate(Action<t_MODESMANAGER_SetMode_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_MODESMANAGER_SetMode_Exit(action, 272, 142, "MODESMANAGER_SetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_NotifyGfxStatus Notify_graphics_client_graphics_drivers_statusNotifications_from_graphics_driver_to_graphics_client_or_vice_versaTemplate(Action<t_NotifyGfxStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_NotifyGfxStatus(action, 182, 99, "Notify_graphics_client_graphics_drivers_status", Guid.Empty, 29, "Notifications_from_graphics_driver_to_graphics_client_or_vice_versa", ProviderGuid, ProviderName );
        }
        static private t_GfxClientNotifyStatusFailure Notify_graphics_driver_graphics_clients_statusFailedTemplate(Action<t_GfxClientNotifyStatusFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientNotifyStatusFailure(action, 216, 100, "Notify_graphics_driver_graphics_clients_status", Guid.Empty, 10, "Failed", ProviderGuid, ProviderName );
        }
        static private t_GfxClientNotifyStatus Notify_graphics_driver_graphics_clients_statusStartTemplate(Action<t_GfxClientNotifyStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientNotifyStatus(action, 214, 100, "Notify_graphics_driver_graphics_clients_status", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GfxClientNotifyStatus Notify_graphics_driver_graphics_clients_statusStopTemplate(Action<t_GfxClientNotifyStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxClientNotifyStatus(action, 215, 100, "Notify_graphics_driver_graphics_clients_status", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_GfxNotifyPCEntry Notify_PowerConservationStartTemplate(Action<t_GfxNotifyPCEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxNotifyPCEntry(action, 41, 24, "Notify_PowerConservation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData Notify_PowerConservationStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 42, 24, "Notify_PowerConservation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_OPMConfigureProtectedOutput OPM_ConfigureProtectedOutputTemplate(Action<t_OPMConfigureProtectedOutput> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OPMConfigureProtectedOutput(action, 635, 332, "OPM_ConfigureProtectedOutput", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_OPMCreateProtectedOutput OPM_CreateProtectedOutputTemplate(Action<t_OPMCreateProtectedOutput> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OPMCreateProtectedOutput(action, 634, 331, "OPM_CreateProtectedOutput", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_OPMCreateProtectedOutput OPM_DestroyProtectedOutputTemplate(Action<t_OPMCreateProtectedOutput> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OPMCreateProtectedOutput(action, 636, 333, "OPM_DestroyProtectedOutput", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_TargetID_Status OPMGetSetParametersLockAcquiredTemplate(Action<t_TargetID_Status> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_TargetID_Status(action, 659, 347, "OPMGetSetParameters", Guid.Empty, 53, "LockAcquired", ProviderGuid, ProviderName );
        }
        static private t_OPMGetSetParamData OPMGetSetParametersStartTemplate(Action<t_OPMGetSetParamData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OPMGetSetParamData(action, 658, 347, "OPMGetSetParameters", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_OPMGetSetParamData OPMGetSetParametersStopTemplate(Action<t_OPMGetSetParamData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_OPMGetSetParamData(action, 660, 347, "OPMGetSetParameters", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PathSetModeEntry PathSetModeStartTemplate(Action<t_PathSetModeEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PathSetModeEntry(action, 52, 31, "PathSetMode", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData PathSetModeStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 54, 31, "PathSetMode", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PathSetScanLine PathSetScanLineStartTemplate(Action<t_PathSetScanLine> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PathSetScanLine(action, 56, 33, "PathSetScanLine", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData PathSetScanLineStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 57, 33, "PathSetScanLine", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PathSetVisibilityEntry PathSetVisibilityStartTemplate(Action<t_PathSetVisibilityEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PathSetVisibilityEntry(action, 53, 32, "PathSetVisibility", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData PathSetVisibilityStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 55, 32, "PathSetVisibility", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData PAVP_AutoTearDownTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 704, 354, "PAVP_AutoTearDown", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PavpInfo PavpInfoTemplate(Action<t_PavpInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PavpInfo(action, 716, 382, "PavpInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData PcEventNotificationProcessingTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 718, 384, "PcEventNotificationProcessing", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData PcEventNotificationReceivedTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 717, 383, "PcEventNotificationReceived", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcGfxRegValueBinary PcGfxRegValueBinaryReadTemplate(Action<t_PcGfxRegValueBinary> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcGfxRegValueBinary(action, 824, 481, "PcGfxRegValueBinaryRead", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcGfxRegValueBinary PcGfxRegValueBinaryWriteTemplate(Action<t_PcGfxRegValueBinary> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcGfxRegValueBinary(action, 825, 482, "PcGfxRegValueBinaryWrite", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcGfxRegValueDword PcGfxRegValueDwordReadTemplate(Action<t_PcGfxRegValueDword> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcGfxRegValueDword(action, 822, 479, "PcGfxRegValueDwordRead", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcGfxRegValueDword PcGfxRegValueDwordWriteTemplate(Action<t_PcGfxRegValueDword> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcGfxRegValueDword(action, 823, 480, "PcGfxRegValueDwordWrite", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData PcMediaWorkloadDetectionTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 756, 421, "PcMediaWorkloadDetection", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcPowerPlanRegValue PcPowerPlanRegValueReadTemplate(Action<t_PcPowerPlanRegValue> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcPowerPlanRegValue(action, 828, 485, "PcPowerPlanRegValueRead", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcRegValueFullPathDword PcRegValueFullPathDwordReadTemplate(Action<t_PcRegValueFullPathDword> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcRegValueFullPathDword(action, 826, 483, "PcRegValueFullPathDwordRead", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcRegValueFullPathDword PcRegValueFullPathDwordWriteTemplate(Action<t_PcRegValueFullPathDword> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcRegValueFullPathDword(action, 827, 484, "PcRegValueFullPathDwordWrite", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcVbiState PcVbiStateTemplate(Action<t_PcVbiState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcVbiState(action, 757, 422, "PcVbiState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PFMBOpRegHandlerData PFMBOpRegHandlerTemplate(Action<t_PFMBOpRegHandlerData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PFMBOpRegHandlerData(action, 726, 392, "PFMBOpRegHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorApplyStartTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 788, 450, "PhaseCoordinatorApply", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorApplyStopTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 789, 450, "PhaseCoordinatorApply", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint PhaseCoordinatorCancelTimerTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 791, 452, "PhaseCoordinatorCancelTimer", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorInitializeTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 786, 448, "PhaseCoordinatorInitialize", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorProgramAdjust PhaseCoordinatorProgramAdjustStartTemplate(Action<t_PhaseCoordinatorProgramAdjust> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorProgramAdjust(action, 792, 453, "PhaseCoordinatorProgramAdjust", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorProgramAdjustStopTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 793, 453, "PhaseCoordinatorProgramAdjust", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorResetAdjustTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 794, 454, "PhaseCoordinatorResetAdjust", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorSetupDpstPhasing PhaseCoordinatorSetupDpstPhasingTemplate(Action<t_PhaseCoordinatorSetupDpstPhasing> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorSetupDpstPhasing(action, 796, 456, "PhaseCoordinatorSetupDpstPhasing", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorStartTimer PhaseCoordinatorStartTimerTemplate(Action<t_PhaseCoordinatorStartTimer> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorStartTimer(action, 790, 451, "PhaseCoordinatorStartTimer", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PhaseCoordinatorContext PhaseCoordinatorTimerCallbackTemplate(Action<t_PhaseCoordinatorContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PhaseCoordinatorContext(action, 787, 449, "PhaseCoordinatorTimerCallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcTimePoint PhaseCoordinatorWorkItemCallbackTemplate(Action<t_PcTimePoint> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcTimePoint(action, 795, 455, "PhaseCoordinatorWorkItemCallback", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PipeUnderRun_BasicInfo PipeUnderRunTemplate(Action<t_PipeUnderRun_BasicInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PipeUnderRun_BasicInfo(action, 690, 370, "PipeUnderRun", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PipeUnderRun_MemoryInfo PipeUnderRunMemoryInfoTemplate(Action<t_PipeUnderRun_MemoryInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PipeUnderRun_MemoryInfo(action, 691, 370, "PipeUnderRun", Guid.Empty, 63, "MemoryInfo", ProviderGuid, ProviderName );
        }
        static private t_PipeUnderRun_PipeScaler PipeUnderRunPipeScalerTemplate(Action<t_PipeUnderRun_PipeScaler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PipeUnderRun_PipeScaler(action, 694, 370, "PipeUnderRun", Guid.Empty, 66, "PipeScaler", ProviderGuid, ProviderName );
        }
        static private t_PipeUnderRun_Plane PipeUnderRunPlaneTemplate(Action<t_PipeUnderRun_Plane> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PipeUnderRun_Plane(action, 692, 370, "PipeUnderRun", Guid.Empty, 74, "Plane", ProviderGuid, ProviderName );
        }
        static private t_PipeUnderRun_Plane_WM PipeUnderRunPlane_WMTemplate(Action<t_PipeUnderRun_Plane_WM> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PipeUnderRun_Plane_WM(action, 693, 370, "PipeUnderRun", Guid.Empty, 65, "Plane_WM", ProviderGuid, ProviderName );
        }
        static private t_DisplayDoubleBuffSync PlaneProgrammingDisplayDBSToggleTemplate(Action<t_DisplayDoubleBuffSync> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DisplayDoubleBuffSync(action, 711, 379, "PlaneProgramming", Guid.Empty, 78, "DisplayDBSToggle", ProviderGuid, ProviderName );
        }
        static private t_DisplayPlaneArming PlaneProgrammingDisplayPlaneWriteTemplate(Action<t_DisplayPlaneArming> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DisplayPlaneArming(action, 709, 379, "PlaneProgramming", Guid.Empty, 76, "DisplayPlaneWrite", ProviderGuid, ProviderName );
        }
        static private t_DisplayScalerArming PlaneProgrammingDisplayScalerArmingTemplate(Action<t_DisplayScalerArming> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_DisplayScalerArming(action, 710, 379, "PlaneProgramming", Guid.Empty, 77, "DisplayScalerArming", ProviderGuid, ProviderName );
        }
        static private t_PoshEvent_Info PoshEventTemplate(Action<t_PoshEvent_Info> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PoshEvent_Info(action, 821, 395, "PoshEvent", Guid.Empty, 81, "PoshEvent", ProviderGuid, ProviderName );
        }
        static private t_ProgramDBuf ProgramDBufGen9Template(Action<t_ProgramDBuf> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ProgramDBuf(action, 685, 365, "ProgramDBuf", Guid.Empty, 62, "Gen9", ProviderGuid, ProviderName );
        }
        static private t_ProgramWaterMark ProgramWaterMarkGen9Template(Action<t_ProgramWaterMark> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_ProgramWaterMark(action, 684, 364, "ProgramWaterMark", Guid.Empty, 62, "Gen9", ProviderGuid, ProviderName );
        }
        static private t_PSR_Features_MBO PSR_FeaturesMBOTemplate(Action<t_PSR_Features_MBO> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PSR_Features_MBO(action, 675, 357, "PSR_Features", Guid.Empty, 57, "MBO", ProviderGuid, ProviderName );
        }
        static private t_PSR_Features_PSR1 PSR_FeaturesPSR1Template(Action<t_PSR_Features_PSR1> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PSR_Features_PSR1(action, 673, 357, "PSR_Features", Guid.Empty, 75, "PSR1", ProviderGuid, ProviderName );
        }
        static private t_PSR_Features_PSR2 PSR_FeaturesPSR2Template(Action<t_PSR_Features_PSR2> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PSR_Features_PSR2(action, 674, 357, "PSR_Features", Guid.Empty, 56, "PSR2", ProviderGuid, ProviderName );
        }
        static private t_PsrCapability PsrCapabilityTemplate(Action<t_PsrCapability> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrCapability(action, 671, 355, "PsrCapability", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrClientEventHandler PsrClientEventHandlerTemplate(Action<t_PsrClientEventHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrClientEventHandler(action, 774, 439, "PsrClientEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrParams PsrEnterTemplate(Action<t_PsrParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrParams(action, 769, 434, "PsrEnter", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrParams PsrExitTemplate(Action<t_PsrParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrParams(action, 770, 435, "PsrExit", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcEventNotificationData PsrExternalEventHandlerTemplate(Action<t_PcEventNotificationData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcEventNotificationData(action, 781, 446, "PsrExternalEventHandler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrParams PsrSendSfuTemplate(Action<t_PsrParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrParams(action, 771, 436, "PsrSendSfu", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrParams PsrSetMediaPlaybackStateTemplate(Action<t_PsrParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrParams(action, 772, 437, "PsrSetMediaPlaybackState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PsrParams PsrSetSfuModeTemplate(Action<t_PsrParams> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PsrParams(action, 773, 438, "PsrSetSfuMode", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcVbtInfo PwrConsEnableDisablePCFeaturesFromVBTTemplate(Action<t_PcVbtInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcVbtInfo(action, 798, 458, "PwrConsEnableDisablePCFeaturesFromVBT", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PwrConsEscapeData PwrConsEscapeTemplate(Action<t_PwrConsEscapeData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PwrConsEscapeData(action, 719, 385, "PwrConsEscape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PwrConsLfpCapabilities PwrConsGetLfpCapabilitiesTemplate(Action<t_PwrConsLfpCapabilities> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PwrConsLfpCapabilities(action, 797, 457, "PwrConsGetLfpCapabilities", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PcVbtInfo PwrConsGetUserBootInfoTemplate(Action<t_PcVbtInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PcVbtInfo(action, 799, 459, "PwrConsGetUserBootInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_FbcRegData PwrConsInitFbcCpuTrackingTemplate(Action<t_FbcRegData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_FbcRegData(action, 800, 460, "PwrConsInitFbcCpuTracking", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PwrConsLoadPolicyTable PwrConsLoadPolicyTableTemplate(Action<t_PwrConsLoadPolicyTable> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PwrConsLoadPolicyTable(action, 782, 447, "PwrConsLoadPolicyTable", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PwrConsUpdateMamData PwrConsUpdateMamDataTemplate(Action<t_PwrConsUpdateMamData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PwrConsUpdateMamData(action, 820, 478, "PwrConsUpdateMamData", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PwrConsUserPolicyData PwrConsUserPolicyTemplate(Action<t_PwrConsUserPolicyData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PwrConsUserPolicyData(action, 720, 386, "PwrConsUserPolicy", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_PresentID ReportPresentIDFlipDoneTemplate(Action<t_PresentID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PresentID(action, 836, 488, "ReportPresentID", Guid.Empty, 83, "FlipDone", ProviderGuid, ProviderName );
        }
        static private t_PresentID ReportPresentIDVBITemplate(Action<t_PresentID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_PresentID(action, 837, 488, "ReportPresentID", Guid.Empty, 82, "VBI", ProviderGuid, ProviderName );
        }
        static private t_RTD3_DCState RTD3_TaskRTD3_DCState_EventInfoTemplate(Action<t_RTD3_DCState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_RTD3_DCState(action, 172, 95, "RTD3_Task", Guid.Empty, 43, "RTD3_DCState_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_RTD3 RTD3_TaskRTD3_EventInfoTemplate(Action<t_RTD3> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_RTD3(action, 171, 95, "RTD3_Task", Guid.Empty, 27, "RTD3_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_SetDCState SetDCStateTemplate(Action<t_SetDCState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetDCState(action, 688, 368, "SetDCState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_SetDisplayStart SetDisplayStartTemplate(Action<t_SetDisplayStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetDisplayStart(action, 695, 371, "SetDisplayStart", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_SetHDRMetaData SetHDRMetaDataTemplate(Action<t_SetHDRMetaData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetHDRMetaData(action, 702, 374, "SetHDRMetaData", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_SetMode_EnablePort SetModeEnablePortTemplate(Action<t_SetMode_EnablePort> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetMode_EnablePort(action, 697, 372, "SetMode", Guid.Empty, 68, "EnablePort", ProviderGuid, ProviderName );
        }
        static private t_SetMode_PostDisplayDisable SetModePostDisplayDisableTemplate(Action<t_SetMode_PostDisplayDisable> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_SetMode_PostDisplayDisable(action, 696, 372, "SetMode", Guid.Empty, 67, "PostDisplayDisable", ProviderGuid, ProviderName );
        }
        static private t_GfxValStubDivaUlt TaskpertainingtoEventsgeneratedforDIVAULTfromGfxValStubTemplate(Action<t_GfxValStubDivaUlt> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxValStubDivaUlt(action, 838, 489, "TaskpertainingtoEventsgeneratedforDIVAULTfromGfxValStub", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GfxPinning This_is_task_associated_with_Gfx_PinningPinning_EventInfoTemplate(Action<t_GfxPinning> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinning(action, 173, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 28, "Pinning_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningCBInfo This_is_task_associated_with_Gfx_PinningPinningCB_InfoTemplate(Action<t_GfxPinningCBInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningCBInfo(action, 222, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 33, "PinningCB_Info", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningArgs This_is_task_associated_with_Gfx_PinningPinningInterface_EventInfoTemplate(Action<t_GfxPinningArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningArgs(action, 174, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 44, "PinningInterface_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningRequestInfo This_is_task_associated_with_Gfx_PinningPinningRequest_InfoTemplate(Action<t_GfxPinningRequestInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningRequestInfo(action, 221, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 32, "PinningRequest_Info", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningResInfo This_is_task_associated_with_Gfx_PinningPinningResMgr_EventInfoTemplate(Action<t_GfxPinningResInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningResInfo(action, 176, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 46, "PinningResMgr_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningSchedulerInfo This_is_task_associated_with_Gfx_PinningPinningScheduler_EventInfoTemplate(Action<t_GfxPinningSchedulerInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningSchedulerInfo(action, 175, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 45, "PinningScheduler_EventInfo", ProviderGuid, ProviderName );
        }
        static private t_GfxPinningStatusInfo This_is_task_associated_with_Gfx_PinningPinningStatus_InfoTemplate(Action<t_GfxPinningStatusInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxPinningStatusInfo(action, 220, 96, "This_is_task_associated_with_Gfx_Pinning", Guid.Empty, 31, "PinningStatus_Info", ProviderGuid, ProviderName );
        }
        static private t_GfxEngineReset This_task_is_associated_with_Engine_Reset_and_Media_ResetTemplate(Action<t_GfxEngineReset> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GfxEngineReset(action, 613, 314, "This_task_is_associated_with_Engine_Reset_and_Media_Reset", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData VBIsPipe_ATemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 93, 48, "VBIs", Guid.Empty, 11, "Pipe_A", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData VBIsPipe_BTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 94, 48, "VBIs", Guid.Empty, 12, "Pipe_B", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData VBIsPipe_CTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 95, 48, "VBIs", Guid.Empty, 13, "Pipe_C", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData VBIsPipe_WiDiTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 96, 48, "VBIs", Guid.Empty, 14, "Pipe_WiDi", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_EDPFillSimilarPnPId_Entry VBTMANAGER_EDPFillSimilarPnPIdStartTemplate(Action<t_VBTMANAGER_EDPFillSimilarPnPId_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_EDPFillSimilarPnPId_Entry(action, 317, 165, "VBTMANAGER_EDPFillSimilarPnPId", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_EDPFillSimilarPnPId_Exit VBTMANAGER_EDPFillSimilarPnPIdStopTemplate(Action<t_VBTMANAGER_EDPFillSimilarPnPId_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_EDPFillSimilarPnPId_Exit(action, 318, 165, "VBTMANAGER_EDPFillSimilarPnPId", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_FillSimilarPnPId_Entry VBTMANAGER_FillSimilarPnPIdStartTemplate(Action<t_VBTMANAGER_FillSimilarPnPId_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_FillSimilarPnPId_Entry(action, 319, 166, "VBTMANAGER_FillSimilarPnPId", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_FillSimilarPnPId_Exit VBTMANAGER_FillSimilarPnPIdStopTemplate(Action<t_VBTMANAGER_FillSimilarPnPId_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_FillSimilarPnPId_Exit(action, 320, 166, "VBTMANAGER_FillSimilarPnPId", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_GetBIOSDataBlockByID_Entry VBTMANAGER_GetBIOSDataBlockByIDTemplate(Action<t_VBTMANAGER_GetBIOSDataBlockByID_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_GetBIOSDataBlockByID_Entry(action, 321, 167, "VBTMANAGER_GetBIOSDataBlockByID", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData VBTMANAGER_GetBIOSDataBlockByIDStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 322, 167, "VBTMANAGER_GetBIOSDataBlockByID", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_GetPSRDetails_Entry VBTMANAGER_GetPSRDetailsStartTemplate(Action<t_VBTMANAGER_GetPSRDetails_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_GetPSRDetails_Entry(action, 313, 163, "VBTMANAGER_GetPSRDetails", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_GetPSRDetails_Exit VBTMANAGER_GetPSRDetailsStopTemplate(Action<t_VBTMANAGER_GetPSRDetails_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_GetPSRDetails_Exit(action, 314, 163, "VBTMANAGER_GetPSRDetails", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_IsDisplayTypeSupported_Entry VBTMANAGER_IsDisplayTypeSupportedStartTemplate(Action<t_VBTMANAGER_IsDisplayTypeSupported_Entry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_IsDisplayTypeSupported_Entry(action, 315, 164, "VBTMANAGER_IsDisplayTypeSupported", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_VBTMANAGER_IsDisplayTypeSupported_Exit VBTMANAGER_IsDisplayTypeSupportedStopTemplate(Action<t_VBTMANAGER_IsDisplayTypeSupported_Exit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_VBTMANAGER_IsDisplayTypeSupported_Exit(action, 316, 164, "VBTMANAGER_IsDisplayTypeSupported", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WaterMarkInitialize WaterMarkInitializeGen9Template(Action<t_WaterMarkInitialize> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WaterMarkInitialize(action, 682, 362, "WaterMarkInitialize", Guid.Empty, 62, "Gen9", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WiDi_PAVP_SessionEstablishedTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 647, 341, "WiDi_PAVP_Session", Guid.Empty, 41, "Established", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WiDi_PAVP_SessionTearDownTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 646, 341, "WiDi_PAVP_Session", Guid.Empty, 40, "TearDown", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WiDi_PAVP_SessionTerminateTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 648, 341, "WiDi_PAVP_Session", Guid.Empty, 42, "Terminate", ProviderGuid, ProviderName );
        }
        static private t_WiDiOpenLoop WiDiOpenLoopStatusTemplate(Action<t_WiDiOpenLoop> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiDiOpenLoop(action, 170, 94, "WiDiOpenLoopStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WiDiPAVPAutoTearDownTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 169, 93, "WiDiPAVPAutoTearDown", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_IGD_ALLOC_CHANNEL_BW_ARGS WIGIG_AllocateChannelBWStartTemplate(Action<t_IGD_ALLOC_CHANNEL_BW_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IGD_ALLOC_CHANNEL_BW_ARGS(action, 148, 84, "WIGIG_AllocateChannelBW", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_AllocateChannelBWStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 149, 84, "WIGIG_AllocateChannelBW", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WIGIG_CreateWGBoxBufferStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 154, 87, "WIGIG_CreateWGBoxBuffer", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_GMM_EncodeState WIGIG_CreateWGBoxBufferWiGig_encode_state_bufferTemplate(Action<t_GMM_EncodeState> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GMM_EncodeState(action, 155, 87, "WIGIG_CreateWGBoxBuffer", Guid.Empty, 23, "WiGig_encode_state_buffer", ProviderGuid, ProviderName );
        }
        static private t_GMM_EncodeDisRefSurface WIGIG_CreateWGBoxBufferWiGig_EncodeDisplaySurfaceTemplate(Action<t_GMM_EncodeDisRefSurface> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GMM_EncodeDisRefSurface(action, 156, 87, "WIGIG_CreateWGBoxBuffer", Guid.Empty, 24, "WiGig_EncodeDisplaySurface", ProviderGuid, ProviderName );
        }
        static private t_GMM_EncodeDisRefSurface WIGIG_CreateWGBoxBufferWiGig_EncodeReferenceSurfaceTemplate(Action<t_GMM_EncodeDisRefSurface> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GMM_EncodeDisRefSurface(action, 157, 87, "WIGIG_CreateWGBoxBuffer", Guid.Empty, 25, "WiGig_EncodeReferenceSurface", ProviderGuid, ProviderName );
        }
        static private t_GMM_EncodeTfdSurface WIGIG_CreateWGBoxBufferWiGig_EncodeTfdSurfaceTemplate(Action<t_GMM_EncodeTfdSurface> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GMM_EncodeTfdSurface(action, 164, 87, "WIGIG_CreateWGBoxBuffer", Guid.Empty, 26, "WiGig_EncodeTfdSurface", ProviderGuid, ProviderName );
        }
        static private t_CriticalDDIFail WiGig_FailureTemplate(Action<t_CriticalDDIFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_CriticalDDIFail(action, 163, 90, "WiGig_Failure", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_GMMResFree WIGIG_GmmResFreeTemplate(Action<t_GMMResFree> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_GMMResFree(action, 165, 88, "WIGIG_GmmResFree", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_WIGIG_IGDCallBackFunctionInfo WIGIG_IGDCallBackFunctionStartTemplate(Action<t_WIGIG_IGDCallBackFunctionInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WIGIG_IGDCallBackFunctionInfo(action, 130, 75, "WIGIG_IGDCallBackFunction", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WIGIG_IGDCallBackFunctionStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 131, 75, "WIGIG_IGDCallBackFunction", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WIGIG_IGDCB_GetRefClkCounterStartTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 136, 78, "WIGIG_IGDCB_GetRefClkCounter", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WNIC_CLK_REF_COUNTER_ARGS WIGIG_IGDCB_GetRefClkCounterStopTemplate(Action<t_WNIC_CLK_REF_COUNTER_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WNIC_CLK_REF_COUNTER_ARGS(action, 137, 78, "WIGIG_IGDCB_GetRefClkCounter", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WIGIG_PASSTHROUGH_DATA WIGIG_IGDCB_NotifyIGDAsPassThroughStartTemplate(Action<t_WIGIG_PASSTHROUGH_DATA> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WIGIG_PASSTHROUGH_DATA(action, 132, 76, "WIGIG_IGDCB_NotifyIGDAsPassThrough", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_IGDCB_NotifyIGDAsPassThroughStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 133, 76, "WIGIG_IGDCB_NotifyIGDAsPassThrough", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WNIC_RECEIVER_CONNECTIVITY_ARGS WIGIG_IGDCB_NotifyReceiverStatusStartTemplate(Action<t_WNIC_RECEIVER_CONNECTIVITY_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WNIC_RECEIVER_CONNECTIVITY_ARGS(action, 140, 80, "WIGIG_IGDCB_NotifyReceiverStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_IGDCB_NotifyReceiverStatusStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 141, 80, "WIGIG_IGDCB_NotifyReceiverStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_IGD_TFD_HEAD_TAIL_PTR_ARGS WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStartTemplate(Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IGD_TFD_HEAD_TAIL_PTR_ARGS(action, 134, 77, "WIGIG_IGDCB_NotifyWGBoxTFDHeadPointer", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 135, 77, "WIGIG_IGDCB_NotifyWGBoxTFDHeadPointer", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WNIC_IGD_STATUS_ARGS WIGIG_IGDCB_NotifyWNICStatusStartTemplate(Action<t_WNIC_IGD_STATUS_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WNIC_IGD_STATUS_ARGS(action, 138, 79, "WIGIG_IGDCB_NotifyWNICStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_IGDCB_NotifyWNICStatusStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 139, 79, "WIGIG_IGDCB_NotifyWNICStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WGBOX1_CAPTURE_COMPLETE WIGIG_INTERRUPTWIGIG_CAPTURE_COMPLETETemplate(Action<t_WGBOX1_CAPTURE_COMPLETE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WGBOX1_CAPTURE_COMPLETE(action, 650, 342, "WIGIG_INTERRUPT", Guid.Empty, 48, "WIGIG_CAPTURE_COMPLETE", ProviderGuid, ProviderName );
        }
        static private t_WGBOX1_END_OF_FRAME_INTERRUPT WIGIG_INTERRUPTWIGIG_END_OF_FRAMETemplate(Action<t_WGBOX1_END_OF_FRAME_INTERRUPT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WGBOX1_END_OF_FRAME_INTERRUPT(action, 649, 342, "WIGIG_INTERRUPT", Guid.Empty, 47, "WIGIG_END_OF_FRAME", ProviderGuid, ProviderName );
        }
        static private t_WGBOX1_LATE_RUN WIGIG_INTERRUPTWIGIG_LATE_RUN_STATUSTemplate(Action<t_WGBOX1_LATE_RUN> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WGBOX1_LATE_RUN(action, 651, 342, "WIGIG_INTERRUPT", Guid.Empty, 49, "WIGIG_LATE_RUN_STATUS", ProviderGuid, ProviderName );
        }
        static private t_WNIC_IGD_STATUS_ARGS WIGIG_NotifyIGDStatusStartTemplate(Action<t_WNIC_IGD_STATUS_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WNIC_IGD_STATUS_ARGS(action, 152, 86, "WIGIG_NotifyIGDStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_NotifyIGDStatusStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 153, 86, "WIGIG_NotifyIGDStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WIGIG_PASSTHROUGH_DATA WIGIG_NotifySinkAsPassThroughStartTemplate(Action<t_WIGIG_PASSTHROUGH_DATA> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WIGIG_PASSTHROUGH_DATA(action, 142, 81, "WIGIG_NotifySinkAsPassThrough", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_NotifySinkAsPassThroughStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 143, 81, "WIGIG_NotifySinkAsPassThrough", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_NotifyTerminateSessionTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 151, 85, "WIGIG_NotifyTerminateSession", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_IGD_TERMINATE_ARGS WIGIG_NotifyTerminateSessionStartTemplate(Action<t_IGD_TERMINATE_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IGD_TERMINATE_ARGS(action, 150, 85, "WIGIG_NotifyTerminateSession", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_IGD_NOTIFY_TFD_PTR_ARGS WIGIG_NotifyTFDAllocationStartTemplate(Action<t_IGD_NOTIFY_TFD_PTR_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IGD_NOTIFY_TFD_PTR_ARGS(action, 146, 83, "WIGIG_NotifyTFDAllocation", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_NotifyTFDAllocationStopTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 147, 83, "WIGIG_NotifyTFDAllocation", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private t_WiGIGRetStatus WIGIG_NotifyTFDTailPointerStatusTemplate(Action<t_WiGIGRetStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGIGRetStatus(action, 145, 82, "WIGIG_NotifyTFDTailPointerStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private t_IGD_TFD_HEAD_TAIL_PTR_ARGS WIGIG_NotifyTFDTailPointerStatusStartTemplate(Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_IGD_TFD_HEAD_TAIL_PTR_ARGS(action, 144, 82, "WIGIG_NotifyTFDTailPointerStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private t_WiGigEventData WiGigEventObjectHandlerClear_the_eventTemplate(Action<t_WiGigEventData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGigEventData(action, 159, 89, "WiGigEventObjectHandler", Guid.Empty, 19, "Clear_the_event", ProviderGuid, ProviderName );
        }
        static private t_WiGigEventData WiGigEventObjectHandlerEnd_of_the_wait_for_eventTemplate(Action<t_WiGigEventData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGigEventData(action, 162, 89, "WiGigEventObjectHandler", Guid.Empty, 22, "End_of_the_wait_for_event", ProviderGuid, ProviderName );
        }
        static private t_WiGigEventData WiGigEventObjectHandlerRead_the_eventTemplate(Action<t_WiGigEventData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGigEventData(action, 160, 89, "WiGigEventObjectHandler", Guid.Empty, 20, "Read_the_event", ProviderGuid, ProviderName );
        }
        static private t_WiGigEventData WiGigEventObjectHandlerSet_the_EventTemplate(Action<t_WiGigEventData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGigEventData(action, 158, 89, "WiGigEventObjectHandler", Guid.Empty, 18, "Set_the_Event", ProviderGuid, ProviderName );
        }
        static private t_WiGigEventData WiGigEventObjectHandlerStarting_of_the_wait_for_eventTemplate(Action<t_WiGigEventData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_WiGigEventData(action, 161, 89, "WiGigEventObjectHandler", Guid.Empty, 21, "Starting_of_the_wait_for_event", ProviderGuid, ProviderName );
        }
        static private t_RegDeRegCallBackEntry WiGigRegDeRegCallBackStartTemplate(Action<t_RegDeRegCallBackEntry> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new t_RegDeRegCallBackEntry(action, 128, 74, "WiGigRegDeRegCallBack", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData WiGigRegDeRegCallBackStopTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 129, 74, "WiGigRegDeRegCallBack", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[833];
                templates[0] = Commit_TaskStartTemplate(null);
                templates[1] = Commit_TaskStopTemplate(null);
                templates[2] = DxgkDdiEnumVidPnCofuncModalityStartTemplate(null);
                templates[3] = DxgkDdiEnumVidPnCofuncModalityStopTemplate(null);
                templates[4] = DxgkDdiRecommendFunctionalVidPnStartTemplate(null);
                templates[5] = DxgkDdiRecommendFunctionalVidPnStopTemplate(null);
                templates[6] = DxgkDdiRecommendVidPnTopologyStartTemplate(null);
                templates[7] = DxgkDdiRecommendVidPnTopologyStopTemplate(null);
                templates[8] = DxgkDdiIsSupportedVidPnStartTemplate(null);
                templates[9] = DxgkDdiIsSupportedVidPnStopTemplate(null);
                templates[10] = DxgkDdiUpdateActiveVidPnPresentPathStartTemplate(null);
                templates[11] = DxgkDdiUpdateActiveVidPnPresentPathStopTemplate(null);
                templates[12] = DxgkDdiSetVidPnSourceAddressStartTemplate(null);
                templates[13] = DxgkDdiSetVidPnSourceAddressStopTemplate(null);
                templates[14] = DxgkDdiSetVidPnSourceVisibilityStartTemplate(null);
                templates[15] = DxgkDdiSetVidPnSourceVisibilityStopTemplate(null);
                templates[16] = DxgkDdiGetScanLineStartTemplate(null);
                templates[17] = DxgkDdiGetScanLineStopTemplate(null);
                templates[18] = DxgkDdiSetPowerState_taskStartTemplate(null);
                templates[19] = DxgkDdiSetPowerState_taskStopTemplate(null);
                templates[20] = DxgkDdiQueryChildStatusStartTemplate(null);
                templates[21] = DxgkDdiQueryChildStatusStopTemplate(null);
                templates[22] = DxgkDdiNotifyAcpiEventStartTemplate(null);
                templates[23] = DxgkDdiNotifyAcpiEventStopTemplate(null);
                templates[24] = DxgkDdiSetPointerShapeStartTemplate(null);
                templates[25] = DxgkDdiSetPointerShapeStopTemplate(null);
                templates[26] = DxgkDdiControlInterruptTemplate(null);
                templates[27] = DxgkDdiControlInterruptStopTemplate(null);
                templates[28] = DxgkDdiSetPowerComponentFStateStartTemplate(null);
                templates[29] = DxgkDdiSetPowerComponentFStateStopTemplate(null);
                templates[30] = DxgkDdiControlInterrupt2Template(null);
                templates[31] = DxgkDdiControlInterrupt2StopTemplate(null);
                templates[32] = DxgkDdiEnumVidPnCofuncModalityTargetInfoTemplate(null);
                templates[33] = DxgkDdiEnumVidPnCofuncModalitySourceInfoTemplate(null);
                templates[34] = DxgkDdiIsSupportedVidPnPathInfoTemplate(null);
                templates[35] = DxgkDdiSetVidPnSourceAddressFailedTemplate(null);
                templates[36] = DxgkDdiUpdateActiveVidPnPresentPathFailedTemplate(null);
                templates[37] = Notify_PowerConservationStartTemplate(null);
                templates[38] = Notify_PowerConservationStopTemplate(null);
                templates[39] = GfxIndicateChildStatusStartTemplate(null);
                templates[40] = GfxIndicateChildStatusStopTemplate(null);
                templates[41] = GfxControlDisplayDevicePowerStateStartTemplate(null);
                templates[42] = GfxControlDisplayDevicePowerStateStopTemplate(null);
                templates[43] = GfxSetModeStartTemplate(null);
                templates[44] = EventServiceStartTemplate(null);
                templates[45] = EventServiceStopTemplate(null);
                templates[46] = CUIEscapeStartTemplate(null);
                templates[47] = CUIEscapeStopTemplate(null);
                templates[48] = PathSetModeStartTemplate(null);
                templates[49] = PathSetVisibilityStartTemplate(null);
                templates[50] = PathSetModeStopTemplate(null);
                templates[51] = PathSetVisibilityStopTemplate(null);
                templates[52] = PathSetScanLineStartTemplate(null);
                templates[53] = PathSetScanLineStopTemplate(null);
                templates[54] = CriticalFailureFailedTemplate(null);
                templates[55] = Commit_TaskFailedTemplate(null);
                templates[56] = GfxSetModeStopTemplate(null);
                templates[57] = Commit_TaskTemplate(null);
                templates[58] = DxgkDdiIsSupportedVidPnTemplate(null);
                templates[59] = DxgkDdiEnumVidPnCofuncModalityTemplate(null);
                templates[60] = DxgkDdiEnumVidPnCofuncModalityFailedTemplate(null);
                templates[61] = DxgkDdiIsSupportedVidPnFailedTemplate(null);
                templates[62] = DxgkDdiAddDeviceStartTemplate(null);
                templates[63] = DxgkDdiAddDeviceStopTemplate(null);
                templates[64] = DxgkDdiNotifySurpriseRemovalStartTemplate(null);
                templates[65] = DxgkDdiNotifySurpriseRemovalStopTemplate(null);
                templates[66] = DxgkDdiQueryAdapterInfoStartTemplate(null);
                templates[67] = DxgkDdiQueryAdapterInfoStopTemplate(null);
                templates[68] = DxgkDdiQueryInterfaceStartTemplate(null);
                templates[69] = DxgkDdiQueryInterfaceStopTemplate(null);
                templates[70] = DxgkDdiResetFromTimeoutStartTemplate(null);
                templates[71] = DxgkDdiResetFromTimeoutDC_StopTemplate(null);
                templates[72] = DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStartTemplate(null);
                templates[73] = DxgkDdiStopDeviceAndReleasePostDisplayOwnershipStopTemplate(null);
                templates[74] = DxgkDdiUnloadStartTemplate(null);
                templates[75] = DxgkDdiUnloadStopTemplate(null);
                templates[76] = DxgkDdiRestartFromTimeoutStartTemplate(null);
                templates[77] = DxgkDdiRestartFromTimeoutStopTemplate(null);
                templates[78] = MarkerEventTemplate(null);
                templates[79] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStartTemplate(null);
                templates[80] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayStopTemplate(null);
                templates[81] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayFailedTemplate(null);
                templates[82] = DxgkDdiCheckMultiPlaneOverlaySupportStartTemplate(null);
                templates[83] = DxgkDdiCheckMultiPlaneOverlaySupportStopTemplate(null);
                templates[84] = GetSystemInfoStartTemplate(null);
                templates[85] = GetSystemInfoTemplate(null);
                templates[86] = GfxCheckPresentDurationSupportStartTemplate(null);
                templates[87] = GfxCheckPresentDurationSupportStopTemplate(null);
                templates[88] = VBIsPipe_ATemplate(null);
                templates[89] = VBIsPipe_BTemplate(null);
                templates[90] = VBIsPipe_CTemplate(null);
                templates[91] = VBIsPipe_WiDiTemplate(null);
                templates[92] = GfxCheckPresentDurationSupportTemplate(null);
                templates[93] = GfxFastSetModeStartTemplate(null);
                templates[94] = GfxFastSetModeStopTemplate(null);
                templates[95] = DxgkDdiQueryDeviceDescriptorStartTemplate(null);
                templates[96] = DxgkDdiQueryDeviceDescriptorStopTemplate(null);
                templates[97] = GfxUpdatePDAudioStateTemplate(null);
                templates[98] = GfxUpdateIAAudioStateTemplate(null);
                templates[99] = GfxUpdateELDAudioStateTemplate(null);
                templates[100] = GfxUpdateCPReadyAudioStateTemplate(null);
                templates[101] = GfxInitSSTInterfaceForLPAudioTemplate(null);
                templates[102] = GfxInterfaceExitForLPAudioTemplate(null);
                templates[103] = GfxSetConfigForLPAudioTemplate(null);
                templates[104] = GfxGetConfigForLPAudioTemplate(null);
                templates[105] = GfxUpdateELDAudioStateForLegacyTemplate(null);
                templates[106] = GfxGetHwConfigForLPAudioTemplate(null);
                templates[107] = GfxReadDeviceSpaceForLPAudioTemplate(null);
                templates[108] = GfxWriteDeviceSpaceForLPAudioTemplate(null);
                templates[109] = GfxReadModifyWriteDeviceSpaceForLPAudioTemplate(null);
                templates[110] = GfxConfigHDCPForLPAudioTemplate(null);
                templates[111] = GfxSetSstToDxgkInterfaceStateForLPEAudioTemplate(null);
                templates[112] = GfxNotifyLPAudioISRTemplate(null);
                templates[113] = GfxNotifyLPAudioEventTemplate(null);
                templates[114] = GfxNotifyLPAudioHdcpNotificationStatusTemplate(null);
                templates[115] = GfxEnableInterruptForLPAudioTemplate(null);
                templates[116] = GfxDisableInterruptForLPAudioTemplate(null);
                templates[117] = DxgkDdiQueryChildRelationsStartTemplate(null);
                templates[118] = DxgkDdiQueryChildRelationsStopTemplate(null);
                templates[119] = Generic_Test1Template(null);
                templates[120] = Generic_Test2Template(null);
                templates[121] = Generic_Test3Template(null);
                templates[122] = WiGigRegDeRegCallBackStartTemplate(null);
                templates[123] = WiGigRegDeRegCallBackStopTemplate(null);
                templates[124] = WIGIG_IGDCallBackFunctionStartTemplate(null);
                templates[125] = WIGIG_IGDCallBackFunctionStopTemplate(null);
                templates[126] = WIGIG_IGDCB_NotifyIGDAsPassThroughStartTemplate(null);
                templates[127] = WIGIG_IGDCB_NotifyIGDAsPassThroughStopTemplate(null);
                templates[128] = WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStartTemplate(null);
                templates[129] = WIGIG_IGDCB_NotifyWGBoxTFDHeadPointerStopTemplate(null);
                templates[130] = WIGIG_IGDCB_GetRefClkCounterStartTemplate(null);
                templates[131] = WIGIG_IGDCB_GetRefClkCounterStopTemplate(null);
                templates[132] = WIGIG_IGDCB_NotifyWNICStatusStartTemplate(null);
                templates[133] = WIGIG_IGDCB_NotifyWNICStatusStopTemplate(null);
                templates[134] = WIGIG_IGDCB_NotifyReceiverStatusStartTemplate(null);
                templates[135] = WIGIG_IGDCB_NotifyReceiverStatusStopTemplate(null);
                templates[136] = WIGIG_NotifySinkAsPassThroughStartTemplate(null);
                templates[137] = WIGIG_NotifySinkAsPassThroughStopTemplate(null);
                templates[138] = WIGIG_NotifyTFDTailPointerStatusStartTemplate(null);
                templates[139] = WIGIG_NotifyTFDTailPointerStatusTemplate(null);
                templates[140] = WIGIG_NotifyTFDAllocationStartTemplate(null);
                templates[141] = WIGIG_NotifyTFDAllocationStopTemplate(null);
                templates[142] = WIGIG_AllocateChannelBWStartTemplate(null);
                templates[143] = WIGIG_AllocateChannelBWStopTemplate(null);
                templates[144] = WIGIG_NotifyTerminateSessionStartTemplate(null);
                templates[145] = WIGIG_NotifyTerminateSessionTemplate(null);
                templates[146] = WIGIG_NotifyIGDStatusStartTemplate(null);
                templates[147] = WIGIG_NotifyIGDStatusStopTemplate(null);
                templates[148] = WIGIG_CreateWGBoxBufferStartTemplate(null);
                templates[149] = WIGIG_CreateWGBoxBufferWiGig_encode_state_bufferTemplate(null);
                templates[150] = WIGIG_CreateWGBoxBufferWiGig_EncodeDisplaySurfaceTemplate(null);
                templates[151] = WIGIG_CreateWGBoxBufferWiGig_EncodeReferenceSurfaceTemplate(null);
                templates[152] = WiGigEventObjectHandlerSet_the_EventTemplate(null);
                templates[153] = WiGigEventObjectHandlerClear_the_eventTemplate(null);
                templates[154] = WiGigEventObjectHandlerRead_the_eventTemplate(null);
                templates[155] = WiGigEventObjectHandlerStarting_of_the_wait_for_eventTemplate(null);
                templates[156] = WiGigEventObjectHandlerEnd_of_the_wait_for_eventTemplate(null);
                templates[157] = WiGig_FailureTemplate(null);
                templates[158] = WIGIG_CreateWGBoxBufferWiGig_EncodeTfdSurfaceTemplate(null);
                templates[159] = WIGIG_GmmResFreeTemplate(null);
                templates[160] = GfxFastSetModeFailedTemplate(null);
                templates[161] = GfxTest4Template(null);
                templates[162] = GfxTest5Template(null);
                templates[163] = WiDiPAVPAutoTearDownTemplate(null);
                templates[164] = WiDiOpenLoopStatusTemplate(null);
                templates[165] = RTD3_TaskRTD3_EventInfoTemplate(null);
                templates[166] = RTD3_TaskRTD3_DCState_EventInfoTemplate(null);
                templates[167] = This_is_task_associated_with_Gfx_PinningPinning_EventInfoTemplate(null);
                templates[168] = This_is_task_associated_with_Gfx_PinningPinningInterface_EventInfoTemplate(null);
                templates[169] = This_is_task_associated_with_Gfx_PinningPinningScheduler_EventInfoTemplate(null);
                templates[170] = This_is_task_associated_with_Gfx_PinningPinningResMgr_EventInfoTemplate(null);
                templates[171] = Graphics_client_submission_context_initializationStartTemplate(null);
                templates[172] = Graphics_client_submission_context_initializationStopTemplate(null);
                templates[173] = Graphics_client_submission_context_initializationFailedTemplate(null);
                templates[174] = Graphics_client_submission_context_destroyStartTemplate(null);
                templates[175] = Graphics_client_submission_context_destroyStopTemplate(null);
                templates[176] = Notify_graphics_client_graphics_drivers_statusNotifications_from_graphics_driver_to_graphics_client_or_vice_versaTemplate(null);
                templates[177] = Graphics_client_makes_a_callback_to_graphics_driverStartTemplate(null);
                templates[178] = Graphics_client_makes_a_callback_to_graphics_driverStopTemplate(null);
                templates[179] = Graphics_client_makes_a_callback_to_graphics_driverFailedTemplate(null);
                templates[180] = GfxClientQueryGPUStartTemplate(null);
                templates[181] = GfxClientQueryGPUStopTemplate(null);
                templates[182] = GfxClientOpenGPUStartTemplate(null);
                templates[183] = GfxClientOpenGPUStopTemplate(null);
                templates[184] = GfxClientOpenGPUFailedTemplate(null);
                templates[185] = GfxClientCloseGPUStartTemplate(null);
                templates[186] = GfxClientCloseGPUStopTemplate(null);
                templates[187] = GfxClientCloseGPUFailedTemplate(null);
                templates[188] = GfxClientAllocateResourceStartTemplate(null);
                templates[189] = GfxClientAllocateResourceStopTemplate(null);
                templates[190] = GfxClientAllocateResourceFailedTemplate(null);
                templates[191] = GfxClientDeallocateResourceStartTemplate(null);
                templates[192] = GfxClientDeallocateResourceStopTemplate(null);
                templates[193] = GfxClientDeallocateResourceFailedTemplate(null);
                templates[194] = GfxClientMapBufferStartTemplate(null);
                templates[195] = GfxClientMapBufferStopTemplate(null);
                templates[196] = GfxClientMapBufferFailedTemplate(null);
                templates[197] = GfxClientUnmapBufferStartTemplate(null);
                templates[198] = GfxClientUnmapBufferStopTemplate(null);
                templates[199] = GfxClientUnmapBufferFailedTemplate(null);
                templates[200] = GfxClientTdrResetStartTemplate(null);
                templates[201] = GfxClientTdrResetStopTemplate(null);
                templates[202] = GfxClientTdrRestartTemplate(null);
                templates[203] = GfxClientTdrRestartStopTemplate(null);
                templates[204] = GfxClientEngineResetStartTemplate(null);
                templates[205] = GfxClientEngineResetStopTemplate(null);
                templates[206] = GfxClientPowerStateTransitionStartTemplate(null);
                templates[207] = GfxClientPowerStateTransitionStopTemplate(null);
                templates[208] = Notify_graphics_driver_graphics_clients_statusStartTemplate(null);
                templates[209] = Notify_graphics_driver_graphics_clients_statusStopTemplate(null);
                templates[210] = Notify_graphics_driver_graphics_clients_statusFailedTemplate(null);
                templates[211] = Interrupt_event_taskOpcode_for_interruptsTemplate(null);
                templates[212] = Graphics_client_context_validationFailedTemplate(null);
                templates[213] = GMM_block_entry_validationFailedTemplate(null);
                templates[214] = This_is_task_associated_with_Gfx_PinningPinningStatus_InfoTemplate(null);
                templates[215] = This_is_task_associated_with_Gfx_PinningPinningRequest_InfoTemplate(null);
                templates[216] = This_is_task_associated_with_Gfx_PinningPinningCB_InfoTemplate(null);
                templates[217] = CSLBASE_SetModeStartTemplate(null);
                templates[218] = CSLBASE_SetModeStopTemplate(null);
                templates[219] = CSLBASE_SetDisplayPowerStateStartTemplate(null);
                templates[220] = CSLBASE_SetDisplayStartTemplate(null);
                templates[221] = CSLBASE_SetDisplayStartStopTemplate(null);
                templates[222] = CSLBASE_SetDisplayDeviceStartTemplate(null);
                templates[223] = CSLBASE_CheckMPOSupportStartTemplate(null);
                templates[224] = CSLBASE_CheckMPOSupportStopTemplate(null);
                templates[225] = CSLBASE_EventNotificationTemplate(null);
                templates[226] = CSLBASE_SetDisplayStartMPOStartTemplate(null);
                templates[227] = CSLBASE_SetDisplayStartMPOStopTemplate(null);
                templates[228] = CSLBASE_Event_NotificationTemplate(null);
                templates[229] = INTHDMIENCODER_IsDisplayAttachedStartTemplate(null);
                templates[230] = INTHDMIENCODER_IsDisplayAttachedStopTemplate(null);
                templates[231] = INTHDMIENCODER_IsHotPlugSupportedStartTemplate(null);
                templates[232] = INTHDMIENCODER_IsHotPlugSupportedStopTemplate(null);
                templates[233] = INTHDMIENCODER_SetHotPlugStartTemplate(null);
                templates[234] = INTHDMIENCODER_SetHotPlugStopTemplate(null);
                templates[235] = INTHDMIENCODER_ServiceHotPlugInterruptStartTemplate(null);
                templates[236] = INTHDMIENCODER_ServiceHotPlugInterruptStopTemplate(null);
                templates[237] = INTHDMIENCODER_SendHDMIInfoStartTemplate(null);
                templates[238] = INTHDMIENCODER_SendHDMIInfoStopTemplate(null);
                templates[239] = DPSINK_InitializeStartTemplate(null);
                templates[240] = DPSINK_InitializeStopTemplate(null);
                templates[241] = DPSINK_GetMaxLinkRateStartTemplate(null);
                templates[242] = DPSINK_GetMaxLinkRateStopTemplate(null);
                templates[243] = DPSINK_GetMaxLaneCountStartTemplate(null);
                templates[244] = DPSINK_GetMaxLaneCountStopTemplate(null);
                templates[245] = DPSINK_GetSinkTypeStartTemplate(null);
                templates[246] = DPSINK_GetSinkTypeStopTemplate(null);
                templates[247] = DPSINK_GetSinkCountStartTemplate(null);
                templates[248] = DPSINK_GetSinkCountStopTemplate(null);
                templates[249] = DPSINK_SetTrainingPatternStartTemplate(null);
                templates[250] = DPSINK_SetTrainingPatternStopTemplate(null);
                templates[251] = DPSINK_SetTrainingLevelStartTemplate(null);
                templates[252] = DPSINK_SetTrainingLevelStopTemplate(null);
                templates[253] = MODESMANAGER_AddDisplayModesStartTemplate(null);
                templates[254] = MODESMANAGER_AddDisplayModesStopTemplate(null);
                templates[255] = MODESMANAGER_AddVBTModesStartTemplate(null);
                templates[256] = MODESMANAGER_AddVBTModesStopTemplate(null);
                templates[257] = MODESMANAGER_NotifyCommitEndStartTemplate(null);
                templates[258] = MODESMANAGER_NotifyCommitEndStopTemplate(null);
                templates[259] = MODESMANAGER_SetModePStateStartTemplate(null);
                templates[260] = MODESMANAGER_SetModePStateStopTemplate(null);
                templates[261] = MODESMANAGER_GetModeSupportStartTemplate(null);
                templates[262] = MODESMANAGER_GetModeSupportStopTemplate(null);
                templates[263] = MODESMANAGER_GetLastSetModeDataStartTemplate(null);
                templates[264] = MODESMANAGER_GetLastSetModeDataStopTemplate(null);
                templates[265] = MODESMANAGER_SetModeStartTemplate(null);
                templates[266] = MODESMANAGER_SetModeStopTemplate(null);
                templates[267] = BASEENCODER_GetDisplayIDsStartTemplate(null);
                templates[268] = BASEENCODER_GetDisplayIDsStopTemplate(null);
                templates[269] = BASEENCODER_GetDisplayInfoStartTemplate(null);
                templates[270] = BASEENCODER_GetDisplayInfoStopTemplate(null);
                templates[271] = BASEENCODER_WGGetSetCSCStartTemplate(null);
                templates[272] = BASEENCODER_WGGetSetCSCStopTemplate(null);
                templates[273] = BASEENCODER_IsActiveDetectionRequiredWithDelayStartTemplate(null);
                templates[274] = BASEENCODER_IsActiveDetectionRequiredWithDelayStopTemplate(null);
                templates[275] = BASEENCODER_IsDisplayInFutureConfigStartTemplate(null);
                templates[276] = BASEENCODER_IsDisplayInFutureConfigStopTemplate(null);
                templates[277] = BASEDISPLAY_RetrieveEDIDBlockStartTemplate(null);
                templates[278] = BASEDISPLAY_RetrieveEDIDBlockStopTemplate(null);
                templates[279] = BASEDISPLAY_IsPreferredTimingStartTemplate(null);
                templates[280] = BASEDISPLAY_IsPreferredTimingStopTemplate(null);
                templates[281] = BASEDISPLAY_UpdateEDIDStartTemplate(null);
                templates[282] = BASEDISPLAY_UpdateEDIDStopTemplate(null);
                templates[283] = BASEDISPLAY_GetMonitorNameStartTemplate(null);
                templates[284] = BASEDISPLAY_GetMonitorNameStopTemplate(null);
                templates[285] = BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStartTemplate(null);
                templates[286] = BASEDISPLAY_CreateFakeEDIDFromVBTTimingsStopTemplate(null);
                templates[287] = DISPLAYINFOROUTINES_IsSupportedCeModeStartTemplate(null);
                templates[288] = DISPLAYINFOROUTINES_IsSupportedCeModeStopTemplate(null);
                templates[289] = DISPLAYINFOROUTINES_GetDTDFromTimingInfoStartTemplate(null);
                templates[290] = DISPLAYINFOROUTINES_GetDTDFromTimingInfoStopTemplate(null);
                templates[291] = EDIDPARSER_Add4kx2kModeStartTemplate(null);
                templates[292] = EDIDPARSER_Add4kx2kModeStopTemplate(null);
                templates[293] = EDIDPARSER_ValidateVTBExtensionStartTemplate(null);
                templates[294] = EDIDPARSER_ValidateVTBExtensionStopTemplate(null);
                templates[295] = EDIDPARSER_ParseVTBExt_DTDsStartTemplate(null);
                templates[296] = EDIDPARSER_ParseVTBExt_DTDsStopTemplate(null);
                templates[297] = EDIDPARSER_ExtractInfoFromCVTStartTemplate(null);
                templates[298] = EDIDPARSER_ExtractInfoFromCVTStopTemplate(null);
                templates[299] = DISPLAYIDPARSER_GetColorBitDepthStartTemplate(null);
                templates[300] = DISPLAYIDPARSER_GetColorBitDepthStopTemplate(null);
                templates[301] = DISPLAYIDPARSER_GetDisplayIDDataBlockStartTemplate(null);
                templates[302] = DISPLAYIDPARSER_GetDisplayIDDataBlockStopTemplate(null);
                templates[303] = DISPLAYIDPARSER_AddEDIDModeToListStartTemplate(null);
                templates[304] = DISPLAYIDPARSER_AddEDIDModeToListStopTemplate(null);
                templates[305] = DISPLAYIDPARSER_GetVICListStartTemplate(null);
                templates[306] = DISPLAYIDPARSER_GetVICListStopTemplate(null);
                templates[307] = VBTMANAGER_GetPSRDetailsStartTemplate(null);
                templates[308] = VBTMANAGER_GetPSRDetailsStopTemplate(null);
                templates[309] = VBTMANAGER_IsDisplayTypeSupportedStartTemplate(null);
                templates[310] = VBTMANAGER_IsDisplayTypeSupportedStopTemplate(null);
                templates[311] = VBTMANAGER_EDPFillSimilarPnPIdStartTemplate(null);
                templates[312] = VBTMANAGER_EDPFillSimilarPnPIdStopTemplate(null);
                templates[313] = VBTMANAGER_FillSimilarPnPIdStartTemplate(null);
                templates[314] = VBTMANAGER_FillSimilarPnPIdStopTemplate(null);
                templates[315] = VBTMANAGER_GetBIOSDataBlockByIDTemplate(null);
                templates[316] = VBTMANAGER_GetBIOSDataBlockByIDStopTemplate(null);
                templates[317] = CSLBASE_InitStartTemplate(null);
                templates[318] = CSLBASE_InitStopTemplate(null);
                templates[319] = CSLBASE_DestroyStartTemplate(null);
                templates[320] = CSLBASE_DestroyStopTemplate(null);
                templates[321] = CSLBASE_InitializeStartTemplate(null);
                templates[322] = CSLBASE_InitializeStopTemplate(null);
                templates[323] = CSLBASE_GetCurrentPaletteStartTemplate(null);
                templates[324] = CSLBASE_GetCurrentPaletteStopTemplate(null);
                templates[325] = CSLBASE_SetVGAPipeStartTemplate(null);
                templates[326] = CSLBASE_SetVGAPipeStopTemplate(null);
                templates[327] = CSLBASE_GetDisplayInfoStartTemplate(null);
                templates[328] = CSLBASE_GetDisplayInfoStopTemplate(null);
                templates[329] = CSLBASE_HotPlugStartTemplate(null);
                templates[330] = CSLBASE_HotPlugStopTemplate(null);
                templates[331] = CSLBASE_SetCompensationStartTemplate(null);
                templates[332] = CSLBASE_SetCompensationStopTemplate(null);
                templates[333] = CSLBASE_GetCompensationStartTemplate(null);
                templates[334] = CSLBASE_GetCompensationStopTemplate(null);
                templates[335] = CSLBASE_GetDisplayPortDetailsStartTemplate(null);
                templates[336] = CSLBASE_GetDisplayPortDetailsStopTemplate(null);
                templates[337] = MapLHArgsToSBArgsStartTemplate(null);
                templates[338] = MapLHArgsToSBArgsStopTemplate(null);
                templates[339] = CSLBASE_NotifyPowerStateStartTemplate(null);
                templates[340] = CSLBASE_NotifyPowerStateStopTemplate(null);
                templates[341] = CSLBASE_BlankVideoStartTemplate(null);
                templates[342] = CSLBASE_BlankVideoStopTemplate(null);
                templates[343] = CSLBASE_GetDevicePMCapsStartTemplate(null);
                templates[344] = CSLBASE_GetDevicePMCapsStopTemplate(null);
                templates[345] = CSLBASE_QueryDisplayDetailsStartTemplate(null);
                templates[346] = CSLBASE_QueryDisplayDetailsStopTemplate(null);
                templates[347] = CSLBASE_GetPlaneStartTemplate(null);
                templates[348] = CSLBASE_GetPlaneStopTemplate(null);
                templates[349] = CSLBASE_GetMaxSupportedPlanesStartTemplate(null);
                templates[350] = CSLBASE_GetMaxSupportedPlanesStopTemplate(null);
                templates[351] = CSLBASE_GetPlaneZOrderStartTemplate(null);
                templates[352] = CSLBASE_GetPlaneZOrderStopTemplate(null);
                templates[353] = CSLBASE_GetMPOCapsStartTemplate(null);
                templates[354] = CSLBASE_GetMPOCapsStopTemplate(null);
                templates[355] = CSLBASE_GetMPOGroupCapsStartTemplate(null);
                templates[356] = CSLBASE_GetMPOGroupCapsStopTemplate(null);
                templates[357] = CSLBASE_IsScalingAppliedInMPOPathStartTemplate(null);
                templates[358] = CSLBASE_IsScalingAppliedInMPOPathStopTemplate(null);
                templates[359] = CSLBASE_GetDisplayStartMPOStartTemplate(null);
                templates[360] = CSLBASE_GetDisplayStartMPOStopTemplate(null);
                templates[361] = CSLBASE_SwapPlanesStartTemplate(null);
                templates[362] = CSLBASE_SwapPlanesStopTemplate(null);
                templates[363] = CSLBASE_GetDDCEdidStartTemplate(null);
                templates[364] = CSLBASE_GetDDCEdidStopTemplate(null);
                templates[365] = CSLBASE_I2CAccessStartTemplate(null);
                templates[366] = CSLBASE_I2CAccessStopTemplate(null);
                templates[367] = CSLBASE_AtomicI2CAccessStartTemplate(null);
                templates[368] = CSLBASE_AtomicI2CAccessStopTemplate(null);
                templates[369] = CSLBASE_AuxAccessStartTemplate(null);
                templates[370] = CSLBASE_AuxAccessStopTemplate(null);
                templates[371] = CSLBASE_GetRefreshRateStartTemplate(null);
                templates[372] = CSLBASE_GetRefreshRateStopTemplate(null);
                templates[373] = CSLBASE_GetTimingInfoStartTemplate(null);
                templates[374] = CSLBASE_GetTimingInfoStopTemplate(null);
                templates[375] = CSLBASE_GetModeSupportStartTemplate(null);
                templates[376] = CSLBASE_GetModeSupportStopTemplate(null);
                templates[377] = CSLBASE_GetControllerInfoStartTemplate(null);
                templates[378] = CSLBASE_GetControllerInfoStopTemplate(null);
                templates[379] = CSLBASE_GetROMBIOSInfoStartTemplate(null);
                templates[380] = CSLBASE_GetROMBIOSInfoStopTemplate(null);
                templates[381] = CSLBASE_SetScratchFlagsStartTemplate(null);
                templates[382] = CSLBASE_SetScratchFlagsStopTemplate(null);
                templates[383] = CSLBASE_GetSetParametersStartTemplate(null);
                templates[384] = CSLBASE_GetSetParametersStopTemplate(null);
                templates[385] = CSLBASE_GetDVMTSettingsStartTemplate(null);
                templates[386] = CSLBASE_GetDVMTSettingsStopTemplate(null);
                templates[387] = CSLBASE_GetTargetDetailsStartTemplate(null);
                templates[388] = CSLBASE_GetTargetDetailsStopTemplate(null);
                templates[389] = CSLBASE_GetSourceModeListStartTemplate(null);
                templates[390] = CSLBASE_GetSourceModeListStopTemplate(null);
                templates[391] = CSLBASE_GetTargetModeListStartTemplate(null);
                templates[392] = CSLBASE_GetTargetModeListStopTemplate(null);
                templates[393] = CSLBASE_GetTargetModeListForSourceModeStartTemplate(null);
                templates[394] = CSLBASE_GetTargetModeListForSourceModeStopTemplate(null);
                templates[395] = CSLBASE_OverrideMonitorModeListStartTemplate(null);
                templates[396] = CSLBASE_OverrideMonitorModeListStopTemplate(null);
                templates[397] = CSLBASE_GetRelationForSourceTargetModeStartTemplate(null);
                templates[398] = CSLBASE_GetRelationForSourceTargetModeStopTemplate(null);
                templates[399] = CSLBASE_SetCustomScalingInfoStartTemplate(null);
                templates[400] = CSLBASE_SetCustomScalingInfoStopTemplate(null);
                templates[401] = CSLBASE_InterruptServicesStartTemplate(null);
                templates[402] = CSLBASE_InterruptServicesStopTemplate(null);
                templates[403] = CSLBASE_GetInterruptSourceStartTemplate(null);
                templates[404] = CSLBASE_GetInterruptSourceStopTemplate(null);
                templates[405] = CSLBASE_GetEnabledInterruptsStartTemplate(null);
                templates[406] = CSLBASE_GetEnabledInterruptsStopTemplate(null);
                templates[407] = CSLBASE_GetScanLineInfoStartTemplate(null);
                templates[408] = CSLBASE_GetScanLineInfoStopTemplate(null);
                templates[409] = CSLBASE_CursorServiceStartTemplate(null);
                templates[410] = CSLBASE_CursorServiceStopTemplate(null);
                templates[411] = CSLBASE_ServiceHotPlugInterruptStartTemplate(null);
                templates[412] = CSLBASE_ServiceHotPlugInterruptStopTemplate(null);
                templates[413] = CSLBASE_GammaHandlerStartTemplate(null);
                templates[414] = CSLBASE_GammaHandlerStopTemplate(null);
                templates[415] = CSLBASE_TDRHandlerStartTemplate(null);
                templates[416] = CSLBASE_TDRHandlerStopTemplate(null);
                templates[417] = CSLBASE_GetDisplayStartTemplate(null);
                templates[418] = CSLBASE_GetDisplayStartStopTemplate(null);
                templates[419] = CSLBASE_SetPlaneOrientationStartTemplate(null);
                templates[420] = CSLBASE_SetPlaneOrientationStopTemplate(null);
                templates[421] = CSLBASE_IsOpRegionMailBoxSupportedStartTemplate(null);
                templates[422] = CSLBASE_IsOpRegionMailBoxSupportedStopTemplate(null);
                templates[423] = CSLBASE_ReadOpRegionMailBoxStartTemplate(null);
                templates[424] = CSLBASE_ReadOpRegionMailBoxStopTemplate(null);
                templates[425] = CSLBASE_WriteOpRegionMailBoxStartTemplate(null);
                templates[426] = CSLBASE_WriteOpRegionMailBoxStopTemplate(null);
                templates[427] = CSLBASE_GetPlatformConfigInfoStartTemplate(null);
                templates[428] = CSLBASE_GetPlatformConfigInfoStopTemplate(null);
                templates[429] = CSLBASE_SetModePStateStartTemplate(null);
                templates[430] = CSLBASE_SetModePStateStopTemplate(null);
                templates[431] = CSLBASE_GetVBTToggleListStartTemplate(null);
                templates[432] = CSLBASE_GetVBTToggleListStopTemplate(null);
                templates[433] = CSLBASE_GetDockStatusStartTemplate(null);
                templates[434] = CSLBASE_GetDockStatusStopTemplate(null);
                templates[435] = CSLBASE_CalculateWaterMarkStartTemplate(null);
                templates[436] = CSLBASE_CalculateWaterMarkStopTemplate(null);
                templates[437] = CSLBASE_IsFlipCompletedStartTemplate(null);
                templates[438] = CSLBASE_IsFlipCompletedStopTemplate(null);
                templates[439] = CSLBASE_IsAudioControllerEnabledStartTemplate(null);
                templates[440] = CSLBASE_IsAudioControllerEnabledStopTemplate(null);
                templates[441] = CSLBASE_IsTwinSupportedInCloneStartTemplate(null);
                templates[442] = CSLBASE_IsTwinSupportedInCloneStopTemplate(null);
                templates[443] = CSLBASE_GetConnectorModeInfoStartTemplate(null);
                templates[444] = CSLBASE_GetConnectorModeInfoStopTemplate(null);
                templates[445] = CSLBASE_AddCustomModeStartTemplate(null);
                templates[446] = CSLBASE_AddCustomModeStopTemplate(null);
                templates[447] = CSLBASE_GetCustomModeInfoStartTemplate(null);
                templates[448] = CSLBASE_GetCustomModeInfoStopTemplate(null);
                templates[449] = CSLBASE_RemoveCustomModeStartTemplate(null);
                templates[450] = CSLBASE_RemoveCustomModeStopTemplate(null);
                templates[451] = CSLBASE_WaitForVBlankStartTemplate(null);
                templates[452] = CSLBASE_WaitForVBlankStopTemplate(null);
                templates[453] = CSLBASE_GetSPIDataStartTemplate(null);
                templates[454] = CSLBASE_GetSPIDataStopTemplate(null);
                templates[455] = CSLBASE_ProcessPSREventStartTemplate(null);
                templates[456] = CSLBASE_ProcessPSREventStopTemplate(null);
                templates[457] = CSLBASE_ReTrainLinkStartTemplate(null);
                templates[458] = CSLBASE_ReTrainLinkStopTemplate(null);
                templates[459] = CSLBASE_GetEventObjectIndexStartTemplate(null);
                templates[460] = CSLBASE_GetEventObjectIndexStopTemplate(null);
                templates[461] = CSLBASE_GetPSRResCounterStartTemplate(null);
                templates[462] = CSLBASE_GetPSRResCounterStopTemplate(null);
                templates[463] = CSLBASE_GetPNMPixelClkDataStartTemplate(null);
                templates[464] = CSLBASE_GetPNMPixelClkDataStopTemplate(null);
                templates[465] = CSLBASE_SetPNMPixelClkDataStartTemplate(null);
                templates[466] = CSLBASE_SetPNMPixelClkDataStopTemplate(null);
                templates[467] = CSLBASE_GetSetCSCStartTemplate(null);
                templates[468] = CSLBASE_GetSetCSCStopTemplate(null);
                templates[469] = CSLBASE_SetNVHGDisplaysStartTemplate(null);
                templates[470] = CSLBASE_SetNVHGDisplaysStopTemplate(null);
                templates[471] = CSLBASE_SetPanelPowerStartTemplate(null);
                templates[472] = CSLBASE_SetPanelPowerStopTemplate(null);
                templates[473] = CSLBASE_GetSetXVYCCCtrlStartTemplate(null);
                templates[474] = CSLBASE_GetSetXVYCCCtrlStopTemplate(null);
                templates[475] = CSLBASE_HandlePipeCRCDoneInterruptStartTemplate(null);
                templates[476] = CSLBASE_HandlePipeCRCDoneInterruptStopTemplate(null);
                templates[477] = CSLBASE_HandlePipeCRCErrorInterruptStartTemplate(null);
                templates[478] = CSLBASE_HandlePipeCRCErrorInterruptStopTemplate(null);
                templates[479] = CSLBASE_CheckCRCInterruptCountStartTemplate(null);
                templates[480] = CSLBASE_CheckCRCInterruptCountStopTemplate(null);
                templates[481] = CSLBASE_HandleATRStartTemplate(null);
                templates[482] = CSLBASE_HandleATRStopTemplate(null);
                templates[483] = CSLBASE_ComplianceAuxWAStartTemplate(null);
                templates[484] = CSLBASE_ComplianceAuxWAStopTemplate(null);
                templates[485] = CSLBASE_GetCSCUsageStartTemplate(null);
                templates[486] = CSLBASE_GetCSCUsageStopTemplate(null);
                templates[487] = CSLBASE_QueryHWConfigStartTemplate(null);
                templates[488] = CSLBASE_QueryHWConfigStopTemplate(null);
                templates[489] = CSLBASE_UpdateEncoderCapsInfoStartTemplate(null);
                templates[490] = CSLBASE_UpdateEncoderCapsInfoStopTemplate(null);
                templates[491] = CSLBASE_SetHDCPStatusStartTemplate(null);
                templates[492] = CSLBASE_SetHDCPStatusStopTemplate(null);
                templates[493] = CSLBASE_UpdateTPVSupportedModeListStartTemplate(null);
                templates[494] = CSLBASE_UpdateTPVSupportedModeListStopTemplate(null);
                templates[495] = CSLBASE_GetSetClkBendingInfoStartTemplate(null);
                templates[496] = CSLBASE_GetSetClkBendingInfoStopTemplate(null);
                templates[497] = CSLBASE_GetActiveDisplayInfoStartTemplate(null);
                templates[498] = CSLBASE_GetActiveDisplayInfoStopTemplate(null);
                templates[499] = CSLBASE_GetS3DCapsStartTemplate(null);
                templates[500] = CSLBASE_GetS3DCapsStopTemplate(null);
                templates[501] = CSLBASE_GetHwS3DStateStartTemplate(null);
                templates[502] = CSLBASE_GetHwS3DStateStopTemplate(null);
                templates[503] = CSLBASE_GenerateTimingsStartTemplate(null);
                templates[504] = CSLBASE_GenerateTimingsStopTemplate(null);
                templates[505] = CSLBASE_SetS3DParametersStartTemplate(null);
                templates[506] = CSLBASE_SetS3DParametersStopTemplate(null);
                templates[507] = CSLBASE_SetS3DPlaneParametersStartTemplate(null);
                templates[508] = CSLBASE_SetS3DPlaneParametersStopTemplate(null);
                templates[509] = CSLBASE_SetVBIOSDispConfigStartTemplate(null);
                templates[510] = CSLBASE_SetVBIOSDispConfigStopTemplate(null);
                templates[511] = CSLBASE_UpdateAndGetSinkCapabilitesStartTemplate(null);
                templates[512] = CSLBASE_UpdateAndGetSinkCapabilitesStopTemplate(null);
                templates[513] = CSLBASE_SetPsrStateStartTemplate(null);
                templates[514] = CSLBASE_SetPsrStateStopTemplate(null);
                templates[515] = CSLBASE_PopulateContainerIDArgsStartTemplate(null);
                templates[516] = CSLBASE_PopulateContainerIDArgsStopTemplate(null);
                templates[517] = CSLBASE_GetCompleteDP12TopologyStartTemplate(null);
                templates[518] = CSLBASE_GetCompleteDP12TopologyStopTemplate(null);
                templates[519] = CSLBASE_GetDetailedInfoForDP12SinkStartTemplate(null);
                templates[520] = CSLBASE_GetDetailedInfoForDP12SinkStopTemplate(null);
                templates[521] = CSLBASE_SetDP12SinkListforEachPortStartTemplate(null);
                templates[522] = CSLBASE_SetDP12SinkListforEachPortStopTemplate(null);
                templates[523] = CSLBASE_SimulateDP12TopologyStartTemplate(null);
                templates[524] = CSLBASE_SimulateDP12TopologyStopTemplate(null);
                templates[525] = CSLBASE_IsFastModeSetPossibleStartTemplate(null);
                templates[526] = CSLBASE_IsFastModeSetPossibleStopTemplate(null);
                templates[527] = CSLBASE_EnableScalerStartTemplate(null);
                templates[528] = CSLBASE_EnableScalerStopTemplate(null);
                templates[529] = CSLBASE_GetAudioProtocolTypeStartTemplate(null);
                templates[530] = CSLBASE_GetAudioProtocolTypeStopTemplate(null);
                templates[531] = CSLBASE_SetAudioDataStartTemplate(null);
                templates[532] = CSLBASE_SetAudioDataStopTemplate(null);
                templates[533] = CSLBASE_SetAudioEncryptionPreferenceStartTemplate(null);
                templates[534] = CSLBASE_SetAudioEncryptionPreferenceStopTemplate(null);
                templates[535] = CSLBASE_GetAudioDataStartTemplate(null);
                templates[536] = CSLBASE_GetAudioDataStopTemplate(null);
                templates[537] = CSLBASE_NotifyCommitEndStartTemplate(null);
                templates[538] = CSLBASE_NotifyCommitEndStopTemplate(null);
                templates[539] = CSLBASE_HandleLPSPPreSetModeStartTemplate(null);
                templates[540] = CSLBASE_HandleLPSPPreSetModeStopTemplate(null);
                templates[541] = CSLBASE_EnableDisableAudioDeviceStartTemplate(null);
                templates[542] = CSLBASE_EnableDisableAudioDeviceStopTemplate(null);
                templates[543] = CSLBASE_NotifyModeSetCompleteStartTemplate(null);
                templates[544] = CSLBASE_NotifyModeSetCompleteStopTemplate(null);
                templates[545] = CSLBASE_VerifyMMIOAddressInRangeStartTemplate(null);
                templates[546] = CSLBASE_VerifyMMIOAddressInRangeStopTemplate(null);
                templates[547] = CSLBASE_ServiceConnectionStatusNotifyStartTemplate(null);
                templates[548] = CSLBASE_ServiceConnectionStatusNotifyStopTemplate(null);
                templates[549] = CSLBASE_SetADStateStartTemplate(null);
                templates[550] = CSLBASE_SetADStateStopTemplate(null);
                templates[551] = CSLBASE_SetADBrightnessStartTemplate(null);
                templates[552] = CSLBASE_SetADBrightnessStopTemplate(null);
                templates[553] = CSLBASE_SetADLuxStartTemplate(null);
                templates[554] = CSLBASE_SetADLuxStopTemplate(null);
                templates[555] = CSLBASE_BIOSBrightnessNotificationStartTemplate(null);
                templates[556] = CSLBASE_BIOSBrightnessNotificationStopTemplate(null);
                templates[557] = CSLBASE_GetPossibleTiledAllocStartTemplate(null);
                templates[558] = CSLBASE_GetPossibleTiledAllocStopTemplate(null);
                templates[559] = CSLBASE_IsSFSupportedStartTemplate(null);
                templates[560] = CSLBASE_IsSFSupportedStopTemplate(null);
                templates[561] = CSLBASE_IsHwCursorPossibleStartTemplate(null);
                templates[562] = CSLBASE_IsHwCursorPossibleStopTemplate(null);
                templates[563] = CSLBASE_QueryDispConfigStartTemplate(null);
                templates[564] = CSLBASE_QueryDispConfigStopTemplate(null);
                templates[565] = CSLBASE_ValidateDispConfigStartTemplate(null);
                templates[566] = CSLBASE_ValidateDispConfigStopTemplate(null);
                templates[567] = CSLBASE_QueryResourceStartTemplate(null);
                templates[568] = CSLBASE_QueryResourceStopTemplate(null);
                templates[569] = CSLBASE_ReserveVideoBWStartTemplate(null);
                templates[570] = CSLBASE_ReserveVideoBWStopTemplate(null);
                templates[571] = CSLBASE_ReleaseDeviceStartTemplate(null);
                templates[572] = CSLBASE_ReleaseDeviceStopTemplate(null);
                templates[573] = CSLBASE_TrimModeStartTemplate(null);
                templates[574] = CSLBASE_TrimModeStopTemplate(null);
                templates[575] = CSLBASE_GetPciCfgInfoStartTemplate(null);
                templates[576] = CSLBASE_GetPciCfgInfoStopTemplate(null);
                templates[577] = CSLBASE_IsSpriteDownScaleSupportedStartTemplate(null);
                templates[578] = CSLBASE_IsSpriteDownScaleSupportedStopTemplate(null);
                templates[579] = CSLBASE_GrmTDRHandlerStartTemplate(null);
                templates[580] = CSLBASE_GrmTDRHandlerStopTemplate(null);
                templates[581] = GetSystemPowerStateStartTemplate(null);
                templates[582] = GetSystemPowerStateStopTemplate(null);
                templates[583] = CSLBASE_GetIntelAudioDriverPresenceStartTemplate(null);
                templates[584] = CSLBASE_GetIntelAudioDriverPresenceStopTemplate(null);
                templates[585] = CSLBASE_IsCDClockChangeSupportedStartTemplate(null);
                templates[586] = CSLBASE_IsCDClockChangeSupportedStopTemplate(null);
                templates[587] = CSLBASE_IsCDClockChangeRequiredStartTemplate(null);
                templates[588] = CSLBASE_IsCDClockChangeRequiredStopTemplate(null);
                templates[589] = CSLBASE_ChangeCDClockStartTemplate(null);
                templates[590] = CSLBASE_ChangeCDClockStopTemplate(null);
                templates[591] = CSLBASE_EnableBacklightWorkItemStartTemplate(null);
                templates[592] = CSLBASE_EnableBacklightWorkItemStopTemplate(null);
                templates[593] = CSLBASE_GetDisplayDeviceStartTemplate(null);
                templates[594] = CSLBASE_GetDisplayDeviceStopTemplate(null);
                templates[595] = CSLBASE_GetDisplayDetectStartTemplate(null);
                templates[596] = CSLBASE_GetDisplayDetectStopTemplate(null);
                templates[597] = CSLBASE_LH_NotifyPowerStateStartTemplate(null);
                templates[598] = CSLBASE_LH_NotifyPowerStateStopTemplate(null);
                templates[599] = CSLBASE_LH_SetDisplayPowerStateStartTemplate(null);
                templates[600] = CSLBASE_LH_SetDisplayPowerStateStopTemplate(null);
                templates[601] = CSLBASE_DeviceConfigValidStartTemplate(null);
                templates[602] = CSLBASE_DeviceConfigValidStopTemplate(null);
                templates[603] = CSLBASE_GetLidStatusStartTemplate(null);
                templates[604] = CSLBASE_GetLidStatusStopTemplate(null);
                templates[605] = CSLBASE_UpdateCDClockStartTemplate(null);
                templates[606] = CSLBASE_UpdateCDClockStopTemplate(null);
                templates[607] = This_task_is_associated_with_Engine_Reset_and_Media_ResetTemplate(null);
                templates[608] = HDCP2UMD_MessagePacketReadTemplate(null);
                templates[609] = HDCP2UMD_MessagePacketWriteTemplate(null);
                templates[610] = HDCP2UMD_AuthencationStepStateTemplate(null);
                templates[611] = HDCP2UMD_ErrorTemplate(null);
                templates[612] = HDCP2UMD_InformationTemplate(null);
                templates[613] = HDCP2UMD_WarningTemplate(null);
                templates[614] = HDCP2UMD_AuthenticationStausTemplate(null);
                templates[615] = HDCP2UMD_AuthenticateStartTemplate(null);
                templates[616] = HDCP2UMD_AuthenticateStopTemplate(null);
                templates[617] = HDCP2UMD_SetStreamTypeStartTemplate(null);
                templates[618] = HDCP2UMD_SetStreamTypeStopTemplate(null);
                templates[619] = HDCP2UMD_RxStatusHDMITemplate(null);
                templates[620] = HDCP2UMD_RxStatusDPTemplate(null);
                templates[621] = HDCP2_DebugMessageTemplate(null);
                templates[622] = HDCP2KMD_EscapeTemplate(null);
                templates[623] = HDCP2KMD_QueueDataPacketTemplate(null);
                templates[624] = HDCP2KMD_SyncProcDoneTemplate(null);
                templates[625] = HDCP2KMD_AuthenticateTemplate(null);
                templates[626] = HDCP2KMD_SetStreamTemplate(null);
                templates[627] = HDCP_EncryptionStatusTemplate(null);
                templates[628] = OPM_CreateProtectedOutputTemplate(null);
                templates[629] = OPM_ConfigureProtectedOutputTemplate(null);
                templates[630] = OPM_DestroyProtectedOutputTemplate(null);
                templates[631] = DxgkDdiStartDeviceStartTemplate(null);
                templates[632] = DxgkDdiStartDeviceStopTemplate(null);
                templates[633] = HDCP2UMD_ServiceKMDEventStartTemplate(null);
                templates[634] = HDCP2UMD_ServiceKMDEventTemplate(null);
                templates[635] = HDCP2UMD_ServiceKMDEventStopTemplate(null);
                templates[636] = HDCP2UMD_ProcessKMDPacketTemplate(null);
                templates[637] = HDCP2UMD_DeviceInstanceTemplate(null);
                templates[638] = MMIOWriteTemplate(null);
                templates[639] = MiniportDebugMessageTemplate(null);
                templates[640] = WiDi_PAVP_SessionTearDownTemplate(null);
                templates[641] = WiDi_PAVP_SessionEstablishedTemplate(null);
                templates[642] = WiDi_PAVP_SessionTerminateTemplate(null);
                templates[643] = WIGIG_INTERRUPTWIGIG_END_OF_FRAMETemplate(null);
                templates[644] = WIGIG_INTERRUPTWIGIG_CAPTURE_COMPLETETemplate(null);
                templates[645] = WIGIG_INTERRUPTWIGIG_LATE_RUN_STATUSTemplate(null);
                templates[646] = GEN9HDMICONTROLLER_NotifyPowerWellChangeStartTemplate(null);
                templates[647] = GEN9HDMICONTROLLER_NotifyPowerWellChangeTemplate(null);
                templates[648] = IsIntelAudioDriverPresentTemplate(null);
                templates[649] = IsAudioEnabledInBIOSTemplate(null);
                templates[650] = AudioProtocol_SetAudioDataTemplate(null);
                templates[651] = AudioProtocol_SetAudioDataEELDDataTemplate(null);
                templates[652] = OPMGetSetParametersStartTemplate(null);
                templates[653] = OPMGetSetParametersLockAcquiredTemplate(null);
                templates[654] = OPMGetSetParametersStopTemplate(null);
                templates[655] = HECI_IO_MessageTemplate(null);
                templates[656] = LSPCON_AuxAccessTemplate(null);
                templates[657] = Decoupled_MMIO_AccessDCR_MMIO_AccessTemplate(null);
                templates[658] = DxgkDdiSubmitCommandTemplate(null);
                templates[659] = GfxGuc2HostInterruptTemplate(null);
                templates[660] = Interrupt_event_taskStartTemplate(null);
                templates[661] = Interrupt_event_taskStopTemplate(null);
                templates[662] = Interrupt_event_taskTemplate(null);
                templates[663] = GfxPageFaultSupportTemplate(null);
                templates[664] = GfxPageFaultTemplate(null);
                templates[665] = PsrCapabilityTemplate(null);
                templates[666] = GTCControlPSR2Template(null);
                templates[667] = PSR_FeaturesPSR1Template(null);
                templates[668] = PSR_FeaturesPSR2Template(null);
                templates[669] = PSR_FeaturesMBOTemplate(null);
                templates[670] = BackLightControlPWMTemplate(null);
                templates[671] = BackLightControlPanelPowerTemplate(null);
                templates[672] = HPD_AND_SPITemplate(null);
                templates[673] = HPD_AND_SPILPITemplate(null);
                templates[674] = AUXTransactionTemplate(null);
                templates[675] = I2CTransactionTemplate(null);
                templates[676] = WaterMarkInitializeGen9Template(null);
                templates[677] = CalculateWaterMarkGen9Template(null);
                templates[678] = ProgramWaterMarkGen9Template(null);
                templates[679] = ProgramDBufGen9Template(null);
                templates[680] = IPCTemplate(null);
                templates[681] = ConfigurePowerWellTemplate(null);
                templates[682] = SetDCStateTemplate(null);
                templates[683] = DP_LinkTrainingStartTemplate(null);
                templates[684] = PipeUnderRunTemplate(null);
                templates[685] = PipeUnderRunMemoryInfoTemplate(null);
                templates[686] = PipeUnderRunPlaneTemplate(null);
                templates[687] = PipeUnderRunPlane_WMTemplate(null);
                templates[688] = PipeUnderRunPipeScalerTemplate(null);
                templates[689] = SetDisplayStartTemplate(null);
                templates[690] = SetModePostDisplayDisableTemplate(null);
                templates[691] = SetModeEnablePortTemplate(null);
                templates[692] = DP_LinkTrainingStopTemplate(null);
                templates[693] = DP_LinkTrainingFastLinkTrainingTemplate(null);
                templates[694] = HDRCapsTemplate(null);
                templates[695] = HDRCapsCSL_InfoTemplate(null);
                templates[696] = SetHDRMetaDataTemplate(null);
                templates[697] = MMIOReadTemplate(null);
                templates[698] = PAVP_AutoTearDownTemplate(null);
                templates[699] = BackLightControlBacklightTemplate(null);
                templates[700] = BackLightControlVDDTemplate(null);
                templates[701] = DxgkDdiUpdateMonitorLinkInfoTemplate(null);
                templates[702] = DxgkDdiControlModeBehaviorTemplate(null);
                templates[703] = PlaneProgrammingDisplayPlaneWriteTemplate(null);
                templates[704] = PlaneProgrammingDisplayScalerArmingTemplate(null);
                templates[705] = PlaneProgrammingDisplayDBSToggleTemplate(null);
                templates[706] = DxgkDdiCollectDbgInfoTemplate(null);
                templates[707] = DxgkDdiCollectDbgInfoAnalysisResultTemplate(null);
                templates[708] = IsDBUFAllocatedForOverlayTemplate(null);
                templates[709] = DxgkDdiPresentDisplayOnlyTemplate(null);
                templates[710] = PavpInfoTemplate(null);
                templates[711] = PcEventNotificationReceivedTemplate(null);
                templates[712] = PcEventNotificationProcessingTemplate(null);
                templates[713] = PwrConsEscapeTemplate(null);
                templates[714] = PwrConsUserPolicyTemplate(null);
                templates[715] = DxgkDdiBlcSetBrightnessTemplate(null);
                templates[716] = DxgkDdiBlcSetBrightnessStateTemplate(null);
                templates[717] = DxgkDdiBlcSetBacklightOptimizationTemplate(null);
                templates[718] = AlsOpRegHandlerTemplate(null);
                templates[719] = BlcOpRegHandlerTemplate(null);
                templates[720] = PFMBOpRegHandlerTemplate(null);
                templates[721] = BlcComputeNewPercentageTemplate(null);
                templates[722] = BlcClientEventHandlerTemplate(null);
                templates[723] = BlcReferenceClockUpdateTemplate(null);
                templates[724] = BlcSetAdtStateTemplate(null);
                templates[725] = BlcSetAdtAmbientLightLevelTemplate(null);
                templates[726] = BlcSetAdtBrightnessLevelTemplate(null);
                templates[727] = BlcSetPWMGranularityMode_GEN9Template(null);
                templates[728] = BlcPwmActivate_GEN7_5Template(null);
                templates[729] = BlcPwmActivate_Gen9lpTemplate(null);
                templates[730] = BlcPwmApply_GEN7_5Template(null);
                templates[731] = BlcPwmApply_Gen9lpTemplate(null);
                templates[732] = BlcSetDisplayBrightness_CabcTemplate(null);
                templates[733] = DpstHistogramUpdateGuardbandTemplate(null);
                templates[734] = DpstHistogramGetStatusTemplate(null);
                templates[735] = DpstHistogramEnable_Gen6Template(null);
                templates[736] = DpstHistogramEnableTemplate(null);
                templates[737] = DpstHistogramDisableTemplate(null);
                templates[738] = DpstHistogramResetTemplate(null);
                templates[739] = DpstClientEventHandlerTemplate(null);
                templates[740] = DpstHistDpcWorkItemCallbackTemplate(null);
                templates[741] = DpstAlgorithmResultTemplate(null);
                templates[742] = DpstProgramDietRegsTemplate(null);
                templates[743] = LaceHistogramReadStartTemplate(null);
                templates[744] = LaceHistogramReadTemplate(null);
                templates[745] = LaceApplyIeStartTemplate(null);
                templates[746] = LaceApplyIeTemplate(null);
                templates[747] = LaceEnableTemplate(null);
                templates[748] = LaceDisableTemplate(null);
                templates[749] = LaceClientEventHandlerTemplate(null);
                templates[750] = PcMediaWorkloadDetectionTemplate(null);
                templates[751] = PcVbiStateTemplate(null);
                templates[752] = CxsrProgramPlaneLPWmsTemplate(null);
                templates[753] = CxsrClearPlaneLPWmsTemplate(null);
                templates[754] = CxsrEnableTemplate(null);
                templates[755] = CxsrPlaneLPWmPushTemplate(null);
                templates[756] = CxsrClientEventHandlerTemplate(null);
                templates[757] = FbcDisable_Gen9Template(null);
                templates[758] = FbcEnable_Gen9Template(null);
                templates[759] = FbcInvalidateLineSegmentsTemplate(null);
                templates[760] = FbcSetCompressionControlTemplate(null);
                templates[761] = FbcSetCpuFenceControlTemplate(null);
                templates[762] = FbcSetupGmmDataTemplate(null);
                templates[763] = PsrEnterTemplate(null);
                templates[764] = PsrExitTemplate(null);
                templates[765] = PsrSendSfuTemplate(null);
                templates[766] = PsrSetMediaPlaybackStateTemplate(null);
                templates[767] = PsrSetSfuModeTemplate(null);
                templates[768] = PsrClientEventHandlerTemplate(null);
                templates[769] = DpsSetModePStateSwLegacyTemplate(null);
                templates[770] = CxsrExternalEventHandlerTemplate(null);
                templates[771] = DpsExternalEventHandlerTemplate(null);
                templates[772] = DpstExternalEventHandlerTemplate(null);
                templates[773] = FbcExternalEventHandlerTemplate(null);
                templates[774] = LaceExternalEventHandlerTemplate(null);
                templates[775] = PsrExternalEventHandlerTemplate(null);
                templates[776] = PwrConsLoadPolicyTableTemplate(null);
                templates[777] = CxsrEnableStopTemplate(null);
                templates[778] = LaceHistogramReadStopTemplate(null);
                templates[779] = LaceApplyIeStopTemplate(null);
                templates[780] = PhaseCoordinatorInitializeTemplate(null);
                templates[781] = PhaseCoordinatorTimerCallbackTemplate(null);
                templates[782] = PhaseCoordinatorApplyStartTemplate(null);
                templates[783] = PhaseCoordinatorApplyStopTemplate(null);
                templates[784] = PhaseCoordinatorStartTimerTemplate(null);
                templates[785] = PhaseCoordinatorCancelTimerTemplate(null);
                templates[786] = PhaseCoordinatorProgramAdjustStartTemplate(null);
                templates[787] = PhaseCoordinatorProgramAdjustStopTemplate(null);
                templates[788] = PhaseCoordinatorResetAdjustTemplate(null);
                templates[789] = PhaseCoordinatorWorkItemCallbackTemplate(null);
                templates[790] = PhaseCoordinatorSetupDpstPhasingTemplate(null);
                templates[791] = PwrConsGetLfpCapabilitiesTemplate(null);
                templates[792] = PwrConsEnableDisablePCFeaturesFromVBTTemplate(null);
                templates[793] = PwrConsGetUserBootInfoTemplate(null);
                templates[794] = PwrConsInitFbcCpuTrackingTemplate(null);
                templates[795] = BlcInitializeTemplate(null);
                templates[796] = DpstInitializeTemplate(null);
                templates[797] = CxsrInitializeTemplate(null);
                templates[798] = BlcInitHardwareStartTemplate(null);
                templates[799] = BlcInitHardwareStopTemplate(null);
                templates[800] = BlcMapUserSettingTemplate(null);
                templates[801] = DpsInitSupportedPStatesTemplate(null);
                templates[802] = DpsExternalEventHandlerStopTemplate(null);
                templates[803] = DpsInitializeTemplate(null);
                templates[804] = DpsVBINotificationEventHandlerTemplate(null);
                templates[805] = DpsSetUserDpsParamsTemplate(null);
                templates[806] = DpsGetUserDpsParamsTemplate(null);
                templates[807] = DpsMamInitializeTemplate(null);
                templates[808] = DpsMamEventHandlerTemplate(null);
                templates[809] = DpsMamDisableTemplate(null);
                templates[810] = DpsMamStartTimerTemplate(null);
                templates[811] = DpsMamCancelTimerTemplate(null);
                templates[812] = DpsMamTimerCallbackTemplate(null);
                templates[813] = DpsMamWorkItemCallbackTemplate(null);
                templates[814] = PwrConsUpdateMamDataTemplate(null);
                templates[815] = PoshEventTemplate(null);
                templates[816] = PcGfxRegValueDwordReadTemplate(null);
                templates[817] = PcGfxRegValueDwordWriteTemplate(null);
                templates[818] = PcGfxRegValueBinaryReadTemplate(null);
                templates[819] = PcGfxRegValueBinaryWriteTemplate(null);
                templates[820] = PcRegValueFullPathDwordReadTemplate(null);
                templates[821] = PcRegValueFullPathDwordWriteTemplate(null);
                templates[822] = PcPowerPlanRegValueReadTemplate(null);
                templates[823] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StartTemplate(null);
                templates[824] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3StopTemplate(null);
                templates[825] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PlaneTemplate(null);
                templates[826] = DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3PipeScalerTemplate(null);
                templates[827] = DxgkDdiCheckMultiPlaneOverlaySupport3Template(null);
                templates[828] = DxgkDdiCheckMultiPlaneOverlaySupport3StartTemplate(null);
                templates[829] = DxgkDdiCheckMultiPlaneOverlaySupport3StopTemplate(null);
                templates[830] = ReportPresentIDFlipDoneTemplate(null);
                templates[831] = ReportPresentIDVBITemplate(null);
                templates[832] = TaskpertainingtoEventsgeneratedforDIVAULTfromGfxValStubTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriver
{
    public sealed class t_AlsOpRegHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Data { get { return GetInt32At(8); } }

        #region Private
        internal t_AlsOpRegHandlerData(Action<t_AlsOpRegHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_AlsOpRegHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_AlsOpRegHandlerData> m_target;
        #endregion
    }
    public sealed class t_AudioProtocol_SetAudioData : TraceEvent
    {
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(0); } }
        public AUDIOSTATE AudioState { get { return (AUDIOSTATE)GetInt32At(4); } }
        public bool bEnable { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_AudioProtocol_SetAudioData(Action<t_AudioProtocol_SetAudioData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_AudioProtocol_SetAudioData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "AudioState", AudioState);
             XmlAttrib(sb, "bEnable", bEnable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "AudioState", "bEnable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return AudioState;
                case 2:
                    return bEnable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_AudioProtocol_SetAudioData> m_target;
        #endregion
    }
    public sealed class t_WriteAudioEELDData : TraceEvent
    {
        public int DataSize { get { return GetInt32At(0); } }
        public byte[] EELDData { get { return GetByteArrayAt(4, DataSize); } }

        #region Private
        internal t_WriteAudioEELDData(Action<t_WriteAudioEELDData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WriteAudioEELDData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DataSize", "EELDData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WriteAudioEELDData> m_target;
        #endregion
    }
    public sealed class t_AUXTransaction : TraceEvent
    {
        public TRANSACTION_OPERATION Operation { get { return (TRANSACTION_OPERATION)GetInt32At(0); } }
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(4); } }
        public int DataSize { get { return GetInt16At(8); } }
        public byte[] Data { get { return GetByteArrayAt(10, DataSize); } }
        public GMCH_AUX_ERROR_TYPE ReturnStatus { get { return (GMCH_AUX_ERROR_TYPE)GetInt32At(0+ (DataSize*1)+10); } }
        public int Type { get { return GetInt32At(0+ (DataSize*1)+14); } }

        #region Private
        internal t_AUXTransaction(Action<t_AUXTransaction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+18));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_AUXTransaction>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Operation", "Port", "DataSize", "Data", "ReturnStatus", "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Operation;
                case 1:
                    return Port;
                case 2:
                    return DataSize;
                case 3:
                    return ReturnStatus;
                case 4:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_AUXTransaction> m_target;
        #endregion
    }
    public sealed class t_BackLightControl : TraceEvent
    {
        public GENERIC_STATES State { get { return (GENERIC_STATES)GetInt32At(0); } }
        public int RegisterData { get { return GetInt32At(4); } }

        #region Private
        internal t_BackLightControl(Action<t_BackLightControl> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BackLightControl>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "State", State);
             XmlAttrib(sb, "RegisterData", RegisterData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "State", "RegisterData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return State;
                case 1:
                    return RegisterData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BackLightControl> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry : TraceEvent
    {
        public int ucDeviceNum { get { return GetByteAt(0); } }

        #region Private
        internal t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry(Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucDeviceNum", ucDeviceNum);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucDeviceNum"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucDeviceNum;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit(Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_CreateFakeEDIDFromVBTTimings_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_GetMonitorName_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEDISPLAY_GetMonitorName_Exit(Action<t_BASEDISPLAY_GetMonitorName_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_GetMonitorName_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_GetMonitorName_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_IsPreferredTiming_Entry : TraceEvent
    {
        public long stPreferredTiming_dwHActive { get { return GetInt64At(0); } }

        #region Private
        internal t_BASEDISPLAY_IsPreferredTiming_Entry(Action<t_BASEDISPLAY_IsPreferredTiming_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_IsPreferredTiming_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "stPreferredTiming_dwHActive", stPreferredTiming_dwHActive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "stPreferredTiming_dwHActive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return stPreferredTiming_dwHActive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_IsPreferredTiming_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_IsPreferredTiming_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEDISPLAY_IsPreferredTiming_Exit(Action<t_BASEDISPLAY_IsPreferredTiming_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_IsPreferredTiming_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_IsPreferredTiming_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_RetrieveEDIDBlock_Entry : TraceEvent
    {
        public int ucEDIDBlock { get { return GetByteAt(0); } }
        public long ulSize { get { return GetInt64At(1); } }
        public int stDisplayDDCArgs_eDisplayPort { get { return GetInt32At(9); } }
        public long stDisplayDDCArgs_ulDDCPort { get { return GetInt64At(13); } }
        public long stDisplayDDCArgs_ulDDCAddress { get { return GetInt64At(21); } }
        public int stDisplayDDCArgs_ucSDVODDCSelection { get { return GetByteAt(29); } }
        public bool bUseBitBashing { get { return GetInt32At(30) != 0; } }

        #region Private
        internal t_BASEDISPLAY_RetrieveEDIDBlock_Entry(Action<t_BASEDISPLAY_RetrieveEDIDBlock_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 34));
            Debug.Assert(!(Version > 0 && EventDataLength < 34));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_RetrieveEDIDBlock_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucEDIDBlock", ucEDIDBlock);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "stDisplayDDCArgs_eDisplayPort", stDisplayDDCArgs_eDisplayPort);
             XmlAttrib(sb, "stDisplayDDCArgs_ulDDCPort", stDisplayDDCArgs_ulDDCPort);
             XmlAttrib(sb, "stDisplayDDCArgs_ulDDCAddress", stDisplayDDCArgs_ulDDCAddress);
             XmlAttrib(sb, "stDisplayDDCArgs_ucSDVODDCSelection", stDisplayDDCArgs_ucSDVODDCSelection);
             XmlAttrib(sb, "bUseBitBashing", bUseBitBashing);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucEDIDBlock", "ulSize", "stDisplayDDCArgs_eDisplayPort", "stDisplayDDCArgs_ulDDCPort", "stDisplayDDCArgs_ulDDCAddress", "stDisplayDDCArgs_ucSDVODDCSelection", "bUseBitBashing"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucEDIDBlock;
                case 1:
                    return ulSize;
                case 2:
                    return stDisplayDDCArgs_eDisplayPort;
                case 3:
                    return stDisplayDDCArgs_ulDDCPort;
                case 4:
                    return stDisplayDDCArgs_ulDDCAddress;
                case 5:
                    return stDisplayDDCArgs_ucSDVODDCSelection;
                case 6:
                    return bUseBitBashing;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_RetrieveEDIDBlock_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_RetrieveEDIDBlock_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEDISPLAY_RetrieveEDIDBlock_Exit(Action<t_BASEDISPLAY_RetrieveEDIDBlock_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_RetrieveEDIDBlock_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_RetrieveEDIDBlock_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_UpdateEDID_Entry : TraceEvent
    {
        public long ulEDIDSize { get { return GetInt64At(0); } }

        #region Private
        internal t_BASEDISPLAY_UpdateEDID_Entry(Action<t_BASEDISPLAY_UpdateEDID_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_UpdateEDID_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulEDIDSize", ulEDIDSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulEDIDSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulEDIDSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_UpdateEDID_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEDISPLAY_UpdateEDID_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ucMaxEDIDBlocks { get { return GetByteAt(4); } }

        #region Private
        internal t_BASEDISPLAY_UpdateEDID_Exit(Action<t_BASEDISPLAY_UpdateEDID_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEDISPLAY_UpdateEDID_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucMaxEDIDBlocks", ucMaxEDIDBlocks);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucMaxEDIDBlocks"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucMaxEDIDBlocks;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEDISPLAY_UpdateEDID_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_GetDisplayIDs_Entry : TraceEvent
    {
        public int nDisplays { get { return GetInt32At(0); } }
        public int eEncoderType { get { return GetInt32At(4); } }
        public int stBaseEncoderData_eEncoderType { get { return GetInt32At(8); } }
        public int stBaseEncoderData_eDisplayPort { get { return GetInt32At(12); } }

        #region Private
        internal t_BASEENCODER_GetDisplayIDs_Entry(Action<t_BASEENCODER_GetDisplayIDs_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_GetDisplayIDs_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "nDisplays", nDisplays);
             XmlAttrib(sb, "eEncoderType", eEncoderType);
             XmlAttrib(sb, "stBaseEncoderData_eEncoderType", stBaseEncoderData_eEncoderType);
             XmlAttrib(sb, "stBaseEncoderData_eDisplayPort", stBaseEncoderData_eDisplayPort);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "nDisplays", "eEncoderType", "stBaseEncoderData_eEncoderType", "stBaseEncoderData_eDisplayPort"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return nDisplays;
                case 1:
                    return eEncoderType;
                case 2:
                    return stBaseEncoderData_eEncoderType;
                case 3:
                    return stBaseEncoderData_eDisplayPort;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_GetDisplayIDs_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_GetDisplayIDs_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEENCODER_GetDisplayIDs_Exit(Action<t_BASEENCODER_GetDisplayIDs_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_GetDisplayIDs_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_GetDisplayIDs_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_GetDisplayInfo_Entry : TraceEvent
    {
        public int eIsEncoderOutputActive { get { return GetInt32At(0); } }
        public int eLastDisplayAttachedStatus { get { return GetInt32At(4); } }
        public long ulDisplayUID { get { return GetInt64At(8); } }
        public bool bIsModeTableInitialized { get { return GetInt32At(16) != 0; } }

        #region Private
        internal t_BASEENCODER_GetDisplayInfo_Entry(Action<t_BASEENCODER_GetDisplayInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_GetDisplayInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eIsEncoderOutputActive", eIsEncoderOutputActive);
             XmlAttrib(sb, "eLastDisplayAttachedStatus", eLastDisplayAttachedStatus);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bIsModeTableInitialized", bIsModeTableInitialized);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eIsEncoderOutputActive", "eLastDisplayAttachedStatus", "ulDisplayUID", "bIsModeTableInitialized"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eIsEncoderOutputActive;
                case 1:
                    return eLastDisplayAttachedStatus;
                case 2:
                    return ulDisplayUID;
                case 3:
                    return bIsModeTableInitialized;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_GetDisplayInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry : TraceEvent
    {
        public bool stPolicy_bActiveDetectionPolicy { get { return GetInt32At(0) != 0; } }
        public bool bFirstTimeDetection { get { return GetInt32At(4) != 0; } }
        public long ulDelayedDetectionStatus { get { return GetInt64At(8); } }
        public bool stPolicy_bForceActiveDetectionPolicy { get { return GetInt32At(16) != 0; } }

        #region Private
        internal t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry(Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "stPolicy_bActiveDetectionPolicy", stPolicy_bActiveDetectionPolicy);
             XmlAttrib(sb, "bFirstTimeDetection", bFirstTimeDetection);
             XmlAttrib(sb, "ulDelayedDetectionStatus", ulDelayedDetectionStatus);
             XmlAttrib(sb, "stPolicy_bForceActiveDetectionPolicy", stPolicy_bForceActiveDetectionPolicy);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "stPolicy_bActiveDetectionPolicy", "bFirstTimeDetection", "ulDelayedDetectionStatus", "stPolicy_bForceActiveDetectionPolicy"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return stPolicy_bActiveDetectionPolicy;
                case 1:
                    return bFirstTimeDetection;
                case 2:
                    return ulDelayedDetectionStatus;
                case 3:
                    return stPolicy_bForceActiveDetectionPolicy;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit : TraceEvent
    {
        public bool bActiveDetectionReq { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit(Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bActiveDetectionReq", bActiveDetectionReq);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bActiveDetectionReq"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bActiveDetectionReq;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_IsActiveDetectionRequiredWithDelay_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_IsDisplayInFutureConfig_Entry : TraceEvent
    {
        public bool stFutureDisplayConfig_bValid { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEENCODER_IsDisplayInFutureConfig_Entry(Action<t_BASEENCODER_IsDisplayInFutureConfig_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_IsDisplayInFutureConfig_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "stFutureDisplayConfig_bValid", stFutureDisplayConfig_bValid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "stFutureDisplayConfig_bValid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return stFutureDisplayConfig_bValid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_IsDisplayInFutureConfig_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_IsDisplayInFutureConfig_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEENCODER_IsDisplayInFutureConfig_Exit(Action<t_BASEENCODER_IsDisplayInFutureConfig_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_IsDisplayInFutureConfig_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_IsDisplayInFutureConfig_Exit> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_WGGetSetCSC_Entry : TraceEvent
    {
        public long ulPipeInUse { get { return GetInt64At(0); } }
        public int stLastGDIModeInfo_eSourcePixelFormat { get { return GetInt32At(8); } }
        public bool bIsNarrowGamutFeatureSuported { get { return GetInt32At(12) != 0; } }
        public int eCSCOperationType { get { return GetInt32At(16); } }
        public bool stCustomWGParams_bEnable { get { return GetInt32At(20) != 0; } }
        public int eMatrixType { get { return GetInt32At(24); } }

        #region Private
        internal t_BASEENCODER_WGGetSetCSC_Entry(Action<t_BASEENCODER_WGGetSetCSC_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_WGGetSetCSC_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeInUse", ulPipeInUse);
             XmlAttrib(sb, "stLastGDIModeInfo_eSourcePixelFormat", stLastGDIModeInfo_eSourcePixelFormat);
             XmlAttrib(sb, "bIsNarrowGamutFeatureSuported", bIsNarrowGamutFeatureSuported);
             XmlAttrib(sb, "eCSCOperationType", eCSCOperationType);
             XmlAttrib(sb, "stCustomWGParams_bEnable", stCustomWGParams_bEnable);
             XmlAttrib(sb, "eMatrixType", eMatrixType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeInUse", "stLastGDIModeInfo_eSourcePixelFormat", "bIsNarrowGamutFeatureSuported", "eCSCOperationType", "stCustomWGParams_bEnable", "eMatrixType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeInUse;
                case 1:
                    return stLastGDIModeInfo_eSourcePixelFormat;
                case 2:
                    return bIsNarrowGamutFeatureSuported;
                case 3:
                    return eCSCOperationType;
                case 4:
                    return stCustomWGParams_bEnable;
                case 5:
                    return eMatrixType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_WGGetSetCSC_Entry> m_target;
        #endregion
    }
    public sealed class t_BASEENCODER_WGGetSetCSC_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_BASEENCODER_WGGetSetCSC_Exit(Action<t_BASEENCODER_WGGetSetCSC_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BASEENCODER_WGGetSetCSC_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BASEENCODER_WGGetSetCSC_Exit> m_target;
        #endregion
    }
    public sealed class t_BlcClientEventHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_BlcClientEventHandlerData(Action<t_BlcClientEventHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcClientEventHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcClientEventHandlerData> m_target;
        #endregion
    }
    public sealed class t_BlcComputeNewPercentageData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Percent { get { return GetInt32At(8); } }
        public int User { get { return GetInt32At(12); } }
        public int AlsAdjust { get { return GetInt32At(16); } }
        public int DpstAdjust { get { return GetInt32At(20); } }
        public int DptfAdjust { get { return GetInt32At(24); } }
        public int MinBrightnessPercent { get { return GetInt32At(28); } }

        #region Private
        internal t_BlcComputeNewPercentageData(Action<t_BlcComputeNewPercentageData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcComputeNewPercentageData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Percent", Percent);
             XmlAttrib(sb, "User", User);
             XmlAttrib(sb, "AlsAdjust", AlsAdjust);
             XmlAttrib(sb, "DpstAdjust", DpstAdjust);
             XmlAttrib(sb, "DptfAdjust", DptfAdjust);
             XmlAttrib(sb, "MinBrightnessPercent", MinBrightnessPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Percent", "User", "AlsAdjust", "DpstAdjust", "DptfAdjust", "MinBrightnessPercent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Percent;
                case 2:
                    return User;
                case 3:
                    return AlsAdjust;
                case 4:
                    return DpstAdjust;
                case 5:
                    return DptfAdjust;
                case 6:
                    return MinBrightnessPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcComputeNewPercentageData> m_target;
        #endregion
    }
    public sealed class t_PcTimePoint : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }

        #region Private
        internal t_PcTimePoint(Action<t_PcTimePoint> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcTimePoint>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcTimePoint> m_target;
        #endregion
    }
    public sealed class t_BlcInitialize : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int InverterDataSize { get { return GetInt32At(8); } }
        public byte[] InverterData { get { return GetByteArrayAt(12, InverterDataSize); } }
        public int PanelPwmConfigDataSize { get { return GetInt32At(0+ (InverterDataSize*1)+12); } }
        public byte[] PanelPwmConfigData { get { return GetByteArrayAt(0+ (InverterDataSize*1)+16, PanelPwmConfigDataSize); } }
        public int InitStatus { get { return GetInt32At(0+ (PanelPwmConfigDataSize*1)+ (InverterDataSize*1)+16); } }

        #region Private
        internal t_BlcInitialize(Action<t_BlcInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (PanelPwmConfigDataSize*1)+ (InverterDataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (PanelPwmConfigDataSize*1)+ (InverterDataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "InverterDataSize", InverterDataSize);
             XmlAttrib(sb, "PanelPwmConfigDataSize", PanelPwmConfigDataSize);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "InverterDataSize", "InverterData", "PanelPwmConfigDataSize", "PanelPwmConfigData", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return InverterDataSize;
                case 2:
                    return PanelPwmConfigDataSize;
                case 3:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcInitialize> m_target;
        #endregion
    }
    public sealed class t_BlcMapUserSettingData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int UserBrightnessSource { get { return GetInt32At(8); } }
        public int DutyCycleTarget { get { return GetInt32At(12); } }
        public int BCLMTableDataSize { get { return GetInt32At(16); } }
        public byte[] BCLMTableData { get { return GetByteArrayAt(20, BCLMTableDataSize); } }

        #region Private
        internal t_BlcMapUserSettingData(Action<t_BlcMapUserSettingData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (BCLMTableDataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (BCLMTableDataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcMapUserSettingData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "UserBrightnessSource", UserBrightnessSource);
             XmlAttrib(sb, "DutyCycleTarget", DutyCycleTarget);
             XmlAttrib(sb, "BCLMTableDataSize", BCLMTableDataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "UserBrightnessSource", "DutyCycleTarget", "BCLMTableDataSize", "BCLMTableData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return UserBrightnessSource;
                case 2:
                    return DutyCycleTarget;
                case 3:
                    return BCLMTableDataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcMapUserSettingData> m_target;
        #endregion
    }
    public sealed class t_BlcOpRegHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Data { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcOpRegHandlerData(Action<t_BlcOpRegHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcOpRegHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcOpRegHandlerData> m_target;
        #endregion
    }
    public sealed class t_BlcPwmActivate_GEN7_5_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlData { get { return GetInt32At(8); } }
        public int PwmData { get { return GetInt32At(12); } }

        #region Private
        internal t_BlcPwmActivate_GEN7_5_Data(Action<t_BlcPwmActivate_GEN7_5_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcPwmActivate_GEN7_5_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlData", ControlData);
             XmlAttrib(sb, "PwmData", PwmData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlData", "PwmData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlData;
                case 2:
                    return PwmData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcPwmActivate_GEN7_5_Data> m_target;
        #endregion
    }
    public sealed class t_BlcPwmActivate_Gen9lp_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlAddress { get { return GetInt32At(8); } }
        public int ControlData { get { return GetInt32At(12); } }
        public int FrequencyAddress { get { return GetInt32At(16); } }
        public int FrequencyData { get { return GetInt32At(20); } }
        public int DutyCycleAddress { get { return GetInt32At(24); } }
        public int DutyCycleData { get { return GetInt32At(28); } }

        #region Private
        internal t_BlcPwmActivate_Gen9lp_Data(Action<t_BlcPwmActivate_Gen9lp_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcPwmActivate_Gen9lp_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlAddress", ControlAddress);
             XmlAttrib(sb, "ControlData", ControlData);
             XmlAttrib(sb, "FrequencyAddress", FrequencyAddress);
             XmlAttrib(sb, "FrequencyData", FrequencyData);
             XmlAttrib(sb, "DutyCycleAddress", DutyCycleAddress);
             XmlAttrib(sb, "DutyCycleData", DutyCycleData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlAddress", "ControlData", "FrequencyAddress", "FrequencyData", "DutyCycleAddress", "DutyCycleData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlAddress;
                case 2:
                    return ControlData;
                case 3:
                    return FrequencyAddress;
                case 4:
                    return FrequencyData;
                case 5:
                    return DutyCycleAddress;
                case 6:
                    return DutyCycleData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcPwmActivate_Gen9lp_Data> m_target;
        #endregion
    }
    public sealed class t_BlcPwmApply_GEN7_5_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int PwmData { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcPwmApply_GEN7_5_Data(Action<t_BlcPwmApply_GEN7_5_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcPwmApply_GEN7_5_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PwmData", PwmData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PwmData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PwmData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcPwmApply_GEN7_5_Data> m_target;
        #endregion
    }
    public sealed class t_BlcPwmApply_Gen9lp_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int FrequencyAddress { get { return GetInt32At(8); } }
        public int FrequencyData { get { return GetInt32At(12); } }
        public int DutyCycleAddress { get { return GetInt32At(16); } }
        public int DutyCycleData { get { return GetInt32At(20); } }

        #region Private
        internal t_BlcPwmApply_Gen9lp_Data(Action<t_BlcPwmApply_Gen9lp_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcPwmApply_Gen9lp_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "FrequencyAddress", FrequencyAddress);
             XmlAttrib(sb, "FrequencyData", FrequencyData);
             XmlAttrib(sb, "DutyCycleAddress", DutyCycleAddress);
             XmlAttrib(sb, "DutyCycleData", DutyCycleData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "FrequencyAddress", "FrequencyData", "DutyCycleAddress", "DutyCycleData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return FrequencyAddress;
                case 2:
                    return FrequencyData;
                case 3:
                    return DutyCycleAddress;
                case 4:
                    return DutyCycleData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcPwmApply_Gen9lp_Data> m_target;
        #endregion
    }
    public sealed class t_BlcReferenceClockUpdateData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ReferenceFrequency { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcReferenceClockUpdateData(Action<t_BlcReferenceClockUpdateData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcReferenceClockUpdateData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ReferenceFrequency", ReferenceFrequency);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ReferenceFrequency"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ReferenceFrequency;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcReferenceClockUpdateData> m_target;
        #endregion
    }
    public sealed class t_BlcSetAdtAmbientLightLevelData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int AmbientLightLevel { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcSetAdtAmbientLightLevelData(Action<t_BlcSetAdtAmbientLightLevelData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcSetAdtAmbientLightLevelData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "AmbientLightLevel", AmbientLightLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "AmbientLightLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return AmbientLightLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcSetAdtAmbientLightLevelData> m_target;
        #endregion
    }
    public sealed class t_BlcSetAdtBrightnessLevelData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BrightnessLevel { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcSetAdtBrightnessLevelData(Action<t_BlcSetAdtBrightnessLevelData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcSetAdtBrightnessLevelData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BrightnessLevel", BrightnessLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BrightnessLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BrightnessLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcSetAdtBrightnessLevelData> m_target;
        #endregion
    }
    public sealed class t_BlcSetAdtStateData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int State { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcSetAdtStateData(Action<t_BlcSetAdtStateData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcSetAdtStateData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "State", State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcSetAdtStateData> m_target;
        #endregion
    }
    public sealed class t_BlcSetDisplayBrightness_Cabc_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Percent { get { return GetInt32At(8); } }

        #region Private
        internal t_BlcSetDisplayBrightness_Cabc_Data(Action<t_BlcSetDisplayBrightness_Cabc_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcSetDisplayBrightness_Cabc_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Percent", Percent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Percent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Percent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcSetDisplayBrightness_Cabc_Data> m_target;
        #endregion
    }
    public sealed class t_BlcSetPWMGranularityMode_GEN9_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlAddress { get { return GetInt32At(8); } }
        public int ControlData { get { return GetInt32At(12); } }

        #region Private
        internal t_BlcSetPWMGranularityMode_GEN9_Data(Action<t_BlcSetPWMGranularityMode_GEN9_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_BlcSetPWMGranularityMode_GEN9_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlAddress", ControlAddress);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlAddress", "ControlData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlAddress;
                case 2:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_BlcSetPWMGranularityMode_GEN9_Data> m_target;
        #endregion
    }
    public sealed class t_CalculateWaterMark : TraceEvent
    {
        public int SurfaceWidth { get { return GetInt32At(0); } }
        public int DotClockInKHz { get { return GetInt32At(4); } }
        public int HTotal { get { return GetInt32At(8); } }
        public int BytesPerPixel { get { return GetInt32At(12); } }
        public int Level { get { return GetInt32At(16); } }
        public SURFACE_MEMORY_TYPE SurfaceMemType { get { return (SURFACE_MEMORY_TYPE)GetInt32At(20); } }
        public bool IsCursorPlane { get { return GetInt32At(24) != 0; } }
        public bool WMCalculationForDBuf { get { return GetInt32At(28) != 0; } }
        public int LineTime { get { return GetInt32At(32); } }
        public bool LPWM_Enable { get { return GetInt32At(36) != 0; } }
        public int LPWM_Blocks { get { return GetInt32At(40); } }
        public bool LPWM_IgnoreLines { get { return GetInt32At(44) != 0; } }
        public bool TransWM_Enable { get { return GetInt32At(48) != 0; } }
        public int TransWM_Blocks { get { return GetInt32At(52); } }
        public int TransWM_Lines { get { return GetInt32At(56); } }
        public bool TransWM_IgnoreLines { get { return GetInt32At(60) != 0; } }
        public SB_WATERMARK_RETURN_CODE ReturnCode { get { return (SB_WATERMARK_RETURN_CODE)GetInt32At(64); } }
        public bool Ret { get { return GetInt32At(68) != 0; } }
        public int LPWM_Lines { get { return GetInt32At(72); } }
        public int LPlatency { get { return GetInt16At(76); } }
        public int DBufAllocatedOnPlane { get { return GetInt32At(78); } }
        public int BytesPerLine { get { return GetInt32At(82); } }
        public int Method1 { get { return GetInt32At(86); } }
        public int Method2 { get { return GetInt32At(90); } }
        public int YTileMinin { get { return GetInt32At(94); } }
        public int SelectedResultBlocksin { get { return GetInt32At(98); } }

        #region Private
        internal t_CalculateWaterMark(Action<t_CalculateWaterMark> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 102));
            Debug.Assert(!(Version > 0 && EventDataLength < 102));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CalculateWaterMark>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SurfaceWidth", SurfaceWidth);
             XmlAttrib(sb, "DotClockInKHz", DotClockInKHz);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "BytesPerPixel", BytesPerPixel);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "SurfaceMemType", SurfaceMemType);
             XmlAttrib(sb, "IsCursorPlane", IsCursorPlane);
             XmlAttrib(sb, "WMCalculationForDBuf", WMCalculationForDBuf);
             XmlAttrib(sb, "LineTime", LineTime);
             XmlAttrib(sb, "LPWM_Enable", LPWM_Enable);
             XmlAttrib(sb, "LPWM_Blocks", LPWM_Blocks);
             XmlAttrib(sb, "LPWM_IgnoreLines", LPWM_IgnoreLines);
             XmlAttrib(sb, "TransWM_Enable", TransWM_Enable);
             XmlAttrib(sb, "TransWM_Blocks", TransWM_Blocks);
             XmlAttrib(sb, "TransWM_Lines", TransWM_Lines);
             XmlAttrib(sb, "TransWM_IgnoreLines", TransWM_IgnoreLines);
             XmlAttrib(sb, "ReturnCode", ReturnCode);
             XmlAttrib(sb, "Ret", Ret);
             XmlAttrib(sb, "LPWM_Lines", LPWM_Lines);
             XmlAttrib(sb, "LPlatency", LPlatency);
             XmlAttrib(sb, "DBufAllocatedOnPlane", DBufAllocatedOnPlane);
             XmlAttrib(sb, "BytesPerLine", BytesPerLine);
             XmlAttrib(sb, "Method1", Method1);
             XmlAttrib(sb, "Method2", Method2);
             XmlAttrib(sb, "YTileMinin", YTileMinin);
             XmlAttrib(sb, "SelectedResultBlocksin", SelectedResultBlocksin);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SurfaceWidth", "DotClockInKHz", "HTotal", "BytesPerPixel", "Level", "SurfaceMemType", "IsCursorPlane", "WMCalculationForDBuf", "LineTime", "LPWM_Enable", "LPWM_Blocks", "LPWM_IgnoreLines", "TransWM_Enable", "TransWM_Blocks", "TransWM_Lines", "TransWM_IgnoreLines", "ReturnCode", "Ret", "LPWM_Lines", "LPlatency", "DBufAllocatedOnPlane", "BytesPerLine", "Method1", "Method2", "YTileMinin", "SelectedResultBlocksin"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SurfaceWidth;
                case 1:
                    return DotClockInKHz;
                case 2:
                    return HTotal;
                case 3:
                    return BytesPerPixel;
                case 4:
                    return Level;
                case 5:
                    return SurfaceMemType;
                case 6:
                    return IsCursorPlane;
                case 7:
                    return WMCalculationForDBuf;
                case 8:
                    return LineTime;
                case 9:
                    return LPWM_Enable;
                case 10:
                    return LPWM_Blocks;
                case 11:
                    return LPWM_IgnoreLines;
                case 12:
                    return TransWM_Enable;
                case 13:
                    return TransWM_Blocks;
                case 14:
                    return TransWM_Lines;
                case 15:
                    return TransWM_IgnoreLines;
                case 16:
                    return ReturnCode;
                case 17:
                    return Ret;
                case 18:
                    return LPWM_Lines;
                case 19:
                    return LPlatency;
                case 20:
                    return DBufAllocatedOnPlane;
                case 21:
                    return BytesPerLine;
                case 22:
                    return Method1;
                case 23:
                    return Method2;
                case 24:
                    return YTileMinin;
                case 25:
                    return SelectedResultBlocksin;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CalculateWaterMark> m_target;
        #endregion
    }
    public sealed class t_CommitInfo : TraceEvent
    {
        public DisplayConfig DspConfig { get { return (DisplayConfig)GetInt32At(0); } }
        public int NActivePaths { get { return GetInt32At(4); } }

        #region Private
        internal t_CommitInfo(Action<t_CommitInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CommitInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DspConfig", DspConfig);
             XmlAttrib(sb, "NActivePaths", NActivePaths);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DspConfig", "NActivePaths"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DspConfig;
                case 1:
                    return NActivePaths;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CommitInfo> m_target;
        #endregion
    }
    public sealed class t_CriticalDDIFail : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public string Message { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal t_CriticalDDIFail(Action<t_CriticalDDIFail> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CriticalDDIFail>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CriticalDDIFail> m_target;
        #endregion
    }
    public sealed class t_CommitEntry : TraceEvent
    {
        public int AffectedSrcId { get { return GetInt32At(0); } }
        public int MonitorConnectivityChecks { get { return GetInt32At(4); } }

        #region Private
        internal t_CommitEntry(Action<t_CommitEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CommitEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AffectedSrcId", AffectedSrcId);
             XmlAttrib(sb, "MonitorConnectivityChecks", MonitorConnectivityChecks);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AffectedSrcId", "MonitorConnectivityChecks"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AffectedSrcId;
                case 1:
                    return MonitorConnectivityChecks;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CommitEntry> m_target;
        #endregion
    }
    public sealed class t_ConfigurePowerWell : TraceEvent
    {
        public int PowerWellCtrl { get { return GetInt32At(0); } }
        public bool Return { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_ConfigurePowerWell(Action<t_ConfigurePowerWell> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ConfigurePowerWell>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PowerWellCtrl", PowerWellCtrl);
             XmlAttrib(sb, "Return", Return);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PowerWellCtrl", "Return"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PowerWellCtrl;
                case 1:
                    return Return;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ConfigurePowerWell> m_target;
        #endregion
    }
    public sealed class t_CriticalFailLog : TraceEvent
    {
        public string Function { get { return GetUTF8StringAt(0); } }
        public int Status { get { return GetInt32At(SkipUTF8String(0)); } }
        public string Message { get { return GetUnicodeStringAt(SkipUTF8String(0)+4); } }

        #region Private
        internal t_CriticalFailLog(Action<t_CriticalFailLog> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUTF8String(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUTF8String(0)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CriticalFailLog>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CriticalFailLog> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_AddCustomMode_Entry : TraceEvent
    {
        public CUSTOM_MODE_TYPE eCustomModeType { get { return (CUSTOM_MODE_TYPE)GetInt32At(0); } }
        public int ulDisplayID { get { return GetInt32At(4); } }
        public int ucFlags { get { return GetByteAt(8); } }
        public int bForcedAddition { get { return GetInt32At(9); } }
        public CUSTOMMODE_ERRORCODES eReturnValue { get { return (CUSTOMMODE_ERRORCODES)GetInt32At(13); } }

        #region Private
        internal t_CSLBASE_AddCustomMode_Entry(Action<t_CSLBASE_AddCustomMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_AddCustomMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eCustomModeType", eCustomModeType);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "ucFlags", ucFlags);
             XmlAttrib(sb, "bForcedAddition", bForcedAddition);
             XmlAttrib(sb, "eReturnValue", eReturnValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eCustomModeType", "ulDisplayID", "ucFlags", "bForcedAddition", "eReturnValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eCustomModeType;
                case 1:
                    return ulDisplayID;
                case 2:
                    return ucFlags;
                case 3:
                    return bForcedAddition;
                case 4:
                    return eReturnValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_AddCustomMode_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_AtomicI2CAccess_Entry : TraceEvent
    {
        public int flFlagsCommand { get { return GetInt32At(0); } }
        public int ulSize { get { return GetInt32At(4); } }
        public int ulIndex { get { return GetInt32At(8); } }
        public int ulAddress { get { return GetInt32At(12); } }
        public int ulDisplayUID { get { return GetInt32At(16); } }
        public int ulReadBytes { get { return GetInt32At(20); } }
        public int ulWriteBytes { get { return GetInt32At(24); } }
        public int Data { get { return GetByteAt(28); } }
        public int bDDC { get { return GetInt32At(44); } }
        public int bI2C { get { return GetInt32At(48); } }
        public int bBlc { get { return GetInt32At(52); } }
        public int bD_Connector { get { return GetInt32At(56); } }

        #region Private
        internal t_CSLBASE_AtomicI2CAccess_Entry(Action<t_CSLBASE_AtomicI2CAccess_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 60));
            Debug.Assert(!(Version > 0 && EventDataLength < 60));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_AtomicI2CAccess_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "flFlagsCommand", flFlagsCommand);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "ulIndex", ulIndex);
             XmlAttrib(sb, "ulAddress", ulAddress);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulReadBytes", ulReadBytes);
             XmlAttrib(sb, "ulWriteBytes", ulWriteBytes);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "bDDC", bDDC);
             XmlAttrib(sb, "bI2C", bI2C);
             XmlAttrib(sb, "bBlc", bBlc);
             XmlAttrib(sb, "bD_Connector", bD_Connector);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "flFlagsCommand", "ulSize", "ulIndex", "ulAddress", "ulDisplayUID", "ulReadBytes", "ulWriteBytes", "Data", "bDDC", "bI2C", "bBlc", "bD_Connector"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return flFlagsCommand;
                case 1:
                    return ulSize;
                case 2:
                    return ulIndex;
                case 3:
                    return ulAddress;
                case 4:
                    return ulDisplayUID;
                case 5:
                    return ulReadBytes;
                case 6:
                    return ulWriteBytes;
                case 7:
                    return Data;
                case 8:
                    return bDDC;
                case 9:
                    return bI2C;
                case 10:
                    return bBlc;
                case 11:
                    return bD_Connector;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_AtomicI2CAccess_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_AtomicI2CAccess_Exit : TraceEvent
    {
        public int ulAddress { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_AtomicI2CAccess_Exit(Action<t_CSLBASE_AtomicI2CAccess_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_AtomicI2CAccess_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulAddress", ulAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_AtomicI2CAccess_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_AuxAccess_Entry : TraceEvent
    {
        public PORT_TYPES portType { get { return (PORT_TYPES)GetInt32At(0); } }
        public int ulDeviceUID { get { return GetInt32At(4); } }
        public int Command { get { return GetInt32At(8); } }
        public bool bUsePortType { get { return GetInt32At(12) != 0; } }
        public int ulAddress { get { return GetInt32At(16); } }
        public int ulSize { get { return GetInt32At(20); } }
        public int Data { get { return GetByteAt(24); } }

        #region Private
        internal t_CSLBASE_AuxAccess_Entry(Action<t_CSLBASE_AuxAccess_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 156));
            Debug.Assert(!(Version > 0 && EventDataLength < 156));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_AuxAccess_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "portType", portType);
             XmlAttrib(sb, "ulDeviceUID", ulDeviceUID);
             XmlAttrib(sb, "Command", Command);
             XmlAttrib(sb, "bUsePortType", bUsePortType);
             XmlAttrib(sb, "ulAddress", ulAddress);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "portType", "ulDeviceUID", "Command", "bUsePortType", "ulAddress", "ulSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return portType;
                case 1:
                    return ulDeviceUID;
                case 2:
                    return Command;
                case 3:
                    return bUsePortType;
                case 4:
                    return ulAddress;
                case 5:
                    return ulSize;
                case 6:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_AuxAccess_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_AuxAccess_Exit : TraceEvent
    {
        public SB_AUX_ERROR_TYPE eSBAuxErrorType { get { return (SB_AUX_ERROR_TYPE)GetInt32At(0); } }
        public int ulSize { get { return GetInt32At(4); } }
        public int Data { get { return GetByteAt(8); } }

        #region Private
        internal t_CSLBASE_AuxAccess_Exit(Action<t_CSLBASE_AuxAccess_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 140));
            Debug.Assert(!(Version > 0 && EventDataLength < 140));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_AuxAccess_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eSBAuxErrorType", eSBAuxErrorType);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eSBAuxErrorType", "ulSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eSBAuxErrorType;
                case 1:
                    return ulSize;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_AuxAccess_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_BIOSBrightnessNotification_Entry : TraceEvent
    {
        public bool bArg { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_BIOSBrightnessNotification_Entry(Action<t_CSLBASE_BIOSBrightnessNotification_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_BIOSBrightnessNotification_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bArg", bArg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bArg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bArg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_BIOSBrightnessNotification_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_BIOSBrightnessNotification_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_BIOSBrightnessNotification_Exit(Action<t_CSLBASE_BIOSBrightnessNotification_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_BIOSBrightnessNotification_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_BIOSBrightnessNotification_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_BlankVideo_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }
        public int ulVideoOn { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_BlankVideo_Entry(Action<t_CSLBASE_BlankVideo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_BlankVideo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "ulVideoOn", ulVideoOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex", "ulVideoOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                case 1:
                    return ulVideoOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_BlankVideo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_BlankVideo_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_BlankVideo_Exit(Action<t_CSLBASE_BlankVideo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_BlankVideo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_BlankVideo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CalculateWaterMark_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_CalculateWaterMark_Exit(Action<t_CSLBASE_CalculateWaterMark_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CalculateWaterMark_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CalculateWaterMark_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ChangeCDClock_Entry : TraceEvent
    {
        public Address pArg { get { return GetAddressAt(0); } }

        #region Private
        internal t_CSLBASE_ChangeCDClock_Entry(Action<t_CSLBASE_ChangeCDClock_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ChangeCDClock_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "pArg", pArg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "pArg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return pArg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ChangeCDClock_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ChangeCDClock_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ChangeCDClock_Exit(Action<t_CSLBASE_ChangeCDClock_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ChangeCDClock_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ChangeCDClock_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CheckCRCInterruptCount_Entry : TraceEvent
    {
        public PIPE_ID ePipeType { get { return (PIPE_ID)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_CheckCRCInterruptCount_Entry(Action<t_CSLBASE_CheckCRCInterruptCount_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CheckCRCInterruptCount_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ePipeType", ePipeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ePipeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ePipeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CheckCRCInterruptCount_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CheckMPOSupport_Entry : TraceEvent
    {
        public int ulNumPaths { get { return GetInt32At(0); } }
        public int ulConfig { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_CheckMPOSupport_Entry(Action<t_CSLBASE_CheckMPOSupport_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CheckMPOSupport_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumPaths", ulNumPaths);
             XmlAttrib(sb, "ulConfig", ulConfig);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumPaths", "ulConfig"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumPaths;
                case 1:
                    return ulConfig;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CheckMPOSupport_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CheckMPOSupportExit : TraceEvent
    {
        public bool bSupported { get { return GetInt32At(0) != 0; } }
        public int ulFailureReason { get { return GetInt32At(4); } }
        public int uiFailingPlane { get { return GetInt32At(8); } }
        public int TryAgain { get { return GetInt32At(12); } }
        public int uiValue { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_CheckMPOSupportExit(Action<t_CSLBASE_CheckMPOSupportExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CheckMPOSupportExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bSupported", bSupported);
             XmlAttrib(sb, "ulFailureReason", ulFailureReason);
             XmlAttrib(sb, "uiFailingPlane", uiFailingPlane);
             XmlAttrib(sb, "TryAgain", TryAgain);
             XmlAttrib(sb, "uiValue", uiValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bSupported", "ulFailureReason", "uiFailingPlane", "TryAgain", "uiValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bSupported;
                case 1:
                    return ulFailureReason;
                case 2:
                    return uiFailingPlane;
                case 3:
                    return TryAgain;
                case 4:
                    return uiValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CheckMPOSupportExit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ComplianceAuxWA_Entry : TraceEvent
    {
        public int ulNumSPIDetected { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ComplianceAuxWA_Entry(Action<t_CSLBASE_ComplianceAuxWA_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ComplianceAuxWA_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumSPIDetected", ulNumSPIDetected);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumSPIDetected"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumSPIDetected;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ComplianceAuxWA_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ComplianceAuxWA_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ComplianceAuxWA_Exit(Action<t_CSLBASE_ComplianceAuxWA_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ComplianceAuxWA_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ComplianceAuxWA_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CursorService_Entry : TraceEvent
    {
        public CURSOR_ID eCursorID { get { return (CURSOR_ID)GetInt32At(0); } }
        public CURSOR_OPERATIONS eCursorOp { get { return (CURSOR_OPERATIONS)GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_CursorService_Entry(Action<t_CSLBASE_CursorService_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CursorService_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eCursorID", eCursorID);
             XmlAttrib(sb, "eCursorOp", eCursorOp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eCursorID", "eCursorOp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eCursorID;
                case 1:
                    return eCursorOp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CursorService_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_CursorService_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_CursorService_Exit(Action<t_CSLBASE_CursorService_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_CursorService_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_CursorService_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_DeviceConfigValid_Entry : TraceEvent
    {
        public bool bValidateRunTimeDispConfig { get { return GetInt32At(0) != 0; } }
        public bool bNonFunctionalISVCall { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_DeviceConfigValid_Entry(Action<t_CSLBASE_DeviceConfigValid_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_DeviceConfigValid_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bValidateRunTimeDispConfig", bValidateRunTimeDispConfig);
             XmlAttrib(sb, "bNonFunctionalISVCall", bNonFunctionalISVCall);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bValidateRunTimeDispConfig", "bNonFunctionalISVCall"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bValidateRunTimeDispConfig;
                case 1:
                    return bNonFunctionalISVCall;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_DeviceConfigValid_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EnableBacklightWorkItem_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_EnableBacklightWorkItem_Exit(Action<t_CSLBASE_EnableBacklightWorkItem_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EnableBacklightWorkItem_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EnableBacklightWorkItem_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EnableDisableAudioDevice_Entry : TraceEvent
    {
        public bool bEnableAudioDevice { get { return GetInt32At(0) != 0; } }
        public bool bWaitforAudioUp { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_EnableDisableAudioDevice_Entry(Action<t_CSLBASE_EnableDisableAudioDevice_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EnableDisableAudioDevice_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bEnableAudioDevice", bEnableAudioDevice);
             XmlAttrib(sb, "bWaitforAudioUp", bWaitforAudioUp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bEnableAudioDevice", "bWaitforAudioUp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bEnableAudioDevice;
                case 1:
                    return bWaitforAudioUp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EnableDisableAudioDevice_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EnableDisableAudioDevice_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_EnableDisableAudioDevice_Exit(Action<t_CSLBASE_EnableDisableAudioDevice_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EnableDisableAudioDevice_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EnableDisableAudioDevice_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EnableScaler_Entry : TraceEvent
    {
        public int ulSrcX { get { return GetInt32At(0); } }
        public int ulSrcY { get { return GetInt32At(4); } }
        public int ulDestX { get { return GetInt32At(8); } }
        public int ulDestY { get { return GetInt32At(12); } }
        public int ulPipe { get { return GetInt32At(16); } }
        public int ulDisplayUID { get { return GetInt32At(20); } }
        public SB_SCALER_MODESET_FLAGS eFlags { get { return (SB_SCALER_MODESET_FLAGS)GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_EnableScaler_Entry(Action<t_CSLBASE_EnableScaler_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EnableScaler_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSrcX", ulSrcX);
             XmlAttrib(sb, "ulSrcY", ulSrcY);
             XmlAttrib(sb, "ulDestX", ulDestX);
             XmlAttrib(sb, "ulDestY", ulDestY);
             XmlAttrib(sb, "ulPipe", ulPipe);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "eFlags", eFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSrcX", "ulSrcY", "ulDestX", "ulDestY", "ulPipe", "ulDisplayUID", "eFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSrcX;
                case 1:
                    return ulSrcY;
                case 2:
                    return ulDestX;
                case 3:
                    return ulDestY;
                case 4:
                    return ulPipe;
                case 5:
                    return ulDisplayUID;
                case 6:
                    return eFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EnableScaler_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EnableScaler_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_EnableScaler_Exit(Action<t_CSLBASE_EnableScaler_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EnableScaler_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EnableScaler_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_NotifyEventEntry : TraceEvent
    {
        public int ulEventType { get { return GetInt32At(0); } }
        public int DisplayUID { get { return GetInt32At(4); } }
        public int DxvaInstanceNum { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_NotifyEventEntry(Action<t_CSLBASE_NotifyEventEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_NotifyEventEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulEventType", ulEventType);
             XmlAttrib(sb, "DisplayUID", DisplayUID);
             XmlAttrib(sb, "DxvaInstanceNum", DxvaInstanceNum);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulEventType", "DisplayUID", "DxvaInstanceNum"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulEventType;
                case 1:
                    return DisplayUID;
                case 2:
                    return DxvaInstanceNum;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_NotifyEventEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_EventNotificationEntry : TraceEvent
    {
        public SB_EVENT_NOTIFICATION_TYPE eEventType { get { return (SB_EVENT_NOTIFICATION_TYPE)GetInt32At(0); } }
        public int ulPipe { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_EventNotificationEntry(Action<t_CSLBASE_EventNotificationEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_EventNotificationEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eEventType", eEventType);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eEventType", "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eEventType;
                case 1:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_EventNotificationEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GammaHandler_Entry : TraceEvent
    {
        public int ucPipeIndex { get { return GetByteAt(0); } }
        public int ucPlaneIndex { get { return GetByteAt(1); } }

        #region Private
        internal t_CSLBASE_GammaHandler_Entry(Action<t_CSLBASE_GammaHandler_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GammaHandler_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucPipeIndex", ucPipeIndex);
             XmlAttrib(sb, "ucPlaneIndex", ucPlaneIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucPipeIndex", "ucPlaneIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucPipeIndex;
                case 1:
                    return ucPlaneIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GammaHandler_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GammaHandler_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GammaHandler_Exit(Action<t_CSLBASE_GammaHandler_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GammaHandler_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GammaHandler_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GenerateTimings_Entry : TraceEvent
    {
        public int ulXRes { get { return GetInt32At(0); } }
        public int ulYRes { get { return GetInt32At(4); } }
        public int ulRRate { get { return GetInt32At(8); } }
        public bool bMargin_Req { get { return GetInt32At(12) != 0; } }
        public bool bInterLaced { get { return GetInt32At(16) != 0; } }
        public bool bRed_Blank_Req { get { return GetInt32At(20) != 0; } }
        public int eTimingType { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_GenerateTimings_Entry(Action<t_CSLBASE_GenerateTimings_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GenerateTimings_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulXRes", ulXRes);
             XmlAttrib(sb, "ulYRes", ulYRes);
             XmlAttrib(sb, "ulRRate", ulRRate);
             XmlAttrib(sb, "bMargin_Req", bMargin_Req);
             XmlAttrib(sb, "bInterLaced", bInterLaced);
             XmlAttrib(sb, "bRed_Blank_Req", bRed_Blank_Req);
             XmlAttrib(sb, "eTimingType", eTimingType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulXRes", "ulYRes", "ulRRate", "bMargin_Req", "bInterLaced", "bRed_Blank_Req", "eTimingType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulXRes;
                case 1:
                    return ulYRes;
                case 2:
                    return ulRRate;
                case 3:
                    return bMargin_Req;
                case 4:
                    return bInterLaced;
                case 5:
                    return bRed_Blank_Req;
                case 6:
                    return eTimingType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GenerateTimings_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GenerateTimings_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GenerateTimings_Exit(Action<t_CSLBASE_GenerateTimings_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GenerateTimings_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GenerateTimings_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetActiveDisplayInfo_Entry : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ulActiveDisplayCount { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetActiveDisplayInfo_Entry(Action<t_CSLBASE_GetActiveDisplayInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetActiveDisplayInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ulActiveDisplayCount", ulActiveDisplayCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ulActiveDisplayCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ulActiveDisplayCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetActiveDisplayInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetAudioData_Entry : TraceEvent
    {
        public int ulOperationType { get { return GetInt32At(0); } }
        public PIPE_ID ePipeType { get { return (PIPE_ID)GetInt32At(4); } }
        public int ulGetConfigBuffSize { get { return GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_GetAudioData_Entry(Action<t_CSLBASE_GetAudioData_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetAudioData_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulOperationType", ulOperationType);
             XmlAttrib(sb, "ePipeType", ePipeType);
             XmlAttrib(sb, "ulGetConfigBuffSize", ulGetConfigBuffSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulOperationType", "ePipeType", "ulGetConfigBuffSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulOperationType;
                case 1:
                    return ePipeType;
                case 2:
                    return ulGetConfigBuffSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetAudioData_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetAudioData_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public Address pGetConfigBuff { get { return GetAddressAt(4); } }

        #region Private
        internal t_CSLBASE_GetAudioData_Exit(Action<t_CSLBASE_GetAudioData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetAudioData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttribHex(sb, "pGetConfigBuff", pGetConfigBuff);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "pGetConfigBuff"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return pGetConfigBuff;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetAudioData_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetAudioProtocolType_Entry : TraceEvent
    {
        public int eAudioProtocolType { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetAudioProtocolType_Entry(Action<t_CSLBASE_GetAudioProtocolType_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetAudioProtocolType_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eAudioProtocolType", eAudioProtocolType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eAudioProtocolType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eAudioProtocolType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetAudioProtocolType_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCompensation_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetCompensation_Entry(Action<t_CSLBASE_GetCompensation_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCompensation_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCompensation_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCompensation_Exit : TraceEvent
    {
        public int ulCompensationCaps { get { return GetInt32At(0); } }
        public int ulCurrentCompensation { get { return GetInt32At(4); } }
        public int ulPreferredCompensation { get { return GetInt32At(8); } }
        public int ulMediaCompensationCaps { get { return GetInt32At(12); } }
        public int ulCurrentMediaCompensation { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_GetCompensation_Exit(Action<t_CSLBASE_GetCompensation_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCompensation_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulCompensationCaps", ulCompensationCaps);
             XmlAttrib(sb, "ulCurrentCompensation", ulCurrentCompensation);
             XmlAttrib(sb, "ulPreferredCompensation", ulPreferredCompensation);
             XmlAttrib(sb, "ulMediaCompensationCaps", ulMediaCompensationCaps);
             XmlAttrib(sb, "ulCurrentMediaCompensation", ulCurrentMediaCompensation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulCompensationCaps", "ulCurrentCompensation", "ulPreferredCompensation", "ulMediaCompensationCaps", "ulCurrentMediaCompensation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulCompensationCaps;
                case 1:
                    return ulCurrentCompensation;
                case 2:
                    return ulPreferredCompensation;
                case 3:
                    return ulMediaCompensationCaps;
                case 4:
                    return ulCurrentMediaCompensation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCompensation_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCompleteDP12Topology_Exit : TraceEvent
    {
        public int ulNumValidDPPorts { get { return GetInt32At(0); } }
        public int ulRet { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetCompleteDP12Topology_Exit(Action<t_CSLBASE_GetCompleteDP12Topology_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCompleteDP12Topology_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumValidDPPorts", ulNumValidDPPorts);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumValidDPPorts", "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumValidDPPorts;
                case 1:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCompleteDP12Topology_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetConnectorModeInfo_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetConnectorModeInfo_Entry(Action<t_CSLBASE_GetConnectorModeInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetConnectorModeInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetConnectorModeInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetConnectorModeInfo_Exit : TraceEvent
    {
        public int ulXResolution { get { return GetInt32At(0); } }
        public int ulYResolution { get { return GetInt32At(4); } }
        public int ulColorBPP { get { return GetInt32At(8); } }
        public int ulFreqNumerator { get { return GetInt32At(12); } }
        public int ulFreqDenominator { get { return GetInt32At(16); } }
        public bool bInterlaced { get { return GetInt32At(20) != 0; } }

        #region Private
        internal t_CSLBASE_GetConnectorModeInfo_Exit(Action<t_CSLBASE_GetConnectorModeInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetConnectorModeInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulXResolution", ulXResolution);
             XmlAttrib(sb, "ulYResolution", ulYResolution);
             XmlAttrib(sb, "ulColorBPP", ulColorBPP);
             XmlAttrib(sb, "ulFreqNumerator", ulFreqNumerator);
             XmlAttrib(sb, "ulFreqDenominator", ulFreqDenominator);
             XmlAttrib(sb, "bInterlaced", bInterlaced);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulXResolution", "ulYResolution", "ulColorBPP", "ulFreqNumerator", "ulFreqDenominator", "bInterlaced"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulXResolution;
                case 1:
                    return ulYResolution;
                case 2:
                    return ulColorBPP;
                case 3:
                    return ulFreqNumerator;
                case 4:
                    return ulFreqDenominator;
                case 5:
                    return bInterlaced;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetConnectorModeInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetControllerInfo_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int usChipDeviceID { get { return GetInt16At(4); } }
        public int usChipVendorID { get { return GetInt16At(6); } }
        public int usSubsystemDeviceID { get { return GetInt16At(8); } }
        public int usSubsystemVendorID { get { return GetInt16At(10); } }
        public int ulChipRevisionID { get { return GetByteAt(12); } }

        #region Private
        internal t_CSLBASE_GetControllerInfo_Exit(Action<t_CSLBASE_GetControllerInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetControllerInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "usChipDeviceID", usChipDeviceID);
             XmlAttrib(sb, "usChipVendorID", usChipVendorID);
             XmlAttrib(sb, "usSubsystemDeviceID", usSubsystemDeviceID);
             XmlAttrib(sb, "usSubsystemVendorID", usSubsystemVendorID);
             XmlAttrib(sb, "ulChipRevisionID", ulChipRevisionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "usChipDeviceID", "usChipVendorID", "usSubsystemDeviceID", "usSubsystemVendorID", "ulChipRevisionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return usChipDeviceID;
                case 2:
                    return usChipVendorID;
                case 3:
                    return usSubsystemDeviceID;
                case 4:
                    return usSubsystemVendorID;
                case 5:
                    return ulChipRevisionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetControllerInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCSCUsage_Entry : TraceEvent
    {
        public int ulPipe { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetCSCUsage_Entry(Action<t_CSLBASE_GetCSCUsage_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCSCUsage_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCSCUsage_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCSCUsage_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bUsedForSprite { get { return GetInt32At(4) != 0; } }
        public bool bUsedForDisplay { get { return GetInt32At(8) != 0; } }
        public bool bUsedForCursor { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_GetCSCUsage_Exit(Action<t_CSLBASE_GetCSCUsage_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCSCUsage_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bUsedForSprite", bUsedForSprite);
             XmlAttrib(sb, "bUsedForDisplay", bUsedForDisplay);
             XmlAttrib(sb, "bUsedForCursor", bUsedForCursor);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bUsedForSprite", "bUsedForDisplay", "bUsedForCursor"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bUsedForSprite;
                case 2:
                    return bUsedForDisplay;
                case 3:
                    return bUsedForCursor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCSCUsage_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCurrentPalette_Entry : TraceEvent
    {
        public int ucPipeIndex { get { return GetByteAt(0); } }
        public int ucPlaneIndex { get { return GetByteAt(1); } }

        #region Private
        internal t_CSLBASE_GetCurrentPalette_Entry(Action<t_CSLBASE_GetCurrentPalette_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCurrentPalette_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucPipeIndex", ucPipeIndex);
             XmlAttrib(sb, "ucPlaneIndex", ucPlaneIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucPipeIndex", "ucPlaneIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucPipeIndex;
                case 1:
                    return ucPlaneIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCurrentPalette_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCurrentPalette_Exit : TraceEvent
    {
        public int ulRetVal { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetCurrentPalette_Exit(Action<t_CSLBASE_GetCurrentPalette_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCurrentPalette_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRetVal", ulRetVal);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRetVal"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRetVal;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCurrentPalette_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCustomModeInfo_Entry : TraceEvent
    {
        public int ulDisplayID { get { return GetInt32At(0); } }
        public int ulNumberOfCustomModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetCustomModeInfo_Entry(Action<t_CSLBASE_GetCustomModeInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCustomModeInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "ulNumberOfCustomModes", ulNumberOfCustomModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID", "ulNumberOfCustomModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                case 1:
                    return ulNumberOfCustomModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCustomModeInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetCustomModeInfo_Exit : TraceEvent
    {
        public CUSTOMMODE_ERRORCODES eReturnValue { get { return (CUSTOMMODE_ERRORCODES)GetInt32At(0); } }
        public int eCustomModeType { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetCustomModeInfo_Exit(Action<t_CSLBASE_GetCustomModeInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetCustomModeInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eReturnValue", eReturnValue);
             XmlAttrib(sb, "eCustomModeType", eCustomModeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eReturnValue", "eCustomModeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eReturnValue;
                case 1:
                    return eCustomModeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetCustomModeInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDDCEdid_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bForceRead { get { return GetInt32At(4) != 0; } }
        public int ulEdidSize { get { return GetInt32At(8); } }
        public int ulAddress { get { return GetInt32At(12); } }
        public int ulEdidBlockNum { get { return GetInt32At(16); } }
        public int EdidData { get { return GetByteAt(20); } }

        #region Private
        internal t_CSLBASE_GetDDCEdid_Entry(Action<t_CSLBASE_GetDDCEdid_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 148));
            Debug.Assert(!(Version > 0 && EventDataLength < 148));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDDCEdid_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bForceRead", bForceRead);
             XmlAttrib(sb, "ulEdidSize", ulEdidSize);
             XmlAttrib(sb, "ulAddress", ulAddress);
             XmlAttrib(sb, "ulEdidBlockNum", ulEdidBlockNum);
             XmlAttrib(sb, "EdidData", EdidData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bForceRead", "ulEdidSize", "ulAddress", "ulEdidBlockNum", "EdidData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bForceRead;
                case 2:
                    return ulEdidSize;
                case 3:
                    return ulAddress;
                case 4:
                    return ulEdidBlockNum;
                case 5:
                    return EdidData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDDCEdid_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDDCEdid_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bFakeEdid { get { return GetInt32At(4) != 0; } }
        public int EdidData { get { return GetByteAt(8); } }

        #region Private
        internal t_CSLBASE_GetDDCEdid_Exit(Action<t_CSLBASE_GetDDCEdid_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 136));
            Debug.Assert(!(Version > 0 && EventDataLength < 136));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDDCEdid_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bFakeEdid", bFakeEdid);
             XmlAttrib(sb, "EdidData", EdidData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bFakeEdid", "EdidData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bFakeEdid;
                case 2:
                    return EdidData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDDCEdid_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDetailedInfoForDP12Sink_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public SB_LEAFTYPE eLeafType { get { return (SB_LEAFTYPE)GetInt32At(4); } }
        public PORT_TYPES eQueriedPortType { get { return (PORT_TYPES)GetInt32At(8); } }
        public int ucMonitorName { get { return GetByteAt(12); } }
        public bool bMonitorNameExists { get { return GetInt32At(25) != 0; } }

        #region Private
        internal t_CSLBASE_GetDetailedInfoForDP12Sink_Exit(Action<t_CSLBASE_GetDetailedInfoForDP12Sink_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 29));
            Debug.Assert(!(Version > 0 && EventDataLength < 29));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDetailedInfoForDP12Sink_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "eLeafType", eLeafType);
             XmlAttrib(sb, "eQueriedPortType", eQueriedPortType);
             XmlAttrib(sb, "ucMonitorName", ucMonitorName);
             XmlAttrib(sb, "bMonitorNameExists", bMonitorNameExists);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "eLeafType", "eQueriedPortType", "ucMonitorName", "bMonitorNameExists"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return eLeafType;
                case 2:
                    return eQueriedPortType;
                case 3:
                    return ucMonitorName;
                case 4:
                    return bMonitorNameExists;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDetailedInfoForDP12Sink_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDevicePMCaps_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDevicePMCaps_Entry(Action<t_CSLBASE_GetDevicePMCaps_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDevicePMCaps_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDevicePMCaps_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDevicePMCaps_Exit : TraceEvent
    {
        public CHILDDEVICE_POWER_STATE PM_Caps { get { return (CHILDDEVICE_POWER_STATE)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDevicePMCaps_Exit(Action<t_CSLBASE_GetDevicePMCaps_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDevicePMCaps_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PM_Caps", PM_Caps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PM_Caps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PM_Caps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDevicePMCaps_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayDetect_Entry : TraceEvent
    {
        public int ulSize { get { return GetInt32At(0); } }
        public int ulNumDisplays { get { return GetInt32At(4); } }
        public bool bFakeCRT { get { return GetInt32At(8) != 0; } }
        public bool bEnumOnlyTPVDisplays { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayDetect_Entry(Action<t_CSLBASE_GetDisplayDetect_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayDetect_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "ulNumDisplays", ulNumDisplays);
             XmlAttrib(sb, "bFakeCRT", bFakeCRT);
             XmlAttrib(sb, "bEnumOnlyTPVDisplays", bEnumOnlyTPVDisplays);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSize", "ulNumDisplays", "bFakeCRT", "bEnumOnlyTPVDisplays"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSize;
                case 1:
                    return ulNumDisplays;
                case 2:
                    return bFakeCRT;
                case 3:
                    return bEnumOnlyTPVDisplays;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayDetect_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayDetect_Exit : TraceEvent
    {
        public int ulNumDisplays { get { return GetInt32At(0); } }
        public bool bFakeCRT { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayDetect_Exit(Action<t_CSLBASE_GetDisplayDetect_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayDetect_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumDisplays", ulNumDisplays);
             XmlAttrib(sb, "bFakeCRT", bFakeCRT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumDisplays", "bFakeCRT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumDisplays;
                case 1:
                    return bFakeCRT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayDetect_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayDevice_Entry : TraceEvent
    {
        public int ulSize { get { return GetInt32At(0); } }
        public bool bGMCHConfigOnly { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayDevice_Entry(Action<t_CSLBASE_GetDisplayDevice_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayDevice_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "bGMCHConfigOnly", bGMCHConfigOnly);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSize", "bGMCHConfigOnly"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSize;
                case 1:
                    return bGMCHConfigOnly;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayDevice_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayDevice_Exit : TraceEvent
    {
        public int ulSize { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDisplayDevice_Exit(Action<t_CSLBASE_GetDisplayDevice_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayDevice_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSize", ulSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayDevice_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayInfo_Entry : TraceEvent
    {
        public int ulSize { get { return GetInt32At(0); } }
        public int ulDisplayUID { get { return GetInt32At(4); } }
        public bool bModeCaps { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayInfo_Entry(Action<t_CSLBASE_GetDisplayInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bModeCaps", bModeCaps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSize", "ulDisplayUID", "bModeCaps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSize;
                case 1:
                    return ulDisplayUID;
                case 2:
                    return bModeCaps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayInfo_Exit : TraceEvent
    {
        public bool bTPVDrivenEncoder { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayInfo_Exit(Action<t_CSLBASE_GetDisplayInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bTPVDrivenEncoder", bTPVDrivenEncoder);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bTPVDrivenEncoder"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bTPVDrivenEncoder;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayPortDetails_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDisplayPortDetails_Entry(Action<t_CSLBASE_GetDisplayPortDetails_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayPortDetails_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayPortDetails_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayPortDetails_Exit : TraceEvent
    {
        public int ucNumberOfLanesUsed { get { return GetByteAt(0); } }
        public int ucLinkSymbolClock { get { return GetByteAt(1); } }
        public int ucBPC { get { return GetByteAt(2); } }

        #region Private
        internal t_CSLBASE_GetDisplayPortDetails_Exit(Action<t_CSLBASE_GetDisplayPortDetails_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 3));
            Debug.Assert(!(Version > 0 && EventDataLength < 3));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayPortDetails_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucNumberOfLanesUsed", ucNumberOfLanesUsed);
             XmlAttrib(sb, "ucLinkSymbolClock", ucLinkSymbolClock);
             XmlAttrib(sb, "ucBPC", ucBPC);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucNumberOfLanesUsed", "ucLinkSymbolClock", "ucBPC"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucNumberOfLanesUsed;
                case 1:
                    return ucLinkSymbolClock;
                case 2:
                    return ucBPC;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayPortDetails_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayStart_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }
        public int ucPlaneIndex { get { return GetByteAt(4); } }
        public int ulDisplayStart { get { return GetInt32At(5); } }
        public bool bGetDoubleBufferedAddress { get { return GetInt32At(9) != 0; } }

        #region Private
        internal t_CSLBASE_GetDisplayStart_Entry(Action<t_CSLBASE_GetDisplayStart_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayStart_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "ucPlaneIndex", ucPlaneIndex);
             XmlAttrib(sb, "ulDisplayStart", ulDisplayStart);
             XmlAttrib(sb, "bGetDoubleBufferedAddress", bGetDoubleBufferedAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex", "ucPlaneIndex", "ulDisplayStart", "bGetDoubleBufferedAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                case 1:
                    return ucPlaneIndex;
                case 2:
                    return ulDisplayStart;
                case 3:
                    return bGetDoubleBufferedAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayStart_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayStartMPO_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDisplayStartMPO_Entry(Action<t_CSLBASE_GetDisplayStartMPO_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayStartMPO_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayStartMPO_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayStartMPO_Exit : TraceEvent
    {
        public int ulDisplayStart { get { return GetInt32At(0); } }
        public bool bGetDoubleBufferedAddress { get { return GetInt32At(4) != 0; } }
        public int uiLayerIndex { get { return GetInt32At(8); } }
        public int uiEnabledPlaneCount { get { return GetInt32At(12); } }
        public bool bIsYUY2Enabled { get { return GetInt32At(16) != 0; } }
        public bool bIsScalingRequired { get { return GetInt32At(20) != 0; } }
        public int ulReturn { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_GetDisplayStartMPO_Exit(Action<t_CSLBASE_GetDisplayStartMPO_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayStartMPO_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayStart", ulDisplayStart);
             XmlAttrib(sb, "bGetDoubleBufferedAddress", bGetDoubleBufferedAddress);
             XmlAttrib(sb, "uiLayerIndex", uiLayerIndex);
             XmlAttrib(sb, "uiEnabledPlaneCount", uiEnabledPlaneCount);
             XmlAttrib(sb, "bIsYUY2Enabled", bIsYUY2Enabled);
             XmlAttrib(sb, "bIsScalingRequired", bIsScalingRequired);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayStart", "bGetDoubleBufferedAddress", "uiLayerIndex", "uiEnabledPlaneCount", "bIsYUY2Enabled", "bIsScalingRequired", "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayStart;
                case 1:
                    return bGetDoubleBufferedAddress;
                case 2:
                    return uiLayerIndex;
                case 3:
                    return uiEnabledPlaneCount;
                case 4:
                    return bIsYUY2Enabled;
                case 5:
                    return bIsScalingRequired;
                case 6:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayStartMPO_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDisplayStart_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetDisplayStart_Exit(Action<t_CSLBASE_GetDisplayStart_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDisplayStart_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDisplayStart_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDockStatus_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }
        public bool bDockState { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetDockStatus_Exit(Action<t_CSLBASE_GetDockStatus_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDockStatus_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             XmlAttrib(sb, "bDockState", bDockState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn", "bDockState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                case 1:
                    return bDockState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDockStatus_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetDVMTSettings_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public DVMT_VERSION eDVMTVersion { get { return (DVMT_VERSION)GetInt32At(4); } }
        public int ulTotalGfxMemorySize { get { return GetInt32At(8); } }
        public int ulFixedGfxMemorySize { get { return GetInt32At(12); } }
        public int ulDVMTGfxMemorySize { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_GetDVMTSettings_Exit(Action<t_CSLBASE_GetDVMTSettings_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetDVMTSettings_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "eDVMTVersion", eDVMTVersion);
             XmlAttrib(sb, "ulTotalGfxMemorySize", ulTotalGfxMemorySize);
             XmlAttrib(sb, "ulFixedGfxMemorySize", ulFixedGfxMemorySize);
             XmlAttrib(sb, "ulDVMTGfxMemorySize", ulDVMTGfxMemorySize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "eDVMTVersion", "ulTotalGfxMemorySize", "ulFixedGfxMemorySize", "ulDVMTGfxMemorySize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return eDVMTVersion;
                case 2:
                    return ulTotalGfxMemorySize;
                case 3:
                    return ulFixedGfxMemorySize;
                case 4:
                    return ulDVMTGfxMemorySize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetDVMTSettings_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetEnabledInterrupts_Entry : TraceEvent
    {
        public INTERRUPT_OPERATION eOperation { get { return (INTERRUPT_OPERATION)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetEnabledInterrupts_Entry(Action<t_CSLBASE_GetEnabledInterrupts_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetEnabledInterrupts_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eOperation", eOperation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eOperation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eOperation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetEnabledInterrupts_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetEnabledInterrupts_Exit : TraceEvent
    {
        public int ulRetValue { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetEnabledInterrupts_Exit(Action<t_CSLBASE_GetEnabledInterrupts_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetEnabledInterrupts_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRetValue", ulRetValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRetValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRetValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetEnabledInterrupts_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetEventObjectIndex_Entry : TraceEvent
    {
        public int ulDisplayUid { get { return GetInt32At(0); } }
        public int ulEventType { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetEventObjectIndex_Entry(Action<t_CSLBASE_GetEventObjectIndex_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetEventObjectIndex_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUid", ulDisplayUid);
             XmlAttrib(sb, "ulEventType", ulEventType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUid", "ulEventType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUid;
                case 1:
                    return ulEventType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetEventObjectIndex_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetEventObjectIndex_Exit : TraceEvent
    {
        public int ulEventObjIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetEventObjectIndex_Exit(Action<t_CSLBASE_GetEventObjectIndex_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetEventObjectIndex_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulEventObjIndex", ulEventObjIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulEventObjIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulEventObjIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetEventObjectIndex_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetHwS3DState_Entry : TraceEvent
    {
        public PIPE_ID ulPipe { get { return (PIPE_ID)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetHwS3DState_Entry(Action<t_CSLBASE_GetHwS3DState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetHwS3DState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetHwS3DState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetHwS3DState_Exit : TraceEvent
    {
        public bool bUseS3DHardware { get { return GetInt32At(0) != 0; } }
        public bool bUseS3DHardwareAutoToggle { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetHwS3DState_Exit(Action<t_CSLBASE_GetHwS3DState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetHwS3DState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bUseS3DHardware", bUseS3DHardware);
             XmlAttrib(sb, "bUseS3DHardwareAutoToggle", bUseS3DHardwareAutoToggle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bUseS3DHardware", "bUseS3DHardwareAutoToggle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bUseS3DHardware;
                case 1:
                    return bUseS3DHardwareAutoToggle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetHwS3DState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetInterruptSource_Entry : TraceEvent
    {
        public INTERRUPT_OPERATION eOperation { get { return (INTERRUPT_OPERATION)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetInterruptSource_Entry(Action<t_CSLBASE_GetInterruptSource_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetInterruptSource_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eOperation", eOperation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eOperation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eOperation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetInterruptSource_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetInterruptSource_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetInterruptSource_Exit(Action<t_CSLBASE_GetInterruptSource_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetInterruptSource_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetInterruptSource_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetLidStatus_Entry : TraceEvent
    {
        public int ulPanelIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetLidStatus_Entry(Action<t_CSLBASE_GetLidStatus_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetLidStatus_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPanelIndex", ulPanelIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPanelIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPanelIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetLidStatus_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetLidStatus_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public LID_STATE eLidState { get { return (LID_STATE)GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetLidStatus_Exit(Action<t_CSLBASE_GetLidStatus_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetLidStatus_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "eLidState", eLidState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "eLidState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return eLidState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetLidStatus_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetMaxSupportedPlanes_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int MaxSupportesPlanes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetMaxSupportedPlanes_Exit(Action<t_CSLBASE_GetMaxSupportedPlanes_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetMaxSupportedPlanes_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "MaxSupportesPlanes", MaxSupportesPlanes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "MaxSupportesPlanes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return MaxSupportesPlanes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetMaxSupportedPlanes_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetModeSupport_Entry : TraceEvent
    {
        public int ulNumDisplays { get { return GetInt32At(0); } }
        public int ucValidateDevicesOnly { get { return GetByteAt(4); } }
        public int ucScaling { get { return GetByteAt(5); } }

        #region Private
        internal t_CSLBASE_GetModeSupport_Entry(Action<t_CSLBASE_GetModeSupport_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetModeSupport_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumDisplays", ulNumDisplays);
             XmlAttrib(sb, "ucValidateDevicesOnly", ucValidateDevicesOnly);
             XmlAttrib(sb, "ucScaling", ucScaling);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumDisplays", "ucValidateDevicesOnly", "ucScaling"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumDisplays;
                case 1:
                    return ucValidateDevicesOnly;
                case 2:
                    return ucScaling;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetModeSupport_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetModeSupport_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ucRequestedState { get { return GetByteAt(4); } }
        public bool bConfigChange { get { return GetInt32At(5) != 0; } }

        #region Private
        internal t_CSLBASE_GetModeSupport_Exit(Action<t_CSLBASE_GetModeSupport_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetModeSupport_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ucRequestedState", ucRequestedState);
             XmlAttrib(sb, "bConfigChange", bConfigChange);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ucRequestedState", "bConfigChange"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ucRequestedState;
                case 2:
                    return bConfigChange;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetModeSupport_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetMPOCaps_Entry : TraceEvent
    {
        public int ulNumDevices { get { return GetInt32At(0); } }
        public int ulDisplayUID { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetMPOCaps_Entry(Action<t_CSLBASE_GetMPOCaps_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetMPOCaps_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumDevices", ulNumDevices);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumDevices", "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumDevices;
                case 1:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetMPOCaps_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetMPOCaps_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public int uiMaxPlanes { get { return GetInt32At(4); } }
        public int uiNumCapabilityGroups { get { return GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_GetMPOCaps_Exit(Action<t_CSLBASE_GetMPOCaps_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetMPOCaps_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "uiMaxPlanes", uiMaxPlanes);
             XmlAttrib(sb, "uiNumCapabilityGroups", uiNumCapabilityGroups);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "uiMaxPlanes", "uiNumCapabilityGroups"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return uiMaxPlanes;
                case 2:
                    return uiNumCapabilityGroups;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetMPOCaps_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetMPOGroupCaps_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulNumDevices { get { return GetInt32At(12); } }
        public int ulGroupIndex { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_GetMPOGroupCaps_Entry(Action<t_CSLBASE_GetMPOGroupCaps_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetMPOGroupCaps_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulNumDevices", ulNumDevices);
             XmlAttrib(sb, "ulGroupIndex", ulGroupIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulNumDevices", "ulGroupIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulNumDevices;
                case 2:
                    return ulGroupIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetMPOGroupCaps_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetMPOGroupCaps_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public int uiMaxPlanes { get { return GetInt32At(4); } }
        public int uiMaxStretchFactorNum { get { return GetInt32At(8); } }
        public int uiMaxStretchFactorDenm { get { return GetInt32At(12); } }
        public int uiMaxShrinkFactorNum { get { return GetInt32At(16); } }
        public int uiMaxShrinkFactorDenm { get { return GetInt32At(20); } }
        public int uiOverlayFtrCaps { get { return GetInt32At(24); } }
        public int uiStereoCaps { get { return GetInt32At(28); } }

        #region Private
        internal t_CSLBASE_GetMPOGroupCaps_Exit(Action<t_CSLBASE_GetMPOGroupCaps_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetMPOGroupCaps_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "uiMaxPlanes", uiMaxPlanes);
             XmlAttrib(sb, "uiMaxStretchFactorNum", uiMaxStretchFactorNum);
             XmlAttrib(sb, "uiMaxStretchFactorDenm", uiMaxStretchFactorDenm);
             XmlAttrib(sb, "uiMaxShrinkFactorNum", uiMaxShrinkFactorNum);
             XmlAttrib(sb, "uiMaxShrinkFactorDenm", uiMaxShrinkFactorDenm);
             XmlAttrib(sb, "uiOverlayFtrCaps", uiOverlayFtrCaps);
             XmlAttrib(sb, "uiStereoCaps", uiStereoCaps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "uiMaxPlanes", "uiMaxStretchFactorNum", "uiMaxStretchFactorDenm", "uiMaxShrinkFactorNum", "uiMaxShrinkFactorDenm", "uiOverlayFtrCaps", "uiStereoCaps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return uiMaxPlanes;
                case 2:
                    return uiMaxStretchFactorNum;
                case 3:
                    return uiMaxStretchFactorDenm;
                case 4:
                    return uiMaxShrinkFactorNum;
                case 5:
                    return uiMaxShrinkFactorDenm;
                case 6:
                    return uiOverlayFtrCaps;
                case 7:
                    return uiStereoCaps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetMPOGroupCaps_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPciCfgInfo_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }
        public bool bDDR3 { get { return GetInt32At(4) != 0; } }
        public int CoreFreq { get { return GetInt32At(8); } }
        public int SystemMemFreq { get { return GetInt32At(12); } }
        public int NumOfMemChannels { get { return GetInt32At(16); } }
        public int MaxPipeADotClock { get { return GetInt32At(20); } }
        public int FSBFrequency { get { return GetInt32At(24); } }
        public int RenderFreq { get { return GetInt32At(28); } }
        public int iPlatformType { get { return GetInt32At(32); } }

        #region Private
        internal t_CSLBASE_GetPciCfgInfo_Exit(Action<t_CSLBASE_GetPciCfgInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPciCfgInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bDDR3", bDDR3);
             XmlAttrib(sb, "CoreFreq", CoreFreq);
             XmlAttrib(sb, "SystemMemFreq", SystemMemFreq);
             XmlAttrib(sb, "NumOfMemChannels", NumOfMemChannels);
             XmlAttrib(sb, "MaxPipeADotClock", MaxPipeADotClock);
             XmlAttrib(sb, "FSBFrequency", FSBFrequency);
             XmlAttrib(sb, "RenderFreq", RenderFreq);
             XmlAttrib(sb, "iPlatformType", iPlatformType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bDDR3", "CoreFreq", "SystemMemFreq", "NumOfMemChannels", "MaxPipeADotClock", "FSBFrequency", "RenderFreq", "iPlatformType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bDDR3;
                case 2:
                    return CoreFreq;
                case 3:
                    return SystemMemFreq;
                case 4:
                    return NumOfMemChannels;
                case 5:
                    return MaxPipeADotClock;
                case 6:
                    return FSBFrequency;
                case 7:
                    return RenderFreq;
                case 8:
                    return iPlatformType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPciCfgInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPlane_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetPlane_Entry(Action<t_CSLBASE_GetPlane_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPlane_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPlane_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPlane_Exit : TraceEvent
    {
        public int ulPlane { get { return GetInt32At(0); } }
        public int ulStatus { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetPlane_Exit(Action<t_CSLBASE_GetPlane_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPlane_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPlane", ulPlane);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPlane", "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPlane;
                case 1:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPlane_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPlaneZOrder_Entry : TraceEvent
    {
        public int ulPlaneType { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetPlaneZOrder_Entry(Action<t_CSLBASE_GetPlaneZOrder_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPlaneZOrder_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPlaneType", ulPlaneType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPlaneType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPlaneType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPlaneZOrder_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPlaneZOrder_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public PLANE_ZORDER ePlaneZOrder { get { return (PLANE_ZORDER)GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetPlaneZOrder_Exit(Action<t_CSLBASE_GetPlaneZOrder_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPlaneZOrder_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "ePlaneZOrder", ePlaneZOrder);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "ePlaneZOrder"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return ePlaneZOrder;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPlaneZOrder_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPlatformConfigInfo_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }
        public int ulGetPlatformConfigInfo { get { return GetInt32At(4); } }
        public int bS0ixField { get { return GetInt32At(8); } }
        public int bS0ixFieldValidBit { get { return GetInt32At(12); } }
        public int eAudioTypeSupport { get { return GetInt32At(16); } }
        public int bAudioTypeFieldValidBit { get { return GetInt32At(20); } }
        public int bISCTField { get { return GetInt32At(24); } }
        public int bISCTFieldValidBit { get { return GetInt32At(28); } }
        public int bDGPUPresentField { get { return GetInt32At(32); } }
        public int bDGPUPresentFieldValidBit { get { return GetInt32At(36); } }

        #region Private
        internal t_CSLBASE_GetPlatformConfigInfo_Exit(Action<t_CSLBASE_GetPlatformConfigInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPlatformConfigInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             XmlAttrib(sb, "ulGetPlatformConfigInfo", ulGetPlatformConfigInfo);
             XmlAttrib(sb, "bS0ixField", bS0ixField);
             XmlAttrib(sb, "bS0ixFieldValidBit", bS0ixFieldValidBit);
             XmlAttrib(sb, "eAudioTypeSupport", eAudioTypeSupport);
             XmlAttrib(sb, "bAudioTypeFieldValidBit", bAudioTypeFieldValidBit);
             XmlAttrib(sb, "bISCTField", bISCTField);
             XmlAttrib(sb, "bISCTFieldValidBit", bISCTFieldValidBit);
             XmlAttrib(sb, "bDGPUPresentField", bDGPUPresentField);
             XmlAttrib(sb, "bDGPUPresentFieldValidBit", bDGPUPresentFieldValidBit);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn", "ulGetPlatformConfigInfo", "bS0ixField", "bS0ixFieldValidBit", "eAudioTypeSupport", "bAudioTypeFieldValidBit", "bISCTField", "bISCTFieldValidBit", "bDGPUPresentField", "bDGPUPresentFieldValidBit"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                case 1:
                    return ulGetPlatformConfigInfo;
                case 2:
                    return bS0ixField;
                case 3:
                    return bS0ixFieldValidBit;
                case 4:
                    return eAudioTypeSupport;
                case 5:
                    return bAudioTypeFieldValidBit;
                case 6:
                    return bISCTField;
                case 7:
                    return bISCTFieldValidBit;
                case 8:
                    return bDGPUPresentField;
                case 9:
                    return bDGPUPresentFieldValidBit;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPlatformConfigInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPNMPixelClkData_Exit : TraceEvent
    {
        public int ulErrorStatus { get { return GetInt32At(0); } }
        public int ulOriginalPixelClk { get { return GetInt32At(4); } }
        public int ulSSCEnabledClk { get { return GetInt32At(8); } }
        public int ulSSCDisabledClk { get { return GetInt32At(12); } }

        #region Private
        internal t_CSLBASE_GetPNMPixelClkData_Exit(Action<t_CSLBASE_GetPNMPixelClkData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPNMPixelClkData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulErrorStatus", ulErrorStatus);
             XmlAttrib(sb, "ulOriginalPixelClk", ulOriginalPixelClk);
             XmlAttrib(sb, "ulSSCEnabledClk", ulSSCEnabledClk);
             XmlAttrib(sb, "ulSSCDisabledClk", ulSSCDisabledClk);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulErrorStatus", "ulOriginalPixelClk", "ulSSCEnabledClk", "ulSSCDisabledClk"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulErrorStatus;
                case 1:
                    return ulOriginalPixelClk;
                case 2:
                    return ulSSCEnabledClk;
                case 3:
                    return ulSSCDisabledClk;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPNMPixelClkData_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPossibleTiledAlloc_Entry : TraceEvent
    {
        public int ulHorizontalRes { get { return GetInt32At(0); } }
        public SB_PIXELFORMAT eSBPixelFormat { get { return (SB_PIXELFORMAT)GetInt32At(4); } }
        public PLANE_ORIENTATION eRotation { get { return (PLANE_ORIENTATION)GetInt32At(8); } }
        public bool bS3DAllocation { get { return GetInt32At(12) != 0; } }
        public int ulSourceID { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_GetPossibleTiledAlloc_Entry(Action<t_CSLBASE_GetPossibleTiledAlloc_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPossibleTiledAlloc_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulHorizontalRes", ulHorizontalRes);
             XmlAttrib(sb, "eSBPixelFormat", eSBPixelFormat);
             XmlAttrib(sb, "eRotation", eRotation);
             XmlAttrib(sb, "bS3DAllocation", bS3DAllocation);
             XmlAttrib(sb, "ulSourceID", ulSourceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulHorizontalRes", "eSBPixelFormat", "eRotation", "bS3DAllocation", "ulSourceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulHorizontalRes;
                case 1:
                    return eSBPixelFormat;
                case 2:
                    return eRotation;
                case 3:
                    return bS3DAllocation;
                case 4:
                    return ulSourceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPossibleTiledAlloc_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPossibleTiledAlloc_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public int ulMemFormat { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetPossibleTiledAlloc_Exit(Action<t_CSLBASE_GetPossibleTiledAlloc_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPossibleTiledAlloc_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "ulMemFormat", ulMemFormat);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "ulMemFormat"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return ulMemFormat;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPossibleTiledAlloc_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetPSRResCounter_Exit : TraceEvent
    {
        public int ulErrorStatus { get { return GetInt32At(0); } }
        public SB_BLA_ERRORCODES eErrorCode { get { return (SB_BLA_ERRORCODES)GetInt32At(4); } }
        public bool IsPSREnabled { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_CSLBASE_GetPSRResCounter_Exit(Action<t_CSLBASE_GetPSRResCounter_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetPSRResCounter_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulErrorStatus", ulErrorStatus);
             XmlAttrib(sb, "eErrorCode", eErrorCode);
             XmlAttrib(sb, "IsPSREnabled", IsPSREnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulErrorStatus", "eErrorCode", "IsPSREnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulErrorStatus;
                case 1:
                    return eErrorCode;
                case 2:
                    return IsPSREnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetPSRResCounter_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetRefreshRate_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bRetrieveSeamlessMediaMode { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetRefreshRate_Entry(Action<t_CSLBASE_GetRefreshRate_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetRefreshRate_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bRetrieveSeamlessMediaMode", bRetrieveSeamlessMediaMode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bRetrieveSeamlessMediaMode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bRetrieveSeamlessMediaMode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetRefreshRate_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetRefreshRate_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ulNumRefreshRates { get { return GetInt32At(4); } }
        public int ucRefreshRates { get { return GetByteAt(8); } }

        #region Private
        internal t_CSLBASE_GetRefreshRate_Exit(Action<t_CSLBASE_GetRefreshRate_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetRefreshRate_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ulNumRefreshRates", ulNumRefreshRates);
             XmlAttrib(sb, "ucRefreshRates", ucRefreshRates);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ulNumRefreshRates", "ucRefreshRates"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ulNumRefreshRates;
                case 2:
                    return ucRefreshRates;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetRefreshRate_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetRelationForSourceTargetMode_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetRelationForSourceTargetMode_Entry(Action<t_CSLBASE_GetRelationForSourceTargetMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetRelationForSourceTargetMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetRelationForSourceTargetMode_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetRelationForSourceTargetMode_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetRelationForSourceTargetMode_Exit(Action<t_CSLBASE_GetRelationForSourceTargetMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetRelationForSourceTargetMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetRelationForSourceTargetMode_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetROMBIOSInfo_Exit : TraceEvent
    {
        public int ucMinorVersion { get { return GetByteAt(0); } }
        public bool bInvalidMinorVersion { get { return GetInt32At(1) != 0; } }
        public SB_VERSION_TYPE versionType { get { return (SB_VERSION_TYPE)GetInt32At(5); } }
        public int ucBuildNum { get { return GetByteAt(9); } }

        #region Private
        internal t_CSLBASE_GetROMBIOSInfo_Exit(Action<t_CSLBASE_GetROMBIOSInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 41));
            Debug.Assert(!(Version > 0 && EventDataLength < 41));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetROMBIOSInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucMinorVersion", ucMinorVersion);
             XmlAttrib(sb, "bInvalidMinorVersion", bInvalidMinorVersion);
             XmlAttrib(sb, "versionType", versionType);
             XmlAttrib(sb, "ucBuildNum", ucBuildNum);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucMinorVersion", "bInvalidMinorVersion", "versionType", "ucBuildNum"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucMinorVersion;
                case 1:
                    return bInvalidMinorVersion;
                case 2:
                    return versionType;
                case 3:
                    return ucBuildNum;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetROMBIOSInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetS3DCaps_Entry : TraceEvent
    {
        public int dwDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetS3DCaps_Entry(Action<t_CSLBASE_GetS3DCaps_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetS3DCaps_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "dwDisplayUID", dwDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "dwDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return dwDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetS3DCaps_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetS3DCaps_Exit : TraceEvent
    {
        public bool bSupportsS3DLRFrames { get { return GetInt32At(0) != 0; } }
        public int ulNumEntries { get { return GetInt32At(4); } }
        public int ulRet { get { return GetInt32At(8); } }
        public S3D_FORMAT eCurrentS3DFormat { get { return (S3D_FORMAT)GetInt32At(12); } }
        public bool bIsOverlayEnabled { get { return GetInt32At(16) != 0; } }

        #region Private
        internal t_CSLBASE_GetS3DCaps_Exit(Action<t_CSLBASE_GetS3DCaps_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetS3DCaps_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bSupportsS3DLRFrames", bSupportsS3DLRFrames);
             XmlAttrib(sb, "ulNumEntries", ulNumEntries);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "eCurrentS3DFormat", eCurrentS3DFormat);
             XmlAttrib(sb, "bIsOverlayEnabled", bIsOverlayEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bSupportsS3DLRFrames", "ulNumEntries", "ulRet", "eCurrentS3DFormat", "bIsOverlayEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bSupportsS3DLRFrames;
                case 1:
                    return ulNumEntries;
                case 2:
                    return ulRet;
                case 3:
                    return eCurrentS3DFormat;
                case 4:
                    return bIsOverlayEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetS3DCaps_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetScanLineInfo_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetScanLineInfo_Entry(Action<t_CSLBASE_GetScanLineInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetScanLineInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetScanLineInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetScanLineInfo_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }
        public int ulCurScanLine { get { return GetInt32At(4); } }
        public int ulVActive { get { return GetInt32At(8); } }
        public bool bInVerticalBlank { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_GetScanLineInfo_Exit(Action<t_CSLBASE_GetScanLineInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetScanLineInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             XmlAttrib(sb, "ulCurScanLine", ulCurScanLine);
             XmlAttrib(sb, "ulVActive", ulVActive);
             XmlAttrib(sb, "bInVerticalBlank", bInVerticalBlank);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn", "ulCurScanLine", "ulVActive", "bInVerticalBlank"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                case 1:
                    return ulCurScanLine;
                case 2:
                    return ulVActive;
                case 3:
                    return bInVerticalBlank;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetScanLineInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetClkBendingInfo_Entry : TraceEvent
    {
        public SB_CLK_BENDING_CMD eClkBendingCmdType { get { return (SB_CLK_BENDING_CMD)GetInt32At(0); } }
        public int ulPipeID { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetSetClkBendingInfo_Entry(Action<t_CSLBASE_GetSetClkBendingInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetClkBendingInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eClkBendingCmdType", eClkBendingCmdType);
             XmlAttrib(sb, "ulPipeID", ulPipeID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eClkBendingCmdType", "ulPipeID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eClkBendingCmdType;
                case 1:
                    return ulPipeID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetClkBendingInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetClkBendingInfo_Exit : TraceEvent
    {
        public int ulPipeID { get { return GetInt32At(0); } }
        public int ulSSC4RefClock { get { return GetInt32At(4); } }
        public int ulHWPossiblePixelClock { get { return GetInt32At(8); } }
        public int ulRequiredPixelClock { get { return GetInt32At(12); } }
        public int ulFullStepMultiplier { get { return GetInt32At(16); } }
        public bool bHalfStepRequired { get { return GetInt32At(20) != 0; } }
        public int ulRet { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_GetSetClkBendingInfo_Exit(Action<t_CSLBASE_GetSetClkBendingInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetClkBendingInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeID", ulPipeID);
             XmlAttrib(sb, "ulSSC4RefClock", ulSSC4RefClock);
             XmlAttrib(sb, "ulHWPossiblePixelClock", ulHWPossiblePixelClock);
             XmlAttrib(sb, "ulRequiredPixelClock", ulRequiredPixelClock);
             XmlAttrib(sb, "ulFullStepMultiplier", ulFullStepMultiplier);
             XmlAttrib(sb, "bHalfStepRequired", bHalfStepRequired);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeID", "ulSSC4RefClock", "ulHWPossiblePixelClock", "ulRequiredPixelClock", "ulFullStepMultiplier", "bHalfStepRequired", "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeID;
                case 1:
                    return ulSSC4RefClock;
                case 2:
                    return ulHWPossiblePixelClock;
                case 3:
                    return ulRequiredPixelClock;
                case 4:
                    return ulFullStepMultiplier;
                case 5:
                    return bHalfStepRequired;
                case 6:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetClkBendingInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetCSC_Entry : TraceEvent
    {
        public CSC_OPERATION_TYPE eCSCOperationType { get { return (CSC_OPERATION_TYPE)GetInt32At(0); } }
        public int ulDisplayID { get { return GetInt32At(4); } }
        public SB_CSC_MATRIX_TYPE_EN eMatrixType { get { return (SB_CSC_MATRIX_TYPE_EN)GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_GetSetCSC_Entry(Action<t_CSLBASE_GetSetCSC_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetCSC_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eCSCOperationType", eCSCOperationType);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "eMatrixType", eMatrixType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eCSCOperationType", "ulDisplayID", "eMatrixType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eCSCOperationType;
                case 1:
                    return ulDisplayID;
                case 2:
                    return eMatrixType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetCSC_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetCSC_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bCSCFeatureSupport { get { return GetInt32At(4) != 0; } }
        public bool bIsWGFeatureSuported { get { return GetInt32At(8) != 0; } }
        public bool bIsNarrowGamutFeatureSuported { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_GetSetCSC_Exit(Action<t_CSLBASE_GetSetCSC_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetCSC_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bCSCFeatureSupport", bCSCFeatureSupport);
             XmlAttrib(sb, "bIsWGFeatureSuported", bIsWGFeatureSuported);
             XmlAttrib(sb, "bIsNarrowGamutFeatureSuported", bIsNarrowGamutFeatureSuported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bCSCFeatureSupport", "bIsWGFeatureSuported", "bIsNarrowGamutFeatureSuported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bCSCFeatureSupport;
                case 2:
                    return bIsWGFeatureSuported;
                case 3:
                    return bIsNarrowGamutFeatureSuported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetCSC_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetParameters_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetSetParameters_Entry(Action<t_CSLBASE_GetSetParameters_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetParameters_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetParameters_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetParameters_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetSetParameters_Exit(Action<t_CSLBASE_GetSetParameters_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetParameters_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetParameters_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetXVYCCCtrl_Entry : TraceEvent
    {
        public SB_OPERATION_TYPE OpType { get { return (SB_OPERATION_TYPE)GetInt32At(0); } }
        public int ulDisplayUID { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetSetXVYCCCtrl_Entry(Action<t_CSLBASE_GetSetXVYCCCtrl_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetXVYCCCtrl_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OpType", OpType);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OpType", "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OpType;
                case 1:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetXVYCCCtrl_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSetXVYCCCtrl_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bEnablePreference { get { return GetInt32At(4) != 0; } }
        public SB_COLORSPACE_SUPPORTED eColorspace { get { return (SB_COLORSPACE_SUPPORTED)GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_GetSetXVYCCCtrl_Exit(Action<t_CSLBASE_GetSetXVYCCCtrl_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSetXVYCCCtrl_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bEnablePreference", bEnablePreference);
             XmlAttrib(sb, "eColorspace", eColorspace);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bEnablePreference", "eColorspace"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bEnablePreference;
                case 2:
                    return eColorspace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSetXVYCCCtrl_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSourceModeList_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bEnumerateOnlyMonitorModes { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetSourceModeList_Entry(Action<t_CSLBASE_GetSourceModeList_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSourceModeList_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bEnumerateOnlyMonitorModes", bEnumerateOnlyMonitorModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bEnumerateOnlyMonitorModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bEnumerateOnlyMonitorModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSourceModeList_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSourceModeList_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ulNumOfModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetSourceModeList_Exit(Action<t_CSLBASE_GetSourceModeList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSourceModeList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ulNumOfModes", ulNumOfModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ulNumOfModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ulNumOfModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSourceModeList_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSPIData_Entry : TraceEvent
    {
        public int ulNumSPIDetected { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetSPIData_Entry(Action<t_CSLBASE_GetSPIData_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSPIData_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumSPIDetected", ulNumSPIDetected);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumSPIDetected"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumSPIDetected;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSPIData_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetSPIData_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetSPIData_Exit(Action<t_CSLBASE_GetSPIData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetSPIData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetSPIData_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTargetDetails_Exit : TraceEvent
    {
        public int ulNumOfTargets { get { return GetInt32At(0); } }
        public int ulStatus { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetTargetDetails_Exit(Action<t_CSLBASE_GetTargetDetails_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTargetDetails_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumOfTargets", ulNumOfTargets);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumOfTargets", "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumOfTargets;
                case 1:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTargetDetails_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTargetModeListForSourceMode_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetTargetModeListForSourceMode_Entry(Action<t_CSLBASE_GetTargetModeListForSourceMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTargetModeListForSourceMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTargetModeListForSourceMode_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTargetModeListForSourceMode_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ulNumOfTargetModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetTargetModeListForSourceMode_Exit(Action<t_CSLBASE_GetTargetModeListForSourceMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTargetModeListForSourceMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ulNumOfTargetModes", ulNumOfTargetModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ulNumOfTargetModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ulNumOfTargetModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTargetModeListForSourceMode_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTargetModeList_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bEnumerateOnlyMonitorModes { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_GetTargetModeList_Entry(Action<t_CSLBASE_GetTargetModeList_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTargetModeList_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bEnumerateOnlyMonitorModes", bEnumerateOnlyMonitorModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bEnumerateOnlyMonitorModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bEnumerateOnlyMonitorModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTargetModeList_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTargetModeList_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ulNumOfModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_GetTargetModeList_Exit(Action<t_CSLBASE_GetTargetModeList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTargetModeList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ulNumOfModes", ulNumOfModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ulNumOfModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ulNumOfModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTargetModeList_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTimingInfo_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulSize { get { return GetInt32At(4); } }
        public SB_GETTIMINGINFO_OPTIONS eTimingInfoOptions { get { return (SB_GETTIMINGINFO_OPTIONS)GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_GetTimingInfo_Entry(Action<t_CSLBASE_GetTimingInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTimingInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "eTimingInfoOptions", eTimingInfoOptions);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulSize", "eTimingInfoOptions"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulSize;
                case 2:
                    return eTimingInfoOptions;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTimingInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetTimingInfo_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bLowResMode { get { return GetInt32At(4) != 0; } }
        public int ulXRes_TimingSelected { get { return GetInt32At(8); } }
        public int ulYRes_TimingSelected { get { return GetInt32At(12); } }
        public int ulCDClk { get { return GetInt32At(16); } }
        public int ulAdjPixelClk { get { return GetInt32At(20); } }

        #region Private
        internal t_CSLBASE_GetTimingInfo_Exit(Action<t_CSLBASE_GetTimingInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetTimingInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bLowResMode", bLowResMode);
             XmlAttrib(sb, "ulXRes_TimingSelected", ulXRes_TimingSelected);
             XmlAttrib(sb, "ulYRes_TimingSelected", ulYRes_TimingSelected);
             XmlAttrib(sb, "ulCDClk", ulCDClk);
             XmlAttrib(sb, "ulAdjPixelClk", ulAdjPixelClk);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bLowResMode", "ulXRes_TimingSelected", "ulYRes_TimingSelected", "ulCDClk", "ulAdjPixelClk"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bLowResMode;
                case 2:
                    return ulXRes_TimingSelected;
                case 3:
                    return ulYRes_TimingSelected;
                case 4:
                    return ulCDClk;
                case 5:
                    return ulAdjPixelClk;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetTimingInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GetVBTToggleList_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GetVBTToggleList_Exit(Action<t_CSLBASE_GetVBTToggleList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GetVBTToggleList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GetVBTToggleList_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_GrmTDRHandler_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_GrmTDRHandler_Exit(Action<t_CSLBASE_GrmTDRHandler_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_GrmTDRHandler_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_GrmTDRHandler_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HandleATR_Entry : TraceEvent
    {
        public int ulDisplayUid { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_HandleATR_Entry(Action<t_CSLBASE_HandleATR_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HandleATR_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUid", ulDisplayUid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HandleATR_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HandleLPSPPreSetMode_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_HandleLPSPPreSetMode_Exit(Action<t_CSLBASE_HandleLPSPPreSetMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HandleLPSPPreSetMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HandleLPSPPreSetMode_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry : TraceEvent
    {
        public PIPE_ID ePipeType { get { return (PIPE_ID)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry(Action<t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ePipeType", ePipeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ePipeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ePipeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HandlePipeCRCDoneInterrupt_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry : TraceEvent
    {
        public PIPE_ID ePipeType { get { return (PIPE_ID)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry(Action<t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ePipeType", ePipeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ePipeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ePipeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HandlePipeCRCErrorInterrupt_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HotPlug_Entry : TraceEvent
    {
        public int ulHotPlugFlag { get { return GetInt32At(0); } }
        public int ucSpuriosInterrutpFlag { get { return GetByteAt(4); } }

        #region Private
        internal t_CSLBASE_HotPlug_Entry(Action<t_CSLBASE_HotPlug_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HotPlug_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulHotPlugFlag", ulHotPlugFlag);
             XmlAttrib(sb, "ucSpuriosInterrutpFlag", ucSpuriosInterrutpFlag);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulHotPlugFlag", "ucSpuriosInterrutpFlag"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulHotPlugFlag;
                case 1:
                    return ucSpuriosInterrutpFlag;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HotPlug_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_HotPlug_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_HotPlug_Exit(Action<t_CSLBASE_HotPlug_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_HotPlug_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_HotPlug_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_I2CAccess_Entry : TraceEvent
    {
        public int flFlagsCommand { get { return GetInt32At(0); } }
        public int ulSize { get { return GetInt32At(4); } }
        public int ulIndex { get { return GetInt32At(8); } }
        public int ulAddress { get { return GetInt32At(12); } }
        public int ulDisplayUID { get { return GetInt32At(16); } }
        public int DataBufr { get { return GetByteAt(20); } }
        public int bDDC { get { return GetInt32At(36); } }
        public int bI2C { get { return GetInt32At(40); } }
        public int bBlc { get { return GetInt32At(44); } }
        public int bD_Connector { get { return GetInt32At(48); } }

        #region Private
        internal t_CSLBASE_I2CAccess_Entry(Action<t_CSLBASE_I2CAccess_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 52));
            Debug.Assert(!(Version > 0 && EventDataLength < 52));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_I2CAccess_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "flFlagsCommand", flFlagsCommand);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "ulIndex", ulIndex);
             XmlAttrib(sb, "ulAddress", ulAddress);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "DataBufr", DataBufr);
             XmlAttrib(sb, "bDDC", bDDC);
             XmlAttrib(sb, "bI2C", bI2C);
             XmlAttrib(sb, "bBlc", bBlc);
             XmlAttrib(sb, "bD_Connector", bD_Connector);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "flFlagsCommand", "ulSize", "ulIndex", "ulAddress", "ulDisplayUID", "DataBufr", "bDDC", "bI2C", "bBlc", "bD_Connector"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return flFlagsCommand;
                case 1:
                    return ulSize;
                case 2:
                    return ulIndex;
                case 3:
                    return ulAddress;
                case 4:
                    return ulDisplayUID;
                case 5:
                    return DataBufr;
                case 6:
                    return bDDC;
                case 7:
                    return bI2C;
                case 8:
                    return bBlc;
                case 9:
                    return bD_Connector;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_I2CAccess_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_I2CAccess_Exit : TraceEvent
    {
        public int ulAddress { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_I2CAccess_Exit(Action<t_CSLBASE_I2CAccess_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_I2CAccess_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulAddress", ulAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_I2CAccess_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_Initialize_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_Initialize_Exit(Action<t_CSLBASE_Initialize_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_Initialize_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_Initialize_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_InterruptServices_Entry : TraceEvent
    {
        public INTERRUPT_OPERATION eOperation { get { return (INTERRUPT_OPERATION)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_InterruptServices_Entry(Action<t_CSLBASE_InterruptServices_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_InterruptServices_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eOperation", eOperation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eOperation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eOperation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_InterruptServices_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_InterruptServices_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_InterruptServices_Exit(Action<t_CSLBASE_InterruptServices_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_InterruptServices_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_InterruptServices_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsAudioControllerEnabled_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsAudioControllerEnabled_Exit(Action<t_CSLBASE_IsAudioControllerEnabled_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsAudioControllerEnabled_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsAudioControllerEnabled_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsCDClockChangeRequired_Entry : TraceEvent
    {
        public int ulRequiredClock { get { return GetInt32At(0); } }
        public int ulNumPaths { get { return GetInt32At(4); } }
        public bool bIsSupported { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_CSLBASE_IsCDClockChangeRequired_Entry(Action<t_CSLBASE_IsCDClockChangeRequired_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsCDClockChangeRequired_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRequiredClock", ulRequiredClock);
             XmlAttrib(sb, "ulNumPaths", ulNumPaths);
             XmlAttrib(sb, "bIsSupported", bIsSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRequiredClock", "ulNumPaths", "bIsSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRequiredClock;
                case 1:
                    return ulNumPaths;
                case 2:
                    return bIsSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsCDClockChangeRequired_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsCDClockChangeRequired_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsCDClockChangeRequired_Exit(Action<t_CSLBASE_IsCDClockChangeRequired_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsCDClockChangeRequired_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsCDClockChangeRequired_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsCDClockChangeSupported_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsCDClockChangeSupported_Exit(Action<t_CSLBASE_IsCDClockChangeSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsCDClockChangeSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsCDClockChangeSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsFastModeSetPossible_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsFastModeSetPossible_Entry(Action<t_CSLBASE_IsFastModeSetPossible_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsFastModeSetPossible_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsFastModeSetPossible_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsFastModeSetPossible_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bFastModeSetPossible { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_IsFastModeSetPossible_Exit(Action<t_CSLBASE_IsFastModeSetPossible_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsFastModeSetPossible_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bFastModeSetPossible", bFastModeSetPossible);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bFastModeSetPossible"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bFastModeSetPossible;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsFastModeSetPossible_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsFlipCompleted_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsFlipCompleted_Entry(Action<t_CSLBASE_IsFlipCompleted_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsFlipCompleted_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsFlipCompleted_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsFlipCompleted_Exit : TraceEvent
    {
        public bool bFlipComplete { get { return GetInt32At(0) != 0; } }
        public int ulReturn { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_IsFlipCompleted_Exit(Action<t_CSLBASE_IsFlipCompleted_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsFlipCompleted_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bFlipComplete", bFlipComplete);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bFlipComplete", "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bFlipComplete;
                case 1:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsFlipCompleted_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsHwCursorPossible_Entry : TraceEvent
    {
        public int ulPipe { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsHwCursorPossible_Entry(Action<t_CSLBASE_IsHwCursorPossible_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsHwCursorPossible_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsHwCursorPossible_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsHwCursorPossible_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public bool bHwCursorPossible { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_IsHwCursorPossible_Exit(Action<t_CSLBASE_IsHwCursorPossible_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsHwCursorPossible_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "bHwCursorPossible", bHwCursorPossible);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "bHwCursorPossible"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return bHwCursorPossible;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsHwCursorPossible_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsOpRegionMailBoxSupported_Entry : TraceEvent
    {
        public ACPIOPREGION_MAILBOX_TYPE eMailBoxType { get { return (ACPIOPREGION_MAILBOX_TYPE)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsOpRegionMailBoxSupported_Entry(Action<t_CSLBASE_IsOpRegionMailBoxSupported_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsOpRegionMailBoxSupported_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eMailBoxType", eMailBoxType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eMailBoxType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eMailBoxType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsOpRegionMailBoxSupported_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsOpRegionMailBoxSupported_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }
        public bool bSupported { get { return GetInt32At(4) != 0; } }
        public ACPIOPREGION_VERSION eACPIOpRegionVersion { get { return (ACPIOPREGION_VERSION)GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_IsOpRegionMailBoxSupported_Exit(Action<t_CSLBASE_IsOpRegionMailBoxSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsOpRegionMailBoxSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             XmlAttrib(sb, "bSupported", bSupported);
             XmlAttrib(sb, "eACPIOpRegionVersion", eACPIOpRegionVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn", "bSupported", "eACPIOpRegionVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                case 1:
                    return bSupported;
                case 2:
                    return eACPIOpRegionVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsOpRegionMailBoxSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsScalingAppliedInMPOPath_Entry : TraceEvent
    {
        public int ucPipeIndex { get { return GetByteAt(0); } }

        #region Private
        internal t_CSLBASE_IsScalingAppliedInMPOPath_Entry(Action<t_CSLBASE_IsScalingAppliedInMPOPath_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsScalingAppliedInMPOPath_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucPipeIndex", ucPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsScalingAppliedInMPOPath_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsScalingAppliedInMPOPath_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }
        public bool bScaling { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_IsScalingAppliedInMPOPath_Exit(Action<t_CSLBASE_IsScalingAppliedInMPOPath_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsScalingAppliedInMPOPath_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "bScaling", bScaling);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "bScaling"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return bScaling;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsScalingAppliedInMPOPath_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsSFSupported_Entry : TraceEvent
    {
        public int ulVersion { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsSFSupported_Entry(Action<t_CSLBASE_IsSFSupported_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsSFSupported_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulVersion", ulVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsSFSupported_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsSFSupported_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_IsSFSupported_Exit(Action<t_CSLBASE_IsSFSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsSFSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsSFSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsSpriteDownScaleSupported_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }
        public int SrcWidth { get { return GetInt32At(4); } }
        public int SrcHeight { get { return GetInt32At(8); } }
        public int DestWidth { get { return GetInt32At(12); } }
        public int DestHeight { get { return GetInt32At(16); } }
        public int Bpp { get { return GetInt32At(20); } }
        public int VideoType { get { return GetInt32At(24); } }
        public int OverlayPipe { get { return GetInt32At(28); } }
        public int SpritePipe { get { return GetInt32At(32); } }
        public int ulCDClock { get { return GetInt32At(36); } }
        public int ulCurrentPixelClock { get { return GetInt32At(40); } }
        public bool bIsRGB { get { return GetInt32At(52) != 0; } }
        public bool bIsSpriteDownScaleEnabledOnOtherPipe { get { return GetInt32At(56) != 0; } }

        #region Private
        internal t_CSLBASE_IsSpriteDownScaleSupported_Exit(Action<t_CSLBASE_IsSpriteDownScaleSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 60));
            Debug.Assert(!(Version > 0 && EventDataLength < 60));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsSpriteDownScaleSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "SrcWidth", SrcWidth);
             XmlAttrib(sb, "SrcHeight", SrcHeight);
             XmlAttrib(sb, "DestWidth", DestWidth);
             XmlAttrib(sb, "DestHeight", DestHeight);
             XmlAttrib(sb, "Bpp", Bpp);
             XmlAttrib(sb, "VideoType", VideoType);
             XmlAttrib(sb, "OverlayPipe", OverlayPipe);
             XmlAttrib(sb, "SpritePipe", SpritePipe);
             XmlAttrib(sb, "ulCDClock", ulCDClock);
             XmlAttrib(sb, "ulCurrentPixelClock", ulCurrentPixelClock);
             XmlAttrib(sb, "bIsRGB", bIsRGB);
             XmlAttrib(sb, "bIsSpriteDownScaleEnabledOnOtherPipe", bIsSpriteDownScaleEnabledOnOtherPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "SrcWidth", "SrcHeight", "DestWidth", "DestHeight", "Bpp", "VideoType", "OverlayPipe", "SpritePipe", "ulCDClock", "ulCurrentPixelClock", "bIsRGB", "bIsSpriteDownScaleEnabledOnOtherPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return SrcWidth;
                case 2:
                    return SrcHeight;
                case 3:
                    return DestWidth;
                case 4:
                    return DestHeight;
                case 5:
                    return Bpp;
                case 6:
                    return VideoType;
                case 7:
                    return OverlayPipe;
                case 8:
                    return SpritePipe;
                case 9:
                    return ulCDClock;
                case 10:
                    return ulCurrentPixelClock;
                case 11:
                    return bIsRGB;
                case 12:
                    return bIsSpriteDownScaleEnabledOnOtherPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsSpriteDownScaleSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsTwinSupportedInClone_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_IsTwinSupportedInClone_Entry(Action<t_CSLBASE_IsTwinSupportedInClone_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsTwinSupportedInClone_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsTwinSupportedInClone_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_IsTwinSupportedInClone_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bIsTwinSupported { get { return GetInt32At(4) != 0; } }
        public int ulCompensation { get { return GetInt32At(8); } }
        public int ulCustomCompX { get { return GetInt32At(16); } }
        public int ulCustomCompY { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_IsTwinSupportedInClone_Exit(Action<t_CSLBASE_IsTwinSupportedInClone_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_IsTwinSupportedInClone_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bIsTwinSupported", bIsTwinSupported);
             XmlAttrib(sb, "ulCompensation", ulCompensation);
             XmlAttrib(sb, "ulCustomCompX", ulCustomCompX);
             XmlAttrib(sb, "ulCustomCompY", ulCustomCompY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bIsTwinSupported", "ulCompensation", "ulCustomCompX", "ulCustomCompY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bIsTwinSupported;
                case 2:
                    return ulCompensation;
                case 3:
                    return ulCustomCompX;
                case 4:
                    return ulCustomCompY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_IsTwinSupportedInClone_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_LH_NotifyPowerState_Entry : TraceEvent
    {
        public IGFX_DEV_POWER_STATE IgfxDevPowerState { get { return (IGFX_DEV_POWER_STATE)GetInt32At(0); } }
        public IGFX_SYS_POWER_ACTION IgfxSysPowerAction { get { return (IGFX_SYS_POWER_ACTION)GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_LH_NotifyPowerState_Entry(Action<t_CSLBASE_LH_NotifyPowerState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_LH_NotifyPowerState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IgfxDevPowerState", IgfxDevPowerState);
             XmlAttrib(sb, "IgfxSysPowerAction", IgfxSysPowerAction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IgfxDevPowerState", "IgfxSysPowerAction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IgfxDevPowerState;
                case 1:
                    return IgfxSysPowerAction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_LH_NotifyPowerState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_LH_NotifyPowerState_Exit : TraceEvent
    {
        public int ulRetStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_LH_NotifyPowerState_Exit(Action<t_CSLBASE_LH_NotifyPowerState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_LH_NotifyPowerState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRetStatus", ulRetStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRetStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRetStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_LH_NotifyPowerState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_LH_SetDisplayPowerState_Entry : TraceEvent
    {
        public int ulDispUID { get { return GetInt32At(0); } }
        public IGFX_DEV_POWER_STATE IgfxDevPowerState { get { return (IGFX_DEV_POWER_STATE)GetInt32At(4); } }
        public IGFX_SYS_POWER_ACTION IgfxSysPowerAction { get { return (IGFX_SYS_POWER_ACTION)GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_LH_SetDisplayPowerState_Entry(Action<t_CSLBASE_LH_SetDisplayPowerState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_LH_SetDisplayPowerState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDispUID", ulDispUID);
             XmlAttrib(sb, "IgfxDevPowerState", IgfxDevPowerState);
             XmlAttrib(sb, "IgfxSysPowerAction", IgfxSysPowerAction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDispUID", "IgfxDevPowerState", "IgfxSysPowerAction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDispUID;
                case 1:
                    return IgfxDevPowerState;
                case 2:
                    return IgfxSysPowerAction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_LH_SetDisplayPowerState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_LH_SetDisplayPowerState_Exit : TraceEvent
    {
        public int ulRetStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_LH_SetDisplayPowerState_Exit(Action<t_CSLBASE_LH_SetDisplayPowerState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_LH_SetDisplayPowerState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRetStatus", ulRetStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRetStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRetStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_LH_SetDisplayPowerState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_NotifyCommitEnd_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_NotifyCommitEnd_Exit(Action<t_CSLBASE_NotifyCommitEnd_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_NotifyCommitEnd_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_NotifyCommitEnd_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_NotifyModeSetComplete_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }
        public int ulRequestedOSModeX { get { return GetInt32At(4); } }
        public int ulRequestedOSModeY { get { return GetInt32At(8); } }
        public int ulRequestedOSModeRR { get { return GetInt32At(12); } }
        public int ulScanLineLength { get { return GetInt32At(16); } }
        public PLANE_ORIENTATION eOrientation { get { return (PLANE_ORIENTATION)GetInt32At(20); } }
        public PIPE_ORIENTATION pipeOrientation { get { return (PIPE_ORIENTATION)GetInt32At(24); } }
        public SURFACE_MEMORY_TYPE eSurfaceMemType { get { return (SURFACE_MEMORY_TYPE)GetInt32At(28); } }
        public bool bVideoBlankingReqd { get { return GetInt32At(32) != 0; } }
        public int ulSourceID { get { return GetInt32At(36); } }
        public bool bIgnoreAuxFailuresDuringSetMode { get { return GetInt32At(40) != 0; } }
        public bool bEnablePlaneCaching { get { return GetInt32At(44) != 0; } }
        public bool bUseFastModeSet { get { return GetInt32At(48) != 0; } }
        public bool bSkipEnablePlane { get { return GetInt32At(52) != 0; } }
        public bool bPipeLock { get { return GetInt32At(56) != 0; } }
        public bool bUseS3DHardwareAutoToggle { get { return GetInt32At(60) != 0; } }
        public bool bModeSetAtDriverUnload { get { return GetInt32At(64) != 0; } }
        public bool bInternalModesetContext { get { return GetInt32At(68) != 0; } }

        #region Private
        internal t_CSLBASE_NotifyModeSetComplete_Entry(Action<t_CSLBASE_NotifyModeSetComplete_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 72));
            Debug.Assert(!(Version > 0 && EventDataLength < 72));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_NotifyModeSetComplete_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "ulRequestedOSModeX", ulRequestedOSModeX);
             XmlAttrib(sb, "ulRequestedOSModeY", ulRequestedOSModeY);
             XmlAttrib(sb, "ulRequestedOSModeRR", ulRequestedOSModeRR);
             XmlAttrib(sb, "ulScanLineLength", ulScanLineLength);
             XmlAttrib(sb, "eOrientation", eOrientation);
             XmlAttrib(sb, "pipeOrientation", pipeOrientation);
             XmlAttrib(sb, "eSurfaceMemType", eSurfaceMemType);
             XmlAttrib(sb, "bVideoBlankingReqd", bVideoBlankingReqd);
             XmlAttrib(sb, "ulSourceID", ulSourceID);
             XmlAttrib(sb, "bIgnoreAuxFailuresDuringSetMode", bIgnoreAuxFailuresDuringSetMode);
             XmlAttrib(sb, "bEnablePlaneCaching", bEnablePlaneCaching);
             XmlAttrib(sb, "bUseFastModeSet", bUseFastModeSet);
             XmlAttrib(sb, "bSkipEnablePlane", bSkipEnablePlane);
             XmlAttrib(sb, "bPipeLock", bPipeLock);
             XmlAttrib(sb, "bUseS3DHardwareAutoToggle", bUseS3DHardwareAutoToggle);
             XmlAttrib(sb, "bModeSetAtDriverUnload", bModeSetAtDriverUnload);
             XmlAttrib(sb, "bInternalModesetContext", bInternalModesetContext);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex", "ulRequestedOSModeX", "ulRequestedOSModeY", "ulRequestedOSModeRR", "ulScanLineLength", "eOrientation", "pipeOrientation", "eSurfaceMemType", "bVideoBlankingReqd", "ulSourceID", "bIgnoreAuxFailuresDuringSetMode", "bEnablePlaneCaching", "bUseFastModeSet", "bSkipEnablePlane", "bPipeLock", "bUseS3DHardwareAutoToggle", "bModeSetAtDriverUnload", "bInternalModesetContext"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                case 1:
                    return ulRequestedOSModeX;
                case 2:
                    return ulRequestedOSModeY;
                case 3:
                    return ulRequestedOSModeRR;
                case 4:
                    return ulScanLineLength;
                case 5:
                    return eOrientation;
                case 6:
                    return pipeOrientation;
                case 7:
                    return eSurfaceMemType;
                case 8:
                    return bVideoBlankingReqd;
                case 9:
                    return ulSourceID;
                case 10:
                    return bIgnoreAuxFailuresDuringSetMode;
                case 11:
                    return bEnablePlaneCaching;
                case 12:
                    return bUseFastModeSet;
                case 13:
                    return bSkipEnablePlane;
                case 14:
                    return bPipeLock;
                case 15:
                    return bUseS3DHardwareAutoToggle;
                case 16:
                    return bModeSetAtDriverUnload;
                case 17:
                    return bInternalModesetContext;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_NotifyModeSetComplete_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_NotifyModeSetComplete_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_NotifyModeSetComplete_Exit(Action<t_CSLBASE_NotifyModeSetComplete_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_NotifyModeSetComplete_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_NotifyModeSetComplete_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_NotifyPowerState_Entry : TraceEvent
    {
        public DEV_POWER_STATE ulPowerState { get { return (DEV_POWER_STATE)GetInt32At(0); } }
        public int ulSystemState { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_NotifyPowerState_Entry(Action<t_CSLBASE_NotifyPowerState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_NotifyPowerState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPowerState", ulPowerState);
             XmlAttrib(sb, "ulSystemState", ulSystemState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPowerState", "ulSystemState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPowerState;
                case 1:
                    return ulSystemState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_NotifyPowerState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_OverrideMonitorModeList_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bDownScalarSupported { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_OverrideMonitorModeList_Entry(Action<t_CSLBASE_OverrideMonitorModeList_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_OverrideMonitorModeList_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bDownScalarSupported", bDownScalarSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bDownScalarSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bDownScalarSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_OverrideMonitorModeList_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_OverrideMonitorModeList_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ulNumOfModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_OverrideMonitorModeList_Exit(Action<t_CSLBASE_OverrideMonitorModeList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_OverrideMonitorModeList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ulNumOfModes", ulNumOfModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ulNumOfModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ulNumOfModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_OverrideMonitorModeList_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_PopulateContainerIDArgs_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public long PortId { get { return GetInt64At(4); } }
        public int ManufacturerName { get { return GetInt16At(12); } }
        public int ProductCode { get { return GetInt16At(14); } }

        #region Private
        internal t_CSLBASE_PopulateContainerIDArgs_Entry(Action<t_CSLBASE_PopulateContainerIDArgs_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_PopulateContainerIDArgs_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "PortId", PortId);
             XmlAttrib(sb, "ManufacturerName", ManufacturerName);
             XmlAttrib(sb, "ProductCode", ProductCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "PortId", "ManufacturerName", "ProductCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return PortId;
                case 2:
                    return ManufacturerName;
                case 3:
                    return ProductCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_PopulateContainerIDArgs_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_PopulateContainerIDArgs_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_PopulateContainerIDArgs_Exit(Action<t_CSLBASE_PopulateContainerIDArgs_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_PopulateContainerIDArgs_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_PopulateContainerIDArgs_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryDispConfig_Entry : TraceEvent
    {
        public int ulNumPaths { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_QueryDispConfig_Entry(Action<t_CSLBASE_QueryDispConfig_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryDispConfig_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumPaths", ulNumPaths);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumPaths"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumPaths;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryDispConfig_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryDispConfig_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_QueryDispConfig_Exit(Action<t_CSLBASE_QueryDispConfig_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryDispConfig_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryDispConfig_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryDisplayDetails_Entry : TraceEvent
    {
        public DISPLAY_DETAILS_FLAG eflag { get { return (DISPLAY_DETAILS_FLAG)GetInt32At(0); } }
        public int ulDisplayUID { get { return GetInt32At(4); } }
        public DISPLAY_TYPE eType { get { return (DISPLAY_TYPE)GetInt32At(8); } }
        public int ucIndex { get { return GetByteAt(12); } }

        #region Private
        internal t_CSLBASE_QueryDisplayDetails_Entry(Action<t_CSLBASE_QueryDisplayDetails_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryDisplayDetails_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eflag", eflag);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "eType", eType);
             XmlAttrib(sb, "ucIndex", ucIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eflag", "ulDisplayUID", "eType", "ucIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eflag;
                case 1:
                    return ulDisplayUID;
                case 2:
                    return eType;
                case 3:
                    return ucIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryDisplayDetails_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryDisplayDetails_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public bool bExternalEncoderDriven { get { return GetInt32At(4) != 0; } }
        public bool bTPVDrivenEncoder { get { return GetInt32At(8) != 0; } }
        public PORT_TYPES ePortType { get { return (PORT_TYPES)GetInt32At(12); } }
        public int ucLogicalPortIndex { get { return GetByteAt(16); } }
        public int ulDisplayUID { get { return GetInt32At(17); } }
        public DISPLAY_TYPE eType { get { return (DISPLAY_TYPE)GetInt32At(21); } }
        public int ucIndex { get { return GetByteAt(25); } }

        #region Private
        internal t_CSLBASE_QueryDisplayDetails_Exit(Action<t_CSLBASE_QueryDisplayDetails_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 26));
            Debug.Assert(!(Version > 0 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryDisplayDetails_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "bExternalEncoderDriven", bExternalEncoderDriven);
             XmlAttrib(sb, "bTPVDrivenEncoder", bTPVDrivenEncoder);
             XmlAttrib(sb, "ePortType", ePortType);
             XmlAttrib(sb, "ucLogicalPortIndex", ucLogicalPortIndex);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "eType", eType);
             XmlAttrib(sb, "ucIndex", ucIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "bExternalEncoderDriven", "bTPVDrivenEncoder", "ePortType", "ucLogicalPortIndex", "ulDisplayUID", "eType", "ucIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return bExternalEncoderDriven;
                case 2:
                    return bTPVDrivenEncoder;
                case 3:
                    return ePortType;
                case 4:
                    return ucLogicalPortIndex;
                case 5:
                    return ulDisplayUID;
                case 6:
                    return eType;
                case 7:
                    return ucIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryDisplayDetails_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryHWConfig_Entry : TraceEvent
    {
        public int ulPipe { get { return GetInt32At(0); } }
        public int ulScanType { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_QueryHWConfig_Entry(Action<t_CSLBASE_QueryHWConfig_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryHWConfig_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             XmlAttrib(sb, "ulScanType", ulScanType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe", "ulScanType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                case 1:
                    return ulScanType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryHWConfig_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryHWConfig_Exit : TraceEvent
    {
        public bool IsEnabled { get { return GetInt32At(0) != 0; } }
        public int IsDownScaled { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_QueryHWConfig_Exit(Action<t_CSLBASE_QueryHWConfig_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryHWConfig_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsEnabled", IsEnabled);
             XmlAttrib(sb, "IsDownScaled", IsDownScaled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsEnabled", "IsDownScaled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsEnabled;
                case 1:
                    return IsDownScaled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryHWConfig_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_QueryResource_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }
        public int ResourceType { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_QueryResource_Exit(Action<t_CSLBASE_QueryResource_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_QueryResource_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ResourceType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_QueryResource_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReadOpRegionMailBox_Entry : TraceEvent
    {
        public ACPIOPREGION_MAILBOX_TYPE eMailBoxType { get { return (ACPIOPREGION_MAILBOX_TYPE)GetInt32At(0); } }
        public int ulNumBytes { get { return GetInt32At(4); } }
        public Address pData { get { return GetAddressAt(8); } }

        #region Private
        internal t_CSLBASE_ReadOpRegionMailBox_Entry(Action<t_CSLBASE_ReadOpRegionMailBox_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReadOpRegionMailBox_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eMailBoxType", eMailBoxType);
             XmlAttrib(sb, "ulNumBytes", ulNumBytes);
             XmlAttribHex(sb, "pData", pData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eMailBoxType", "ulNumBytes", "pData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eMailBoxType;
                case 1:
                    return ulNumBytes;
                case 2:
                    return pData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReadOpRegionMailBox_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReadOpRegionMailBox_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ReadOpRegionMailBox_Exit(Action<t_CSLBASE_ReadOpRegionMailBox_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReadOpRegionMailBox_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReadOpRegionMailBox_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReleaseDevice_Entry : TraceEvent
    {
        public int Arg { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ReleaseDevice_Entry(Action<t_CSLBASE_ReleaseDevice_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReleaseDevice_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Arg", Arg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Arg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Arg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReleaseDevice_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReleaseDevice_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ReleaseDevice_Exit(Action<t_CSLBASE_ReleaseDevice_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReleaseDevice_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReleaseDevice_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_RemoveCustomMode_Entry : TraceEvent
    {
        public int ulDisplayID { get { return GetInt32At(0); } }
        public int ulNumberOfCustomModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_RemoveCustomMode_Entry(Action<t_CSLBASE_RemoveCustomMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_RemoveCustomMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "ulNumberOfCustomModes", ulNumberOfCustomModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID", "ulNumberOfCustomModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                case 1:
                    return ulNumberOfCustomModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_RemoveCustomMode_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_RemoveCustomMode_Exit : TraceEvent
    {
        public int eReturnValue { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_RemoveCustomMode_Exit(Action<t_CSLBASE_RemoveCustomMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_RemoveCustomMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eReturnValue", eReturnValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eReturnValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eReturnValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_RemoveCustomMode_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReserveVideoBW_Entry : TraceEvent
    {
        public int Width { get { return GetInt32At(0); } }
        public int Height { get { return GetInt32At(4); } }
        public int Bpp { get { return GetInt32At(8); } }
        public int VideoType { get { return GetInt32At(12); } }
        public int OverlayPipe { get { return GetInt32At(16); } }
        public int SpritePipe { get { return GetInt32At(20); } }
        public GRM_VIDEO_FORMAT VideoFormat { get { return (GRM_VIDEO_FORMAT)GetInt32At(24); } }
        public int SubPictureWidth { get { return GetInt32At(28); } }
        public int SubPictureHeight { get { return GetInt32At(32); } }
        public int DxvaInstanceNum { get { return GetInt32At(36); } }
        public int ulCDClock { get { return GetInt32At(40); } }
        public int ulCurrentPixelClock { get { return GetInt32At(44); } }
        // Skipping Reserved

        #region Private
        internal t_CSLBASE_ReserveVideoBW_Entry(Action<t_CSLBASE_ReserveVideoBW_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 56));
            Debug.Assert(!(Version > 0 && EventDataLength < 56));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReserveVideoBW_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             XmlAttrib(sb, "Bpp", Bpp);
             XmlAttrib(sb, "VideoType", VideoType);
             XmlAttrib(sb, "OverlayPipe", OverlayPipe);
             XmlAttrib(sb, "SpritePipe", SpritePipe);
             XmlAttrib(sb, "VideoFormat", VideoFormat);
             XmlAttrib(sb, "SubPictureWidth", SubPictureWidth);
             XmlAttrib(sb, "SubPictureHeight", SubPictureHeight);
             XmlAttrib(sb, "DxvaInstanceNum", DxvaInstanceNum);
             XmlAttrib(sb, "ulCDClock", ulCDClock);
             XmlAttrib(sb, "ulCurrentPixelClock", ulCurrentPixelClock);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Width", "Height", "Bpp", "VideoType", "OverlayPipe", "SpritePipe", "VideoFormat", "SubPictureWidth", "SubPictureHeight", "DxvaInstanceNum", "ulCDClock", "ulCurrentPixelClock"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Width;
                case 1:
                    return Height;
                case 2:
                    return Bpp;
                case 3:
                    return VideoType;
                case 4:
                    return OverlayPipe;
                case 5:
                    return SpritePipe;
                case 6:
                    return VideoFormat;
                case 7:
                    return SubPictureWidth;
                case 8:
                    return SubPictureHeight;
                case 9:
                    return DxvaInstanceNum;
                case 10:
                    return ulCDClock;
                case 11:
                    return ulCurrentPixelClock;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReserveVideoBW_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReserveVideoBW_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ReserveVideoBW_Exit(Action<t_CSLBASE_ReserveVideoBW_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReserveVideoBW_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReserveVideoBW_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReTrainLink_Entry : TraceEvent
    {
        public int ulDisplayUid { get { return GetInt32At(0); } }
        public int ucLinkTrainingMethod { get { return GetByteAt(4); } }

        #region Private
        internal t_CSLBASE_ReTrainLink_Entry(Action<t_CSLBASE_ReTrainLink_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReTrainLink_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUid", ulDisplayUid);
             XmlAttrib(sb, "ucLinkTrainingMethod", ucLinkTrainingMethod);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUid", "ucLinkTrainingMethod"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUid;
                case 1:
                    return ucLinkTrainingMethod;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReTrainLink_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ReTrainLink_Exit : TraceEvent
    {
        public int ucLinkTrainingMethod { get { return GetByteAt(0); } }
        public bool bNeedPipeReprogramming { get { return GetInt32At(1) != 0; } }

        #region Private
        internal t_CSLBASE_ReTrainLink_Exit(Action<t_CSLBASE_ReTrainLink_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ReTrainLink_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucLinkTrainingMethod", ucLinkTrainingMethod);
             XmlAttrib(sb, "bNeedPipeReprogramming", bNeedPipeReprogramming);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucLinkTrainingMethod", "bNeedPipeReprogramming"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucLinkTrainingMethod;
                case 1:
                    return bNeedPipeReprogramming;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ReTrainLink_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ServiceConnectionStatusNotify_Exit : TraceEvent
    {
        public int ulVal { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ServiceConnectionStatusNotify_Exit(Action<t_CSLBASE_ServiceConnectionStatusNotify_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ServiceConnectionStatusNotify_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulVal", ulVal);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulVal"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulVal;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ServiceConnectionStatusNotify_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ServiceHotPlugInterrupt_Exit : TraceEvent
    {
        public int val { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ServiceHotPlugInterrupt_Exit(Action<t_CSLBASE_ServiceHotPlugInterrupt_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ServiceHotPlugInterrupt_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "val", val);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "val"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return val;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ServiceHotPlugInterrupt_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADBrightness_Entry : TraceEvent
    {
        public int uBrightness { get { return GetInt16At(0); } }

        #region Private
        internal t_CSLBASE_SetADBrightness_Entry(Action<t_CSLBASE_SetADBrightness_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADBrightness_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "uBrightness", uBrightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "uBrightness"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return uBrightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADBrightness_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADBrightness_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetADBrightness_Exit(Action<t_CSLBASE_SetADBrightness_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADBrightness_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADBrightness_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADLux_Entry : TraceEvent
    {
        public int usLux { get { return GetInt16At(0); } }

        #region Private
        internal t_CSLBASE_SetADLux_Entry(Action<t_CSLBASE_SetADLux_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADLux_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "usLux", usLux);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "usLux"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return usLux;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADLux_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADLux_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetADLux_Exit(Action<t_CSLBASE_SetADLux_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADLux_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADLux_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADState_Entry : TraceEvent
    {
        public bool bArg { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_SetADState_Entry(Action<t_CSLBASE_SetADState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bArg", bArg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bArg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bArg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetADState_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetADState_Exit(Action<t_CSLBASE_SetADState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetADState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetADState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetAudioData_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulPipeID { get { return GetInt32At(12); } }
        public int ulNumOfDisplays { get { return GetInt32At(16); } }
        public int ulOperationType { get { return GetInt32At(20); } }
        public int ucAudioState { get { return GetByteAt(24); } }
        public int bCPReady { get { return GetByteAt(25); } }
        public int bPDState { get { return GetByteAt(26); } }
        public int bIAState { get { return GetByteAt(27); } }
        public int bELDState { get { return GetByteAt(28); } }
        public AUDIO_CONFIG_TYPE eAudioType { get { return (AUDIO_CONFIG_TYPE)GetInt32At(29); } }
        public bool bMaster { get { return GetInt32At(33) != 0; } }

        #region Private
        internal t_CSLBASE_SetAudioData_Entry(Action<t_CSLBASE_SetAudioData_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 37));
            Debug.Assert(!(Version > 0 && EventDataLength < 37));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetAudioData_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulPipeID", ulPipeID);
             XmlAttrib(sb, "ulNumOfDisplays", ulNumOfDisplays);
             XmlAttrib(sb, "ulOperationType", ulOperationType);
             XmlAttrib(sb, "ucAudioState", ucAudioState);
             XmlAttrib(sb, "bCPReady", bCPReady);
             XmlAttrib(sb, "bPDState", bPDState);
             XmlAttrib(sb, "bIAState", bIAState);
             XmlAttrib(sb, "bELDState", bELDState);
             XmlAttrib(sb, "eAudioType", eAudioType);
             XmlAttrib(sb, "bMaster", bMaster);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulPipeID", "ulNumOfDisplays", "ulOperationType", "ucAudioState", "bCPReady", "bPDState", "bIAState", "bELDState", "eAudioType", "bMaster"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulPipeID;
                case 2:
                    return ulNumOfDisplays;
                case 3:
                    return ulOperationType;
                case 4:
                    return ucAudioState;
                case 5:
                    return bCPReady;
                case 6:
                    return bPDState;
                case 7:
                    return bIAState;
                case 8:
                    return bELDState;
                case 9:
                    return eAudioType;
                case 10:
                    return bMaster;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetAudioData_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetAudioData_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetAudioData_Exit(Action<t_CSLBASE_SetAudioData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetAudioData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetAudioData_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetAudioEncryptionPreference_Entry : TraceEvent
    {
        public PIPE_ID ePipeType { get { return (PIPE_ID)GetInt32At(0); } }
        public bool bHDCPStat { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_SetAudioEncryptionPreference_Entry(Action<t_CSLBASE_SetAudioEncryptionPreference_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetAudioEncryptionPreference_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ePipeType", ePipeType);
             XmlAttrib(sb, "bHDCPStat", bHDCPStat);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ePipeType", "bHDCPStat"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ePipeType;
                case 1:
                    return bHDCPStat;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetAudioEncryptionPreference_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetAudioEncryptionPreference_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetAudioEncryptionPreference_Exit(Action<t_CSLBASE_SetAudioEncryptionPreference_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetAudioEncryptionPreference_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetAudioEncryptionPreference_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetCompensation_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulCompensation { get { return GetInt32At(4); } }
        public int ulNewCustomCompX { get { return GetInt32At(8); } }
        public int ulNewCustomCompY { get { return GetInt32At(12); } }
        public bool bPostponeCompensationChange { get { return GetInt32At(16) != 0; } }
        public bool bSFRequest { get { return GetInt32At(20) != 0; } }
        public int ulYPosition { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_SetCompensation_Entry(Action<t_CSLBASE_SetCompensation_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetCompensation_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulCompensation", ulCompensation);
             XmlAttrib(sb, "ulNewCustomCompX", ulNewCustomCompX);
             XmlAttrib(sb, "ulNewCustomCompY", ulNewCustomCompY);
             XmlAttrib(sb, "bPostponeCompensationChange", bPostponeCompensationChange);
             XmlAttrib(sb, "bSFRequest", bSFRequest);
             XmlAttrib(sb, "ulYPosition", ulYPosition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulCompensation", "ulNewCustomCompX", "ulNewCustomCompY", "bPostponeCompensationChange", "bSFRequest", "ulYPosition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulCompensation;
                case 2:
                    return ulNewCustomCompX;
                case 3:
                    return ulNewCustomCompY;
                case 4:
                    return bPostponeCompensationChange;
                case 5:
                    return bSFRequest;
                case 6:
                    return ulYPosition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetCompensation_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetCustomScalingInfo_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulCustomScalingX { get { return GetInt32At(4); } }
        public int ulCustomScalingY { get { return GetInt32At(8); } }
        public CUSTOM_SCALING_OP_TYPE eCustonScalingOpType { get { return (CUSTOM_SCALING_OP_TYPE)GetInt32At(12); } }

        #region Private
        internal t_CSLBASE_SetCustomScalingInfo_Entry(Action<t_CSLBASE_SetCustomScalingInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetCustomScalingInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulCustomScalingX", ulCustomScalingX);
             XmlAttrib(sb, "ulCustomScalingY", ulCustomScalingY);
             XmlAttrib(sb, "eCustonScalingOpType", eCustonScalingOpType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulCustomScalingX", "ulCustomScalingY", "eCustonScalingOpType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulCustomScalingX;
                case 2:
                    return ulCustomScalingY;
                case 3:
                    return eCustonScalingOpType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetCustomScalingInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDisplayDevice_Entry : TraceEvent
    {
        public int ucDisplayPlaneToPipe { get { return GetByteAt(0); } }
        public int ulSize { get { return GetInt32At(3); } }
        public int ucOptions { get { return GetByteAt(7); } }
        public int ucForceExecute { get { return GetByteAt(8); } }
        public int ucDoNotTurnOffPanelPower { get { return GetByteAt(9); } }
        public int ucReserved { get { return GetByteAt(10); } }
        public bool bUpdateScratchPadRegs { get { return GetInt32At(11) != 0; } }

        #region Private
        internal t_CSLBASE_SetDisplayDevice_Entry(Action<t_CSLBASE_SetDisplayDevice_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 15));
            Debug.Assert(!(Version > 0 && EventDataLength < 15));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDisplayDevice_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucDisplayPlaneToPipe", ucDisplayPlaneToPipe);
             XmlAttrib(sb, "ulSize", ulSize);
             XmlAttrib(sb, "ucOptions", ucOptions);
             XmlAttrib(sb, "ucForceExecute", ucForceExecute);
             XmlAttrib(sb, "ucDoNotTurnOffPanelPower", ucDoNotTurnOffPanelPower);
             XmlAttrib(sb, "ucReserved", ucReserved);
             XmlAttrib(sb, "bUpdateScratchPadRegs", bUpdateScratchPadRegs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucDisplayPlaneToPipe", "ulSize", "ucOptions", "ucForceExecute", "ucDoNotTurnOffPanelPower", "ucReserved", "bUpdateScratchPadRegs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucDisplayPlaneToPipe;
                case 1:
                    return ulSize;
                case 2:
                    return ucOptions;
                case 3:
                    return ucForceExecute;
                case 4:
                    return ucDoNotTurnOffPanelPower;
                case 5:
                    return ucReserved;
                case 6:
                    return bUpdateScratchPadRegs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDisplayDevice_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDisplayPowerStateEntry : TraceEvent
    {
        public DEV_POWER_STATE PowerState { get { return (DEV_POWER_STATE)GetInt32At(0); } }
        public int nDisplays { get { return GetInt32At(4); } }
        public int ulDeviceConfig { get { return GetInt32At(8); } }
        public int ucConnectorIndex { get { return GetByteAt(12); } }

        #region Private
        internal t_CSLBASE_SetDisplayPowerStateEntry(Action<t_CSLBASE_SetDisplayPowerStateEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDisplayPowerStateEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PowerState", PowerState);
             XmlAttrib(sb, "nDisplays", nDisplays);
             XmlAttrib(sb, "ulDeviceConfig", ulDeviceConfig);
             XmlAttrib(sb, "ucConnectorIndex", ucConnectorIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PowerState", "nDisplays", "ulDeviceConfig", "ucConnectorIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PowerState;
                case 1:
                    return nDisplays;
                case 2:
                    return ulDeviceConfig;
                case 3:
                    return ucConnectorIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDisplayPowerStateEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDisplayStartEntry : TraceEvent
    {
        public int ulDisplayStart { get { return GetInt32At(0); } }
        public int ulPipeIndex { get { return GetInt32At(4); } }
        public int ulPlane { get { return GetInt32At(8); } }
        public PLANE_ORIENTATION ePlaneOrientation { get { return (PLANE_ORIENTATION)GetInt32At(12); } }
        public bool bIsASynchMMIOFlip { get { return GetInt32At(16) != 0; } }
        public int ulScanLineLength { get { return GetInt32At(20); } }
        public int ulAuxScanLineLength { get { return GetInt32At(24); } }
        public SB_PIXELFORMAT ePixelFormat { get { return (SB_PIXELFORMAT)GetInt32At(28); } }
        public bool bIsPlaneEncrypted { get { return GetInt32At(32) != 0; } }

        #region Private
        internal t_CSLBASE_SetDisplayStartEntry(Action<t_CSLBASE_SetDisplayStartEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDisplayStartEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayStart", ulDisplayStart);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "ulPlane", ulPlane);
             XmlAttrib(sb, "ePlaneOrientation", ePlaneOrientation);
             XmlAttrib(sb, "bIsASynchMMIOFlip", bIsASynchMMIOFlip);
             XmlAttrib(sb, "ulScanLineLength", ulScanLineLength);
             XmlAttrib(sb, "ulAuxScanLineLength", ulAuxScanLineLength);
             XmlAttrib(sb, "ePixelFormat", ePixelFormat);
             XmlAttrib(sb, "bIsPlaneEncrypted", bIsPlaneEncrypted);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayStart", "ulPipeIndex", "ulPlane", "ePlaneOrientation", "bIsASynchMMIOFlip", "ulScanLineLength", "ulAuxScanLineLength", "ePixelFormat", "bIsPlaneEncrypted"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayStart;
                case 1:
                    return ulPipeIndex;
                case 2:
                    return ulPlane;
                case 3:
                    return ePlaneOrientation;
                case 4:
                    return bIsASynchMMIOFlip;
                case 5:
                    return ulScanLineLength;
                case 6:
                    return ulAuxScanLineLength;
                case 7:
                    return ePixelFormat;
                case 8:
                    return bIsPlaneEncrypted;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDisplayStartEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDisplayStartMPOEntry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ucPipeIndex { get { return GetByteAt(4); } }
        public int uiPlaneCount { get { return GetInt32At(5); } }

        #region Private
        internal t_CSLBASE_SetDisplayStartMPOEntry(Action<t_CSLBASE_SetDisplayStartMPOEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDisplayStartMPOEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ucPipeIndex", ucPipeIndex);
             XmlAttrib(sb, "uiPlaneCount", uiPlaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ucPipeIndex", "uiPlaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ucPipeIndex;
                case 2:
                    return uiPlaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDisplayStartMPOEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDisplayStartExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetDisplayStartExit(Action<t_CSLBASE_SetDisplayStartExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDisplayStartExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDisplayStartExit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetDP12SinkListforEachPort_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int ePortType { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_SetDP12SinkListforEachPort_Exit(Action<t_CSLBASE_SetDP12SinkListforEachPort_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetDP12SinkListforEachPort_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "ePortType", ePortType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "ePortType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return ePortType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetDP12SinkListforEachPort_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetHDCPStatus_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public SB_HDCP_STATUS_TYPE eHDCPStatus { get { return (SB_HDCP_STATUS_TYPE)GetInt32At(4); } }
        public bool bAdapterLinkIntegrityFailed { get { return GetInt32At(8) != 0; } }
        public bool bAuthenticationInProgress { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_SetHDCPStatus_Entry(Action<t_CSLBASE_SetHDCPStatus_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetHDCPStatus_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "eHDCPStatus", eHDCPStatus);
             XmlAttrib(sb, "bAdapterLinkIntegrityFailed", bAdapterLinkIntegrityFailed);
             XmlAttrib(sb, "bAuthenticationInProgress", bAuthenticationInProgress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "eHDCPStatus", "bAdapterLinkIntegrityFailed", "bAuthenticationInProgress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return eHDCPStatus;
                case 2:
                    return bAdapterLinkIntegrityFailed;
                case 3:
                    return bAuthenticationInProgress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetHDCPStatus_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetHDCPStatus_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetHDCPStatus_Exit(Action<t_CSLBASE_SetHDCPStatus_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetHDCPStatus_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetHDCPStatus_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetModePState_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int PStateChangeType { get { return GetInt32At(4); } }
        public int DpsControlMode { get { return GetInt32At(8); } }
        public int DpsRRSelect { get { return GetInt32At(12); } }
        public int ulNumModeInfo { get { return GetInt32At(16); } }
        public bool bMediaRRActive { get { return GetInt32At(20) != 0; } }

        #region Private
        internal t_CSLBASE_SetModePState_Entry(Action<t_CSLBASE_SetModePState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetModePState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "PStateChangeType", PStateChangeType);
             XmlAttrib(sb, "DpsControlMode", DpsControlMode);
             XmlAttrib(sb, "DpsRRSelect", DpsRRSelect);
             XmlAttrib(sb, "ulNumModeInfo", ulNumModeInfo);
             XmlAttrib(sb, "bMediaRRActive", bMediaRRActive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "PStateChangeType", "DpsControlMode", "DpsRRSelect", "ulNumModeInfo", "bMediaRRActive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return PStateChangeType;
                case 2:
                    return DpsControlMode;
                case 3:
                    return DpsRRSelect;
                case 4:
                    return ulNumModeInfo;
                case 5:
                    return bMediaRRActive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetModePState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetModePState_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetModePState_Exit(Action<t_CSLBASE_SetModePState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetModePState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetModePState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetModeEntry : TraceEvent
    {
        public int ulSourceID { get { return GetInt32At(0); } }
        public int ulPipeIndex { get { return GetInt32At(4); } }
        public PLANE_ORIENTATION eOrientation { get { return (PLANE_ORIENTATION)GetInt32At(8); } }
        public int pipeOrientation { get { return GetInt32At(12); } }
        public bool bUseFastModeSet { get { return GetInt32At(16) != 0; } }
        public int usXResolution { get { return GetInt16At(20); } }
        public int usYResolution { get { return GetInt16At(22); } }
        public int usRefreshRate { get { return GetInt16At(24); } }
        public int ulRequestedOSModeX { get { return GetInt32At(26); } }
        public int ulRequestedOSModeY { get { return GetInt32At(30); } }

        #region Private
        internal t_CSLBASE_SetModeEntry(Action<t_CSLBASE_SetModeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 34));
            Debug.Assert(!(Version > 0 && EventDataLength < 34));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetModeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulSourceID", ulSourceID);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "eOrientation", eOrientation);
             XmlAttrib(sb, "pipeOrientation", pipeOrientation);
             XmlAttrib(sb, "bUseFastModeSet", bUseFastModeSet);
             XmlAttrib(sb, "usXResolution", usXResolution);
             XmlAttrib(sb, "usYResolution", usYResolution);
             XmlAttrib(sb, "usRefreshRate", usRefreshRate);
             XmlAttrib(sb, "ulRequestedOSModeX", ulRequestedOSModeX);
             XmlAttrib(sb, "ulRequestedOSModeY", ulRequestedOSModeY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulSourceID", "ulPipeIndex", "eOrientation", "pipeOrientation", "bUseFastModeSet", "usXResolution", "usYResolution", "usRefreshRate", "ulRequestedOSModeX", "ulRequestedOSModeY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulSourceID;
                case 1:
                    return ulPipeIndex;
                case 2:
                    return eOrientation;
                case 3:
                    return pipeOrientation;
                case 4:
                    return bUseFastModeSet;
                case 5:
                    return usXResolution;
                case 6:
                    return usYResolution;
                case 7:
                    return usRefreshRate;
                case 8:
                    return ulRequestedOSModeX;
                case 9:
                    return ulRequestedOSModeY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetModeEntry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetModeExit : TraceEvent
    {
        public int status { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetModeExit(Action<t_CSLBASE_SetModeExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetModeExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "status", status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetModeExit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetNVHGDisplays_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bIsDisplayConnected { get { return GetInt32At(4) != 0; } }
        public int ulEdidSize { get { return GetInt32At(8); } }
        public int ulMaxLaneCount { get { return GetInt32At(12); } }
        public int ulMaxLinkRate { get { return GetInt32At(16); } }
        public Address pvEdid { get { return GetAddressAt(20); } }

        #region Private
        internal t_CSLBASE_SetNVHGDisplays_Entry(Action<t_CSLBASE_SetNVHGDisplays_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetNVHGDisplays_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bIsDisplayConnected", bIsDisplayConnected);
             XmlAttrib(sb, "ulEdidSize", ulEdidSize);
             XmlAttrib(sb, "ulMaxLaneCount", ulMaxLaneCount);
             XmlAttrib(sb, "ulMaxLinkRate", ulMaxLinkRate);
             XmlAttribHex(sb, "pvEdid", pvEdid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bIsDisplayConnected", "ulEdidSize", "ulMaxLaneCount", "ulMaxLinkRate", "pvEdid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bIsDisplayConnected;
                case 2:
                    return ulEdidSize;
                case 3:
                    return ulMaxLaneCount;
                case 4:
                    return ulMaxLinkRate;
                case 5:
                    return pvEdid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetNVHGDisplays_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetNVHGDisplays_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetNVHGDisplays_Exit(Action<t_CSLBASE_SetNVHGDisplays_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetNVHGDisplays_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetNVHGDisplays_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPanelPower_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public bool bEnablePoweron { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_SetPanelPower_Entry(Action<t_CSLBASE_SetPanelPower_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPanelPower_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "bEnablePoweron", bEnablePoweron);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "bEnablePoweron"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return bEnablePoweron;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPanelPower_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPanelPower_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetPanelPower_Exit(Action<t_CSLBASE_SetPanelPower_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPanelPower_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPanelPower_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPlaneOrientation_Entry : TraceEvent
    {
        public int ulStartAddress { get { return GetInt32At(0); } }
        public int ulPlane { get { return GetInt32At(4); } }
        public PLANE_ORIENTATION ePlaneOrientation { get { return (PLANE_ORIENTATION)GetInt32At(8); } }
        public int ulPipeIndex { get { return GetInt32At(12); } }
        public bool bIsASynchMMIOFlip { get { return GetInt32At(16) != 0; } }

        #region Private
        internal t_CSLBASE_SetPlaneOrientation_Entry(Action<t_CSLBASE_SetPlaneOrientation_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPlaneOrientation_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStartAddress", ulStartAddress);
             XmlAttrib(sb, "ulPlane", ulPlane);
             XmlAttrib(sb, "ePlaneOrientation", ePlaneOrientation);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "bIsASynchMMIOFlip", bIsASynchMMIOFlip);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStartAddress", "ulPlane", "ePlaneOrientation", "ulPipeIndex", "bIsASynchMMIOFlip"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStartAddress;
                case 1:
                    return ulPlane;
                case 2:
                    return ePlaneOrientation;
                case 3:
                    return ulPipeIndex;
                case 4:
                    return bIsASynchMMIOFlip;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPlaneOrientation_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPlaneOrientation_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetPlaneOrientation_Exit(Action<t_CSLBASE_SetPlaneOrientation_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPlaneOrientation_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPlaneOrientation_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPNMPixelClkData_Entry : TraceEvent
    {
        public int ulOriginalPixelClk { get { return GetInt32At(0); } }
        public int ulSSCEnabledClk { get { return GetInt32At(4); } }
        public int ulSSCDisabledClk { get { return GetInt32At(8); } }

        #region Private
        internal t_CSLBASE_SetPNMPixelClkData_Entry(Action<t_CSLBASE_SetPNMPixelClkData_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPNMPixelClkData_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulOriginalPixelClk", ulOriginalPixelClk);
             XmlAttrib(sb, "ulSSCEnabledClk", ulSSCEnabledClk);
             XmlAttrib(sb, "ulSSCDisabledClk", ulSSCDisabledClk);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulOriginalPixelClk", "ulSSCEnabledClk", "ulSSCDisabledClk"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulOriginalPixelClk;
                case 1:
                    return ulSSCEnabledClk;
                case 2:
                    return ulSSCDisabledClk;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPNMPixelClkData_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPNMPixelClkData_Exit : TraceEvent
    {
        public int ulErrorStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetPNMPixelClkData_Exit(Action<t_CSLBASE_SetPNMPixelClkData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPNMPixelClkData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulErrorStatus", ulErrorStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulErrorStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulErrorStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPNMPixelClkData_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPsrState_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public SB_PSR_COMMAND ePsrCmd { get { return (SB_PSR_COMMAND)GetInt32At(4); } }
        public SB_PSR_MODE ePsrMode { get { return (SB_PSR_MODE)GetInt32At(8); } }
        public int ulIdenticalFramesCount { get { return GetInt32At(12); } }
        public int ulPipeInUse { get { return GetInt32At(16); } }

        #region Private
        internal t_CSLBASE_SetPsrState_Entry(Action<t_CSLBASE_SetPsrState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPsrState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ePsrCmd", ePsrCmd);
             XmlAttrib(sb, "ePsrMode", ePsrMode);
             XmlAttrib(sb, "ulIdenticalFramesCount", ulIdenticalFramesCount);
             XmlAttrib(sb, "ulPipeInUse", ulPipeInUse);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ePsrCmd", "ePsrMode", "ulIdenticalFramesCount", "ulPipeInUse"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ePsrCmd;
                case 2:
                    return ePsrMode;
                case 3:
                    return ulIdenticalFramesCount;
                case 4:
                    return ulPipeInUse;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPsrState_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetPsrState_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetPsrState_Exit(Action<t_CSLBASE_SetPsrState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetPsrState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetPsrState_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetS3DParameters_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int dwProcessId { get { return GetInt32At(4); } }
        public bool bEnableS3DFormat { get { return GetInt32At(8) != 0; } }
        public S3D_DISPLAY_TYPE eS3DDsiplay { get { return (S3D_DISPLAY_TYPE)GetInt32At(12); } }

        #region Private
        internal t_CSLBASE_SetS3DParameters_Entry(Action<t_CSLBASE_SetS3DParameters_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetS3DParameters_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "dwProcessId", dwProcessId);
             XmlAttrib(sb, "bEnableS3DFormat", bEnableS3DFormat);
             XmlAttrib(sb, "eS3DDsiplay", eS3DDsiplay);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "dwProcessId", "bEnableS3DFormat", "eS3DDsiplay"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return dwProcessId;
                case 2:
                    return bEnableS3DFormat;
                case 3:
                    return eS3DDsiplay;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetS3DParameters_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetS3DParameters_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetS3DParameters_Exit(Action<t_CSLBASE_SetS3DParameters_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetS3DParameters_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetS3DParameters_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetS3DPlaneParameters_Entry : TraceEvent
    {
        public int ulOverlayRFrameOffset { get { return GetInt32At(0); } }
        public int ulRFrameAddress { get { return GetInt32At(4); } }
        public int ulTiledLineYOffset { get { return GetInt32At(8); } }
        public int ulOverlayLinearOffset { get { return GetInt32At(12); } }
        public PIPE_ID ulPipe { get { return (PIPE_ID)GetInt32At(16); } }
        public PLANE_TYPE ulPlane { get { return (PLANE_TYPE)GetInt32At(20); } }
        public bool bUpdateOverlayOffsets { get { return GetInt32At(24) != 0; } }

        #region Private
        internal t_CSLBASE_SetS3DPlaneParameters_Entry(Action<t_CSLBASE_SetS3DPlaneParameters_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetS3DPlaneParameters_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulOverlayRFrameOffset", ulOverlayRFrameOffset);
             XmlAttrib(sb, "ulRFrameAddress", ulRFrameAddress);
             XmlAttrib(sb, "ulTiledLineYOffset", ulTiledLineYOffset);
             XmlAttrib(sb, "ulOverlayLinearOffset", ulOverlayLinearOffset);
             XmlAttrib(sb, "ulPipe", ulPipe);
             XmlAttrib(sb, "ulPlane", ulPlane);
             XmlAttrib(sb, "bUpdateOverlayOffsets", bUpdateOverlayOffsets);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulOverlayRFrameOffset", "ulRFrameAddress", "ulTiledLineYOffset", "ulOverlayLinearOffset", "ulPipe", "ulPlane", "bUpdateOverlayOffsets"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulOverlayRFrameOffset;
                case 1:
                    return ulRFrameAddress;
                case 2:
                    return ulTiledLineYOffset;
                case 3:
                    return ulOverlayLinearOffset;
                case 4:
                    return ulPipe;
                case 5:
                    return ulPlane;
                case 6:
                    return bUpdateOverlayOffsets;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetS3DPlaneParameters_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetS3DPlaneParameters_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetS3DPlaneParameters_Exit(Action<t_CSLBASE_SetS3DPlaneParameters_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetS3DPlaneParameters_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetS3DPlaneParameters_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetScratchFlags_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetScratchFlags_Exit(Action<t_CSLBASE_SetScratchFlags_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetScratchFlags_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetScratchFlags_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetVBIOSDispConfig_Entry : TraceEvent
    {
        public SET_VBIOS_DISP_CALLER_TYPE eSetVbiosDispConfigCaller { get { return (SET_VBIOS_DISP_CALLER_TYPE)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetVBIOSDispConfig_Entry(Action<t_CSLBASE_SetVBIOSDispConfig_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetVBIOSDispConfig_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eSetVbiosDispConfigCaller", eSetVbiosDispConfigCaller);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eSetVbiosDispConfigCaller"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eSetVbiosDispConfigCaller;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetVBIOSDispConfig_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetVBIOSDispConfig_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetVBIOSDispConfig_Exit(Action<t_CSLBASE_SetVBIOSDispConfig_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetVBIOSDispConfig_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetVBIOSDispConfig_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetVGAPipe_Entry : TraceEvent
    {
        public int ulPipeIndex { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetVGAPipe_Entry(Action<t_CSLBASE_SetVGAPipe_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetVGAPipe_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetVGAPipe_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SetVGAPipe_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SetVGAPipe_Exit(Action<t_CSLBASE_SetVGAPipe_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SetVGAPipe_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SetVGAPipe_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SimulateDP12Topology_Entry : TraceEvent
    {
        public PORT_TYPES ePortType { get { return (PORT_TYPES)GetInt32At(0); } }
        public SB_DP_SIMULATION_TOPOLOGY_CMD eCmd { get { return (SB_DP_SIMULATION_TOPOLOGY_CMD)GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_SimulateDP12Topology_Entry(Action<t_CSLBASE_SimulateDP12Topology_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SimulateDP12Topology_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ePortType", ePortType);
             XmlAttrib(sb, "eCmd", eCmd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ePortType", "eCmd"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ePortType;
                case 1:
                    return eCmd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SimulateDP12Topology_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SimulateDP12Topology_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int byImmediateDPCDSpace { get { return GetByteAt(4); } }
        public int ulNumMessages { get { return GetInt32At(18); } }

        #region Private
        internal t_CSLBASE_SimulateDP12Topology_Exit(Action<t_CSLBASE_SimulateDP12Topology_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 22));
            Debug.Assert(!(Version > 0 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SimulateDP12Topology_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "byImmediateDPCDSpace", byImmediateDPCDSpace);
             XmlAttrib(sb, "ulNumMessages", ulNumMessages);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "byImmediateDPCDSpace", "ulNumMessages"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return byImmediateDPCDSpace;
                case 2:
                    return ulNumMessages;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SimulateDP12Topology_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SwapPlanes_Entry : TraceEvent
    {
        public int ulPlaneSwap { get { return GetInt32At(0); } }
        public int bSwapPlaneAToPlaneB { get { return GetInt32At(4); } }
        public int bSwapPlaneBToPlaneA { get { return GetInt32At(8); } }
        public int bDisablePlaneAAfterSwap { get { return GetInt32At(12); } }
        public int bDisablePlaneBAfterSwap { get { return GetInt32At(16); } }
        public int bReservedSwapFlags { get { return GetInt32At(20); } }
        public int ulReserved { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_SwapPlanes_Entry(Action<t_CSLBASE_SwapPlanes_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SwapPlanes_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPlaneSwap", ulPlaneSwap);
             XmlAttrib(sb, "bSwapPlaneAToPlaneB", bSwapPlaneAToPlaneB);
             XmlAttrib(sb, "bSwapPlaneBToPlaneA", bSwapPlaneBToPlaneA);
             XmlAttrib(sb, "bDisablePlaneAAfterSwap", bDisablePlaneAAfterSwap);
             XmlAttrib(sb, "bDisablePlaneBAfterSwap", bDisablePlaneBAfterSwap);
             XmlAttrib(sb, "bReservedSwapFlags", bReservedSwapFlags);
             XmlAttrib(sb, "ulReserved", ulReserved);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPlaneSwap", "bSwapPlaneAToPlaneB", "bSwapPlaneBToPlaneA", "bDisablePlaneAAfterSwap", "bDisablePlaneBAfterSwap", "bReservedSwapFlags", "ulReserved"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPlaneSwap;
                case 1:
                    return bSwapPlaneAToPlaneB;
                case 2:
                    return bSwapPlaneBToPlaneA;
                case 3:
                    return bDisablePlaneAAfterSwap;
                case 4:
                    return bDisablePlaneBAfterSwap;
                case 5:
                    return bReservedSwapFlags;
                case 6:
                    return ulReserved;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SwapPlanes_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_SwapPlanes_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_SwapPlanes_Exit(Action<t_CSLBASE_SwapPlanes_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_SwapPlanes_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_SwapPlanes_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_TDRHandler_Entry : TraceEvent
    {
        public TDR_OPERATION eOperation { get { return (TDR_OPERATION)GetInt32At(0); } }
        public Address pOCABlobHdr { get { return GetAddressAt(4); } }
        public Address pDebugBuff { get { return GetAddressAt(HostOffset(8, 1)); } }
        public int ulDebugBufAvailSize { get { return GetInt32At(HostOffset(12, 2)); } }
        public int ulOutputSize { get { return GetInt32At(HostOffset(16, 2)); } }

        #region Private
        internal t_CSLBASE_TDRHandler_Entry(Action<t_CSLBASE_TDRHandler_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_TDRHandler_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eOperation", eOperation);
             XmlAttribHex(sb, "pOCABlobHdr", pOCABlobHdr);
             XmlAttribHex(sb, "pDebugBuff", pDebugBuff);
             XmlAttrib(sb, "ulDebugBufAvailSize", ulDebugBufAvailSize);
             XmlAttrib(sb, "ulOutputSize", ulOutputSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eOperation", "pOCABlobHdr", "pDebugBuff", "ulDebugBufAvailSize", "ulOutputSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eOperation;
                case 1:
                    return pOCABlobHdr;
                case 2:
                    return pDebugBuff;
                case 3:
                    return ulDebugBufAvailSize;
                case 4:
                    return ulOutputSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_TDRHandler_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_TDRHandler_Exit : TraceEvent
    {
        public int ulReturn { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_TDRHandler_Exit(Action<t_CSLBASE_TDRHandler_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_TDRHandler_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_TDRHandler_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_TrimMode_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_TrimMode_Exit(Action<t_CSLBASE_TrimMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_TrimMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_TrimMode_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateAndGetSinkCapabilites_Entry : TraceEvent
    {
        public int ulDisplayID { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_UpdateAndGetSinkCapabilites_Entry(Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateAndGetSinkCapabilites_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ucLinkRate { get { return GetByteAt(4); } }
        public int ucLaneCount { get { return GetByteAt(5); } }
        public int ucVoltage { get { return GetByteAt(6); } }
        public int ucPreemphasis { get { return GetByteAt(7); } }
        public bool bSSC { get { return GetInt32At(8) != 0; } }
        public int ulPipeIndex { get { return GetInt32At(12); } }
        public SB_DP_TRAINING_PATTERN eTrainingPattern { get { return (SB_DP_TRAINING_PATTERN)GetInt32At(16); } }
        public SUB_FUNC_TYPE eSubFuncType { get { return (SUB_FUNC_TYPE)GetInt32At(20); } }
        public int ulSourceID { get { return GetInt32At(24); } }

        #region Private
        internal t_CSLBASE_UpdateAndGetSinkCapabilites_Exit(Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucLinkRate", ucLinkRate);
             XmlAttrib(sb, "ucLaneCount", ucLaneCount);
             XmlAttrib(sb, "ucVoltage", ucVoltage);
             XmlAttrib(sb, "ucPreemphasis", ucPreemphasis);
             XmlAttrib(sb, "bSSC", bSSC);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             XmlAttrib(sb, "eTrainingPattern", eTrainingPattern);
             XmlAttrib(sb, "eSubFuncType", eSubFuncType);
             XmlAttrib(sb, "ulSourceID", ulSourceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucLinkRate", "ucLaneCount", "ucVoltage", "ucPreemphasis", "bSSC", "ulPipeIndex", "eTrainingPattern", "eSubFuncType", "ulSourceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucLinkRate;
                case 2:
                    return ucLaneCount;
                case 3:
                    return ucVoltage;
                case 4:
                    return ucPreemphasis;
                case 5:
                    return bSSC;
                case 6:
                    return ulPipeIndex;
                case 7:
                    return eTrainingPattern;
                case 8:
                    return eSubFuncType;
                case 9:
                    return ulSourceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateAndGetSinkCapabilites_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateCDClock_Entry : TraceEvent
    {
        public bool Arg { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_CSLBASE_UpdateCDClock_Entry(Action<t_CSLBASE_UpdateCDClock_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateCDClock_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Arg", Arg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Arg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Arg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateCDClock_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateCDClock_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_UpdateCDClock_Exit(Action<t_CSLBASE_UpdateCDClock_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateCDClock_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateCDClock_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateEncoderCapsInfo_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulScalingCaps { get { return GetInt32At(4); } }
        public bool bIsMCCSSupported { get { return GetInt32At(8) != 0; } }
        public bool bIsXVYCCSupported { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_CSLBASE_UpdateEncoderCapsInfo_Entry(Action<t_CSLBASE_UpdateEncoderCapsInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateEncoderCapsInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulScalingCaps", ulScalingCaps);
             XmlAttrib(sb, "bIsMCCSSupported", bIsMCCSSupported);
             XmlAttrib(sb, "bIsXVYCCSupported", bIsXVYCCSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulScalingCaps", "bIsMCCSSupported", "bIsXVYCCSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulScalingCaps;
                case 2:
                    return bIsMCCSSupported;
                case 3:
                    return bIsXVYCCSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateEncoderCapsInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateEncoderCapsInfo_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_UpdateEncoderCapsInfo_Exit(Action<t_CSLBASE_UpdateEncoderCapsInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateEncoderCapsInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateEncoderCapsInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateTPVSupportedModeList_Entry : TraceEvent
    {
        public int ulDisplayUID { get { return GetInt32At(0); } }
        public int ulNumModes { get { return GetInt32At(4); } }

        #region Private
        internal t_CSLBASE_UpdateTPVSupportedModeList_Entry(Action<t_CSLBASE_UpdateTPVSupportedModeList_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateTPVSupportedModeList_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayUID", ulDisplayUID);
             XmlAttrib(sb, "ulNumModes", ulNumModes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayUID", "ulNumModes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayUID;
                case 1:
                    return ulNumModes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateTPVSupportedModeList_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_UpdateTPVSupportedModeList_Exit : TraceEvent
    {
        public int ulRet { get { return GetInt32At(0); } }
        public int usXResolution { get { return GetInt16At(4); } }
        public int usYResolution { get { return GetInt16At(6); } }
        public int usColorBPP { get { return GetInt16At(8); } }
        public int usRefreshRate { get { return GetInt16At(10); } }
        public SB_PIXELFORMAT eSourcePixelFormat { get { return (SB_PIXELFORMAT)GetInt32At(12); } }
        public int usBlankActiveLines { get { return GetInt16At(16); } }

        #region Private
        internal t_CSLBASE_UpdateTPVSupportedModeList_Exit(Action<t_CSLBASE_UpdateTPVSupportedModeList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_UpdateTPVSupportedModeList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             XmlAttrib(sb, "usXResolution", usXResolution);
             XmlAttrib(sb, "usYResolution", usYResolution);
             XmlAttrib(sb, "usColorBPP", usColorBPP);
             XmlAttrib(sb, "usRefreshRate", usRefreshRate);
             XmlAttrib(sb, "eSourcePixelFormat", eSourcePixelFormat);
             XmlAttrib(sb, "usBlankActiveLines", usBlankActiveLines);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet", "usXResolution", "usYResolution", "usColorBPP", "usRefreshRate", "eSourcePixelFormat", "usBlankActiveLines"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                case 1:
                    return usXResolution;
                case 2:
                    return usYResolution;
                case 3:
                    return usColorBPP;
                case 4:
                    return usRefreshRate;
                case 5:
                    return eSourcePixelFormat;
                case 6:
                    return usBlankActiveLines;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_UpdateTPVSupportedModeList_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ValidateDispConfig_Entry : TraceEvent
    {
        public int ulNumPaths { get { return GetInt32At(0); } }
        public bool bIsSupported { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_ValidateDispConfig_Entry(Action<t_CSLBASE_ValidateDispConfig_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ValidateDispConfig_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumPaths", ulNumPaths);
             XmlAttrib(sb, "bIsSupported", bIsSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumPaths", "bIsSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumPaths;
                case 1:
                    return bIsSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ValidateDispConfig_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_ValidateDispConfig_Exit : TraceEvent
    {
        public GRM_STATUS ulRet { get { return (GRM_STATUS)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_ValidateDispConfig_Exit(Action<t_CSLBASE_ValidateDispConfig_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_ValidateDispConfig_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_ValidateDispConfig_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_VerifyMMIOAddressInRange_Entry : TraceEvent
    {
        public int Address { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_VerifyMMIOAddressInRange_Entry(Action<t_CSLBASE_VerifyMMIOAddressInRange_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_VerifyMMIOAddressInRange_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Address", Address);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Address;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_VerifyMMIOAddressInRange_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_VerifyMMIOAddressInRange_Exit : TraceEvent
    {
        public int ulStatus { get { return GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_VerifyMMIOAddressInRange_Exit(Action<t_CSLBASE_VerifyMMIOAddressInRange_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_VerifyMMIOAddressInRange_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_VerifyMMIOAddressInRange_Exit> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_WaitForVBlank_Entry : TraceEvent
    {
        public int ulPipe { get { return GetInt32At(0); } }
        public bool bWaitOnAnyPipeIfPrefrerredPipeDisabled { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_CSLBASE_WaitForVBlank_Entry(Action<t_CSLBASE_WaitForVBlank_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_WaitForVBlank_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             XmlAttrib(sb, "bWaitOnAnyPipeIfPrefrerredPipeDisabled", bWaitOnAnyPipeIfPrefrerredPipeDisabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe", "bWaitOnAnyPipeIfPrefrerredPipeDisabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                case 1:
                    return bWaitOnAnyPipeIfPrefrerredPipeDisabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_WaitForVBlank_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_WriteOpRegionMailBox_Entry : TraceEvent
    {
        public ACPIOPREGION_MAILBOX_TYPE eMailBoxType { get { return (ACPIOPREGION_MAILBOX_TYPE)GetInt32At(0); } }

        #region Private
        internal t_CSLBASE_WriteOpRegionMailBox_Entry(Action<t_CSLBASE_WriteOpRegionMailBox_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_WriteOpRegionMailBox_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eMailBoxType", eMailBoxType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eMailBoxType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eMailBoxType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_WriteOpRegionMailBox_Entry> m_target;
        #endregion
    }
    public sealed class t_CSLBASE_WriteOpRegionMailBox_Exit : TraceEvent
    {
        public int ulNumBytes { get { return GetInt32At(0); } }
        public Address pData { get { return GetAddressAt(4); } }
        public int ulReturn { get { return GetInt32At(HostOffset(8, 1)); } }

        #region Private
        internal t_CSLBASE_WriteOpRegionMailBox_Exit(Action<t_CSLBASE_WriteOpRegionMailBox_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CSLBASE_WriteOpRegionMailBox_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumBytes", ulNumBytes);
             XmlAttribHex(sb, "pData", pData);
             XmlAttrib(sb, "ulReturn", ulReturn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumBytes", "pData", "ulReturn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumBytes;
                case 1:
                    return pData;
                case 2:
                    return ulReturn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CSLBASE_WriteOpRegionMailBox_Exit> m_target;
        #endregion
    }
    public sealed class t_CUIEscapeEntry : TraceEvent
    {
        public int Flags { get { return GetInt32At(0); } }
        public int Opcode { get { return GetInt32At(4); } }

        #region Private
        internal t_CUIEscapeEntry(Action<t_CUIEscapeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CUIEscapeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "Opcode", Opcode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Flags", "Opcode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Flags;
                case 1:
                    return Opcode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CUIEscapeEntry> m_target;
        #endregion
    }
    public sealed class t_CxsrClearPlaneLPWms : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BaseAddress { get { return GetInt32At(8); } }

        #region Private
        internal t_CxsrClearPlaneLPWms(Action<t_CxsrClearPlaneLPWms> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CxsrClearPlaneLPWms>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BaseAddress", BaseAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BaseAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BaseAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CxsrClearPlaneLPWms> m_target;
        #endregion
    }
    public sealed class t_CxsrClientEventHandler : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Operation { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, DataSize); } }

        #region Private
        internal t_CxsrClientEventHandler(Action<t_CxsrClientEventHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CxsrClientEventHandler>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CxsrClientEventHandler> m_target;
        #endregion
    }
    public sealed class t_CxsrEnable : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Enable { get { return GetInt32At(8); } }

        #region Private
        internal t_CxsrEnable(Action<t_CxsrEnable> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CxsrEnable>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Enable", Enable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Enable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Enable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CxsrEnable> m_target;
        #endregion
    }
    public sealed class t_PcEventNotificationData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Operation { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, DataSize); } }

        #region Private
        internal t_PcEventNotificationData(Action<t_PcEventNotificationData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcEventNotificationData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcEventNotificationData> m_target;
        #endregion
    }
    public sealed class t_CxsrInitialize : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int InitStatus { get { return GetInt32At(8); } }

        #region Private
        internal t_CxsrInitialize(Action<t_CxsrInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CxsrInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CxsrInitialize> m_target;
        #endregion
    }
    public sealed class t_CxsrProgramPlaneLPWms : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BaseAddress { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, DataSize); } }

        #region Private
        internal t_CxsrProgramPlaneLPWms(Action<t_CxsrProgramPlaneLPWms> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CxsrProgramPlaneLPWms>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BaseAddress", BaseAddress);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BaseAddress", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BaseAddress;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CxsrProgramPlaneLPWms> m_target;
        #endregion
    }
    public sealed class t_DecoupledMMIOArgs : TraceEvent
    {
        public long DCR_Reg { get { return GetInt64At(0); } }
        public int MMIO_Offset { get { return GetInt32At(8); } }
        public OPERATION Operation { get { return (OPERATION)GetByteAt(12); } }
        public FW_ENGINE_TYPE Domain { get { return (FW_ENGINE_TYPE)GetByteAt(13); } }
        public int Data { get { return GetInt32At(14); } }

        #region Private
        internal t_DecoupledMMIOArgs(Action<t_DecoupledMMIOArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DecoupledMMIOArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DCR_Reg", DCR_Reg);
             XmlAttrib(sb, "MMIO_Offset", MMIO_Offset);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Domain", Domain);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DCR_Reg", "MMIO_Offset", "Operation", "Domain", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DCR_Reg;
                case 1:
                    return MMIO_Offset;
                case 2:
                    return Operation;
                case 3:
                    return Domain;
                case 4:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DecoupledMMIOArgs> m_target;
        #endregion
    }
    public sealed class t_DISPLAYIDPARSER_AddEDIDModeToList_Entry : TraceEvent
    {
        public bool bForceAdd { get { return GetInt32At(0) != 0; } }
        public bool bPreferredMode { get { return GetInt32At(4) != 0; } }
        public int usXResolution { get { return GetInt32At(8); } }
        public int usYResolution { get { return GetInt32At(12); } }
        public int eModeType { get { return GetInt32At(16); } }

        #region Private
        internal t_DISPLAYIDPARSER_AddEDIDModeToList_Entry(Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bForceAdd", bForceAdd);
             XmlAttrib(sb, "bPreferredMode", bPreferredMode);
             XmlAttrib(sb, "usXResolution", usXResolution);
             XmlAttrib(sb, "usYResolution", usYResolution);
             XmlAttrib(sb, "eModeType", eModeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bForceAdd", "bPreferredMode", "usXResolution", "usYResolution", "eModeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bForceAdd;
                case 1:
                    return bPreferredMode;
                case 2:
                    return usXResolution;
                case 3:
                    return usYResolution;
                case 4:
                    return eModeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Entry> m_target;
        #endregion
    }
    public sealed class t_DISPLAYIDPARSER_AddEDIDModeToList_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DISPLAYIDPARSER_AddEDIDModeToList_Exit(Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYIDPARSER_AddEDIDModeToList_Exit> m_target;
        #endregion
    }
    public sealed class t_DISPLAYIDPARSER_GetColorBitDepth_Exit : TraceEvent
    {
        public int ucSupportedbpc { get { return GetByteAt(0); } }
        public int eSupportedBPC { get { return GetInt32At(1); } }

        #region Private
        internal t_DISPLAYIDPARSER_GetColorBitDepth_Exit(Action<t_DISPLAYIDPARSER_GetColorBitDepth_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYIDPARSER_GetColorBitDepth_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucSupportedbpc", ucSupportedbpc);
             XmlAttrib(sb, "eSupportedBPC", eSupportedBPC);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucSupportedbpc", "eSupportedBPC"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucSupportedbpc;
                case 1:
                    return eSupportedBPC;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYIDPARSER_GetColorBitDepth_Exit> m_target;
        #endregion
    }
    public sealed class t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry : TraceEvent
    {
        public int eDataBlockTag { get { return GetInt32At(0); } }

        #region Private
        internal t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry(Action<t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eDataBlockTag", eDataBlockTag);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eDataBlockTag"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eDataBlockTag;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYIDPARSER_GetDisplayIDDataBlock_Entry> m_target;
        #endregion
    }
    public sealed class t_DISPLAYIDPARSER_GetVICList_Exit : TraceEvent
    {
        public long ulVICCount { get { return GetInt64At(0); } }

        #region Private
        internal t_DISPLAYIDPARSER_GetVICList_Exit(Action<t_DISPLAYIDPARSER_GetVICList_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYIDPARSER_GetVICList_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulVICCount", ulVICCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulVICCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulVICCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYIDPARSER_GetVICList_Exit> m_target;
        #endregion
    }
    public sealed class t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry : TraceEvent
    {
        public long dwHActive { get { return GetInt64At(0); } }
        public long dwVActive { get { return GetInt64At(8); } }
        public long dwHTotal { get { return GetInt64At(16); } }
        public long dwVTotal { get { return GetInt64At(24); } }
        public long dwHSyncStart { get { return GetInt64At(32); } }
        public long dwVSyncStart { get { return GetInt64At(40); } }
        public long dwHSyncEnd { get { return GetInt64At(48); } }
        public long dwVSyncEnd { get { return GetInt64At(56); } }
        public long dwHBlankStart { get { return GetInt64At(64); } }
        public long dwVBlankEnd { get { return GetInt64At(72); } }
        public long dwDotClock { get { return GetInt64At(80); } }

        #region Private
        internal t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry(Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 88));
            Debug.Assert(!(Version > 0 && EventDataLength < 88));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "dwHActive", dwHActive);
             XmlAttrib(sb, "dwVActive", dwVActive);
             XmlAttrib(sb, "dwHTotal", dwHTotal);
             XmlAttrib(sb, "dwVTotal", dwVTotal);
             XmlAttrib(sb, "dwHSyncStart", dwHSyncStart);
             XmlAttrib(sb, "dwVSyncStart", dwVSyncStart);
             XmlAttrib(sb, "dwHSyncEnd", dwHSyncEnd);
             XmlAttrib(sb, "dwVSyncEnd", dwVSyncEnd);
             XmlAttrib(sb, "dwHBlankStart", dwHBlankStart);
             XmlAttrib(sb, "dwVBlankEnd", dwVBlankEnd);
             XmlAttrib(sb, "dwDotClock", dwDotClock);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "dwHActive", "dwVActive", "dwHTotal", "dwVTotal", "dwHSyncStart", "dwVSyncStart", "dwHSyncEnd", "dwVSyncEnd", "dwHBlankStart", "dwVBlankEnd", "dwDotClock"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return dwHActive;
                case 1:
                    return dwVActive;
                case 2:
                    return dwHTotal;
                case 3:
                    return dwVTotal;
                case 4:
                    return dwHSyncStart;
                case 5:
                    return dwVSyncStart;
                case 6:
                    return dwHSyncEnd;
                case 7:
                    return dwVSyncEnd;
                case 8:
                    return dwHBlankStart;
                case 9:
                    return dwVBlankEnd;
                case 10:
                    return dwDotClock;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit(Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYINFOROUTINES_GetDTDFromTimingInfo_Exit> m_target;
        #endregion
    }
    public sealed class t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry : TraceEvent
    {
        public long dwHActive { get { return GetInt64At(0); } }
        public long dwVActive { get { return GetInt64At(8); } }
        public long dwHTotal { get { return GetInt64At(16); } }
        public long dwDotClock { get { return GetInt64At(24); } }
        public long ulFlags { get { return GetInt64At(32); } }

        #region Private
        internal t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry(Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "dwHActive", dwHActive);
             XmlAttrib(sb, "dwVActive", dwVActive);
             XmlAttrib(sb, "dwHTotal", dwHTotal);
             XmlAttrib(sb, "dwDotClock", dwDotClock);
             XmlAttrib(sb, "ulFlags", ulFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "dwHActive", "dwVActive", "dwHTotal", "dwDotClock", "ulFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return dwHActive;
                case 1:
                    return dwVActive;
                case 2:
                    return dwHTotal;
                case 3:
                    return dwDotClock;
                case 4:
                    return ulFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Entry> m_target;
        #endregion
    }
    public sealed class t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit : TraceEvent
    {
        public bool bSupportedMode { get { return GetInt32At(0) != 0; } }
        public long ulIndex { get { return GetInt64At(4); } }

        #region Private
        internal t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit(Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bSupportedMode", bSupportedMode);
             XmlAttrib(sb, "ulIndex", ulIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bSupportedMode", "ulIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bSupportedMode;
                case 1:
                    return ulIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DISPLAYINFOROUTINES_IsSupportedCeMode_Exit> m_target;
        #endregion
    }
    public sealed class t_DP_LinkTraining_FastLinkTraining : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int LinkRate { get { return GetInt32At(4); } }
        public int NumLanes { get { return GetInt32At(8); } }
        public bool MSTMode { get { return GetInt32At(12) != 0; } }
        public bool LinkTrained { get { return GetInt32At(16) != 0; } }
        public GMCH_DP_VOLTAGE_SWING_LEVEL SwingLevel { get { return (GMCH_DP_VOLTAGE_SWING_LEVEL)GetInt32At(20); } }
        public GMCH_DP_PREEMPHASIS_LEVEL PreEmpLevel { get { return (GMCH_DP_PREEMPHASIS_LEVEL)GetInt32At(24); } }
        public DP_LINK_TRAINING_STATUS Return { get { return (DP_LINK_TRAINING_STATUS)GetInt32At(28); } }

        #region Private
        internal t_DP_LinkTraining_FastLinkTraining(Action<t_DP_LinkTraining_FastLinkTraining> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DP_LinkTraining_FastLinkTraining>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "LinkRate", LinkRate);
             XmlAttrib(sb, "NumLanes", NumLanes);
             XmlAttrib(sb, "MSTMode", MSTMode);
             XmlAttrib(sb, "LinkTrained", LinkTrained);
             XmlAttrib(sb, "SwingLevel", SwingLevel);
             XmlAttrib(sb, "PreEmpLevel", PreEmpLevel);
             XmlAttrib(sb, "Return", Return);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "LinkRate", "NumLanes", "MSTMode", "LinkTrained", "SwingLevel", "PreEmpLevel", "Return"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return LinkRate;
                case 2:
                    return NumLanes;
                case 3:
                    return MSTMode;
                case 4:
                    return LinkTrained;
                case 5:
                    return SwingLevel;
                case 6:
                    return PreEmpLevel;
                case 7:
                    return Return;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DP_LinkTraining_FastLinkTraining> m_target;
        #endregion
    }
    public sealed class t_DP_LinkTraining_Start : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int LinkRate { get { return GetInt32At(4); } }
        public int NumLanes { get { return GetInt32At(8); } }
        public bool MSTMode { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_DP_LinkTraining_Start(Action<t_DP_LinkTraining_Start> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DP_LinkTraining_Start>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "LinkRate", LinkRate);
             XmlAttrib(sb, "NumLanes", NumLanes);
             XmlAttrib(sb, "MSTMode", MSTMode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "LinkRate", "NumLanes", "MSTMode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return LinkRate;
                case 2:
                    return NumLanes;
                case 3:
                    return MSTMode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DP_LinkTraining_Start> m_target;
        #endregion
    }
    public sealed class t_DP_LinkTraining_Stop : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public int LinkRate { get { return GetInt32At(4); } }
        public int NumLanes { get { return GetInt32At(8); } }
        public bool MSTMode { get { return GetInt32At(12) != 0; } }
        public bool LinkTrained { get { return GetInt32At(16) != 0; } }
        public GMCH_DP_VOLTAGE_SWING_LEVEL SwingLevel { get { return (GMCH_DP_VOLTAGE_SWING_LEVEL)GetInt32At(20); } }
        public GMCH_DP_PREEMPHASIS_LEVEL PreEmpLevel { get { return (GMCH_DP_PREEMPHASIS_LEVEL)GetInt32At(24); } }
        public DP_LINK_TRAINING_STATUS Return { get { return (DP_LINK_TRAINING_STATUS)GetInt32At(28); } }

        #region Private
        internal t_DP_LinkTraining_Stop(Action<t_DP_LinkTraining_Stop> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DP_LinkTraining_Stop>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "LinkRate", LinkRate);
             XmlAttrib(sb, "NumLanes", NumLanes);
             XmlAttrib(sb, "MSTMode", MSTMode);
             XmlAttrib(sb, "LinkTrained", LinkTrained);
             XmlAttrib(sb, "SwingLevel", SwingLevel);
             XmlAttrib(sb, "PreEmpLevel", PreEmpLevel);
             XmlAttrib(sb, "Return", Return);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "LinkRate", "NumLanes", "MSTMode", "LinkTrained", "SwingLevel", "PreEmpLevel", "Return"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return LinkRate;
                case 2:
                    return NumLanes;
                case 3:
                    return MSTMode;
                case 4:
                    return LinkTrained;
                case 5:
                    return SwingLevel;
                case 6:
                    return PreEmpLevel;
                case 7:
                    return Return;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DP_LinkTraining_Stop> m_target;
        #endregion
    }
    public sealed class t_DpsExternalEventHandler_Finish : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpsRestrictionsSize { get { return GetInt32At(8); } }
        public byte[] DpsRestrictions { get { return GetByteArrayAt(12, DpsRestrictionsSize); } }
        public int FSFlipAccumulator { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+12); } }

        #region Private
        internal t_DpsExternalEventHandler_Finish(Action<t_DpsExternalEventHandler_Finish> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRestrictionsSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRestrictionsSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsExternalEventHandler_Finish>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsRestrictionsSize", DpsRestrictionsSize);
             XmlAttrib(sb, "FSFlipAccumulator", FSFlipAccumulator);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsRestrictionsSize", "DpsRestrictions", "FSFlipAccumulator"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsRestrictionsSize;
                case 2:
                    return FSFlipAccumulator;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsExternalEventHandler_Finish> m_target;
        #endregion
    }
    public sealed class t_DpsGetUserDpsParams : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IsSupportForStaticDRRS { get { return GetInt32At(8); } }
        public int BaseLowRefreshRate { get { return GetInt32At(12); } }
        public int NumOfRefreshRates { get { return GetInt32At(16); } }
        public int DpsRefreshRateSize { get { return GetInt32At(20); } }
        public byte[] DpsRefreshRate { get { return GetByteArrayAt(24, DpsRefreshRateSize); } }
        public int LastUserSelectedModeSetRR { get { return GetInt32At(0+ (DpsRefreshRateSize*1)+24); } }

        #region Private
        internal t_DpsGetUserDpsParams(Action<t_DpsGetUserDpsParams> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRefreshRateSize*1)+28));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRefreshRateSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsGetUserDpsParams>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsSupportForStaticDRRS", IsSupportForStaticDRRS);
             XmlAttrib(sb, "BaseLowRefreshRate", BaseLowRefreshRate);
             XmlAttrib(sb, "NumOfRefreshRates", NumOfRefreshRates);
             XmlAttrib(sb, "DpsRefreshRateSize", DpsRefreshRateSize);
             XmlAttrib(sb, "LastUserSelectedModeSetRR", LastUserSelectedModeSetRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsSupportForStaticDRRS", "BaseLowRefreshRate", "NumOfRefreshRates", "DpsRefreshRateSize", "DpsRefreshRate", "LastUserSelectedModeSetRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsSupportForStaticDRRS;
                case 2:
                    return BaseLowRefreshRate;
                case 3:
                    return NumOfRefreshRates;
                case 4:
                    return DpsRefreshRateSize;
                case 5:
                    return LastUserSelectedModeSetRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsGetUserDpsParams> m_target;
        #endregion
    }
    public sealed class t_DpsInitialize : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IsDpsInitialized { get { return GetInt32At(8); } }
        public int IsLFPRefreshRateList { get { return GetInt32At(12); } }
        public int EnableCuiStaticDrrs { get { return GetInt32At(16); } }
        public int NumOfUserSelectableBaseLoRRs { get { return GetInt32At(20); } }
        public int DpsPanelType { get { return GetInt32At(24); } }
        public int UserSelectedBaseLoRR { get { return GetInt32At(28); } }
        public int MamSupported { get { return GetInt32At(32); } }
        public int InitStatus { get { return GetInt32At(36); } }

        #region Private
        internal t_DpsInitialize(Action<t_DpsInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsDpsInitialized", IsDpsInitialized);
             XmlAttrib(sb, "IsLFPRefreshRateList", IsLFPRefreshRateList);
             XmlAttrib(sb, "EnableCuiStaticDrrs", EnableCuiStaticDrrs);
             XmlAttrib(sb, "NumOfUserSelectableBaseLoRRs", NumOfUserSelectableBaseLoRRs);
             XmlAttrib(sb, "DpsPanelType", DpsPanelType);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             XmlAttrib(sb, "MamSupported", MamSupported);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsDpsInitialized", "IsLFPRefreshRateList", "EnableCuiStaticDrrs", "NumOfUserSelectableBaseLoRRs", "DpsPanelType", "UserSelectedBaseLoRR", "MamSupported", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsDpsInitialized;
                case 2:
                    return IsLFPRefreshRateList;
                case 3:
                    return EnableCuiStaticDrrs;
                case 4:
                    return NumOfUserSelectableBaseLoRRs;
                case 5:
                    return DpsPanelType;
                case 6:
                    return UserSelectedBaseLoRR;
                case 7:
                    return MamSupported;
                case 8:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsInitialize> m_target;
        #endregion
    }
    public sealed class t_DpsInitSupportedPStates : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int RefreshRateArgsSize { get { return GetInt32At(8); } }
        public byte[] RefreshRateArgs { get { return GetByteArrayAt(12, RefreshRateArgsSize); } }
        public int DpsAvailableStatesSize { get { return GetInt32At(0+ (RefreshRateArgsSize*1)+12); } }
        public byte[] DpsAvailableStates { get { return GetByteArrayAt(0+ (RefreshRateArgsSize*1)+16, DpsAvailableStatesSize); } }
        public int NumOfUserSelectableBaseLoRRs { get { return GetInt32At(0+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+16); } }
        public int UserSelectableBaseLoRRListSize { get { return GetInt32At(0+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+20); } }
        public byte[] UserSelectableBaseLoRRList { get { return GetByteArrayAt(0+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+24, UserSelectableBaseLoRRListSize); } }
        public int UserSelectedBaseLoRR { get { return GetInt32At(0+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+24); } }
        public int LastUserSelectedModeSetRRSize { get { return GetInt32At(0+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+28); } }
        public byte[] LastUserSelectedModeSetRR { get { return GetByteArrayAt(0+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+32, LastUserSelectedModeSetRRSize); } }
        public int IsDpsInitialized { get { return GetInt32At(0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+32); } }
        public int IsLFPRefreshRateList { get { return GetInt32At(0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+36); } }

        #region Private
        internal t_DpsInitSupportedPStates(Action<t_DpsInitSupportedPStates> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+40));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (LastUserSelectedModeSetRRSize*1)+ (UserSelectableBaseLoRRListSize*1)+ (DpsAvailableStatesSize*1)+ (RefreshRateArgsSize*1)+40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsInitSupportedPStates>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "RefreshRateArgsSize", RefreshRateArgsSize);
             XmlAttrib(sb, "DpsAvailableStatesSize", DpsAvailableStatesSize);
             XmlAttrib(sb, "NumOfUserSelectableBaseLoRRs", NumOfUserSelectableBaseLoRRs);
             XmlAttrib(sb, "UserSelectableBaseLoRRListSize", UserSelectableBaseLoRRListSize);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             XmlAttrib(sb, "LastUserSelectedModeSetRRSize", LastUserSelectedModeSetRRSize);
             XmlAttrib(sb, "IsDpsInitialized", IsDpsInitialized);
             XmlAttrib(sb, "IsLFPRefreshRateList", IsLFPRefreshRateList);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "RefreshRateArgsSize", "RefreshRateArgs", "DpsAvailableStatesSize", "DpsAvailableStates", "NumOfUserSelectableBaseLoRRs", "UserSelectableBaseLoRRListSize", "UserSelectableBaseLoRRList", "UserSelectedBaseLoRR", "LastUserSelectedModeSetRRSize", "LastUserSelectedModeSetRR", "IsDpsInitialized", "IsLFPRefreshRateList"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return RefreshRateArgsSize;
                case 2:
                    return DpsAvailableStatesSize;
                case 3:
                    return NumOfUserSelectableBaseLoRRs;
                case 4:
                    return UserSelectableBaseLoRRListSize;
                case 5:
                    return UserSelectedBaseLoRR;
                case 6:
                    return LastUserSelectedModeSetRRSize;
                case 7:
                    return IsDpsInitialized;
                case 8:
                    return IsLFPRefreshRateList;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsInitSupportedPStates> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetMaxLaneCount_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_GetMaxLaneCount_Entry(Action<t_DPSINK_GetMaxLaneCount_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetMaxLaneCount_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetMaxLaneCount_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetMaxLaneCount_Exit : TraceEvent
    {
        public int bRet { get { return GetByteAt(0); } }
        public int ucMaxLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_GetMaxLaneCount_Exit(Action<t_DPSINK_GetMaxLaneCount_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetMaxLaneCount_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucMaxLaneCount", ucMaxLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucMaxLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucMaxLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetMaxLaneCount_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetMaxLinkRate_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_GetMaxLinkRate_Entry(Action<t_DPSINK_GetMaxLinkRate_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetMaxLinkRate_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetMaxLinkRate_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetMaxLinkRate_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ucMaxLinkRate { get { return GetByteAt(4); } }

        #region Private
        internal t_DPSINK_GetMaxLinkRate_Exit(Action<t_DPSINK_GetMaxLinkRate_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetMaxLinkRate_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucMaxLinkRate", ucMaxLinkRate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucMaxLinkRate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucMaxLinkRate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetMaxLinkRate_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetSinkCount_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_GetSinkCount_Entry(Action<t_DPSINK_GetSinkCount_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetSinkCount_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetSinkCount_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetSinkCount_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ucSinkCount { get { return GetByteAt(4); } }

        #region Private
        internal t_DPSINK_GetSinkCount_Exit(Action<t_DPSINK_GetSinkCount_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetSinkCount_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucSinkCount", ucSinkCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucSinkCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucSinkCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetSinkCount_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetSinkType_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_GetSinkType_Entry(Action<t_DPSINK_GetSinkType_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetSinkType_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetSinkType_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_GetSinkType_Exit : TraceEvent
    {
        public int DPSINKTYPE { get { return GetInt32At(0); } }

        #region Private
        internal t_DPSINK_GetSinkType_Exit(Action<t_DPSINK_GetSinkType_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_GetSinkType_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DPSINKTYPE", DPSINKTYPE);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DPSINKTYPE"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DPSINKTYPE;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_GetSinkType_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_Initialize_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }

        #region Private
        internal t_DPSINK_Initialize_Entry(Action<t_DPSINK_Initialize_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_Initialize_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_Initialize_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_Initialize_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DPSINK_Initialize_Exit(Action<t_DPSINK_Initialize_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_Initialize_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_Initialize_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_SetTrainingLevel_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }
        public int eVoltageLevel { get { return GetInt32At(2); } }
        public bool bMaxCurrentLevel { get { return GetInt32At(6) != 0; } }
        public int eEmphasisLevel { get { return GetInt32At(10); } }
        public bool bMaxPreEmphasisLevel { get { return GetInt32At(14) != 0; } }

        #region Private
        internal t_DPSINK_SetTrainingLevel_Entry(Action<t_DPSINK_SetTrainingLevel_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_SetTrainingLevel_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             XmlAttrib(sb, "eVoltageLevel", eVoltageLevel);
             XmlAttrib(sb, "bMaxCurrentLevel", bMaxCurrentLevel);
             XmlAttrib(sb, "eEmphasisLevel", eEmphasisLevel);
             XmlAttrib(sb, "bMaxPreEmphasisLevel", bMaxPreEmphasisLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount", "eVoltageLevel", "bMaxCurrentLevel", "eEmphasisLevel", "bMaxPreEmphasisLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                case 2:
                    return eVoltageLevel;
                case 3:
                    return bMaxCurrentLevel;
                case 4:
                    return eEmphasisLevel;
                case 5:
                    return bMaxPreEmphasisLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_SetTrainingLevel_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_SetTrainingLevel_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DPSINK_SetTrainingLevel_Exit(Action<t_DPSINK_SetTrainingLevel_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_SetTrainingLevel_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_SetTrainingLevel_Exit> m_target;
        #endregion
    }
    public sealed class t_DPSINK_SetTrainingPattern_Entry : TraceEvent
    {
        public int ucCurrentSinkCount { get { return GetByteAt(0); } }
        public int ucCurrentLaneCount { get { return GetByteAt(1); } }
        public int eTrainingPattern { get { return GetInt32At(2); } }
        public bool bEnableScrambling { get { return GetInt32At(6) != 0; } }

        #region Private
        internal t_DPSINK_SetTrainingPattern_Entry(Action<t_DPSINK_SetTrainingPattern_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_SetTrainingPattern_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucCurrentSinkCount", ucCurrentSinkCount);
             XmlAttrib(sb, "ucCurrentLaneCount", ucCurrentLaneCount);
             XmlAttrib(sb, "eTrainingPattern", eTrainingPattern);
             XmlAttrib(sb, "bEnableScrambling", bEnableScrambling);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucCurrentSinkCount", "ucCurrentLaneCount", "eTrainingPattern", "bEnableScrambling"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucCurrentSinkCount;
                case 1:
                    return ucCurrentLaneCount;
                case 2:
                    return eTrainingPattern;
                case 3:
                    return bEnableScrambling;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_SetTrainingPattern_Entry> m_target;
        #endregion
    }
    public sealed class t_DPSINK_SetTrainingPattern_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DPSINK_SetTrainingPattern_Exit(Action<t_DPSINK_SetTrainingPattern_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DPSINK_SetTrainingPattern_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DPSINK_SetTrainingPattern_Exit> m_target;
        #endregion
    }
    public sealed class t_DpsMamEventHandler : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DpsRestrictionsSize { get { return GetInt32At(8); } }
        public byte[] DpsRestrictions { get { return GetByteArrayAt(12, DpsRestrictionsSize); } }
        public int FSFlipAccumulator { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+12); } }
        public int DpsMamCtxt_bMotionArtMit { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+16); } }
        public int DpsMamCtxt_bCursorMoved { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+20); } }
        public int DpsMamCtxt_bNotifyImmediate { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+24); } }
        public int MamEnabled { get { return GetInt32At(0+ (DpsRestrictionsSize*1)+28); } }

        #region Private
        internal t_DpsMamEventHandler(Action<t_DpsMamEventHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DpsRestrictionsSize*1)+32));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DpsRestrictionsSize*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsMamEventHandler>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsRestrictionsSize", DpsRestrictionsSize);
             XmlAttrib(sb, "FSFlipAccumulator", FSFlipAccumulator);
             XmlAttrib(sb, "DpsMamCtxt_bMotionArtMit", DpsMamCtxt_bMotionArtMit);
             XmlAttrib(sb, "DpsMamCtxt_bCursorMoved", DpsMamCtxt_bCursorMoved);
             XmlAttrib(sb, "DpsMamCtxt_bNotifyImmediate", DpsMamCtxt_bNotifyImmediate);
             XmlAttrib(sb, "MamEnabled", MamEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsRestrictionsSize", "DpsRestrictions", "FSFlipAccumulator", "DpsMamCtxt_bMotionArtMit", "DpsMamCtxt_bCursorMoved", "DpsMamCtxt_bNotifyImmediate", "MamEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsRestrictionsSize;
                case 2:
                    return FSFlipAccumulator;
                case 3:
                    return DpsMamCtxt_bMotionArtMit;
                case 4:
                    return DpsMamCtxt_bCursorMoved;
                case 5:
                    return DpsMamCtxt_bNotifyImmediate;
                case 6:
                    return MamEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsMamEventHandler> m_target;
        #endregion
    }
    public sealed class t_DpsMamInitialize : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int MamEnabled { get { return GetInt32At(8); } }
        public long ExpireTime { get { return GetInt64At(12); } }
        public int DpsMamCtxt_bMotionArtMit { get { return GetInt32At(20); } }
        public int DpsMamCtxt_bCursorMoved { get { return GetInt32At(24); } }
        public int DpsMamCtxt_bNotifyImmediate { get { return GetInt32At(28); } }

        #region Private
        internal t_DpsMamInitialize(Action<t_DpsMamInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsMamInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "MamEnabled", MamEnabled);
             XmlAttrib(sb, "ExpireTime", ExpireTime);
             XmlAttrib(sb, "DpsMamCtxt_bMotionArtMit", DpsMamCtxt_bMotionArtMit);
             XmlAttrib(sb, "DpsMamCtxt_bCursorMoved", DpsMamCtxt_bCursorMoved);
             XmlAttrib(sb, "DpsMamCtxt_bNotifyImmediate", DpsMamCtxt_bNotifyImmediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "MamEnabled", "ExpireTime", "DpsMamCtxt_bMotionArtMit", "DpsMamCtxt_bCursorMoved", "DpsMamCtxt_bNotifyImmediate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return MamEnabled;
                case 2:
                    return ExpireTime;
                case 3:
                    return DpsMamCtxt_bMotionArtMit;
                case 4:
                    return DpsMamCtxt_bCursorMoved;
                case 5:
                    return DpsMamCtxt_bNotifyImmediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsMamInitialize> m_target;
        #endregion
    }
    public sealed class t_DpsMamStartTimer : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public long ExpireTime { get { return GetInt64At(8); } }

        #region Private
        internal t_DpsMamStartTimer(Action<t_DpsMamStartTimer> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsMamStartTimer>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ExpireTime", ExpireTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ExpireTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ExpireTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsMamStartTimer> m_target;
        #endregion
    }
    public sealed class t_DpsMamWorkItemCallback : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int HwDev_MamData_bCursorMoved { get { return GetInt32At(8); } }

        #region Private
        internal t_DpsMamWorkItemCallback(Action<t_DpsMamWorkItemCallback> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsMamWorkItemCallback>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "HwDev_MamData_bCursorMoved", HwDev_MamData_bCursorMoved);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "HwDev_MamData_bCursorMoved"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return HwDev_MamData_bCursorMoved;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsMamWorkItemCallback> m_target;
        #endregion
    }
    public sealed class t_DpsModeArgs : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }
        public int PStateType { get { return GetInt32At(0+ (DataSize*1)+12); } }

        #region Private
        internal t_DpsModeArgs(Action<t_DpsModeArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsModeArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "PStateType", PStateType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data", "PStateType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                case 2:
                    return PStateType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsModeArgs> m_target;
        #endregion
    }
    public sealed class t_DpsSetUserDpsParams : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int UserSelectedBaseLoRR { get { return GetInt32At(8); } }

        #region Private
        internal t_DpsSetUserDpsParams(Action<t_DpsSetUserDpsParams> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpsSetUserDpsParams>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "UserSelectedBaseLoRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return UserSelectedBaseLoRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpsSetUserDpsParams> m_target;
        #endregion
    }
    public sealed class t_DpstAlgorithmResultData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BacklightAdjust { get { return GetInt32At(8); } }
        public int IEDataSize { get { return GetInt32At(12); } }
        public byte[] IEData { get { return GetByteArrayAt(16, IEDataSize); } }

        #region Private
        internal t_DpstAlgorithmResultData(Action<t_DpstAlgorithmResultData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (IEDataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (IEDataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstAlgorithmResultData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BacklightAdjust", BacklightAdjust);
             XmlAttrib(sb, "IEDataSize", IEDataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BacklightAdjust", "IEDataSize", "IEData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BacklightAdjust;
                case 2:
                    return IEDataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstAlgorithmResultData> m_target;
        #endregion
    }
    public sealed class t_DpstClientEventHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_DpstClientEventHandlerData(Action<t_DpstClientEventHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstClientEventHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstClientEventHandlerData> m_target;
        #endregion
    }
    public sealed class t_DpstHistDpcWorkItemCallbackData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Pipe { get { return GetInt32At(8); } }

        #region Private
        internal t_DpstHistDpcWorkItemCallbackData(Action<t_DpstHistDpcWorkItemCallbackData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistDpcWorkItemCallbackData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Pipe", Pipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Pipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Pipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistDpcWorkItemCallbackData> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramDisableData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlAddress { get { return GetInt32At(8); } }
        public int ControlData { get { return GetInt32At(12); } }
        public int GuardbandAddress { get { return GetInt32At(16); } }
        public int GuardbandData { get { return GetInt32At(20); } }

        #region Private
        internal t_DpstHistogramDisableData(Action<t_DpstHistogramDisableData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramDisableData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlAddress", ControlAddress);
             XmlAttrib(sb, "ControlData", ControlData);
             XmlAttrib(sb, "GuardbandAddress", GuardbandAddress);
             XmlAttrib(sb, "GuardbandData", GuardbandData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlAddress", "ControlData", "GuardbandAddress", "GuardbandData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlAddress;
                case 2:
                    return ControlData;
                case 3:
                    return GuardbandAddress;
                case 4:
                    return GuardbandData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramDisableData> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramEnableData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int GuardbandAddress { get { return GetInt32At(8); } }
        public int GuardbandData { get { return GetInt32At(12); } }

        #region Private
        internal t_DpstHistogramEnableData(Action<t_DpstHistogramEnableData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramEnableData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "GuardbandAddress", GuardbandAddress);
             XmlAttrib(sb, "GuardbandData", GuardbandData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "GuardbandAddress", "GuardbandData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return GuardbandAddress;
                case 2:
                    return GuardbandData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramEnableData> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramEnable_Gen6_Data : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlAddress { get { return GetInt32At(8); } }
        public int ControlData { get { return GetInt32At(12); } }

        #region Private
        internal t_DpstHistogramEnable_Gen6_Data(Action<t_DpstHistogramEnable_Gen6_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramEnable_Gen6_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlAddress", ControlAddress);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlAddress", "ControlData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlAddress;
                case 2:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramEnable_Gen6_Data> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramGetStatusData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_DpstHistogramGetStatusData(Action<t_DpstHistogramGetStatusData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramGetStatusData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramGetStatusData> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramResetData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int GuardbandAddress { get { return GetInt32At(8); } }
        public int GuardbandData { get { return GetInt32At(12); } }

        #region Private
        internal t_DpstHistogramResetData(Action<t_DpstHistogramResetData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramResetData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "GuardbandAddress", GuardbandAddress);
             XmlAttrib(sb, "GuardbandData", GuardbandData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "GuardbandAddress", "GuardbandData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return GuardbandAddress;
                case 2:
                    return GuardbandData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramResetData> m_target;
        #endregion
    }
    public sealed class t_DpstHistogramUpdateGuardbandData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int GuardbandAddress { get { return GetInt32At(8); } }
        public int GuardbandData { get { return GetInt32At(12); } }

        #region Private
        internal t_DpstHistogramUpdateGuardbandData(Action<t_DpstHistogramUpdateGuardbandData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstHistogramUpdateGuardbandData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "GuardbandAddress", GuardbandAddress);
             XmlAttrib(sb, "GuardbandData", GuardbandData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "GuardbandAddress", "GuardbandData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return GuardbandAddress;
                case 2:
                    return GuardbandData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstHistogramUpdateGuardbandData> m_target;
        #endregion
    }
    public sealed class t_DpstInitialize : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int AlgorithmDataSize { get { return GetInt32At(8); } }
        public byte[] AlgorithmData { get { return GetByteArrayAt(12, AlgorithmDataSize); } }
        public int InitStatus { get { return GetInt32At(0+ (AlgorithmDataSize*1)+12); } }

        #region Private
        internal t_DpstInitialize(Action<t_DpstInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (AlgorithmDataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (AlgorithmDataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "AlgorithmDataSize", AlgorithmDataSize);
             XmlAttrib(sb, "InitStatus", InitStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "AlgorithmDataSize", "AlgorithmData", "InitStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return AlgorithmDataSize;
                case 2:
                    return InitStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstInitialize> m_target;
        #endregion
    }
    public sealed class t_DpstProgramDietRegsData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] IERegData { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_DpstProgramDietRegsData(Action<t_DpstProgramDietRegsData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DpstProgramDietRegsData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "IERegData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DpstProgramDietRegsData> m_target;
        #endregion
    }
    public sealed class t_PcVbiState : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int VBlankInterruptEnable { get { return GetInt32At(8); } }

        #region Private
        internal t_PcVbiState(Action<t_PcVbiState> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcVbiState>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "VBlankInterruptEnable", VBlankInterruptEnable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "VBlankInterruptEnable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return VBlankInterruptEnable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcVbiState> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiBlcSetBacklightOptimizationData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int OptimizationLevel { get { return GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiBlcSetBacklightOptimizationData(Action<t_DxgkDdiBlcSetBacklightOptimizationData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiBlcSetBacklightOptimizationData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "OptimizationLevel", OptimizationLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "OptimizationLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return OptimizationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiBlcSetBacklightOptimizationData> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiBlcSetBrightnessData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Brightness { get { return GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiBlcSetBrightnessData(Action<t_DxgkDdiBlcSetBrightnessData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiBlcSetBrightnessData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Brightness", Brightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Brightness"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Brightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiBlcSetBrightnessData> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiBlcSetBrightnessStateData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BrightnessState { get { return GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiBlcSetBrightnessStateData(Action<t_DxgkDdiBlcSetBrightnessStateData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiBlcSetBrightnessStateData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "BrightnessState", BrightnessState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BrightnessState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return BrightnessState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiBlcSetBrightnessStateData> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info : TraceEvent
    {
        public int TotalPlaneCount { get { return GetInt32At(0); } }
        public int SourceID { get { return GetInt32At(4); } }
        public int LayerIndex1 { get { return GetInt32At(8); } }
        public long PresentId1 { get { return GetInt64At(12); } }
        public int MaxImmediateFlipLine1 { get { return GetInt32At(20); } }
        public int eMPOBlend1 { get { return GetInt32At(24); } }
        public int eColorSpace1 { get { return GetInt32At(28); } }
        public int MPOFlags1 { get { return GetInt32At(32); } }
        public IGFX_ROTATION HWOrientation1 { get { return (IGFX_ROTATION)GetInt32At(36); } }
        public long SrcRecttop1 { get { return GetInt64At(40); } }
        public long SrcRectbottom1 { get { return GetInt64At(48); } }
        public long SrcRectleft1 { get { return GetInt64At(56); } }
        public long SrcRectright1 { get { return GetInt64At(64); } }
        public int LayerIndex2 { get { return GetInt32At(72); } }
        public long PresentId2 { get { return GetInt64At(76); } }
        public int MaxImmediateFlipLine2 { get { return GetInt32At(84); } }
        public int eMPOBlend2 { get { return GetInt32At(88); } }
        public int eColorSpace2 { get { return GetInt32At(92); } }
        public int MPOFlags2 { get { return GetInt32At(96); } }
        public IGFX_ROTATION HWOrientation2 { get { return (IGFX_ROTATION)GetInt32At(100); } }
        public long SrcRecttop2 { get { return GetInt64At(104); } }
        public long SrcRectbottom2 { get { return GetInt64At(112); } }
        public long SrcRectleft2 { get { return GetInt64At(120); } }
        public long SrcRectright2 { get { return GetInt64At(128); } }
        public int LayerIndex3 { get { return GetInt32At(136); } }
        public long PresentId3 { get { return GetInt64At(140); } }
        public int MaxImmediateFlipLine3 { get { return GetInt32At(148); } }
        public int eMPOBlend3 { get { return GetInt32At(152); } }
        public int eColorSpace3 { get { return GetInt32At(156); } }
        public int MPOFlags3 { get { return GetInt32At(160); } }
        public IGFX_ROTATION HWOrientation3 { get { return (IGFX_ROTATION)GetInt32At(164); } }
        public long SrcRecttop3 { get { return GetInt64At(168); } }
        public long SrcRectbottom3 { get { return GetInt64At(176); } }
        public long SrcRectleft3 { get { return GetInt64At(184); } }
        public long SrcRectright3 { get { return GetInt64At(192); } }

        #region Private
        internal t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info(Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 200));
            Debug.Assert(!(Version > 0 && EventDataLength < 200));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TotalPlaneCount", TotalPlaneCount);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "LayerIndex1", LayerIndex1);
             XmlAttrib(sb, "PresentId1", PresentId1);
             XmlAttrib(sb, "MaxImmediateFlipLine1", MaxImmediateFlipLine1);
             XmlAttrib(sb, "eMPOBlend1", eMPOBlend1);
             XmlAttrib(sb, "eColorSpace1", eColorSpace1);
             XmlAttrib(sb, "MPOFlags1", MPOFlags1);
             XmlAttrib(sb, "HWOrientation1", HWOrientation1);
             XmlAttrib(sb, "SrcRecttop1", SrcRecttop1);
             XmlAttrib(sb, "SrcRectbottom1", SrcRectbottom1);
             XmlAttrib(sb, "SrcRectleft1", SrcRectleft1);
             XmlAttrib(sb, "SrcRectright1", SrcRectright1);
             XmlAttrib(sb, "LayerIndex2", LayerIndex2);
             XmlAttrib(sb, "PresentId2", PresentId2);
             XmlAttrib(sb, "MaxImmediateFlipLine2", MaxImmediateFlipLine2);
             XmlAttrib(sb, "eMPOBlend2", eMPOBlend2);
             XmlAttrib(sb, "eColorSpace2", eColorSpace2);
             XmlAttrib(sb, "MPOFlags2", MPOFlags2);
             XmlAttrib(sb, "HWOrientation2", HWOrientation2);
             XmlAttrib(sb, "SrcRecttop2", SrcRecttop2);
             XmlAttrib(sb, "SrcRectbottom2", SrcRectbottom2);
             XmlAttrib(sb, "SrcRectleft2", SrcRectleft2);
             XmlAttrib(sb, "SrcRectright2", SrcRectright2);
             XmlAttrib(sb, "LayerIndex3", LayerIndex3);
             XmlAttrib(sb, "PresentId3", PresentId3);
             XmlAttrib(sb, "MaxImmediateFlipLine3", MaxImmediateFlipLine3);
             XmlAttrib(sb, "eMPOBlend3", eMPOBlend3);
             XmlAttrib(sb, "eColorSpace3", eColorSpace3);
             XmlAttrib(sb, "MPOFlags3", MPOFlags3);
             XmlAttrib(sb, "HWOrientation3", HWOrientation3);
             XmlAttrib(sb, "SrcRecttop3", SrcRecttop3);
             XmlAttrib(sb, "SrcRectbottom3", SrcRectbottom3);
             XmlAttrib(sb, "SrcRectleft3", SrcRectleft3);
             XmlAttrib(sb, "SrcRectright3", SrcRectright3);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TotalPlaneCount", "SourceID", "LayerIndex1", "PresentId1", "MaxImmediateFlipLine1", "eMPOBlend1", "eColorSpace1", "MPOFlags1", "HWOrientation1", "SrcRecttop1", "SrcRectbottom1", "SrcRectleft1", "SrcRectright1", "LayerIndex2", "PresentId2", "MaxImmediateFlipLine2", "eMPOBlend2", "eColorSpace2", "MPOFlags2", "HWOrientation2", "SrcRecttop2", "SrcRectbottom2", "SrcRectleft2", "SrcRectright2", "LayerIndex3", "PresentId3", "MaxImmediateFlipLine3", "eMPOBlend3", "eColorSpace3", "MPOFlags3", "HWOrientation3", "SrcRecttop3", "SrcRectbottom3", "SrcRectleft3", "SrcRectright3"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TotalPlaneCount;
                case 1:
                    return SourceID;
                case 2:
                    return LayerIndex1;
                case 3:
                    return PresentId1;
                case 4:
                    return MaxImmediateFlipLine1;
                case 5:
                    return eMPOBlend1;
                case 6:
                    return eColorSpace1;
                case 7:
                    return MPOFlags1;
                case 8:
                    return HWOrientation1;
                case 9:
                    return SrcRecttop1;
                case 10:
                    return SrcRectbottom1;
                case 11:
                    return SrcRectleft1;
                case 12:
                    return SrcRectright1;
                case 13:
                    return LayerIndex2;
                case 14:
                    return PresentId2;
                case 15:
                    return MaxImmediateFlipLine2;
                case 16:
                    return eMPOBlend2;
                case 17:
                    return eColorSpace2;
                case 18:
                    return MPOFlags2;
                case 19:
                    return HWOrientation2;
                case 20:
                    return SrcRecttop2;
                case 21:
                    return SrcRectbottom2;
                case 22:
                    return SrcRectleft2;
                case 23:
                    return SrcRectright2;
                case 24:
                    return LayerIndex3;
                case 25:
                    return PresentId3;
                case 26:
                    return MaxImmediateFlipLine3;
                case 27:
                    return eMPOBlend3;
                case 28:
                    return eColorSpace3;
                case 29:
                    return MPOFlags3;
                case 30:
                    return HWOrientation3;
                case 31:
                    return SrcRecttop3;
                case 32:
                    return SrcRectbottom3;
                case 33:
                    return SrcRectleft3;
                case 34:
                    return SrcRectright3;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlay3Info> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiCheckMultiPlaneOverlaySupport3 : TraceEvent
    {
        public bool Supported { get { return GetInt32At(0) != 0; } }
        public int FailingPlane { get { return GetInt32At(4); } }
        public bool TryAgain { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_DxgkDdiCheckMultiPlaneOverlaySupport3(Action<t_DxgkDdiCheckMultiPlaneOverlaySupport3> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiCheckMultiPlaneOverlaySupport3>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Supported", Supported);
             XmlAttrib(sb, "FailingPlane", FailingPlane);
             XmlAttrib(sb, "TryAgain", TryAgain);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Supported", "FailingPlane", "TryAgain"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Supported;
                case 1:
                    return FailingPlane;
                case 2:
                    return TryAgain;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiCheckMultiPlaneOverlaySupport3> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiCheckMultiPlaneOverlaySupportEntry : TraceEvent
    {
        public int NoOfPlanes { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiCheckMultiPlaneOverlaySupportEntry(Action<t_DxgkDdiCheckMultiPlaneOverlaySupportEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiCheckMultiPlaneOverlaySupportEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NoOfPlanes", NoOfPlanes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NoOfPlanes"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NoOfPlanes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiCheckMultiPlaneOverlaySupportEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiCheckMultiPlaneOverlaySupportExit : TraceEvent
    {
        public bool Supported { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DxgkDdiCheckMultiPlaneOverlaySupportExit(Action<t_DxgkDdiCheckMultiPlaneOverlaySupportExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiCheckMultiPlaneOverlaySupportExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Supported", Supported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Supported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Supported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiCheckMultiPlaneOverlaySupportExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiCollectDbgInfo : TraceEvent
    {
        public int Reason { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiCollectDbgInfo(Action<t_DxgkDdiCollectDbgInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiCollectDbgInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiCollectDbgInfo> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiCollectDbgInfo_Analysis : TraceEvent
    {
        public bool VSyncTimeout { get { return GetInt32At(0) != 0; } }
        public bool VBIEnablingError { get { return GetInt32At(4) != 0; } }
        public bool VBIGenError { get { return GetInt32At(8) != 0; } }
        public bool VBIRepError { get { return GetInt32At(12) != 0; } }
        public bool VBIWrongSrcAddrReported { get { return GetInt32At(16) != 0; } }
        public bool VBIWrongTgtIdReported { get { return GetInt32At(20) != 0; } }
        public int MPSB_AnalysisResults { get { return GetInt32At(24); } }
        public int KMR_AnalysisResults { get { return GetInt32At(28); } }
        public int GMM_AnalysisResults { get { return GetInt32At(32); } }
        public int GRM_AnalysisResults { get { return GetInt32At(36); } }
        public int PC_AnalysisResults { get { return GetInt32At(40); } }

        #region Private
        internal t_DxgkDdiCollectDbgInfo_Analysis(Action<t_DxgkDdiCollectDbgInfo_Analysis> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 44));
            Debug.Assert(!(Version > 0 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiCollectDbgInfo_Analysis>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VSyncTimeout", VSyncTimeout);
             XmlAttrib(sb, "VBIEnablingError", VBIEnablingError);
             XmlAttrib(sb, "VBIGenError", VBIGenError);
             XmlAttrib(sb, "VBIRepError", VBIRepError);
             XmlAttrib(sb, "VBIWrongSrcAddrReported", VBIWrongSrcAddrReported);
             XmlAttrib(sb, "VBIWrongTgtIdReported", VBIWrongTgtIdReported);
             XmlAttrib(sb, "MPSB_AnalysisResults", MPSB_AnalysisResults);
             XmlAttrib(sb, "KMR_AnalysisResults", KMR_AnalysisResults);
             XmlAttrib(sb, "GMM_AnalysisResults", GMM_AnalysisResults);
             XmlAttrib(sb, "GRM_AnalysisResults", GRM_AnalysisResults);
             XmlAttrib(sb, "PC_AnalysisResults", PC_AnalysisResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VSyncTimeout", "VBIEnablingError", "VBIGenError", "VBIRepError", "VBIWrongSrcAddrReported", "VBIWrongTgtIdReported", "MPSB_AnalysisResults", "KMR_AnalysisResults", "GMM_AnalysisResults", "GRM_AnalysisResults", "PC_AnalysisResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VSyncTimeout;
                case 1:
                    return VBIEnablingError;
                case 2:
                    return VBIGenError;
                case 3:
                    return VBIRepError;
                case 4:
                    return VBIWrongSrcAddrReported;
                case 5:
                    return VBIWrongTgtIdReported;
                case 6:
                    return MPSB_AnalysisResults;
                case 7:
                    return KMR_AnalysisResults;
                case 8:
                    return GMM_AnalysisResults;
                case 9:
                    return GRM_AnalysisResults;
                case 10:
                    return PC_AnalysisResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiCollectDbgInfo_Analysis> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiControlInterruptEntry : TraceEvent
    {
        public DXGK_INTERRUPT_TYPE InterruptType { get { return (DXGK_INTERRUPT_TYPE)GetInt32At(0); } }
        public bool Enable { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_DxgkDdiControlInterruptEntry(Action<t_DxgkDdiControlInterruptEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiControlInterruptEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterruptType", InterruptType);
             XmlAttrib(sb, "Enable", Enable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterruptType", "Enable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterruptType;
                case 1:
                    return Enable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiControlInterruptEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiControlInterrupt2Entry : TraceEvent
    {
        public DXGK_INTERRUPT_TYPE InterruptType { get { return (DXGK_INTERRUPT_TYPE)GetInt32At(0); } }
        public DXGK_INTERRUPT_STATE InterruptState { get { return (DXGK_INTERRUPT_STATE)GetInt32At(4); } }
        public DXGK_CRTC_VSYNC_STATE CrtVsyncState { get { return (DXGK_CRTC_VSYNC_STATE)GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiControlInterrupt2Entry(Action<t_DxgkDdiControlInterrupt2Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiControlInterrupt2Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterruptType", InterruptType);
             XmlAttrib(sb, "InterruptState", InterruptState);
             XmlAttrib(sb, "CrtVsyncState", CrtVsyncState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterruptType", "InterruptState", "CrtVsyncState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterruptType;
                case 1:
                    return InterruptState;
                case 2:
                    return CrtVsyncState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiControlInterrupt2Entry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiControlModeBehavior_Info : TraceEvent
    {
        public DXGK_MODE_BEHAVIOR_FLAGS OS_bPrioritizeHDR { get { return (DXGK_MODE_BEHAVIOR_FLAGS)GetInt32At(0); } }
        public DXGK_MODE_BEHAVIOR_FLAGS Satisfied { get { return (DXGK_MODE_BEHAVIOR_FLAGS)GetInt32At(4); } }
        public DXGK_MODE_BEHAVIOR_FLAGS NotSatisfied { get { return (DXGK_MODE_BEHAVIOR_FLAGS)GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiControlModeBehavior_Info(Action<t_DxgkDdiControlModeBehavior_Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiControlModeBehavior_Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OS_bPrioritizeHDR", OS_bPrioritizeHDR);
             XmlAttrib(sb, "Satisfied", Satisfied);
             XmlAttrib(sb, "NotSatisfied", NotSatisfied);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OS_bPrioritizeHDR", "Satisfied", "NotSatisfied"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OS_bPrioritizeHDR;
                case 1:
                    return Satisfied;
                case 2:
                    return NotSatisfied;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiControlModeBehavior_Info> m_target;
        #endregion
    }
    public sealed class t_EVCMInfo : TraceEvent
    {
        public DisplayConfig DisplayConfig { get { return (DisplayConfig)GetInt32At(0); } }
        public int NoOfPaths { get { return GetInt32At(4); } }

        #region Private
        internal t_EVCMInfo(Action<t_EVCMInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EVCMInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DisplayConfig", DisplayConfig);
             XmlAttrib(sb, "NoOfPaths", NoOfPaths);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayConfig", "NoOfPaths"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayConfig;
                case 1:
                    return NoOfPaths;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EVCMInfo> m_target;
        #endregion
    }
    public sealed class t_EVCMSourceInfo : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public int LowestX { get { return GetInt32At(4); } }
        public int LowestY { get { return GetInt32At(8); } }
        public int HighestX { get { return GetInt32At(12); } }
        public int HighestY { get { return GetInt32At(16); } }

        #region Private
        internal t_EVCMSourceInfo(Action<t_EVCMSourceInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EVCMSourceInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "LowestX", LowestX);
             XmlAttrib(sb, "LowestY", LowestY);
             XmlAttrib(sb, "HighestX", HighestX);
             XmlAttrib(sb, "HighestY", HighestY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "LowestX", "LowestY", "HighestX", "HighestY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return LowestX;
                case 2:
                    return LowestY;
                case 3:
                    return HighestX;
                case 4:
                    return HighestY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EVCMSourceInfo> m_target;
        #endregion
    }
    public sealed class t_EVCMEntry : TraceEvent
    {
        public D3DKMDT_ENUMCOFUNCMODALITY_PIVOT_TYPE EnumPivotType { get { return (D3DKMDT_ENUMCOFUNCMODALITY_PIVOT_TYPE)GetInt32At(0); } }
        public int EnumPivotSourceID { get { return GetInt32At(4); } }
        public int EnumPivotTargetID { get { return GetInt32At(8); } }

        #region Private
        internal t_EVCMEntry(Action<t_EVCMEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EVCMEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EnumPivotType", EnumPivotType);
             XmlAttrib(sb, "EnumPivotSourceID", EnumPivotSourceID);
             XmlAttrib(sb, "EnumPivotTargetID", EnumPivotTargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnumPivotType", "EnumPivotSourceID", "EnumPivotTargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnumPivotType;
                case 1:
                    return EnumPivotSourceID;
                case 2:
                    return EnumPivotTargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EVCMEntry> m_target;
        #endregion
    }
    public sealed class t_EVCMTargetInfo : TraceEvent
    {
        public int TargetId { get { return GetInt32At(0); } }
        public int LowestX { get { return GetInt32At(4); } }
        public int LowestY { get { return GetInt32At(8); } }
        public int HighestX { get { return GetInt32At(12); } }
        public int HighestY { get { return GetInt32At(16); } }

        #region Private
        internal t_EVCMTargetInfo(Action<t_EVCMTargetInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EVCMTargetInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "LowestX", LowestX);
             XmlAttrib(sb, "LowestY", LowestY);
             XmlAttrib(sb, "HighestX", HighestX);
             XmlAttrib(sb, "HighestY", HighestY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "LowestX", "LowestY", "HighestX", "HighestY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return LowestX;
                case 2:
                    return LowestY;
                case 3:
                    return HighestX;
                case 4:
                    return HighestY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EVCMTargetInfo> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiGetScanLineEntry : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiGetScanLineEntry(Action<t_DxgkDdiGetScanLineEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiGetScanLineEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiGetScanLineEntry> m_target;
        #endregion
    }
    public sealed class t_ISVInfo : TraceEvent
    {
        public DisplayConfig DispConfig { get { return (DisplayConfig)GetInt32At(0); } }
        public int NoOfPaths { get { return GetInt32At(4); } }

        #region Private
        internal t_ISVInfo(Action<t_ISVInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ISVInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DispConfig", DispConfig);
             XmlAttrib(sb, "NoOfPaths", NoOfPaths);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DispConfig", "NoOfPaths"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DispConfig;
                case 1:
                    return NoOfPaths;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ISVInfo> m_target;
        #endregion
    }
    public sealed class t_ISVPathInfo : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public int TargetId { get { return GetInt32At(4); } }
        public int SourceX { get { return GetInt32At(8); } }
        public int SourceY { get { return GetInt32At(12); } }
        public int TargetX { get { return GetInt32At(16); } }
        public int TargetY { get { return GetInt32At(20); } }

        #region Private
        internal t_ISVPathInfo(Action<t_ISVPathInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ISVPathInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SourceX", SourceX);
             XmlAttrib(sb, "SourceY", SourceY);
             XmlAttrib(sb, "TargetX", TargetX);
             XmlAttrib(sb, "TargetY", TargetY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "TargetId", "SourceX", "SourceY", "TargetX", "TargetY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return TargetId;
                case 2:
                    return SourceX;
                case 3:
                    return SourceY;
                case 4:
                    return TargetX;
                case 5:
                    return TargetY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ISVPathInfo> m_target;
        #endregion
    }
    public sealed class t_ISVExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public bool IsVidPnSupported { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_ISVExit(Action<t_ISVExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ISVExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "IsVidPnSupported", IsVidPnSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "IsVidPnSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return IsVidPnSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ISVExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiNotifyAcpiEventEntry : TraceEvent
    {
        public DXGK_EVENT_TYPE EventType { get { return (DXGK_EVENT_TYPE)GetInt32At(0); } }
        public int Event { get { return GetInt32At(4); } }

        #region Private
        internal t_DxgkDdiNotifyAcpiEventEntry(Action<t_DxgkDdiNotifyAcpiEventEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiNotifyAcpiEventEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "Event"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiNotifyAcpiEventEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiPresentDisplayOnly : TraceEvent
    {
        public int SourceID { get { return GetInt32At(0); } }
        public Address pSourceAddress { get { return GetAddressAt(4); } }
        public int Status { get { return GetInt32At(HostOffset(8, 1)); } }

        #region Private
        internal t_DxgkDdiPresentDisplayOnly(Action<t_DxgkDdiPresentDisplayOnly> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiPresentDisplayOnly>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttribHex(sb, "pSourceAddress", pSourceAddress);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceID", "pSourceAddress", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceID;
                case 1:
                    return pSourceAddress;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiPresentDisplayOnly> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiQueryAdapterInfo : TraceEvent
    {
        public DXGK_QUERYADAPTERINFOTYPE Type { get { return (DXGK_QUERYADAPTERINFOTYPE)GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiQueryAdapterInfo(Action<t_DxgkDdiQueryAdapterInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiQueryAdapterInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiQueryAdapterInfo> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiQueryChildStatusEntry : TraceEvent
    {
        public int ChildUid { get { return GetInt32At(0); } }
        public DXGK_CHILD_STATUS_TYPE TypeOfStatus { get { return (DXGK_CHILD_STATUS_TYPE)GetInt32At(4); } }

        #region Private
        internal t_DxgkDdiQueryChildStatusEntry(Action<t_DxgkDdiQueryChildStatusEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiQueryChildStatusEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ChildUid", ChildUid);
             XmlAttrib(sb, "TypeOfStatus", TypeOfStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChildUid", "TypeOfStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChildUid;
                case 1:
                    return TypeOfStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiQueryChildStatusEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiQueryDeviceDescriptorEntry : TraceEvent
    {
        public int ChildUid { get { return GetInt32At(0); } }
        public int DescriptorOffset { get { return GetInt32At(4); } }
        public int DescriptorLength { get { return GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiQueryDeviceDescriptorEntry(Action<t_DxgkDdiQueryDeviceDescriptorEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiQueryDeviceDescriptorEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ChildUid", ChildUid);
             XmlAttrib(sb, "DescriptorOffset", DescriptorOffset);
             XmlAttrib(sb, "DescriptorLength", DescriptorLength);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChildUid", "DescriptorOffset", "DescriptorLength"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChildUid;
                case 1:
                    return DescriptorOffset;
                case 2:
                    return DescriptorLength;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiQueryDeviceDescriptorEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiQueryInterfaceEntry : TraceEvent
    {
        public Guid InterfaceType { get { return GetGuidAt(0); } }
        public int Version { get { return GetInt16At(16); } }

        #region Private
        internal t_DxgkDdiQueryInterfaceEntry(Action<t_DxgkDdiQueryInterfaceEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiQueryInterfaceEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterfaceType", InterfaceType);
             XmlAttrib(sb, "Version", Version);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterfaceType", "Version"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterfaceType;
                case 1:
                    return Version;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiQueryInterfaceEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiQueryInterfaceExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiQueryInterfaceExit(Action<t_DxgkDdiQueryInterfaceExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiQueryInterfaceExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiQueryInterfaceExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetPointerShapeEntry : TraceEvent
    {
        public POINTERSHAPE_FLAGS Flags { get { return (POINTERSHAPE_FLAGS)GetInt32At(0); } }
        public int Width { get { return GetInt32At(4); } }
        public int Height { get { return GetInt32At(8); } }
        public int Pitch { get { return GetInt32At(12); } }
        public int SourceId { get { return GetInt32At(16); } }
        public int XHot { get { return GetInt32At(20); } }
        public int YHot { get { return GetInt32At(24); } }

        #region Private
        internal t_DxgkDdiSetPointerShapeEntry(Action<t_DxgkDdiSetPointerShapeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetPointerShapeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             XmlAttrib(sb, "Pitch", Pitch);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "XHot", XHot);
             XmlAttrib(sb, "YHot", YHot);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Flags", "Width", "Height", "Pitch", "SourceId", "XHot", "YHot"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Flags;
                case 1:
                    return Width;
                case 2:
                    return Height;
                case 3:
                    return Pitch;
                case 4:
                    return SourceId;
                case 5:
                    return XHot;
                case 6:
                    return YHot;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetPointerShapeEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetPointerShapeExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiSetPointerShapeExit(Action<t_DxgkDdiSetPointerShapeExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetPointerShapeExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetPointerShapeExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetPowerComponentFStateEntry : TraceEvent
    {
        public int ComponentIndex { get { return GetInt32At(0); } }
        public int FState { get { return GetInt32At(4); } }

        #region Private
        internal t_DxgkDdiSetPowerComponentFStateEntry(Action<t_DxgkDdiSetPowerComponentFStateEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetPowerComponentFStateEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ComponentIndex", ComponentIndex);
             XmlAttrib(sb, "FState", FState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ComponentIndex", "FState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ComponentIndex;
                case 1:
                    return FState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetPowerComponentFStateEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkddiSetPowerStateEntry : TraceEvent
    {
        public int DeviceUid { get { return GetInt32At(0); } }
        public DEVICE_POWER_STATE DevicePowerState { get { return (DEVICE_POWER_STATE)GetInt32At(4); } }
        public POWER_ACTION ActionType { get { return (POWER_ACTION)GetInt32At(8); } }

        #region Private
        internal t_DxgkddiSetPowerStateEntry(Action<t_DxgkddiSetPowerStateEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkddiSetPowerStateEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DeviceUid", DeviceUid);
             XmlAttrib(sb, "DevicePowerState", DevicePowerState);
             XmlAttrib(sb, "ActionType", ActionType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceUid", "DevicePowerState", "ActionType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceUid;
                case 1:
                    return DevicePowerState;
                case 2:
                    return ActionType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkddiSetPowerStateEntry> m_target;
        #endregion
    }
    public sealed class t_SetVidpnSourceAddressEntry : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public Address hAllocation { get { return GetAddressAt(4); } }
        public long PrimaryAddress { get { return GetInt64At(HostOffset(8, 1)); } }
        public int PrimarySegment { get { return GetInt32At(HostOffset(16, 1)); } }
        public int Duration { get { return GetInt32At(HostOffset(20, 1)); } }

        #region Private
        internal t_SetVidpnSourceAddressEntry(Action<t_SetVidpnSourceAddressEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetVidpnSourceAddressEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttribHex(sb, "hAllocation", hAllocation);
             XmlAttrib(sb, "PrimaryAddress", PrimaryAddress);
             XmlAttrib(sb, "PrimarySegment", PrimarySegment);
             XmlAttrib(sb, "Duration", Duration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "hAllocation", "PrimaryAddress", "PrimarySegment", "Duration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return hAllocation;
                case 2:
                    return PrimaryAddress;
                case 3:
                    return PrimarySegment;
                case 4:
                    return Duration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetVidpnSourceAddressEntry> m_target;
        #endregion
    }
    public sealed class t_SSAMPO3_pPostComposition : TraceEvent
    {
        public int SourceID { get { return GetInt32At(0); } }
        public IGFX_ROTATION eHWOrientation1 { get { return (IGFX_ROTATION)GetInt32At(4); } }
        public int SrcRecttop1 { get { return GetInt32At(8); } }
        public int SrcRectbottom1 { get { return GetInt32At(12); } }
        public int SrcRectleft1 { get { return GetInt32At(16); } }
        public int SrcRectright1 { get { return GetInt32At(20); } }
        public IGFX_ROTATION eHWOrientation2 { get { return (IGFX_ROTATION)GetInt32At(24); } }
        public int SrcRecttop2 { get { return GetInt32At(28); } }
        public int SrcRectbottom2 { get { return GetInt32At(32); } }
        public int SrcRectleft2 { get { return GetInt32At(36); } }
        public int SrcRectright2 { get { return GetInt32At(40); } }
        public IGFX_ROTATION eHWOrientation3 { get { return (IGFX_ROTATION)GetInt32At(44); } }
        public int SrcRecttop3 { get { return GetInt32At(48); } }
        public int SrcRectbottom3 { get { return GetInt32At(52); } }
        public int SrcRectleft3 { get { return GetInt32At(56); } }
        public int SrcRectright3 { get { return GetInt32At(60); } }

        #region Private
        internal t_SSAMPO3_pPostComposition(Action<t_SSAMPO3_pPostComposition> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 64));
            Debug.Assert(!(Version > 0 && EventDataLength < 64));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SSAMPO3_pPostComposition>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "eHWOrientation1", eHWOrientation1);
             XmlAttrib(sb, "SrcRecttop1", SrcRecttop1);
             XmlAttrib(sb, "SrcRectbottom1", SrcRectbottom1);
             XmlAttrib(sb, "SrcRectleft1", SrcRectleft1);
             XmlAttrib(sb, "SrcRectright1", SrcRectright1);
             XmlAttrib(sb, "eHWOrientation2", eHWOrientation2);
             XmlAttrib(sb, "SrcRecttop2", SrcRecttop2);
             XmlAttrib(sb, "SrcRectbottom2", SrcRectbottom2);
             XmlAttrib(sb, "SrcRectleft2", SrcRectleft2);
             XmlAttrib(sb, "SrcRectright2", SrcRectright2);
             XmlAttrib(sb, "eHWOrientation3", eHWOrientation3);
             XmlAttrib(sb, "SrcRecttop3", SrcRecttop3);
             XmlAttrib(sb, "SrcRectbottom3", SrcRectbottom3);
             XmlAttrib(sb, "SrcRectleft3", SrcRectleft3);
             XmlAttrib(sb, "SrcRectright3", SrcRectright3);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceID", "eHWOrientation1", "SrcRecttop1", "SrcRectbottom1", "SrcRectleft1", "SrcRectright1", "eHWOrientation2", "SrcRecttop2", "SrcRectbottom2", "SrcRectleft2", "SrcRectright2", "eHWOrientation3", "SrcRecttop3", "SrcRectbottom3", "SrcRectleft3", "SrcRectright3"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceID;
                case 1:
                    return eHWOrientation1;
                case 2:
                    return SrcRecttop1;
                case 3:
                    return SrcRectbottom1;
                case 4:
                    return SrcRectleft1;
                case 5:
                    return SrcRectright1;
                case 6:
                    return eHWOrientation2;
                case 7:
                    return SrcRecttop2;
                case 8:
                    return SrcRectbottom2;
                case 9:
                    return SrcRectleft2;
                case 10:
                    return SrcRectright2;
                case 11:
                    return eHWOrientation3;
                case 12:
                    return SrcRecttop3;
                case 13:
                    return SrcRectbottom3;
                case 14:
                    return SrcRectleft3;
                case 15:
                    return SrcRectright3;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SSAMPO3_pPostComposition> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry : TraceEvent
    {
        public int SourceID { get { return GetInt32At(0); } }
        public int Flags { get { return GetInt32At(4); } }
        public int PlaneCount { get { return GetInt32At(8); } }
        public int Duration { get { return GetInt32At(12); } }

        #region Private
        internal t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry(Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PlaneCount", PlaneCount);
             XmlAttrib(sb, "Duration", Duration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceID", "Flags", "PlaneCount", "Duration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceID;
                case 1:
                    return Flags;
                case 2:
                    return PlaneCount;
                case 3:
                    return Duration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetVidPnSourceAddressWithMultiPlaneOverlayEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetVidPnSourceVisibilityEntry : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public bool Visible { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_DxgkDdiSetVidPnSourceVisibilityEntry(Action<t_DxgkDdiSetVidPnSourceVisibilityEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetVidPnSourceVisibilityEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "Visible", Visible);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "Visible"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return Visible;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetVidPnSourceVisibilityEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetVidPnSourceVisibilityExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiSetVidPnSourceVisibilityExit(Action<t_DxgkDdiSetVidPnSourceVisibilityExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetVidPnSourceVisibilityExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetVidPnSourceVisibilityExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiStartDeviceExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public int VideoPresentSources { get { return GetInt32At(4); } }
        public int NumberOfChildren { get { return GetInt32At(8); } }

        #region Private
        internal t_DxgkDdiStartDeviceExit(Action<t_DxgkDdiStartDeviceExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiStartDeviceExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "VideoPresentSources", VideoPresentSources);
             XmlAttrib(sb, "NumberOfChildren", NumberOfChildren);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "VideoPresentSources", "NumberOfChildren"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return VideoPresentSources;
                case 2:
                    return NumberOfChildren;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiStartDeviceExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry(Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Width { get { return GetInt32At(4); } }
        public int Height { get { return GetInt32At(8); } }
        public int ACPI_ID { get { return GetInt32At(12); } }

        #region Private
        internal t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit(Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             XmlAttrib(sb, "ACPI_ID", ACPI_ID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Width", "Height", "ACPI_ID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Width;
                case 2:
                    return Height;
                case 3:
                    return ACPI_ID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiStopDeviceAndReleasePostDisplayOwnershipExit> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSubmitCommand : TraceEvent
    {
        public Address ContextHandle { get { return GetAddressAt(0); } }
        public int SubmitFence { get { return GetInt32At(HostOffset(4, 1)); } }
        public int VidPnSource { get { return GetInt32At(HostOffset(8, 1)); } }
        public int FlipInterval { get { return GetInt16At(HostOffset(12, 1)); } }
        public int SubmitFlags { get { return GetInt32At(HostOffset(14, 1)); } }
        public IGFX_GPU_NODE EngineOrdinal { get { return (IGFX_GPU_NODE)GetInt32At(HostOffset(18, 1)); } }
        public IGFX_GPU_NODE NodeOrdinal { get { return (IGFX_GPU_NODE)GetInt32At(HostOffset(22, 1)); } }

        #region Private
        internal t_DxgkDdiSubmitCommand(Action<t_DxgkDdiSubmitCommand> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(26, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(26, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSubmitCommand>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ContextHandle", ContextHandle);
             XmlAttrib(sb, "SubmitFence", SubmitFence);
             XmlAttrib(sb, "VidPnSource", VidPnSource);
             XmlAttrib(sb, "FlipInterval", FlipInterval);
             XmlAttrib(sb, "SubmitFlags", SubmitFlags);
             XmlAttrib(sb, "EngineOrdinal", EngineOrdinal);
             XmlAttrib(sb, "NodeOrdinal", NodeOrdinal);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextHandle", "SubmitFence", "VidPnSource", "FlipInterval", "SubmitFlags", "EngineOrdinal", "NodeOrdinal"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextHandle;
                case 1:
                    return SubmitFence;
                case 2:
                    return VidPnSource;
                case 3:
                    return FlipInterval;
                case 4:
                    return SubmitFlags;
                case 5:
                    return EngineOrdinal;
                case 6:
                    return NodeOrdinal;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSubmitCommand> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiSetVidPnSourceAddressFail : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public string Error { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal t_DxgkDdiSetVidPnSourceAddressFail(Action<t_DxgkDdiSetVidPnSourceAddressFail> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiSetVidPnSourceAddressFail>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Error", Error);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "Error"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return Error;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiSetVidPnSourceAddressFail> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiUpdateActiveVidPnPresentPathEntry : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public int TargetId { get { return GetInt32At(4); } }
        public IGFX_ROTATION Rotation { get { return (IGFX_ROTATION)GetInt32At(8); } }
        public IGFX_SCALING Scaling { get { return (IGFX_SCALING)GetInt32At(12); } }

        #region Private
        internal t_DxgkDdiUpdateActiveVidPnPresentPathEntry(Action<t_DxgkDdiUpdateActiveVidPnPresentPathEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiUpdateActiveVidPnPresentPathEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Rotation", Rotation);
             XmlAttrib(sb, "Scaling", Scaling);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "TargetId", "Rotation", "Scaling"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return TargetId;
                case 2:
                    return Rotation;
                case 3:
                    return Scaling;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiUpdateActiveVidPnPresentPathEntry> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiUpdateMonitorLinkInfo_Info : TraceEvent
    {
        public DXGK_MONITORLINKINFO_Capabilities Capabilities { get { return (DXGK_MONITORLINKINFO_Capabilities)GetInt32At(0); } }
        public int TargetID { get { return GetInt32At(4); } }

        #region Private
        internal t_DxgkDdiUpdateMonitorLinkInfo_Info(Action<t_DxgkDdiUpdateMonitorLinkInfo_Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiUpdateMonitorLinkInfo_Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Capabilities", Capabilities);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Capabilities", "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Capabilities;
                case 1:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiUpdateMonitorLinkInfo_Info> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_Add4kx2kMode_Entry : TraceEvent
    {
        public long dwHActive { get { return GetInt64At(0); } }
        public long dwVActive { get { return GetInt64At(8); } }
        public long dwS3DFormat { get { return GetInt64At(16); } }
        public int eModeType { get { return GetInt32At(24); } }

        #region Private
        internal t_EDIDPARSER_Add4kx2kMode_Entry(Action<t_EDIDPARSER_Add4kx2kMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_Add4kx2kMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "dwHActive", dwHActive);
             XmlAttrib(sb, "dwVActive", dwVActive);
             XmlAttrib(sb, "dwS3DFormat", dwS3DFormat);
             XmlAttrib(sb, "eModeType", eModeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "dwHActive", "dwVActive", "dwS3DFormat", "eModeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return dwHActive;
                case 1:
                    return dwVActive;
                case 2:
                    return dwS3DFormat;
                case 3:
                    return eModeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_Add4kx2kMode_Entry> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_Add4kx2kMode_Exit : TraceEvent
    {
        public bool bForceAdd { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_EDIDPARSER_Add4kx2kMode_Exit(Action<t_EDIDPARSER_Add4kx2kMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_Add4kx2kMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bForceAdd", bForceAdd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bForceAdd"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bForceAdd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_Add4kx2kMode_Exit> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_ExtractInfoFromCVT_Entry : TraceEvent
    {
        public int pCVT_ucVA_high { get { return GetByteAt(0); } }
        public int pCVT_ucVA_low { get { return GetByteAt(1); } }
        public int pCVT_ucAspectRatio { get { return GetByteAt(2); } }
        public int pCVT_ucRefresh_Rate_Bits { get { return GetByteAt(3); } }
        public int pCVT_ucRR_60Hz_RB { get { return GetByteAt(4); } }

        #region Private
        internal t_EDIDPARSER_ExtractInfoFromCVT_Entry(Action<t_EDIDPARSER_ExtractInfoFromCVT_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_ExtractInfoFromCVT_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "pCVT_ucVA_high", pCVT_ucVA_high);
             XmlAttrib(sb, "pCVT_ucVA_low", pCVT_ucVA_low);
             XmlAttrib(sb, "pCVT_ucAspectRatio", pCVT_ucAspectRatio);
             XmlAttrib(sb, "pCVT_ucRefresh_Rate_Bits", pCVT_ucRefresh_Rate_Bits);
             XmlAttrib(sb, "pCVT_ucRR_60Hz_RB", pCVT_ucRR_60Hz_RB);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "pCVT_ucVA_high", "pCVT_ucVA_low", "pCVT_ucAspectRatio", "pCVT_ucRefresh_Rate_Bits", "pCVT_ucRR_60Hz_RB"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return pCVT_ucVA_high;
                case 1:
                    return pCVT_ucVA_low;
                case 2:
                    return pCVT_ucAspectRatio;
                case 3:
                    return pCVT_ucRefresh_Rate_Bits;
                case 4:
                    return pCVT_ucRR_60Hz_RB;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_ExtractInfoFromCVT_Entry> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_ParseVTBExt_DTDs_Entry : TraceEvent
    {
        public long ulNumDTD { get { return GetInt64At(0); } }

        #region Private
        internal t_EDIDPARSER_ParseVTBExt_DTDs_Entry(Action<t_EDIDPARSER_ParseVTBExt_DTDs_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_ParseVTBExt_DTDs_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulNumDTD", ulNumDTD);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulNumDTD"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulNumDTD;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_ParseVTBExt_DTDs_Entry> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_ParseVTBExt_DTDs_Exit : TraceEvent
    {
        public bool bRtnStatus { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_EDIDPARSER_ParseVTBExt_DTDs_Exit(Action<t_EDIDPARSER_ParseVTBExt_DTDs_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_ParseVTBExt_DTDs_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRtnStatus", bRtnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRtnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRtnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_ParseVTBExt_DTDs_Exit> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_ValidateVTBExtension_Entry : TraceEvent
    {
        public int pVTB_EXT_ucTag { get { return GetByteAt(0); } }
        public long pVTB_EXT_ulNumDTD { get { return GetInt64At(1); } }
        public long pVTB_EXT_ulNumCVT { get { return GetInt64At(9); } }
        public long pVTB_EXT_ulNumST { get { return GetInt64At(17); } }

        #region Private
        internal t_EDIDPARSER_ValidateVTBExtension_Entry(Action<t_EDIDPARSER_ValidateVTBExtension_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 25));
            Debug.Assert(!(Version > 0 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_ValidateVTBExtension_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "pVTB_EXT_ucTag", pVTB_EXT_ucTag);
             XmlAttrib(sb, "pVTB_EXT_ulNumDTD", pVTB_EXT_ulNumDTD);
             XmlAttrib(sb, "pVTB_EXT_ulNumCVT", pVTB_EXT_ulNumCVT);
             XmlAttrib(sb, "pVTB_EXT_ulNumST", pVTB_EXT_ulNumST);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "pVTB_EXT_ucTag", "pVTB_EXT_ulNumDTD", "pVTB_EXT_ulNumCVT", "pVTB_EXT_ulNumST"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return pVTB_EXT_ucTag;
                case 1:
                    return pVTB_EXT_ulNumDTD;
                case 2:
                    return pVTB_EXT_ulNumCVT;
                case 3:
                    return pVTB_EXT_ulNumST;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_ValidateVTBExtension_Entry> m_target;
        #endregion
    }
    public sealed class t_EDIDPARSER_ValidateVTBExtension_Exit : TraceEvent
    {
        public bool bRtnStatus { get { return GetInt32At(0) != 0; } }
        public int ucCheckSum { get { return GetByteAt(4); } }

        #region Private
        internal t_EDIDPARSER_ValidateVTBExtension_Exit(Action<t_EDIDPARSER_ValidateVTBExtension_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EDIDPARSER_ValidateVTBExtension_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRtnStatus", bRtnStatus);
             XmlAttrib(sb, "ucCheckSum", ucCheckSum);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRtnStatus", "ucCheckSum"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRtnStatus;
                case 1:
                    return ucCheckSum;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EDIDPARSER_ValidateVTBExtension_Exit> m_target;
        #endregion
    }
    public sealed class t_EventServiceEntry : TraceEvent
    {
        public EVENT_OPERATION Operation { get { return (EVENT_OPERATION)GetInt32At(0); } }
        public int Event { get { return GetInt32At(4); } }

        #region Private
        internal t_EventServiceEntry(Action<t_EventServiceEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_EventServiceEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Operation", "Event"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Operation;
                case 1:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_EventServiceEntry> m_target;
        #endregion
    }
    public sealed class t_FbcRegData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Address { get { return GetInt32At(8); } }
        public int Data { get { return GetInt32At(12); } }

        #region Private
        internal t_FbcRegData(Action<t_FbcRegData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_FbcRegData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Address", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Address;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_FbcRegData> m_target;
        #endregion
    }
    public sealed class t_FbcSetupGmmData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int GMMEnableFbc { get { return GetInt32At(8); } }
        public int FbcMemoryAllocated { get { return GetInt32At(12); } }
        public int CfbAddress { get { return GetInt32At(16); } }
        public int DisplayBufStrideInBytes { get { return GetInt32At(20); } }
        public int CompressionRatio { get { return GetInt32At(24); } }

        #region Private
        internal t_FbcSetupGmmData(Action<t_FbcSetupGmmData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_FbcSetupGmmData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "GMMEnableFbc", GMMEnableFbc);
             XmlAttrib(sb, "FbcMemoryAllocated", FbcMemoryAllocated);
             XmlAttrib(sb, "CfbAddress", CfbAddress);
             XmlAttrib(sb, "DisplayBufStrideInBytes", DisplayBufStrideInBytes);
             XmlAttrib(sb, "CompressionRatio", CompressionRatio);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "GMMEnableFbc", "FbcMemoryAllocated", "CfbAddress", "DisplayBufStrideInBytes", "CompressionRatio"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return GMMEnableFbc;
                case 2:
                    return FbcMemoryAllocated;
                case 3:
                    return CfbAddress;
                case 4:
                    return DisplayBufStrideInBytes;
                case 5:
                    return CompressionRatio;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_FbcSetupGmmData> m_target;
        #endregion
    }
    public sealed class t_GEN9HDMICONTROLLER_NotifyPowerWellChange : TraceEvent
    {
        public PW2ENABLE_CONFIG PW2Enable { get { return (PW2ENABLE_CONFIG)GetInt32At(0); } }
        public AUDIO_EVENT EventType { get { return (AUDIO_EVENT)GetInt32At(4); } }
        public AUDIO_VERB_COMMAND VerbID { get { return (AUDIO_VERB_COMMAND)GetInt32At(8); } }
        public int PayLoadData { get { return GetInt32At(12); } }
        public bool bReadReply { get { return GetInt32At(16) != 0; } }
        public bool bVerbStatus { get { return GetInt32At(20) != 0; } }
        public TIMEOUTEVENT TimerEvent { get { return (TIMEOUTEVENT)GetInt32At(24); } }
        public TIMEOUT TimeoutStatus { get { return (TIMEOUT)GetInt32At(28); } }

        #region Private
        internal t_GEN9HDMICONTROLLER_NotifyPowerWellChange(Action<t_GEN9HDMICONTROLLER_NotifyPowerWellChange> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GEN9HDMICONTROLLER_NotifyPowerWellChange>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PW2Enable", PW2Enable);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "VerbID", VerbID);
             XmlAttrib(sb, "PayLoadData", PayLoadData);
             XmlAttrib(sb, "bReadReply", bReadReply);
             XmlAttrib(sb, "bVerbStatus", bVerbStatus);
             XmlAttrib(sb, "TimerEvent", TimerEvent);
             XmlAttrib(sb, "TimeoutStatus", TimeoutStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PW2Enable", "EventType", "VerbID", "PayLoadData", "bReadReply", "bVerbStatus", "TimerEvent", "TimeoutStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PW2Enable;
                case 1:
                    return EventType;
                case 2:
                    return VerbID;
                case 3:
                    return PayLoadData;
                case 4:
                    return bReadReply;
                case 5:
                    return bVerbStatus;
                case 6:
                    return TimerEvent;
                case 7:
                    return TimeoutStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GEN9HDMICONTROLLER_NotifyPowerWellChange> m_target;
        #endregion
    }
    public sealed class t_NotifyPowerWellChangeEntry : TraceEvent
    {
        public bool PW2Enable { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_NotifyPowerWellChangeEntry(Action<t_NotifyPowerWellChangeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_NotifyPowerWellChangeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PW2Enable", PW2Enable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PW2Enable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PW2Enable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_NotifyPowerWellChangeEntry> m_target;
        #endregion
    }
    public sealed class t_GenericTest : TraceEvent
    {
        public int Param1 { get { return GetInt32At(0); } }
        public int Param2 { get { return GetInt32At(4); } }
        public string Message { get { return GetUnicodeStringAt(8); } }
        public string Function { get { return GetUTF8StringAt(SkipUnicodeString(8)); } }

        #region Private
        internal t_GenericTest(Action<t_GenericTest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(8))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GenericTest>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Function", Function);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Param1", "Param2", "Message", "Function"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Param1;
                case 1:
                    return Param2;
                case 2:
                    return Message;
                case 3:
                    return Function;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GenericTest> m_target;
        #endregion
    }
    public sealed class t_SystemInfoExit : TraceEvent
    {
        public string AdapterType { get { return GetUnicodeStringAt(0); } }
        public int skuFeatureList { get { return GetInt32At(SkipUnicodeString(0)); } }
        public CHIPSET_PRODUCT_FAMILY ChipsetFamily { get { return (CHIPSET_PRODUCT_FAMILY)GetInt32At(SkipUnicodeString(0)+4); } }
        public CHIPSET_PLATFORM_TYPE ePlatformType { get { return (CHIPSET_PLATFORM_TYPE)GetInt32At(SkipUnicodeString(0)+8); } }
        public CPU_TYPE CPU_ID { get { return (CPU_TYPE)GetInt32At(SkipUnicodeString(0)+12); } }
        public string ROMBIOS_BuildNum { get { return GetUTF8StringAt(SkipUnicodeString(0)+16); } }
        public int ROMBIOS_MinorVersion { get { return GetByteAt(SkipUTF8String(SkipUnicodeString(0)+16)); } }
        public bool ROMBIOS_InvalidMinorVersion { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+1) != 0; } }
        public int ROMBIOS_versionType { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+5); } }
        public int PCIDeviceID { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+9); } }
        public bool bIs0_180_Ind_Rot_supported { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+13) != 0; } }
        public bool bIs90_270_Ind_Rot_supported { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+17) != 0; } }
        public int Status { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+21); } }
        public WDDMVer WDDMVer { get { return (WDDMVer)GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+25); } }
        public bool VMSSupport { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(0)+16)+29) != 0; } }

        #region Private
        internal t_SystemInfoExit(Action<t_SystemInfoExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUnicodeString(0)+16)+33));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUnicodeString(0)+16)+33));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SystemInfoExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AdapterType", AdapterType);
             XmlAttrib(sb, "skuFeatureList", skuFeatureList);
             XmlAttrib(sb, "ChipsetFamily", ChipsetFamily);
             XmlAttrib(sb, "ePlatformType", ePlatformType);
             XmlAttrib(sb, "CPU_ID", CPU_ID);
             XmlAttrib(sb, "ROMBIOS_BuildNum", ROMBIOS_BuildNum);
             XmlAttrib(sb, "ROMBIOS_MinorVersion", ROMBIOS_MinorVersion);
             XmlAttrib(sb, "ROMBIOS_InvalidMinorVersion", ROMBIOS_InvalidMinorVersion);
             XmlAttrib(sb, "ROMBIOS_versionType", ROMBIOS_versionType);
             XmlAttrib(sb, "PCIDeviceID", PCIDeviceID);
             XmlAttrib(sb, "bIs0_180_Ind_Rot_supported", bIs0_180_Ind_Rot_supported);
             XmlAttrib(sb, "bIs90_270_Ind_Rot_supported", bIs90_270_Ind_Rot_supported);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "WDDMVer", WDDMVer);
             XmlAttrib(sb, "VMSSupport", VMSSupport);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AdapterType", "skuFeatureList", "ChipsetFamily", "ePlatformType", "CPU_ID", "ROMBIOS_BuildNum", "ROMBIOS_MinorVersion", "ROMBIOS_InvalidMinorVersion", "ROMBIOS_versionType", "PCIDeviceID", "bIs0_180_Ind_Rot_supported", "bIs90_270_Ind_Rot_supported", "Status", "WDDMVer", "VMSSupport"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AdapterType;
                case 1:
                    return skuFeatureList;
                case 2:
                    return ChipsetFamily;
                case 3:
                    return ePlatformType;
                case 4:
                    return CPU_ID;
                case 5:
                    return ROMBIOS_BuildNum;
                case 6:
                    return ROMBIOS_MinorVersion;
                case 7:
                    return ROMBIOS_InvalidMinorVersion;
                case 8:
                    return ROMBIOS_versionType;
                case 9:
                    return PCIDeviceID;
                case 10:
                    return bIs0_180_Ind_Rot_supported;
                case 11:
                    return bIs90_270_Ind_Rot_supported;
                case 12:
                    return Status;
                case 13:
                    return WDDMVer;
                case 14:
                    return VMSSupport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SystemInfoExit> m_target;
        #endregion
    }
    public sealed class t_GetSystemPowerState_Entry : TraceEvent
    {
        public IGFX_SYS_POWER_ACTION IgfxPowerAction { get { return (IGFX_SYS_POWER_ACTION)GetInt32At(0); } }

        #region Private
        internal t_GetSystemPowerState_Entry(Action<t_GetSystemPowerState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GetSystemPowerState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IgfxPowerAction", IgfxPowerAction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IgfxPowerAction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IgfxPowerAction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GetSystemPowerState_Entry> m_target;
        #endregion
    }
    public sealed class t_GetSystemPowerState_Exit : TraceEvent
    {
        public IGFX_SYS_POWER_ACTION eSB_SystemPowerState { get { return (IGFX_SYS_POWER_ACTION)GetInt32At(0); } }

        #region Private
        internal t_GetSystemPowerState_Exit(Action<t_GetSystemPowerState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GetSystemPowerState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eSB_SystemPowerState", eSB_SystemPowerState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eSB_SystemPowerState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eSB_SystemPowerState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GetSystemPowerState_Exit> m_target;
        #endregion
    }
    public sealed class t_GfxCheckPresentDurationSupportInfo : TraceEvent
    {
        public int SourceId { get { return GetInt32At(0); } }
        public int DesiredPresentDuration { get { return GetInt32At(4); } }

        #region Private
        internal t_GfxCheckPresentDurationSupportInfo(Action<t_GfxCheckPresentDurationSupportInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxCheckPresentDurationSupportInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "DesiredPresentDuration", DesiredPresentDuration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceId", "DesiredPresentDuration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceId;
                case 1:
                    return DesiredPresentDuration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxCheckPresentDurationSupportInfo> m_target;
        #endregion
    }
    public sealed class t_CheckPresentDurationSupportExit : TraceEvent
    {
        public int ClosestSmallerDuration { get { return GetInt32At(0); } }
        public int ClosestLargerDuration { get { return GetInt32At(4); } }

        #region Private
        internal t_CheckPresentDurationSupportExit(Action<t_CheckPresentDurationSupportExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_CheckPresentDurationSupportExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ClosestSmallerDuration", ClosestSmallerDuration);
             XmlAttrib(sb, "ClosestLargerDuration", ClosestLargerDuration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClosestSmallerDuration", "ClosestLargerDuration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClosestSmallerDuration;
                case 1:
                    return ClosestLargerDuration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_CheckPresentDurationSupportExit> m_target;
        #endregion
    }
    public sealed class t_GfxClientAllocateResourceFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientAllocateResourceFailure(Action<t_GfxClientAllocateResourceFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientAllocateResourceFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientAllocateResourceFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientAllocateResourceEntry : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientAllocateResourceEntry(Action<t_GfxClientAllocateResourceEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientAllocateResourceEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientAllocateResourceEntry> m_target;
        #endregion
    }
    public sealed class t_GfxClientAllocateResourceExit : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public long Size { get { return GetInt64At(HostOffset(4, 1)); } }
        public Address GmmBlockDesc { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address GmmBlockEntry { get { return GetAddressAt(HostOffset(16, 2)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(20, 3)); } }

        #region Private
        internal t_GfxClientAllocateResourceExit(Action<t_GfxClientAllocateResourceExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(20, 3))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(20, 3))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientAllocateResourceExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Size", Size);
             XmlAttribHex(sb, "GmmBlockDesc", GmmBlockDesc);
             XmlAttribHex(sb, "GmmBlockEntry", GmmBlockEntry);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Size", "GmmBlockDesc", "GmmBlockEntry", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Size;
                case 2:
                    return GmmBlockDesc;
                case 3:
                    return GmmBlockEntry;
                case 4:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientAllocateResourceExit> m_target;
        #endregion
    }
    public sealed class t_GfxClientCloseGPUFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientCloseGPUFailure(Action<t_GfxClientCloseGPUFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientCloseGPUFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientCloseGPUFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientCloseGPU : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientCloseGPU(Action<t_GfxClientCloseGPU> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientCloseGPU>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientCloseGPU> m_target;
        #endregion
    }
    public sealed class t_GfxClientDeallocateResourceFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientDeallocateResourceFailure(Action<t_GfxClientDeallocateResourceFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientDeallocateResourceFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientDeallocateResourceFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientDeallocateResourceEntry : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientDeallocateResourceEntry(Action<t_GfxClientDeallocateResourceEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientDeallocateResourceEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientDeallocateResourceEntry> m_target;
        #endregion
    }
    public sealed class t_GfxClientDeallocateResourceExit : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public long Size { get { return GetInt64At(HostOffset(4, 1)); } }
        public Address GmmBlockDesc { get { return GetAddressAt(HostOffset(12, 1)); } }
        public Address GmmBlockEntry { get { return GetAddressAt(HostOffset(16, 2)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(20, 3)); } }

        #region Private
        internal t_GfxClientDeallocateResourceExit(Action<t_GfxClientDeallocateResourceExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(20, 3))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(20, 3))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientDeallocateResourceExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Size", Size);
             XmlAttribHex(sb, "GmmBlockDesc", GmmBlockDesc);
             XmlAttribHex(sb, "GmmBlockEntry", GmmBlockEntry);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Size", "GmmBlockDesc", "GmmBlockEntry", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Size;
                case 2:
                    return GmmBlockDesc;
                case 3:
                    return GmmBlockEntry;
                case 4:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientDeallocateResourceExit> m_target;
        #endregion
    }
    public sealed class t_GfxClientEngineReset : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientEngineReset(Action<t_GfxClientEngineReset> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientEngineReset>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientEngineReset> m_target;
        #endregion
    }
    public sealed class t_GfxClientMapBufferFailure : TraceEvent
    {
        public Address GfxclientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientMapBufferFailure(Action<t_GfxClientMapBufferFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientMapBufferFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxclientContext", GfxclientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxclientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxclientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientMapBufferFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientUnmapBufferEntry : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientUnmapBufferEntry(Action<t_GfxClientUnmapBufferEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientUnmapBufferEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientUnmapBufferEntry> m_target;
        #endregion
    }
    public sealed class t_GfxClientUnmapBufferExit : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public Address GmmBlockDesc { get { return GetAddressAt(HostOffset(4, 1)); } }
        public Address GmmBlockEntry { get { return GetAddressAt(HostOffset(8, 2)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(12, 3)); } }

        #region Private
        internal t_GfxClientUnmapBufferExit(Action<t_GfxClientUnmapBufferExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(12, 3))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(12, 3))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientUnmapBufferExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttribHex(sb, "GmmBlockDesc", GmmBlockDesc);
             XmlAttribHex(sb, "GmmBlockEntry", GmmBlockEntry);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "GmmBlockDesc", "GmmBlockEntry", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return GmmBlockDesc;
                case 2:
                    return GmmBlockEntry;
                case 3:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientUnmapBufferExit> m_target;
        #endregion
    }
    public sealed class t_GfxClientOpenGPUFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientOpenGPUFailure(Action<t_GfxClientOpenGPUFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientOpenGPUFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientOpenGPUFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientOpenGPU : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientOpenGPU(Action<t_GfxClientOpenGPU> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientOpenGPU>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientOpenGPU> m_target;
        #endregion
    }
    public sealed class t_GfxClientPowerStateTransition : TraceEvent
    {
        public DEVICE_POWER_STATE GfxPowerState { get { return (DEVICE_POWER_STATE)GetInt16At(0); } }
        public string Message { get { return GetUnicodeStringAt(2); } }

        #region Private
        internal t_GfxClientPowerStateTransition(Action<t_GfxClientPowerStateTransition> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(2)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientPowerStateTransition>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GfxPowerState", GfxPowerState);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxPowerState", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxPowerState;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientPowerStateTransition> m_target;
        #endregion
    }
    public sealed class t_GfxClientQueryGPU : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxClientQueryGPU(Action<t_GfxClientQueryGPU> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientQueryGPU>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientQueryGPU> m_target;
        #endregion
    }
    public sealed class t_GfxClientTdrReset : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientTdrReset(Action<t_GfxClientTdrReset> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientTdrReset>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientTdrReset> m_target;
        #endregion
    }
    public sealed class t_GfxClientTdrRestart : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientTdrRestart(Action<t_GfxClientTdrRestart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientTdrRestart>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientTdrRestart> m_target;
        #endregion
    }
    public sealed class t_GfxClientUnmapBufferFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientUnmapBufferFailure(Action<t_GfxClientUnmapBufferFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientUnmapBufferFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientUnmapBufferFailure> m_target;
        #endregion
    }
    public sealed class t_GfxConfigHDCPForLPAudioInfo : TraceEvent
    {
        public PipeIndex PipeType { get { return (PipeIndex)GetInt32At(0); } }
        public bool EnableHdcp { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_GfxConfigHDCPForLPAudioInfo(Action<t_GfxConfigHDCPForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxConfigHDCPForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeType", PipeType);
             XmlAttrib(sb, "EnableHdcp", EnableHdcp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeType", "EnableHdcp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeType;
                case 1:
                    return EnableHdcp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxConfigHDCPForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxControlDisplayDevicePowerStateEntry : TraceEvent
    {
        public int TargetId { get { return GetInt32At(0); } }
        public bool PowerOn { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_GfxControlDisplayDevicePowerStateEntry(Action<t_GfxControlDisplayDevicePowerStateEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxControlDisplayDevicePowerStateEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "PowerOn", PowerOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "PowerOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return PowerOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxControlDisplayDevicePowerStateEntry> m_target;
        #endregion
    }
    public sealed class t_GfxEnableDisableInterruptForLPAudioInfo : TraceEvent
    {
        public PipeIndex PipeID { get { return (PipeIndex)GetInt32At(0); } }

        #region Private
        internal t_GfxEnableDisableInterruptForLPAudioInfo(Action<t_GfxEnableDisableInterruptForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxEnableDisableInterruptForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxEnableDisableInterruptForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxFastSetModeEntry : TraceEvent
    {
        public int SourceWidth { get { return GetInt32At(0); } }
        public int SourceHeight { get { return GetInt32At(4); } }
        public int DestWidth { get { return GetInt32At(8); } }
        public int DestHeight { get { return GetInt32At(12); } }
        public PipeIndex Pipe { get { return (PipeIndex)GetInt32At(16); } }
        public SB_SCALER_MODESET_FLAGS Flags { get { return (SB_SCALER_MODESET_FLAGS)GetInt32At(20); } }

        #region Private
        internal t_GfxFastSetModeEntry(Action<t_GfxFastSetModeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxFastSetModeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceWidth", SourceWidth);
             XmlAttrib(sb, "SourceHeight", SourceHeight);
             XmlAttrib(sb, "DestWidth", DestWidth);
             XmlAttrib(sb, "DestHeight", DestHeight);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceWidth", "SourceHeight", "DestWidth", "DestHeight", "Pipe", "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceWidth;
                case 1:
                    return SourceHeight;
                case 2:
                    return DestWidth;
                case 3:
                    return DestHeight;
                case 4:
                    return Pipe;
                case 5:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxFastSetModeEntry> m_target;
        #endregion
    }
    public sealed class t_GfxFastSetModeExit : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_GfxFastSetModeExit(Action<t_GfxFastSetModeExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxFastSetModeExit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxFastSetModeExit> m_target;
        #endregion
    }
    public sealed class t_GfxGetConfigForLPAudioInfo : TraceEvent
    {
        public SST_GET_CONFIG_REQ_EN eGetConfigReq { get { return (SST_GET_CONFIG_REQ_EN)GetInt32At(0); } }
        public PipeIndex PipeID { get { return (PipeIndex)GetInt32At(4); } }

        #region Private
        internal t_GfxGetConfigForLPAudioInfo(Action<t_GfxGetConfigForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxGetConfigForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eGetConfigReq", eGetConfigReq);
             XmlAttrib(sb, "PipeID", PipeID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eGetConfigReq", "PipeID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eGetConfigReq;
                case 1:
                    return PipeID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxGetConfigForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxGuC2HostMessage : TraceEvent
    {
        public int MessageDw { get { return GetInt32At(0); } }

        #region Private
        internal t_GfxGuC2HostMessage(Action<t_GfxGuC2HostMessage> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxGuC2HostMessage>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MessageDw", MessageDw);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MessageDw"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MessageDw;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxGuC2HostMessage> m_target;
        #endregion
    }
    public sealed class t_GfxIndicateChildStatusEntry : TraceEvent
    {
        public int TargetId { get { return GetInt32At(0); } }
        public bool Attach { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_GfxIndicateChildStatusEntry(Action<t_GfxIndicateChildStatusEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxIndicateChildStatusEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Attach", Attach);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Attach"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Attach;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxIndicateChildStatusEntry> m_target;
        #endregion
    }
    public sealed class t_GfxNotifyLPAudioEventInfo : TraceEvent
    {
        public SST_GENERAL_EVENT_TYPE_EN Event { get { return (SST_GENERAL_EVENT_TYPE_EN)GetInt32At(0); } }
        public PipeIndex PipeType { get { return (PipeIndex)GetInt32At(4); } }

        #region Private
        internal t_GfxNotifyLPAudioEventInfo(Action<t_GfxNotifyLPAudioEventInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxNotifyLPAudioEventInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Event", Event);
             XmlAttrib(sb, "PipeType", PipeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Event", "PipeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Event;
                case 1:
                    return PipeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxNotifyLPAudioEventInfo> m_target;
        #endregion
    }
    public sealed class t_GfxNotifyLPAudioHdcpNotificationStatusInfo : TraceEvent
    {
        public SST_HDCPSESSION_STAT_EN HDCPStatus { get { return (SST_HDCPSESSION_STAT_EN)GetInt32At(0); } }

        #region Private
        internal t_GfxNotifyLPAudioHdcpNotificationStatusInfo(Action<t_GfxNotifyLPAudioHdcpNotificationStatusInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxNotifyLPAudioHdcpNotificationStatusInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HDCPStatus", HDCPStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HDCPStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HDCPStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxNotifyLPAudioHdcpNotificationStatusInfo> m_target;
        #endregion
    }
    public sealed class t_GfxNotifyLPAudioISRInfo : TraceEvent
    {
        public PipeIndex PipeType { get { return (PipeIndex)GetInt32At(0); } }

        #region Private
        internal t_GfxNotifyLPAudioISRInfo(Action<t_GfxNotifyLPAudioISRInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxNotifyLPAudioISRInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeType", PipeType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxNotifyLPAudioISRInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPageFaultInfo : TraceEvent
    {
        public long FaultProcessHandle { get { return GetInt64At(0); } }
        public int FaultedFenceId { get { return GetInt32At(8); } }
        public IGFX_GPU_NODE FaultedEngine { get { return (IGFX_GPU_NODE)GetInt32At(12); } }
        public long FaultedVirtualAddress { get { return GetInt64At(16); } }
        public DXGK_PAGE_FAULT_FLAGS FaultFlags { get { return (DXGK_PAGE_FAULT_FLAGS)GetInt32At(24); } }

        #region Private
        internal t_GfxPageFaultInfo(Action<t_GfxPageFaultInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPageFaultInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FaultProcessHandle", FaultProcessHandle);
             XmlAttrib(sb, "FaultedFenceId", FaultedFenceId);
             XmlAttrib(sb, "FaultedEngine", FaultedEngine);
             XmlAttrib(sb, "FaultedVirtualAddress", FaultedVirtualAddress);
             XmlAttrib(sb, "FaultFlags", FaultFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FaultProcessHandle", "FaultedFenceId", "FaultedEngine", "FaultedVirtualAddress", "FaultFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FaultProcessHandle;
                case 1:
                    return FaultedFenceId;
                case 2:
                    return FaultedEngine;
                case 3:
                    return FaultedVirtualAddress;
                case 4:
                    return FaultFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPageFaultInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPageFaultFeatureStatus : TraceEvent
    {
        public bool Status { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_GfxPageFaultFeatureStatus(Action<t_GfxPageFaultFeatureStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPageFaultFeatureStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPageFaultFeatureStatus> m_target;
        #endregion
    }
    public sealed class t_GfxReadWriteDeviceSpaceForLPAudioInfo : TraceEvent
    {
        public int Offset { get { return GetInt32At(0); } }
        public int Value { get { return GetInt32At(4); } }

        #region Private
        internal t_GfxReadWriteDeviceSpaceForLPAudioInfo(Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "Value", Value);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Offset", "Value"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Offset;
                case 1:
                    return Value;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxReadWriteDeviceSpaceForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo : TraceEvent
    {
        public int Offset { get { return GetInt32At(0); } }
        public int Value { get { return GetInt32At(4); } }
        public int Mask { get { return GetInt32At(8); } }

        #region Private
        internal t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo(Action<t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "Value", Value);
             XmlAttrib(sb, "Mask", Mask);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Offset", "Value", "Mask"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Offset;
                case 1:
                    return Value;
                case 2:
                    return Mask;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxReadModifyWriteDeviceSpaceForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxSetConfigForLPAudioInfo : TraceEvent
    {
        public SST_SET_CONFIG_REQ_EN SetConfigReq { get { return (SST_SET_CONFIG_REQ_EN)GetInt32At(0); } }

        #region Private
        internal t_GfxSetConfigForLPAudioInfo(Action<t_GfxSetConfigForLPAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxSetConfigForLPAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SetConfigReq", SetConfigReq);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SetConfigReq"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SetConfigReq;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxSetConfigForLPAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GfxSetModeEntry : TraceEvent
    {
        public int TargetID1 { get { return GetInt32At(0); } }
        public int TargetID2 { get { return GetInt32At(4); } }
        public int Width { get { return GetInt32At(8); } }
        public int Height { get { return GetInt32At(12); } }
        public bool FastModeSet { get { return GetInt32At(16) != 0; } }

        #region Private
        internal t_GfxSetModeEntry(Action<t_GfxSetModeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxSetModeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID1", TargetID1);
             XmlAttrib(sb, "TargetID2", TargetID2);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             XmlAttrib(sb, "FastModeSet", FastModeSet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID1", "TargetID2", "Width", "Height", "FastModeSet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID1;
                case 1:
                    return TargetID2;
                case 2:
                    return Width;
                case 3:
                    return Height;
                case 4:
                    return FastModeSet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxSetModeEntry> m_target;
        #endregion
    }
    public sealed class t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo : TraceEvent
    {
        public bool SstToDxgkInterfaceState { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo(Action<t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SstToDxgkInterfaceState", SstToDxgkInterfaceState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SstToDxgkInterfaceState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SstToDxgkInterfaceState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxSetSstToDxgkInterfaceStateForLPEAudioInfo> m_target;
        #endregion
    }
    public sealed class t_GenericUpdateAudioStateInfo : TraceEvent
    {
        public int AudioActiveDisplayUID { get { return GetInt32At(0); } }
        public PipeIndex PipeID { get { return (PipeIndex)GetInt32At(4); } }
        public bool Active { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_GenericUpdateAudioStateInfo(Action<t_GenericUpdateAudioStateInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GenericUpdateAudioStateInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AudioActiveDisplayUID", AudioActiveDisplayUID);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "Active", Active);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AudioActiveDisplayUID", "PipeID", "Active"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AudioActiveDisplayUID;
                case 1:
                    return PipeID;
                case 2:
                    return Active;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GenericUpdateAudioStateInfo> m_target;
        #endregion
    }
    public sealed class t_GmmBlockEntryValidationFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public Address GmmBlockEntry { get { return GetAddressAt(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 2)); } }

        #region Private
        internal t_GmmBlockEntryValidationFailure(Action<t_GmmBlockEntryValidationFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 2))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 2))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GmmBlockEntryValidationFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttribHex(sb, "GmmBlockEntry", GmmBlockEntry);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "GmmBlockEntry", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return GmmBlockEntry;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GmmBlockEntryValidationFailure> m_target;
        #endregion
    }
    public sealed class t_GfxclientContextValidationFailure : TraceEvent
    {
        public Address GfxClientcontext { get { return GetAddressAt(0); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxclientContextValidationFailure(Action<t_GfxclientContextValidationFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxclientContextValidationFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientcontext", GfxClientcontext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientcontext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientcontext;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxclientContextValidationFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientCallbackFailure : TraceEvent
    {
        public Address GfxClientHandle { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientCallbackFailure(Action<t_GfxClientCallbackFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientCallbackFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientHandle", GfxClientHandle);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientHandle", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientHandle;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientCallbackFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientCallbackEntry : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientCallbackEntry(Action<t_GfxClientCallbackEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientCallbackEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientCallbackEntry> m_target;
        #endregion
    }
    public sealed class t_GfxClientCallbackSuccess : TraceEvent
    {
        public Address GfxClientHandle { get { return GetAddressAt(0); } }
        public Address GfxClientContext { get { return GetAddressAt(HostOffset(4, 1)); } }
        public GFX_CLIENT_TYPE GfxClientType { get { return (GFX_CLIENT_TYPE)GetInt16At(HostOffset(8, 2)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(10, 2)); } }

        #region Private
        internal t_GfxClientCallbackSuccess(Action<t_GfxClientCallbackSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(10, 2))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(10, 2))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientCallbackSuccess>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientHandle", GfxClientHandle);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "GfxClientType", GfxClientType);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientHandle", "GfxClientContext", "GfxClientType", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientHandle;
                case 1:
                    return GfxClientContext;
                case 2:
                    return GfxClientType;
                case 3:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientCallbackSuccess> m_target;
        #endregion
    }
    public sealed class t_GfxClientSubmissionDestroy : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientSubmissionDestroy(Action<t_GfxClientSubmissionDestroy> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientSubmissionDestroy>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientSubmissionDestroy> m_target;
        #endregion
    }
    public sealed class t_GfxClientSubmissionInitFailure : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public string Message { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal t_GfxClientSubmissionInitFailure(Action<t_GfxClientSubmissionInitFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientSubmissionInitFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientSubmissionInitFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientSubmissionInit : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal t_GfxClientSubmissionInit(Action<t_GfxClientSubmissionInit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientSubmissionInit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientSubmissionInit> m_target;
        #endregion
    }
    public sealed class t_GTCControl : TraceEvent
    {
        public GTC_STATE GTCState { get { return (GTC_STATE)GetInt32At(0); } }

        #region Private
        internal t_GTCControl(Action<t_GTCControl> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GTCControl>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GTCState", GTCState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GTCState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GTCState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GTCControl> m_target;
        #endregion
    }
    public sealed class t_HDCPEncryptionStatus : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Status { get { return GetByteAt(4); } }

        #region Private
        internal t_HDCPEncryptionStatus(Action<t_HDCPEncryptionStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCPEncryptionStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCPEncryptionStatus> m_target;
        #endregion
    }
    public sealed class t_HDCP2DebugMesage : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Criticality { get { return GetInt32At(4); } }
        public string Message { get { return GetUTF8StringAt(8); } }
        public int Status { get { return GetInt32At(SkipUTF8String(8)); } }

        #region Private
        internal t_HDCP2DebugMesage(Action<t_HDCP2DebugMesage> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(8)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(8)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2DebugMesage>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Criticality", Criticality);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Criticality", "Message", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Criticality;
                case 2:
                    return Message;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2DebugMesage> m_target;
        #endregion
    }
    public sealed class t_TargetID_Status : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Status { get { return GetInt32At(4); } }

        #region Private
        internal t_TargetID_Status(Action<t_TargetID_Status> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_TargetID_Status>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_TargetID_Status> m_target;
        #endregion
    }
    public sealed class t_HDCP2Escape : TraceEvent
    {
        public int EscapeCode { get { return GetInt32At(0); } }
        public int TargetID { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCP2Escape(Action<t_HDCP2Escape> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2Escape>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EscapeCode", EscapeCode);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EscapeCode", "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EscapeCode;
                case 1:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2Escape> m_target;
        #endregion
    }
    public sealed class t_HDCP2Datapacket : TraceEvent
    {
        public int EventType { get { return GetInt32At(0); } }
        public int TargetID { get { return GetInt32At(4); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] PayLoad { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_HDCP2Datapacket(Action<t_HDCP2Datapacket> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2Datapacket>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "TargetID", "DataSize", "PayLoad"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return TargetID;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2Datapacket> m_target;
        #endregion
    }
    public sealed class t_HDCP2SetStreamData : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int StreamID { get { return GetByteAt(4); } }
        public int StreamType { get { return GetByteAt(5); } }

        #region Private
        internal t_HDCP2SetStreamData(Action<t_HDCP2SetStreamData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2SetStreamData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "StreamID", StreamID);
             XmlAttrib(sb, "StreamType", StreamType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "StreamID", "StreamType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return StreamID;
                case 2:
                    return StreamType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2SetStreamData> m_target;
        #endregion
    }
    public sealed class t_HDCP2AuthStepState : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int AuthState { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCP2AuthStepState(Action<t_HDCP2AuthStepState> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2AuthStepState>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "AuthState", AuthState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "AuthState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return AuthState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2AuthStepState> m_target;
        #endregion
    }
    public sealed class t_HDCP2AuthStatus : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int State { get { return GetInt32At(4); } }
        public bool Authenticated { get { return GetInt32At(8) != 0; } }
        public int MajorVersion { get { return GetByteAt(12); } }
        public int MinorVersion { get { return GetByteAt(13); } }
        public bool Repeater { get { return GetInt32At(14) != 0; } }
        public int Receiver_ID_Size { get { return GetByteAt(18); } }
        public byte[] ReceiverID { get { return GetByteArrayAt(19, Receiver_ID_Size); } }
        public bool Has1_xDownStream { get { return GetInt32At(0+ (Receiver_ID_Size*1)+19) != 0; } }
        public bool Has2_xLegacyDownStream { get { return GetInt32At(0+ (Receiver_ID_Size*1)+23) != 0; } }
        public int StreamType { get { return GetByteAt(0+ (Receiver_ID_Size*1)+27); } }
        public int RepDevCount { get { return GetByteAt(0+ (Receiver_ID_Size*1)+28); } }

        #region Private
        internal t_HDCP2AuthStatus(Action<t_HDCP2AuthStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Receiver_ID_Size*1)+29));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Receiver_ID_Size*1)+29));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2AuthStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "State", State);
             XmlAttrib(sb, "Authenticated", Authenticated);
             XmlAttrib(sb, "MajorVersion", MajorVersion);
             XmlAttrib(sb, "MinorVersion", MinorVersion);
             XmlAttrib(sb, "Repeater", Repeater);
             XmlAttrib(sb, "Receiver_ID_Size", Receiver_ID_Size);
             XmlAttrib(sb, "Has1_xDownStream", Has1_xDownStream);
             XmlAttrib(sb, "Has2_xLegacyDownStream", Has2_xLegacyDownStream);
             XmlAttrib(sb, "StreamType", StreamType);
             XmlAttrib(sb, "RepDevCount", RepDevCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "State", "Authenticated", "MajorVersion", "MinorVersion", "Repeater", "Receiver_ID_Size", "ReceiverID", "Has1_xDownStream", "Has2_xLegacyDownStream", "StreamType", "RepDevCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return State;
                case 2:
                    return Authenticated;
                case 3:
                    return MajorVersion;
                case 4:
                    return MinorVersion;
                case 5:
                    return Repeater;
                case 6:
                    return Receiver_ID_Size;
                case 7:
                    return Has1_xDownStream;
                case 8:
                    return Has2_xLegacyDownStream;
                case 9:
                    return StreamType;
                case 10:
                    return RepDevCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2AuthStatus> m_target;
        #endregion
    }
    public sealed class t_HDCPUMD_DevInstance : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int PortID { get { return GetByteAt(4); } }
        public int HDCPAdaptation { get { return GetInt32At(5); } }

        #region Private
        internal t_HDCPUMD_DevInstance(Action<t_HDCPUMD_DevInstance> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCPUMD_DevInstance>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "PortID", PortID);
             XmlAttrib(sb, "HDCPAdaptation", HDCPAdaptation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "PortID", "HDCPAdaptation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return PortID;
                case 2:
                    return HDCPAdaptation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCPUMD_DevInstance> m_target;
        #endregion
    }
    public sealed class t_HDCP2Error : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int ErrorCode { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCP2Error(Action<t_HDCP2Error> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2Error>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2Error> m_target;
        #endregion
    }
    public sealed class t_HDCP2Information : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int Information { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCP2Information(Action<t_HDCP2Information> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2Information>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Information", Information);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Information"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Information;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2Information> m_target;
        #endregion
    }
    public sealed class t_HDCP2_MsgPacket : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int MsgID { get { return GetByteAt(4); } }
        public int MsgSize { get { return GetInt16At(5); } }
        public byte[] MsgData { get { return GetByteArrayAt(7, MsgSize); } }

        #region Private
        internal t_HDCP2_MsgPacket(Action<t_HDCP2_MsgPacket> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (MsgSize*1)+7));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (MsgSize*1)+7));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2_MsgPacket>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "MsgID", MsgID);
             XmlAttrib(sb, "MsgSize", MsgSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "MsgID", "MsgSize", "MsgData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return MsgID;
                case 2:
                    return MsgSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2_MsgPacket> m_target;
        #endregion
    }
    public sealed class t_HDCPUMDProcKmdPacket : TraceEvent
    {
        public int EventType { get { return GetInt32At(0); } }
        public int DataSize { get { return GetInt32At(4); } }
        public bool IsSyncRequest { get { return GetInt32At(8) != 0; } }
        public int Status { get { return GetInt32At(12); } }

        #region Private
        internal t_HDCPUMDProcKmdPacket(Action<t_HDCPUMDProcKmdPacket> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCPUMDProcKmdPacket>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "IsSyncRequest", IsSyncRequest);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "DataSize", "IsSyncRequest", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return DataSize;
                case 2:
                    return IsSyncRequest;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCPUMDProcKmdPacket> m_target;
        #endregion
    }
    public sealed class t_HDCP2RxStatusDP : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public bool LinkIntFailure { get { return GetInt32At(4) != 0; } }
        public bool ReauthReq { get { return GetInt32At(8) != 0; } }
        public bool PairingAvailable { get { return GetInt32At(12) != 0; } }
        public bool HpAvailable { get { return GetInt32At(16) != 0; } }
        public bool Ready { get { return GetInt32At(20) != 0; } }
        public int RxStatus { get { return GetByteAt(24); } }

        #region Private
        internal t_HDCP2RxStatusDP(Action<t_HDCP2RxStatusDP> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 25));
            Debug.Assert(!(Version > 0 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2RxStatusDP>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "LinkIntFailure", LinkIntFailure);
             XmlAttrib(sb, "ReauthReq", ReauthReq);
             XmlAttrib(sb, "PairingAvailable", PairingAvailable);
             XmlAttrib(sb, "HpAvailable", HpAvailable);
             XmlAttrib(sb, "Ready", Ready);
             XmlAttrib(sb, "RxStatus", RxStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "LinkIntFailure", "ReauthReq", "PairingAvailable", "HpAvailable", "Ready", "RxStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return LinkIntFailure;
                case 2:
                    return ReauthReq;
                case 3:
                    return PairingAvailable;
                case 4:
                    return HpAvailable;
                case 5:
                    return Ready;
                case 6:
                    return RxStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2RxStatusDP> m_target;
        #endregion
    }
    public sealed class t_HDCP2RxStatusHDMI : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public bool ReAuthReq { get { return GetInt32At(4) != 0; } }
        public bool Ready { get { return GetInt32At(8) != 0; } }
        public int MessageSize { get { return GetInt16At(12); } }
        public int RawData { get { return GetInt16At(14); } }

        #region Private
        internal t_HDCP2RxStatusHDMI(Action<t_HDCP2RxStatusHDMI> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2RxStatusHDMI>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "ReAuthReq", ReAuthReq);
             XmlAttrib(sb, "Ready", Ready);
             XmlAttrib(sb, "MessageSize", MessageSize);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "ReAuthReq", "Ready", "MessageSize", "RawData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return ReAuthReq;
                case 2:
                    return Ready;
                case 3:
                    return MessageSize;
                case 4:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2RxStatusHDMI> m_target;
        #endregion
    }
    public sealed class t_HDCPUMD_KMDQueueHeader : TraceEvent
    {
        public int NumPackets { get { return GetInt32At(0); } }
        public int ValidDataSize { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCPUMD_KMDQueueHeader(Action<t_HDCPUMD_KMDQueueHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCPUMD_KMDQueueHeader>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumPackets", NumPackets);
             XmlAttrib(sb, "ValidDataSize", ValidDataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NumPackets", "ValidDataSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NumPackets;
                case 1:
                    return ValidDataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCPUMD_KMDQueueHeader> m_target;
        #endregion
    }
    public sealed class t_HDCP2Warning : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int WarningCode { get { return GetInt32At(4); } }

        #region Private
        internal t_HDCP2Warning(Action<t_HDCP2Warning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDCP2Warning>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "WarningCode", WarningCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "WarningCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return WarningCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDCP2Warning> m_target;
        #endregion
    }
    public sealed class t_HDRCaps_Info : TraceEvent
    {
        public SB_HDR_CAPS HDRCaps { get { return (SB_HDR_CAPS)GetInt32At(0); } }
        public bool HasWinTMC { get { return GetInt32At(4) != 0; } }
        public int RetStatus { get { return GetInt32At(8); } }

        #region Private
        internal t_HDRCaps_Info(Action<t_HDRCaps_Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDRCaps_Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HDRCaps", HDRCaps);
             XmlAttrib(sb, "HasWinTMC", HasWinTMC);
             XmlAttrib(sb, "RetStatus", RetStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HDRCaps", "HasWinTMC", "RetStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HDRCaps;
                case 1:
                    return HasWinTMC;
                case 2:
                    return RetStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDRCaps_Info> m_target;
        #endregion
    }
    public sealed class t_HDRCaps_CSL_Info : TraceEvent
    {
        public bool FtrEnableHDR { get { return GetInt32At(0) != 0; } }
        public bool IsSingleDisplay { get { return GetInt32At(4) != 0; } }
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(8); } }
        public int DisplayUID { get { return GetInt32At(12); } }
        public int RetStatus { get { return GetInt32At(16); } }

        #region Private
        internal t_HDRCaps_CSL_Info(Action<t_HDRCaps_CSL_Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HDRCaps_CSL_Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FtrEnableHDR", FtrEnableHDR);
             XmlAttrib(sb, "IsSingleDisplay", IsSingleDisplay);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "DisplayUID", DisplayUID);
             XmlAttrib(sb, "RetStatus", RetStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FtrEnableHDR", "IsSingleDisplay", "Port", "DisplayUID", "RetStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FtrEnableHDR;
                case 1:
                    return IsSingleDisplay;
                case 2:
                    return Port;
                case 3:
                    return DisplayUID;
                case 4:
                    return RetStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HDRCaps_CSL_Info> m_target;
        #endregion
    }
    public sealed class t_HECI_IO_MSG : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }
        public int InSize { get { return GetInt32At(4); } }
        public byte[] DataIn { get { return GetByteArrayAt(8, InSize); } }
        public int OutSize { get { return GetInt32At(0+ (InSize*1)+8); } }
        public byte[] DataOut { get { return GetByteArrayAt(0+ (InSize*1)+12, OutSize); } }

        #region Private
        internal t_HECI_IO_MSG(Action<t_HECI_IO_MSG> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (OutSize*1)+ (InSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (OutSize*1)+ (InSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HECI_IO_MSG>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "InSize", InSize);
             XmlAttrib(sb, "OutSize", OutSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "InSize", "DataIn", "OutSize", "DataOut"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return InSize;
                case 2:
                    return OutSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HECI_IO_MSG> m_target;
        #endregion
    }
    public sealed class t_HPD_AND_SPI_Spi : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }

        #region Private
        internal t_HPD_AND_SPI_Spi(Action<t_HPD_AND_SPI_Spi> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HPD_AND_SPI_Spi>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HPD_AND_SPI_Spi> m_target;
        #endregion
    }
    public sealed class t_HPD_AND_SPI_Lpi : TraceEvent
    {
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(0); } }
        public LIVE_STATE LiveState { get { return (LIVE_STATE)GetInt32At(4); } }

        #region Private
        internal t_HPD_AND_SPI_Lpi(Action<t_HPD_AND_SPI_Lpi> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_HPD_AND_SPI_Lpi>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "LiveState", LiveState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "LiveState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return LiveState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_HPD_AND_SPI_Lpi> m_target;
        #endregion
    }
    public sealed class t_I2CTransaction : TraceEvent
    {
        public GMCH_I2C_COMMAND Operation { get { return (GMCH_I2C_COMMAND)GetInt32At(0); } }
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(4); } }
        public int BusType { get { return GetByteAt(8); } }
        public int SlaveAddress { get { return GetInt32At(9); } }
        public int Offset { get { return GetInt32At(13); } }
        public int DataSize { get { return GetInt16At(17); } }
        public byte[] Data { get { return GetByteArrayAt(19, DataSize); } }
        public GMCH_I2C_ERROR_TYPE ReturnStatus { get { return (GMCH_I2C_ERROR_TYPE)GetInt32At(0+ (DataSize*1)+19); } }

        #region Private
        internal t_I2CTransaction(Action<t_I2CTransaction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+23));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+23));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_I2CTransaction>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "BusType", BusType);
             XmlAttrib(sb, "SlaveAddress", SlaveAddress);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Operation", "Port", "BusType", "SlaveAddress", "Offset", "DataSize", "Data", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Operation;
                case 1:
                    return Port;
                case 2:
                    return BusType;
                case 3:
                    return SlaveAddress;
                case 4:
                    return Offset;
                case 5:
                    return DataSize;
                case 6:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_I2CTransaction> m_target;
        #endregion
    }
    public sealed class t_InterruptRepartition : TraceEvent
    {
        public int Event { get { return GetInt32At(0); } }
        public INTERRUPT_EVENT_MESSAGE_TYPE Message { get { return (INTERRUPT_EVENT_MESSAGE_TYPE)GetInt32At(4); } }

        #region Private
        internal t_InterruptRepartition(Action<t_InterruptRepartition> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_InterruptRepartition>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Event", Event);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Event", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Event;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_InterruptRepartition> m_target;
        #endregion
    }
    public sealed class t_DxgkDdiInterruptRoutine : TraceEvent
    {
        public INTERRUPT_EVENT Event { get { return (INTERRUPT_EVENT)GetInt32At(0); } }

        #region Private
        internal t_DxgkDdiInterruptRoutine(Action<t_DxgkDdiInterruptRoutine> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DxgkDdiInterruptRoutine>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Event"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DxgkDdiInterruptRoutine> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_IsDisplayAttached_Entry : TraceEvent
    {
        public bool bIsHDMICompatible { get { return GetInt32At(0) != 0; } }
        public int ucHDMILSIndex { get { return GetByteAt(4); } }

        #region Private
        internal t_INTHDMIENCODER_IsDisplayAttached_Entry(Action<t_INTHDMIENCODER_IsDisplayAttached_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_IsDisplayAttached_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsHDMICompatible", bIsHDMICompatible);
             XmlAttrib(sb, "ucHDMILSIndex", ucHDMILSIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsHDMICompatible", "ucHDMILSIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsHDMICompatible;
                case 1:
                    return ucHDMILSIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_IsDisplayAttached_Entry> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_IsDisplayAttached_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_INTHDMIENCODER_IsDisplayAttached_Exit(Action<t_INTHDMIENCODER_IsDisplayAttached_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_IsDisplayAttached_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_IsDisplayAttached_Exit> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_IsHotPlugSupported_Entry : TraceEvent
    {
        public bool bIsHDMICompatible { get { return GetInt32At(0) != 0; } }
        public int ucHDMILSIndex { get { return GetByteAt(4); } }

        #region Private
        internal t_INTHDMIENCODER_IsHotPlugSupported_Entry(Action<t_INTHDMIENCODER_IsHotPlugSupported_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_IsHotPlugSupported_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsHDMICompatible", bIsHDMICompatible);
             XmlAttrib(sb, "ucHDMILSIndex", ucHDMILSIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsHDMICompatible", "ucHDMILSIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsHDMICompatible;
                case 1:
                    return ucHDMILSIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_IsHotPlugSupported_Entry> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_IsHotPlugSupported_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_INTHDMIENCODER_IsHotPlugSupported_Exit(Action<t_INTHDMIENCODER_IsHotPlugSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_IsHotPlugSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_IsHotPlugSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_SendHDMIInfo_Entry : TraceEvent
    {
        public bool bIsHDMICompatible { get { return GetInt32At(0) != 0; } }
        public int ucHDMILSIndex { get { return GetByteAt(4); } }
        public long ulPipe { get { return GetInt64At(5); } }

        #region Private
        internal t_INTHDMIENCODER_SendHDMIInfo_Entry(Action<t_INTHDMIENCODER_SendHDMIInfo_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_SendHDMIInfo_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsHDMICompatible", bIsHDMICompatible);
             XmlAttrib(sb, "ucHDMILSIndex", ucHDMILSIndex);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsHDMICompatible", "ucHDMILSIndex", "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsHDMICompatible;
                case 1:
                    return ucHDMILSIndex;
                case 2:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_SendHDMIInfo_Entry> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry : TraceEvent
    {
        public bool bIsHDMICompatible { get { return GetInt32At(0) != 0; } }
        public int ucHDMILSIndex { get { return GetByteAt(4); } }

        #region Private
        internal t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry(Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsHDMICompatible", bIsHDMICompatible);
             XmlAttrib(sb, "ucHDMILSIndex", ucHDMILSIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsHDMICompatible", "ucHDMILSIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsHDMICompatible;
                case 1:
                    return ucHDMILSIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Entry> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit : TraceEvent
    {
        public bool bLiveState { get { return GetInt32At(0) != 0; } }
        public bool bAttached { get { return GetInt32At(4) != 0; } }
        public bool bTimeOut { get { return GetInt32At(8) != 0; } }
        public bool bDetachAndAttachNotfn { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit(Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bLiveState", bLiveState);
             XmlAttrib(sb, "bAttached", bAttached);
             XmlAttrib(sb, "bTimeOut", bTimeOut);
             XmlAttrib(sb, "bDetachAndAttachNotfn", bDetachAndAttachNotfn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bLiveState", "bAttached", "bTimeOut", "bDetachAndAttachNotfn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bLiveState;
                case 1:
                    return bAttached;
                case 2:
                    return bTimeOut;
                case 3:
                    return bDetachAndAttachNotfn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_ServiceHotPlugInterrupt_Exit> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_SetHotPlug_Entry : TraceEvent
    {
        public bool bIsHDMICompatible { get { return GetInt32At(0) != 0; } }
        public int ucHDMILSIndex { get { return GetByteAt(4); } }
        public bool bEnable { get { return GetInt32At(5) != 0; } }

        #region Private
        internal t_INTHDMIENCODER_SetHotPlug_Entry(Action<t_INTHDMIENCODER_SetHotPlug_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_SetHotPlug_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsHDMICompatible", bIsHDMICompatible);
             XmlAttrib(sb, "ucHDMILSIndex", ucHDMILSIndex);
             XmlAttrib(sb, "bEnable", bEnable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsHDMICompatible", "ucHDMILSIndex", "bEnable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsHDMICompatible;
                case 1:
                    return ucHDMILSIndex;
                case 2:
                    return bEnable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_SetHotPlug_Entry> m_target;
        #endregion
    }
    public sealed class t_INTHDMIENCODER_SetHotPlug_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_INTHDMIENCODER_SetHotPlug_Exit(Action<t_INTHDMIENCODER_SetHotPlug_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_INTHDMIENCODER_SetHotPlug_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_INTHDMIENCODER_SetHotPlug_Exit> m_target;
        #endregion
    }
    public sealed class t_IPC : TraceEvent
    {
        public GENERIC_STATES Status { get { return (GENERIC_STATES)GetInt32At(0); } }

        #region Private
        internal t_IPC(Action<t_IPC> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IPC>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IPC> m_target;
        #endregion
    }
    public sealed class t_IsAudioENabledInBIOS : TraceEvent
    {
        public bool bAudioEnabledInBIOS { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_IsAudioENabledInBIOS(Action<t_IsAudioENabledInBIOS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IsAudioENabledInBIOS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bAudioEnabledInBIOS", bAudioEnabledInBIOS);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bAudioEnabledInBIOS"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bAudioEnabledInBIOS;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IsAudioENabledInBIOS> m_target;
        #endregion
    }
    public sealed class t_OverlayDBUFData : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int TotalPipeDBUF { get { return GetInt32At(4); } }
        public int RequiredDBUF { get { return GetInt32At(8); } }
        public bool Supported { get { return GetInt32At(12) != 0; } }

        #region Private
        internal t_OverlayDBUFData(Action<t_OverlayDBUFData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_OverlayDBUFData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "TotalPipeDBUF", TotalPipeDBUF);
             XmlAttrib(sb, "RequiredDBUF", RequiredDBUF);
             XmlAttrib(sb, "Supported", Supported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "TotalPipeDBUF", "RequiredDBUF", "Supported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return TotalPipeDBUF;
                case 2:
                    return RequiredDBUF;
                case 3:
                    return Supported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_OverlayDBUFData> m_target;
        #endregion
    }
    public sealed class t_IsIntelAudioDriverPresent : TraceEvent
    {
        public bool bIsIntelAudio { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_IsIntelAudioDriverPresent(Action<t_IsIntelAudioDriverPresent> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IsIntelAudioDriverPresent>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bIsIntelAudio", bIsIntelAudio);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bIsIntelAudio"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bIsIntelAudio;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IsIntelAudioDriverPresent> m_target;
        #endregion
    }
    public sealed class t_LaceApplyIeData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Row { get { return GetInt32At(8); } }
        public int Column { get { return GetInt32At(12); } }
        public int DataSize { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, DataSize); } }

        #region Private
        internal t_LaceApplyIeData(Action<t_LaceApplyIeData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LaceApplyIeData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LaceApplyIeData> m_target;
        #endregion
    }
    public sealed class t_LaceClientEventHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_LaceClientEventHandlerData(Action<t_LaceClientEventHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LaceClientEventHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LaceClientEventHandlerData> m_target;
        #endregion
    }
    public sealed class t_LaceDisableData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlData { get { return GetInt32At(8); } }

        #region Private
        internal t_LaceDisableData(Action<t_LaceDisableData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LaceDisableData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LaceDisableData> m_target;
        #endregion
    }
    public sealed class t_LaceEnableData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int ControlData { get { return GetInt32At(8); } }

        #region Private
        internal t_LaceEnableData(Action<t_LaceEnableData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LaceEnableData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LaceEnableData> m_target;
        #endregion
    }
    public sealed class t_LaceHistogramData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Row { get { return GetInt32At(8); } }
        public int Column { get { return GetInt32At(12); } }
        public int DataSize { get { return GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, DataSize); } }

        #region Private
        internal t_LaceHistogramData(Action<t_LaceHistogramData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LaceHistogramData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LaceHistogramData> m_target;
        #endregion
    }
    public sealed class t_LSPCON_AuxAccess : TraceEvent
    {
        public int Command { get { return GetInt32At(0); } }
        public int Size { get { return GetInt32At(4); } }
        public byte[] Data { get { return GetByteArrayAt(8, Size); } }

        #region Private
        internal t_LSPCON_AuxAccess(Action<t_LSPCON_AuxAccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (Size*1)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (Size*1)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_LSPCON_AuxAccess>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Command", Command);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Command", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Command;
                case 1:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_LSPCON_AuxAccess> m_target;
        #endregion
    }
    public sealed class t_MapLHArgsToSBArgs_Entry : TraceEvent
    {
        public IGFX_DEV_POWER_STATE IgfxPowerstate { get { return (IGFX_DEV_POWER_STATE)GetInt32At(0); } }
        public IGFX_SYS_POWER_ACTION IgfxPowerAction { get { return (IGFX_SYS_POWER_ACTION)GetInt32At(4); } }

        #region Private
        internal t_MapLHArgsToSBArgs_Entry(Action<t_MapLHArgsToSBArgs_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MapLHArgsToSBArgs_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IgfxPowerstate", IgfxPowerstate);
             XmlAttrib(sb, "IgfxPowerAction", IgfxPowerAction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IgfxPowerstate", "IgfxPowerAction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IgfxPowerstate;
                case 1:
                    return IgfxPowerAction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MapLHArgsToSBArgs_Entry> m_target;
        #endregion
    }
    public sealed class t_MapLHArgsToSBArgs_Exit : TraceEvent
    {
        public DEV_POWER_STATE eSB_DevPowerState { get { return (DEV_POWER_STATE)GetInt32At(0); } }

        #region Private
        internal t_MapLHArgsToSBArgs_Exit(Action<t_MapLHArgsToSBArgs_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MapLHArgsToSBArgs_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "eSB_DevPowerState", eSB_DevPowerState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "eSB_DevPowerState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return eSB_DevPowerState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MapLHArgsToSBArgs_Exit> m_target;
        #endregion
    }
    public sealed class t_MarkerData : TraceEvent
    {
        public int MarkerID { get { return GetInt32At(0); } }
        public string Reason { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal t_MarkerData(Action<t_MarkerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MarkerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MarkerID", MarkerID);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MarkerID", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MarkerID;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MarkerData> m_target;
        #endregion
    }
    public sealed class t_DebugMessage : TraceEvent
    {
        public int Verbosity { get { return GetByteAt(0); } }
        public string Message { get { return GetUTF8StringAt(1); } }

        #region Private
        internal t_DebugMessage(Action<t_DebugMessage> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(1)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DebugMessage>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Verbosity", Verbosity);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Verbosity", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Verbosity;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DebugMessage> m_target;
        #endregion
    }
    public sealed class t_MMIOAccessData : TraceEvent
    {
        public int Offset { get { return GetInt32At(0); } }
        public Address VirtualAddress { get { return GetAddressAt(4); } }
        public int DataSize { get { return GetInt32At(HostOffset(8, 1)); } }
        public byte[] Data { get { return GetByteArrayAt(HostOffset(12, 1), DataSize); } }

        #region Private
        internal t_MMIOAccessData(Action<t_MMIOAccessData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0+ (DataSize*1)+12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0+ (DataSize*1)+12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MMIOAccessData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttribHex(sb, "VirtualAddress", VirtualAddress);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Offset", "VirtualAddress", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Offset;
                case 1:
                    return VirtualAddress;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MMIOAccessData> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_AddDisplayModes_Entry : TraceEvent
    {
        public long ulDisplayID { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_AddDisplayModes_Entry(Action<t_MODESMANAGER_AddDisplayModes_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_AddDisplayModes_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_AddDisplayModes_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_AddVBTModes_Entry : TraceEvent
    {
        public long ulDisplayID { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_AddVBTModes_Entry(Action<t_MODESMANAGER_AddVBTModes_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_AddVBTModes_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_AddVBTModes_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_GetLastSetModeData_Entry : TraceEvent
    {
        public long ulPipe { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_GetLastSetModeData_Entry(Action<t_MODESMANAGER_GetLastSetModeData_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_GetLastSetModeData_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulPipe", ulPipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulPipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulPipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_GetLastSetModeData_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_GetLastSetModeData_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_MODESMANAGER_GetLastSetModeData_Exit(Action<t_MODESMANAGER_GetLastSetModeData_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_GetLastSetModeData_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_GetLastSetModeData_Exit> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_GetModeSupport_Entry : TraceEvent
    {
        public long ulDisplayID { get { return GetInt64At(0); } }
        public int ucValidateDevicesOnly { get { return GetByteAt(8); } }

        #region Private
        internal t_MODESMANAGER_GetModeSupport_Entry(Action<t_MODESMANAGER_GetModeSupport_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_GetModeSupport_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "ucValidateDevicesOnly", ucValidateDevicesOnly);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID", "ucValidateDevicesOnly"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                case 1:
                    return ucValidateDevicesOnly;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_GetModeSupport_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_GetModeSupport_Exit : TraceEvent
    {
        public long ulStatus { get { return GetInt64At(0); } }
        public int ucRequestedState { get { return GetByteAt(8); } }

        #region Private
        internal t_MODESMANAGER_GetModeSupport_Exit(Action<t_MODESMANAGER_GetModeSupport_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_GetModeSupport_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             XmlAttrib(sb, "ucRequestedState", ucRequestedState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus", "ucRequestedState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                case 1:
                    return ucRequestedState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_GetModeSupport_Exit> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_NotifyCommitEnd_Exit : TraceEvent
    {
        public long ulRet { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_NotifyCommitEnd_Exit(Action<t_MODESMANAGER_NotifyCommitEnd_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_NotifyCommitEnd_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulRet", ulRet);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulRet"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulRet;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_NotifyCommitEnd_Exit> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_SetModePState_Entry : TraceEvent
    {
        public long ulDisplayID { get { return GetInt64At(0); } }
        public long DpsControlMode { get { return GetInt64At(8); } }

        #region Private
        internal t_MODESMANAGER_SetModePState_Entry(Action<t_MODESMANAGER_SetModePState_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_SetModePState_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulDisplayID", ulDisplayID);
             XmlAttrib(sb, "DpsControlMode", DpsControlMode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulDisplayID", "DpsControlMode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulDisplayID;
                case 1:
                    return DpsControlMode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_SetModePState_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_SetModePState_Exit : TraceEvent
    {
        public long ulStatus { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_SetModePState_Exit(Action<t_MODESMANAGER_SetModePState_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_SetModePState_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_SetModePState_Exit> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_SetMode_Entry : TraceEvent
    {
        public int nDisplays { get { return GetInt32At(0); } }
        public long ulPipeIndex { get { return GetInt64At(4); } }

        #region Private
        internal t_MODESMANAGER_SetMode_Entry(Action<t_MODESMANAGER_SetMode_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_SetMode_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "nDisplays", nDisplays);
             XmlAttrib(sb, "ulPipeIndex", ulPipeIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "nDisplays", "ulPipeIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return nDisplays;
                case 1:
                    return ulPipeIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_SetMode_Entry> m_target;
        #endregion
    }
    public sealed class t_MODESMANAGER_SetMode_Exit : TraceEvent
    {
        public long ulStatus { get { return GetInt64At(0); } }

        #region Private
        internal t_MODESMANAGER_SetMode_Exit(Action<t_MODESMANAGER_SetMode_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_MODESMANAGER_SetMode_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ulStatus", ulStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ulStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ulStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_MODESMANAGER_SetMode_Exit> m_target;
        #endregion
    }
    public sealed class t_NotifyGfxStatus : TraceEvent
    {
        public Address GfxClientHandle { get { return GetAddressAt(0); } }
        public GFX_STATUS GfxStatus { get { return (GFX_STATUS)GetInt16At(HostOffset(4, 1)); } }
        public Address GfxClientContext { get { return GetAddressAt(HostOffset(6, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(10, 2)); } }

        #region Private
        internal t_NotifyGfxStatus(Action<t_NotifyGfxStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(10, 2))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(10, 2))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_NotifyGfxStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientHandle", GfxClientHandle);
             XmlAttrib(sb, "GfxStatus", GfxStatus);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientHandle", "GfxStatus", "GfxClientContext", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientHandle;
                case 1:
                    return GfxStatus;
                case 2:
                    return GfxClientContext;
                case 3:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_NotifyGfxStatus> m_target;
        #endregion
    }
    public sealed class t_GfxClientNotifyStatusFailure : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public int Status { get { return GetInt32At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(8, 1)); } }

        #region Private
        internal t_GfxClientNotifyStatusFailure(Action<t_GfxClientNotifyStatusFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(8, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(8, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientNotifyStatusFailure>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "Status", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return Status;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientNotifyStatusFailure> m_target;
        #endregion
    }
    public sealed class t_GfxClientNotifyStatus : TraceEvent
    {
        public Address GfxClientContext { get { return GetAddressAt(0); } }
        public GFX_CLIENT_STATUS GfxClientStatus { get { return (GFX_CLIENT_STATUS)GetInt16At(HostOffset(4, 1)); } }
        public string Message { get { return GetUnicodeStringAt(HostOffset(6, 1)); } }

        #region Private
        internal t_GfxClientNotifyStatus(Action<t_GfxClientNotifyStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(6, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(6, 1))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxClientNotifyStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GfxClientContext", GfxClientContext);
             XmlAttrib(sb, "GfxClientStatus", GfxClientStatus);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GfxClientContext", "GfxClientStatus", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GfxClientContext;
                case 1:
                    return GfxClientStatus;
                case 2:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxClientNotifyStatus> m_target;
        #endregion
    }
    public sealed class t_GfxNotifyPCEntry : TraceEvent
    {
        public IGFX_PC_NOTIFY_EVENT EventType { get { return (IGFX_PC_NOTIFY_EVENT)GetInt32At(0); } }
        public DisplayConfig DispConfig { get { return (DisplayConfig)GetInt32At(4); } }

        #region Private
        internal t_GfxNotifyPCEntry(Action<t_GfxNotifyPCEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxNotifyPCEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "DispConfig", DispConfig);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "DispConfig"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return DispConfig;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxNotifyPCEntry> m_target;
        #endregion
    }
    public sealed class t_OPMConfigureProtectedOutput : TraceEvent
    {
        public Address Handle { get { return GetAddressAt(0); } }
        public int SequenceNumber { get { return GetInt32At(HostOffset(4, 1)); } }
        public Guid GUIDSetting { get { return GetGuidAt(HostOffset(8, 1)); } }
        public int ParameterSize { get { return GetInt32At(HostOffset(24, 1)); } }

        #region Private
        internal t_OPMConfigureProtectedOutput(Action<t_OPMConfigureProtectedOutput> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(28, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(28, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_OPMConfigureProtectedOutput>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Handle", Handle);
             XmlAttrib(sb, "SequenceNumber", SequenceNumber);
             XmlAttrib(sb, "GUIDSetting", GUIDSetting);
             XmlAttrib(sb, "ParameterSize", ParameterSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Handle", "SequenceNumber", "GUIDSetting", "ParameterSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Handle;
                case 1:
                    return SequenceNumber;
                case 2:
                    return GUIDSetting;
                case 3:
                    return ParameterSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_OPMConfigureProtectedOutput> m_target;
        #endregion
    }
    public sealed class t_OPMCreateProtectedOutput : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public Address Handle { get { return GetAddressAt(4); } }

        #region Private
        internal t_OPMCreateProtectedOutput(Action<t_OPMCreateProtectedOutput> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_OPMCreateProtectedOutput>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttribHex(sb, "Handle", Handle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Handle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Handle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_OPMCreateProtectedOutput> m_target;
        #endregion
    }
    public sealed class t_OPMGetSetParamData : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public OPERATION Op { get { return (OPERATION)GetInt32At(4); } }
        public CP_PROTECTION_TYPE ProtectTypeMask { get { return (CP_PROTECTION_TYPE)GetInt32At(8); } }
        public CP_PROTECTION_LEVEL_HDCP Level { get { return (CP_PROTECTION_LEVEL_HDCP)GetInt32At(12); } }
        public CONNECTOR_TYPE Connector { get { return (CONNECTOR_TYPE)GetInt32At(16); } }
        public bool IsSecondStep { get { return GetInt32At(20) != 0; } }
        public bool IsRepeater { get { return GetInt32At(24) != 0; } }
        public int MajorVer { get { return GetInt32At(28); } }
        public int MinorVer { get { return GetInt32At(32); } }
        public int StreamInfoMask { get { return GetInt32At(36); } }
        public int StreamType { get { return GetInt32At(40); } }
        public bool bAcquireLock { get { return GetInt32At(44) != 0; } }
        public int Status { get { return GetInt32At(48); } }
        // Skipping Reserved1
        // Skipping Reserved2

        #region Private
        internal t_OPMGetSetParamData(Action<t_OPMGetSetParamData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 60));
            Debug.Assert(!(Version > 0 && EventDataLength < 60));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_OPMGetSetParamData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Op", Op);
             XmlAttrib(sb, "ProtectTypeMask", ProtectTypeMask);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "Connector", Connector);
             XmlAttrib(sb, "IsSecondStep", IsSecondStep);
             XmlAttrib(sb, "IsRepeater", IsRepeater);
             XmlAttrib(sb, "MajorVer", MajorVer);
             XmlAttrib(sb, "MinorVer", MinorVer);
             XmlAttrib(sb, "StreamInfoMask", StreamInfoMask);
             XmlAttrib(sb, "StreamType", StreamType);
             XmlAttrib(sb, "bAcquireLock", bAcquireLock);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Op", "ProtectTypeMask", "Level", "Connector", "IsSecondStep", "IsRepeater", "MajorVer", "MinorVer", "StreamInfoMask", "StreamType", "bAcquireLock", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Op;
                case 2:
                    return ProtectTypeMask;
                case 3:
                    return Level;
                case 4:
                    return Connector;
                case 5:
                    return IsSecondStep;
                case 6:
                    return IsRepeater;
                case 7:
                    return MajorVer;
                case 8:
                    return MinorVer;
                case 9:
                    return StreamInfoMask;
                case 10:
                    return StreamType;
                case 11:
                    return bAcquireLock;
                case 12:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_OPMGetSetParamData> m_target;
        #endregion
    }
    public sealed class t_PathSetModeEntry : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public int SourceID { get { return GetInt32At(4); } }
        public bool FastModeSet { get { return GetInt32At(8) != 0; } }
        public IGFX_IMPORTANCE_ORDINAL ImportanceOrdinal { get { return (IGFX_IMPORTANCE_ORDINAL)GetInt32At(12); } }
        public int PinnedSrcWidth { get { return GetInt32At(16); } }
        public int PinnedSrcHeight { get { return GetInt32At(20); } }
        public int SrcModeFlags { get { return GetInt32At(24); } }
        public IGFX_SCALING Scaling { get { return (IGFX_SCALING)GetInt32At(28); } }
        public IGFX_ROTATION Rotation { get { return (IGFX_ROTATION)GetInt32At(32); } }
        public PipeIndex PipeIndex { get { return (PipeIndex)GetInt32At(36); } }
        public int PlaneIndex { get { return GetByteAt(40); } }
        public SURFACE_MEMORY_TYPE SurfMemType { get { return (SURFACE_MEMORY_TYPE)GetInt32At(41); } }

        #region Private
        internal t_PathSetModeEntry(Action<t_PathSetModeEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 45));
            Debug.Assert(!(Version > 0 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PathSetModeEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "FastModeSet", FastModeSet);
             XmlAttrib(sb, "ImportanceOrdinal", ImportanceOrdinal);
             XmlAttrib(sb, "PinnedSrcWidth", PinnedSrcWidth);
             XmlAttrib(sb, "PinnedSrcHeight", PinnedSrcHeight);
             XmlAttrib(sb, "SrcModeFlags", SrcModeFlags);
             XmlAttrib(sb, "Scaling", Scaling);
             XmlAttrib(sb, "Rotation", Rotation);
             XmlAttrib(sb, "PipeIndex", PipeIndex);
             XmlAttrib(sb, "PlaneIndex", PlaneIndex);
             XmlAttrib(sb, "SurfMemType", SurfMemType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "SourceID", "FastModeSet", "ImportanceOrdinal", "PinnedSrcWidth", "PinnedSrcHeight", "SrcModeFlags", "Scaling", "Rotation", "PipeIndex", "PlaneIndex", "SurfMemType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return SourceID;
                case 2:
                    return FastModeSet;
                case 3:
                    return ImportanceOrdinal;
                case 4:
                    return PinnedSrcWidth;
                case 5:
                    return PinnedSrcHeight;
                case 6:
                    return SrcModeFlags;
                case 7:
                    return Scaling;
                case 8:
                    return Rotation;
                case 9:
                    return PipeIndex;
                case 10:
                    return PlaneIndex;
                case 11:
                    return SurfMemType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PathSetModeEntry> m_target;
        #endregion
    }
    public sealed class t_PathSetScanLine : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public PipeIndex PipeIndex { get { return (PipeIndex)GetInt32At(4); } }
        public int ScanLineStart { get { return GetInt32At(8); } }
        public int ScanLineStop { get { return GetInt32At(12); } }

        #region Private
        internal t_PathSetScanLine(Action<t_PathSetScanLine> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PathSetScanLine>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "PipeIndex", PipeIndex);
             XmlAttrib(sb, "ScanLineStart", ScanLineStart);
             XmlAttrib(sb, "ScanLineStop", ScanLineStop);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "PipeIndex", "ScanLineStart", "ScanLineStop"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return PipeIndex;
                case 2:
                    return ScanLineStart;
                case 3:
                    return ScanLineStop;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PathSetScanLine> m_target;
        #endregion
    }
    public sealed class t_PathSetVisibilityEntry : TraceEvent
    {
        public int TargetID { get { return GetInt32At(0); } }
        public bool Visible { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_PathSetVisibilityEntry(Action<t_PathSetVisibilityEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PathSetVisibilityEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Visible", Visible);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Visible"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Visible;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PathSetVisibilityEntry> m_target;
        #endregion
    }
    public sealed class t_PavpInfo : TraceEvent
    {
        public PAVP_ACTION Action { get { return (PAVP_ACTION)GetInt32At(0); } }
        public int SlotId { get { return GetInt32At(4); } }
        public PAVP_TEARDOWN_REASON Reason { get { return (PAVP_TEARDOWN_REASON)GetInt32At(8); } }

        #region Private
        internal t_PavpInfo(Action<t_PavpInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PavpInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Action", Action);
             XmlAttrib(sb, "SlotId", SlotId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Action", "SlotId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Action;
                case 1:
                    return SlotId;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PavpInfo> m_target;
        #endregion
    }
    public sealed class t_PcGfxRegValueBinary : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public string Name { get { return GetUnicodeStringAt(8); } }
        public int DataSize { get { return GetInt32At(SkipUnicodeString(8)); } }
        public byte[] Data { get { return GetByteArrayAt(SkipUnicodeString(8)+4, DataSize); } }
        public int ReturnStatus { get { return GetInt32At(SkipUnicodeString(8)+4); } }

        #region Private
        internal t_PcGfxRegValueBinary(Action<t_PcGfxRegValueBinary> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcGfxRegValueBinary>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Name", "DataSize", "Data", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Name;
                case 2:
                    return DataSize;
                case 3:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcGfxRegValueBinary> m_target;
        #endregion
    }
    public sealed class t_PcGfxRegValueDword : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public string Name { get { return GetUnicodeStringAt(8); } }
        public int Data { get { return GetInt32At(SkipUnicodeString(8)); } }
        public int ReturnStatus { get { return GetInt32At(SkipUnicodeString(8)+4); } }

        #region Private
        internal t_PcGfxRegValueDword(Action<t_PcGfxRegValueDword> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcGfxRegValueDword>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Name", "Data", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Name;
                case 2:
                    return Data;
                case 3:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcGfxRegValueDword> m_target;
        #endregion
    }
    public sealed class t_PcPowerPlanRegValue : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int OsPowerPlan { get { return GetInt32At(8); } }
        public int PowerSource { get { return GetInt32At(12); } }
        public int GraphicsPowerPlan { get { return GetInt32At(16); } }
        public int ReturnStatus { get { return GetInt32At(20); } }

        #region Private
        internal t_PcPowerPlanRegValue(Action<t_PcPowerPlanRegValue> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcPowerPlanRegValue>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "OsPowerPlan", OsPowerPlan);
             XmlAttrib(sb, "PowerSource", PowerSource);
             XmlAttrib(sb, "GraphicsPowerPlan", GraphicsPowerPlan);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "OsPowerPlan", "PowerSource", "GraphicsPowerPlan", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return OsPowerPlan;
                case 2:
                    return PowerSource;
                case 3:
                    return GraphicsPowerPlan;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcPowerPlanRegValue> m_target;
        #endregion
    }
    public sealed class t_PcRegValueFullPathDword : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public string Path { get { return GetUnicodeStringAt(8); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public int Data { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(8))); } }
        public int ReturnStatus { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(8))+4); } }

        #region Private
        internal t_PcRegValueFullPathDword(Action<t_PcRegValueFullPathDword> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcRegValueFullPathDword>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Path", "Name", "Data", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Path;
                case 2:
                    return Name;
                case 3:
                    return Data;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcRegValueFullPathDword> m_target;
        #endregion
    }
    public sealed class t_PFMBOpRegHandlerData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Data { get { return GetInt32At(8); } }

        #region Private
        internal t_PFMBOpRegHandlerData(Action<t_PFMBOpRegHandlerData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PFMBOpRegHandlerData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PFMBOpRegHandlerData> m_target;
        #endregion
    }
    public sealed class t_PhaseCoordinatorContext : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] AlsPhaseAdjustInfo { get { return GetByteArrayAt(12, DataSize); } }
        public byte[] DpstPhaseAdjustInfo { get { return GetByteArrayAt(0+ (DataSize*1)+12, DataSize); } }
        public byte[] BlcUserAdjustInfo { get { return GetByteArrayAt(0+ (DataSize*1)+ (DataSize*1)+12, DataSize); } }
        public byte[] DptfPhaseAdjustInfo { get { return GetByteArrayAt(0+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+12, DataSize); } }

        #region Private
        internal t_PhaseCoordinatorContext(Action<t_PhaseCoordinatorContext> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PhaseCoordinatorContext>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "AlsPhaseAdjustInfo", "DpstPhaseAdjustInfo", "BlcUserAdjustInfo", "DptfPhaseAdjustInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PhaseCoordinatorContext> m_target;
        #endregion
    }
    public sealed class t_PhaseCoordinatorProgramAdjust : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Adjust { get { return GetInt32At(8); } }
        public int Feature { get { return GetInt32At(12); } }
        public int Immediate { get { return GetInt32At(16); } }

        #region Private
        internal t_PhaseCoordinatorProgramAdjust(Action<t_PhaseCoordinatorProgramAdjust> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PhaseCoordinatorProgramAdjust>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Adjust", Adjust);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "Immediate", Immediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Adjust", "Feature", "Immediate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Adjust;
                case 2:
                    return Feature;
                case 3:
                    return Immediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PhaseCoordinatorProgramAdjust> m_target;
        #endregion
    }
    public sealed class t_PhaseCoordinatorSetupDpstPhasing : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int IncrementPerMil { get { return GetInt32At(8); } }

        #region Private
        internal t_PhaseCoordinatorSetupDpstPhasing(Action<t_PhaseCoordinatorSetupDpstPhasing> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PhaseCoordinatorSetupDpstPhasing>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IncrementPerMil", IncrementPerMil);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IncrementPerMil"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IncrementPerMil;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PhaseCoordinatorSetupDpstPhasing> m_target;
        #endregion
    }
    public sealed class t_PhaseCoordinatorStartTimer : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public long PhaseTimeOut { get { return GetInt64At(8); } }

        #region Private
        internal t_PhaseCoordinatorStartTimer(Action<t_PhaseCoordinatorStartTimer> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PhaseCoordinatorStartTimer>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PhaseTimeOut", PhaseTimeOut);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PhaseTimeOut"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PhaseTimeOut;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PhaseCoordinatorStartTimer> m_target;
        #endregion
    }
    public sealed class t_PipeUnderRun_BasicInfo : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }

        #region Private
        internal t_PipeUnderRun_BasicInfo(Action<t_PipeUnderRun_BasicInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PipeUnderRun_BasicInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PipeUnderRun_BasicInfo> m_target;
        #endregion
    }
    public sealed class t_PipeUnderRun_MemoryInfo : TraceEvent
    {
        public int Channel { get { return GetByteAt(0); } }
        public int Frequency { get { return GetInt32At(1); } }

        #region Private
        internal t_PipeUnderRun_MemoryInfo(Action<t_PipeUnderRun_MemoryInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PipeUnderRun_MemoryInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Channel", Channel);
             XmlAttrib(sb, "Frequency", Frequency);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Channel", "Frequency"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Channel;
                case 1:
                    return Frequency;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PipeUnderRun_MemoryInfo> m_target;
        #endregion
    }
    public sealed class t_PipeUnderRun_PipeScaler : TraceEvent
    {
        public PLANE_TYPE PlaneIndex { get { return (PLANE_TYPE)GetInt32At(0); } }
        public int CTL { get { return GetInt32At(4); } }
        public int Size { get { return GetInt32At(8); } }

        #region Private
        internal t_PipeUnderRun_PipeScaler(Action<t_PipeUnderRun_PipeScaler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PipeUnderRun_PipeScaler>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PlaneIndex", PlaneIndex);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PlaneIndex", "CTL", "Size"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PlaneIndex;
                case 1:
                    return CTL;
                case 2:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PipeUnderRun_PipeScaler> m_target;
        #endregion
    }
    public sealed class t_PipeUnderRun_Plane : TraceEvent
    {
        public PLANE_TYPE PlaneIndex { get { return (PLANE_TYPE)GetInt32At(0); } }
        public int CTL { get { return GetInt32At(4); } }
        public int DBUF { get { return GetInt32At(8); } }
        public int NV12_DBUF { get { return GetInt32At(12); } }
        public int Size { get { return GetInt32At(16); } }
        public int Stride { get { return GetInt32At(20); } }
        public int Offset { get { return GetInt32At(24); } }
        public int AUX_Dist { get { return GetInt32At(28); } }
        public int AUX_Off { get { return GetInt32At(32); } }

        #region Private
        internal t_PipeUnderRun_Plane(Action<t_PipeUnderRun_Plane> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PipeUnderRun_Plane>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PlaneIndex", PlaneIndex);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "DBUF", DBUF);
             XmlAttrib(sb, "NV12_DBUF", NV12_DBUF);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Stride", Stride);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "AUX_Dist", AUX_Dist);
             XmlAttrib(sb, "AUX_Off", AUX_Off);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PlaneIndex", "CTL", "DBUF", "NV12_DBUF", "Size", "Stride", "Offset", "AUX_Dist", "AUX_Off"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PlaneIndex;
                case 1:
                    return CTL;
                case 2:
                    return DBUF;
                case 3:
                    return NV12_DBUF;
                case 4:
                    return Size;
                case 5:
                    return Stride;
                case 6:
                    return Offset;
                case 7:
                    return AUX_Dist;
                case 8:
                    return AUX_Off;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PipeUnderRun_Plane> m_target;
        #endregion
    }
    public sealed class t_PipeUnderRun_Plane_WM : TraceEvent
    {
        public PLANE_TYPE PlaneIndex { get { return (PLANE_TYPE)GetInt32At(0); } }
        public int L0 { get { return GetInt32At(4); } }
        public int L1 { get { return GetInt32At(8); } }
        public int L2 { get { return GetInt32At(12); } }
        public int L3 { get { return GetInt32At(16); } }
        public int L4 { get { return GetInt32At(20); } }
        public int L5 { get { return GetInt32At(24); } }
        public int L6 { get { return GetInt32At(28); } }
        public int L7 { get { return GetInt32At(32); } }
        public int Trans { get { return GetInt32At(36); } }
        public int LineTime { get { return GetInt32At(40); } }

        #region Private
        internal t_PipeUnderRun_Plane_WM(Action<t_PipeUnderRun_Plane_WM> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 44));
            Debug.Assert(!(Version > 0 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PipeUnderRun_Plane_WM>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PlaneIndex", PlaneIndex);
             XmlAttrib(sb, "L0", L0);
             XmlAttrib(sb, "L1", L1);
             XmlAttrib(sb, "L2", L2);
             XmlAttrib(sb, "L3", L3);
             XmlAttrib(sb, "L4", L4);
             XmlAttrib(sb, "L5", L5);
             XmlAttrib(sb, "L6", L6);
             XmlAttrib(sb, "L7", L7);
             XmlAttrib(sb, "Trans", Trans);
             XmlAttrib(sb, "LineTime", LineTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PlaneIndex", "L0", "L1", "L2", "L3", "L4", "L5", "L6", "L7", "Trans", "LineTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PlaneIndex;
                case 1:
                    return L0;
                case 2:
                    return L1;
                case 3:
                    return L2;
                case 4:
                    return L3;
                case 5:
                    return L4;
                case 6:
                    return L5;
                case 7:
                    return L6;
                case 8:
                    return L7;
                case 9:
                    return Trans;
                case 10:
                    return LineTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PipeUnderRun_Plane_WM> m_target;
        #endregion
    }
    public sealed class t_DisplayDoubleBuffSync : TraceEvent
    {
        public bool DBSOn { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_DisplayDoubleBuffSync(Action<t_DisplayDoubleBuffSync> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DisplayDoubleBuffSync>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DBSOn", DBSOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DBSOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DBSOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DisplayDoubleBuffSync> m_target;
        #endregion
    }
    public sealed class t_DisplayPlaneArming : TraceEvent
    {
        public int Plane { get { return GetInt32At(0); } }
        public int Pipe { get { return GetInt32At(4); } }
        public bool Enabled { get { return GetInt32At(8) != 0; } }
        public int Format { get { return GetInt32At(12); } }
        public int Tile { get { return GetInt32At(16); } }
        public int SizeX { get { return GetInt32At(20); } }
        public int SizeY { get { return GetInt32At(24); } }
        public int PosX { get { return GetInt32At(28); } }
        public int PosY { get { return GetInt32At(32); } }
        public int OffsetX { get { return GetInt32At(36); } }
        public int OffsetY { get { return GetInt32At(40); } }
        public int Address { get { return GetInt32At(44); } }

        #region Private
        internal t_DisplayPlaneArming(Action<t_DisplayPlaneArming> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 48));
            Debug.Assert(!(Version > 0 && EventDataLength < 48));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DisplayPlaneArming>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Plane", Plane);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Enabled", Enabled);
             XmlAttrib(sb, "Format", Format);
             XmlAttrib(sb, "Tile", Tile);
             XmlAttrib(sb, "SizeX", SizeX);
             XmlAttrib(sb, "SizeY", SizeY);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "OffsetX", OffsetX);
             XmlAttrib(sb, "OffsetY", OffsetY);
             XmlAttrib(sb, "Address", Address);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Plane", "Pipe", "Enabled", "Format", "Tile", "SizeX", "SizeY", "PosX", "PosY", "OffsetX", "OffsetY", "Address"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Plane;
                case 1:
                    return Pipe;
                case 2:
                    return Enabled;
                case 3:
                    return Format;
                case 4:
                    return Tile;
                case 5:
                    return SizeX;
                case 6:
                    return SizeY;
                case 7:
                    return PosX;
                case 8:
                    return PosY;
                case 9:
                    return OffsetX;
                case 10:
                    return OffsetY;
                case 11:
                    return Address;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DisplayPlaneArming> m_target;
        #endregion
    }
    public sealed class t_DisplayScalerArming : TraceEvent
    {
        public int Scaler { get { return GetInt32At(0); } }
        public int Pipe { get { return GetInt32At(4); } }
        public bool Enabled { get { return GetInt32At(8) != 0; } }
        public int SizeX { get { return GetInt32At(12); } }
        public int SizeY { get { return GetInt32At(16); } }
        public int PosX { get { return GetInt32At(20); } }
        public int PosY { get { return GetInt32At(24); } }
        public int ScalingMode { get { return GetInt32At(28); } }
        public int CurScanline { get { return GetInt32At(32); } }

        #region Private
        internal t_DisplayScalerArming(Action<t_DisplayScalerArming> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_DisplayScalerArming>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Scaler", Scaler);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Enabled", Enabled);
             XmlAttrib(sb, "SizeX", SizeX);
             XmlAttrib(sb, "SizeY", SizeY);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "ScalingMode", ScalingMode);
             XmlAttrib(sb, "CurScanline", CurScanline);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Scaler", "Pipe", "Enabled", "SizeX", "SizeY", "PosX", "PosY", "ScalingMode", "CurScanline"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Scaler;
                case 1:
                    return Pipe;
                case 2:
                    return Enabled;
                case 3:
                    return SizeX;
                case 4:
                    return SizeY;
                case 5:
                    return PosX;
                case 6:
                    return PosY;
                case 7:
                    return ScalingMode;
                case 8:
                    return CurScanline;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_DisplayScalerArming> m_target;
        #endregion
    }
    public sealed class t_PoshEvent_Info : TraceEvent
    {
        public POSH_EVENT_TYPE EventType { get { return (POSH_EVENT_TYPE)GetInt32At(0); } }
        public int EventData1 { get { return GetInt32At(4); } }
        public int EventData2 { get { return GetInt32At(8); } }

        #region Private
        internal t_PoshEvent_Info(Action<t_PoshEvent_Info> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PoshEvent_Info>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "EventData1", EventData1);
             XmlAttrib(sb, "EventData2", EventData2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "EventData1", "EventData2"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return EventData1;
                case 2:
                    return EventData2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PoshEvent_Info> m_target;
        #endregion
    }
    public sealed class t_ProgramDBuf : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PLANE_ZORDER ZOrder { get { return (PLANE_ZORDER)GetInt32At(4); } }
        public SB_PIXELFORMAT SourcePixelFormat { get { return (SB_PIXELFORMAT)GetInt32At(8); } }
        public SURFACE_MEMORY_TYPE SurfaceMemType { get { return (SURFACE_MEMORY_TYPE)GetInt32At(12); } }
        public PLANE_ORIENTATION Rotation { get { return (PLANE_ORIENTATION)GetInt32At(16); } }
        public int XRes { get { return GetInt32At(20); } }
        public int YRes { get { return GetInt32At(24); } }
        public int BitsPerPixel { get { return GetInt32At(28); } }
        public int PlaneScaleValueForMPO { get { return GetInt32At(32); } }
        public int PlaneBufReg { get { return GetInt32At(36); } }
        public int NV12BufReg { get { return GetInt32At(40); } }
        public bool IsCursorPlane { get { return GetInt32At(44) != 0; } }
        public int StartBlockY { get { return GetInt16At(48); } }
        public int EndBlockY { get { return GetInt16At(50); } }
        public int StartBlockUV { get { return GetInt16At(52); } }
        public int EndBlockUV { get { return GetInt16At(54); } }

        #region Private
        internal t_ProgramDBuf(Action<t_ProgramDBuf> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 56));
            Debug.Assert(!(Version > 0 && EventDataLength < 56));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ProgramDBuf>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "ZOrder", ZOrder);
             XmlAttrib(sb, "SourcePixelFormat", SourcePixelFormat);
             XmlAttrib(sb, "SurfaceMemType", SurfaceMemType);
             XmlAttrib(sb, "Rotation", Rotation);
             XmlAttrib(sb, "XRes", XRes);
             XmlAttrib(sb, "YRes", YRes);
             XmlAttrib(sb, "BitsPerPixel", BitsPerPixel);
             XmlAttrib(sb, "PlaneScaleValueForMPO", PlaneScaleValueForMPO);
             XmlAttrib(sb, "PlaneBufReg", PlaneBufReg);
             XmlAttrib(sb, "NV12BufReg", NV12BufReg);
             XmlAttrib(sb, "IsCursorPlane", IsCursorPlane);
             XmlAttrib(sb, "StartBlockY", StartBlockY);
             XmlAttrib(sb, "EndBlockY", EndBlockY);
             XmlAttrib(sb, "StartBlockUV", StartBlockUV);
             XmlAttrib(sb, "EndBlockUV", EndBlockUV);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "ZOrder", "SourcePixelFormat", "SurfaceMemType", "Rotation", "XRes", "YRes", "BitsPerPixel", "PlaneScaleValueForMPO", "PlaneBufReg", "NV12BufReg", "IsCursorPlane", "StartBlockY", "EndBlockY", "StartBlockUV", "EndBlockUV"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return ZOrder;
                case 2:
                    return SourcePixelFormat;
                case 3:
                    return SurfaceMemType;
                case 4:
                    return Rotation;
                case 5:
                    return XRes;
                case 6:
                    return YRes;
                case 7:
                    return BitsPerPixel;
                case 8:
                    return PlaneScaleValueForMPO;
                case 9:
                    return PlaneBufReg;
                case 10:
                    return NV12BufReg;
                case 11:
                    return IsCursorPlane;
                case 12:
                    return StartBlockY;
                case 13:
                    return EndBlockY;
                case 14:
                    return StartBlockUV;
                case 15:
                    return EndBlockUV;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ProgramDBuf> m_target;
        #endregion
    }
    public sealed class t_ProgramWaterMark : TraceEvent
    {
        public int WMPlaneType { get { return GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public int WMInBytes { get { return GetInt32At(8); } }
        public bool IsCursorPlane { get { return GetInt32At(12) != 0; } }
        public PLANE_ZORDER ZOrder { get { return (PLANE_ZORDER)GetInt32At(16); } }
        public SB_WATERMARK_TYPE_GEN6 WatermarkType { get { return (SB_WATERMARK_TYPE_GEN6)GetInt32At(20); } }
        public int LineTime { get { return GetInt32At(24); } }
        public bool LPWM_Enable { get { return GetInt32At(28) != 0; } }
        public int LPWM_Block { get { return GetInt32At(32); } }
        public int LPWM_Lines { get { return GetInt32At(36); } }
        public int LPWM_Raw { get { return GetInt32At(40); } }
        public bool LPWM_IgnoreLines { get { return GetInt32At(44) != 0; } }
        public bool TransWM_Enable { get { return GetInt32At(48) != 0; } }
        public int TransWM_Blocks { get { return GetInt32At(52); } }
        public int TransWM_Lines { get { return GetInt32At(56); } }
        public bool TransWM_IgnoreLines { get { return GetInt32At(60) != 0; } }
        public int TransWM_Raw { get { return GetInt32At(64); } }

        #region Private
        internal t_ProgramWaterMark(Action<t_ProgramWaterMark> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 68));
            Debug.Assert(!(Version > 0 && EventDataLength < 68));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_ProgramWaterMark>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WMPlaneType", WMPlaneType);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "WMInBytes", WMInBytes);
             XmlAttrib(sb, "IsCursorPlane", IsCursorPlane);
             XmlAttrib(sb, "ZOrder", ZOrder);
             XmlAttrib(sb, "WatermarkType", WatermarkType);
             XmlAttrib(sb, "LineTime", LineTime);
             XmlAttrib(sb, "LPWM_Enable", LPWM_Enable);
             XmlAttrib(sb, "LPWM_Block", LPWM_Block);
             XmlAttrib(sb, "LPWM_Lines", LPWM_Lines);
             XmlAttrib(sb, "LPWM_Raw", LPWM_Raw);
             XmlAttrib(sb, "LPWM_IgnoreLines", LPWM_IgnoreLines);
             XmlAttrib(sb, "TransWM_Enable", TransWM_Enable);
             XmlAttrib(sb, "TransWM_Blocks", TransWM_Blocks);
             XmlAttrib(sb, "TransWM_Lines", TransWM_Lines);
             XmlAttrib(sb, "TransWM_IgnoreLines", TransWM_IgnoreLines);
             XmlAttrib(sb, "TransWM_Raw", TransWM_Raw);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WMPlaneType", "Pipe", "WMInBytes", "IsCursorPlane", "ZOrder", "WatermarkType", "LineTime", "LPWM_Enable", "LPWM_Block", "LPWM_Lines", "LPWM_Raw", "LPWM_IgnoreLines", "TransWM_Enable", "TransWM_Blocks", "TransWM_Lines", "TransWM_IgnoreLines", "TransWM_Raw"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WMPlaneType;
                case 1:
                    return Pipe;
                case 2:
                    return WMInBytes;
                case 3:
                    return IsCursorPlane;
                case 4:
                    return ZOrder;
                case 5:
                    return WatermarkType;
                case 6:
                    return LineTime;
                case 7:
                    return LPWM_Enable;
                case 8:
                    return LPWM_Block;
                case 9:
                    return LPWM_Lines;
                case 10:
                    return LPWM_Raw;
                case 11:
                    return LPWM_IgnoreLines;
                case 12:
                    return TransWM_Enable;
                case 13:
                    return TransWM_Blocks;
                case 14:
                    return TransWM_Lines;
                case 15:
                    return TransWM_IgnoreLines;
                case 16:
                    return TransWM_Raw;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_ProgramWaterMark> m_target;
        #endregion
    }
    public sealed class t_PSR_Features_MBO : TraceEvent
    {
        public GENERIC_STATES State { get { return (GENERIC_STATES)GetInt32At(0); } }

        #region Private
        internal t_PSR_Features_MBO(Action<t_PSR_Features_MBO> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PSR_Features_MBO>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "State", State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PSR_Features_MBO> m_target;
        #endregion
    }
    public sealed class t_PSR_Features_PSR1 : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public GENERIC_STATES State { get { return (GENERIC_STATES)GetInt32At(4); } }
        public int IdleFrameNum { get { return GetByteAt(8); } }
        public bool TP2TP3Select { get { return GetInt32At(9) != 0; } }
        public bool bSkipAuxHandShakeOnExit { get { return GetInt32At(13) != 0; } }
        public int MaxPSRSleepTime { get { return GetByteAt(17); } }
        public int MinLinkStandbyEntryTime { get { return GetByteAt(18); } }
        public bool bLinkStandby { get { return GetInt32At(19) != 0; } }
        public bool bNoLinkTraingRequiredOnExit { get { return GetInt32At(23) != 0; } }
        public int RawData { get { return GetInt32At(27); } }

        #region Private
        internal t_PSR_Features_PSR1(Action<t_PSR_Features_PSR1> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 31));
            Debug.Assert(!(Version > 0 && EventDataLength < 31));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PSR_Features_PSR1>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "State", State);
             XmlAttrib(sb, "IdleFrameNum", IdleFrameNum);
             XmlAttrib(sb, "TP2TP3Select", TP2TP3Select);
             XmlAttrib(sb, "bSkipAuxHandShakeOnExit", bSkipAuxHandShakeOnExit);
             XmlAttrib(sb, "MaxPSRSleepTime", MaxPSRSleepTime);
             XmlAttrib(sb, "MinLinkStandbyEntryTime", MinLinkStandbyEntryTime);
             XmlAttrib(sb, "bLinkStandby", bLinkStandby);
             XmlAttrib(sb, "bNoLinkTraingRequiredOnExit", bNoLinkTraingRequiredOnExit);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "State", "IdleFrameNum", "TP2TP3Select", "bSkipAuxHandShakeOnExit", "MaxPSRSleepTime", "MinLinkStandbyEntryTime", "bLinkStandby", "bNoLinkTraingRequiredOnExit", "RawData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return State;
                case 2:
                    return IdleFrameNum;
                case 3:
                    return TP2TP3Select;
                case 4:
                    return bSkipAuxHandShakeOnExit;
                case 5:
                    return MaxPSRSleepTime;
                case 6:
                    return MinLinkStandbyEntryTime;
                case 7:
                    return bLinkStandby;
                case 8:
                    return bNoLinkTraingRequiredOnExit;
                case 9:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PSR_Features_PSR1> m_target;
        #endregion
    }
    public sealed class t_PSR_Features_PSR2 : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public GENERIC_STATES State { get { return (GENERIC_STATES)GetInt32At(4); } }
        public GENERIC_STATES SelectiveUpdateTrackingEnable { get { return (GENERIC_STATES)GetInt32At(8); } }
        public int RawData { get { return GetInt32At(12); } }

        #region Private
        internal t_PSR_Features_PSR2(Action<t_PSR_Features_PSR2> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PSR_Features_PSR2>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "State", State);
             XmlAttrib(sb, "SelectiveUpdateTrackingEnable", SelectiveUpdateTrackingEnable);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "State", "SelectiveUpdateTrackingEnable", "RawData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return State;
                case 2:
                    return SelectiveUpdateTrackingEnable;
                case 3:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PSR_Features_PSR2> m_target;
        #endregion
    }
    public sealed class t_PsrCapability : TraceEvent
    {
        public bool IsPSRSupported { get { return GetInt32At(0) != 0; } }
        public bool IsSFUSupported { get { return GetInt32At(4) != 0; } }
        public bool IsSUSupported { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_PsrCapability(Action<t_PsrCapability> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PsrCapability>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsPSRSupported", IsPSRSupported);
             XmlAttrib(sb, "IsSFUSupported", IsSFUSupported);
             XmlAttrib(sb, "IsSUSupported", IsSUSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsPSRSupported", "IsSFUSupported", "IsSUSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsPSRSupported;
                case 1:
                    return IsSFUSupported;
                case 2:
                    return IsSUSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PsrCapability> m_target;
        #endregion
    }
    public sealed class t_PsrClientEventHandler : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int EventType { get { return GetInt32At(8); } }
        public int EventParamSize { get { return GetInt32At(12); } }
        public byte[] EventParamData { get { return GetByteArrayAt(16, EventParamSize); } }

        #region Private
        internal t_PsrClientEventHandler(Action<t_PsrClientEventHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (EventParamSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (EventParamSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PsrClientEventHandler>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "EventParamSize", EventParamSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "EventType", "EventParamSize", "EventParamData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return EventType;
                case 2:
                    return EventParamSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PsrClientEventHandler> m_target;
        #endregion
    }
    public sealed class t_PsrParams : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_PsrParams(Action<t_PsrParams> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PsrParams>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PsrParams> m_target;
        #endregion
    }
    public sealed class t_PcVbtInfo : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_PcVbtInfo(Action<t_PcVbtInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PcVbtInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PcVbtInfo> m_target;
        #endregion
    }
    public sealed class t_PwrConsEscapeData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int Operation { get { return GetInt32At(8); } }
        public int DataSize { get { return GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, DataSize); } }

        #region Private
        internal t_PwrConsEscapeData(Action<t_PwrConsEscapeData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PwrConsEscapeData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PwrConsEscapeData> m_target;
        #endregion
    }
    public sealed class t_PwrConsLfpCapabilities : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_PwrConsLfpCapabilities(Action<t_PwrConsLfpCapabilities> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PwrConsLfpCapabilities>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PwrConsLfpCapabilities> m_target;
        #endregion
    }
    public sealed class t_PwrConsLoadPolicyTable : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_PwrConsLoadPolicyTable(Action<t_PwrConsLoadPolicyTable> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PwrConsLoadPolicyTable>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PwrConsLoadPolicyTable> m_target;
        #endregion
    }
    public sealed class t_PwrConsUpdateMamData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int HwDev_MamData_bMotionArtMit { get { return GetInt32At(8); } }
        public int HwDev_MamData_bCursorMoved { get { return GetInt32At(12); } }
        public int HwDev_MamData_bNotifyImmediate { get { return GetInt32At(16); } }

        #region Private
        internal t_PwrConsUpdateMamData(Action<t_PwrConsUpdateMamData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PwrConsUpdateMamData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "HwDev_MamData_bMotionArtMit", HwDev_MamData_bMotionArtMit);
             XmlAttrib(sb, "HwDev_MamData_bCursorMoved", HwDev_MamData_bCursorMoved);
             XmlAttrib(sb, "HwDev_MamData_bNotifyImmediate", HwDev_MamData_bNotifyImmediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "HwDev_MamData_bMotionArtMit", "HwDev_MamData_bCursorMoved", "HwDev_MamData_bNotifyImmediate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return HwDev_MamData_bMotionArtMit;
                case 2:
                    return HwDev_MamData_bCursorMoved;
                case 3:
                    return HwDev_MamData_bNotifyImmediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PwrConsUpdateMamData> m_target;
        #endregion
    }
    public sealed class t_PwrConsUserPolicyData : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int DataSize { get { return GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, DataSize); } }

        #region Private
        internal t_PwrConsUserPolicyData(Action<t_PwrConsUserPolicyData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PwrConsUserPolicyData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PwrConsUserPolicyData> m_target;
        #endregion
    }
    public sealed class t_PresentID : TraceEvent
    {
        public int SourceID { get { return GetInt32At(0); } }
        public int LayerIndex { get { return GetInt32At(4); } }
        public long PresentID { get { return GetInt64At(8); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(16); } }

        #region Private
        internal t_PresentID(Action<t_PresentID> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_PresentID>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "Pipe", Pipe);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourceID", "LayerIndex", "PresentID", "Pipe"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourceID;
                case 1:
                    return LayerIndex;
                case 2:
                    return PresentID;
                case 3:
                    return Pipe;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_PresentID> m_target;
        #endregion
    }
    public sealed class t_RTD3_DCState : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public DC_POWER_STATE DCState { get { return (DC_POWER_STATE)GetInt16At(SkipUnicodeString(0)); } }

        #region Private
        internal t_RTD3_DCState(Action<t_RTD3_DCState> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_RTD3_DCState>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "DCState", DCState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "DCState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return DCState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_RTD3_DCState> m_target;
        #endregion
    }
    public sealed class t_RTD3 : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public IGFX_POWER_COMPONENT IGfx_Power_Component { get { return (IGFX_POWER_COMPONENT)GetInt16At(SkipUnicodeString(0)); } }

        #region Private
        internal t_RTD3(Action<t_RTD3> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_RTD3>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "IGfx_Power_Component", IGfx_Power_Component);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "IGfx_Power_Component"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return IGfx_Power_Component;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_RTD3> m_target;
        #endregion
    }
    public sealed class t_SetDCState : TraceEvent
    {
        public bool FtrEnableDC5DC6 { get { return GetInt32At(0) != 0; } }
        public bool CheckForPSR { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_SetDCState(Action<t_SetDCState> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetDCState>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FtrEnableDC5DC6", FtrEnableDC5DC6);
             XmlAttrib(sb, "CheckForPSR", CheckForPSR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FtrEnableDC5DC6", "CheckForPSR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FtrEnableDC5DC6;
                case 1:
                    return CheckForPSR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetDCState> m_target;
        #endregion
    }
    public sealed class t_SetDisplayStart : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PLANE_TYPE Plane { get { return (PLANE_TYPE)GetInt32At(4); } }
        public bool IsAsync { get { return GetInt32At(8) != 0; } }
        public bool MPO { get { return GetInt32At(12) != 0; } }
        public int LayerIndex { get { return GetByteAt(16); } }
        public PLANE_ZORDER ZOrder { get { return (PLANE_ZORDER)GetInt32At(17); } }
        public int PlaneCount { get { return GetByteAt(21); } }
        public SB_PIXELFORMAT PixelFormat { get { return (SB_PIXELFORMAT)GetInt32At(22); } }
        public SURFACE_MEMORY_TYPE SurfaceMemType { get { return (SURFACE_MEMORY_TYPE)GetInt16At(26); } }
        public PLANE_ORIENTATION Orientation { get { return (PLANE_ORIENTATION)GetInt32At(28); } }
        public int SourceClipSizeX { get { return GetInt16At(32); } }
        public int SourceClipSizeY { get { return GetInt16At(34); } }
        public bool PFEnabled { get { return GetInt32At(36) != 0; } }
        public int ScanLineLength { get { return GetInt16At(40); } }
        public int AuxScanLineLength { get { return GetInt16At(42); } }
        public int TiledXOffset { get { return GetInt16At(44); } }
        public int TiledYOffset { get { return GetInt16At(46); } }
        public int TiledUVXOffset { get { return GetInt16At(48); } }
        public int TiledUVYXOffset { get { return GetInt16At(50); } }
        public int UVDistance { get { return GetInt16At(52); } }
        public int AuxDistance { get { return GetInt16At(54); } }
        public bool IsPlaneEncrypted { get { return GetInt32At(56) != 0; } }
        public IGFX_ENCRYPTION_TYPE EncryptionType { get { return (IGFX_ENCRYPTION_TYPE)GetInt32At(60); } }
        public int DisplayStart { get { return GetInt32At(64); } }

        #region Private
        internal t_SetDisplayStart(Action<t_SetDisplayStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 68));
            Debug.Assert(!(Version > 0 && EventDataLength < 68));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetDisplayStart>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Plane", Plane);
             XmlAttrib(sb, "IsAsync", IsAsync);
             XmlAttrib(sb, "MPO", MPO);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "ZOrder", ZOrder);
             XmlAttrib(sb, "PlaneCount", PlaneCount);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "SurfaceMemType", SurfaceMemType);
             XmlAttrib(sb, "Orientation", Orientation);
             XmlAttrib(sb, "SourceClipSizeX", SourceClipSizeX);
             XmlAttrib(sb, "SourceClipSizeY", SourceClipSizeY);
             XmlAttrib(sb, "PFEnabled", PFEnabled);
             XmlAttrib(sb, "ScanLineLength", ScanLineLength);
             XmlAttrib(sb, "AuxScanLineLength", AuxScanLineLength);
             XmlAttrib(sb, "TiledXOffset", TiledXOffset);
             XmlAttrib(sb, "TiledYOffset", TiledYOffset);
             XmlAttrib(sb, "TiledUVXOffset", TiledUVXOffset);
             XmlAttrib(sb, "TiledUVYXOffset", TiledUVYXOffset);
             XmlAttrib(sb, "UVDistance", UVDistance);
             XmlAttrib(sb, "AuxDistance", AuxDistance);
             XmlAttrib(sb, "IsPlaneEncrypted", IsPlaneEncrypted);
             XmlAttrib(sb, "EncryptionType", EncryptionType);
             XmlAttrib(sb, "DisplayStart", DisplayStart);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "Plane", "IsAsync", "MPO", "LayerIndex", "ZOrder", "PlaneCount", "PixelFormat", "SurfaceMemType", "Orientation", "SourceClipSizeX", "SourceClipSizeY", "PFEnabled", "ScanLineLength", "AuxScanLineLength", "TiledXOffset", "TiledYOffset", "TiledUVXOffset", "TiledUVYXOffset", "UVDistance", "AuxDistance", "IsPlaneEncrypted", "EncryptionType", "DisplayStart"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return Plane;
                case 2:
                    return IsAsync;
                case 3:
                    return MPO;
                case 4:
                    return LayerIndex;
                case 5:
                    return ZOrder;
                case 6:
                    return PlaneCount;
                case 7:
                    return PixelFormat;
                case 8:
                    return SurfaceMemType;
                case 9:
                    return Orientation;
                case 10:
                    return SourceClipSizeX;
                case 11:
                    return SourceClipSizeY;
                case 12:
                    return PFEnabled;
                case 13:
                    return ScanLineLength;
                case 14:
                    return AuxScanLineLength;
                case 15:
                    return TiledXOffset;
                case 16:
                    return TiledYOffset;
                case 17:
                    return TiledUVXOffset;
                case 18:
                    return TiledUVYXOffset;
                case 19:
                    return UVDistance;
                case 20:
                    return AuxDistance;
                case 21:
                    return IsPlaneEncrypted;
                case 22:
                    return EncryptionType;
                case 23:
                    return DisplayStart;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetDisplayStart> m_target;
        #endregion
    }
    public sealed class t_SetHDRMetaData : TraceEvent
    {
        public int hAllocation { get { return GetInt32At(0); } }
        public SB_COLORSPACE_SUPPORTED Gamut { get { return (SB_COLORSPACE_SUPPORTED)GetInt32At(4); } }
        public int EOTF { get { return GetInt16At(8); } }
        public int DisplayPrimariesX0 { get { return GetInt16At(10); } }
        public int DisplayPrimariesX1 { get { return GetInt16At(12); } }
        public int DisplayPrimariesX2 { get { return GetInt16At(14); } }
        public int DisplayPrimariesY0 { get { return GetInt16At(16); } }
        public int DisplayPrimariesY1 { get { return GetInt16At(18); } }
        public int DisplayPrimariesY2 { get { return GetInt16At(20); } }
        public int WhitePointX { get { return GetInt16At(22); } }
        public int WhitePointY { get { return GetInt16At(24); } }
        public int MaxDisplayMasteringLuminance { get { return GetInt32At(26); } }
        public int MinDisplayMasteringLuminance { get { return GetInt32At(30); } }
        public int MaxCLL { get { return GetInt32At(34); } }
        public int MaxFALL { get { return GetInt32At(38); } }
        public int RetStatus { get { return GetInt32At(42); } }

        #region Private
        internal t_SetHDRMetaData(Action<t_SetHDRMetaData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 46));
            Debug.Assert(!(Version > 0 && EventDataLength < 46));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetHDRMetaData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "hAllocation", hAllocation);
             XmlAttrib(sb, "Gamut", Gamut);
             XmlAttrib(sb, "EOTF", EOTF);
             XmlAttrib(sb, "DisplayPrimariesX0", DisplayPrimariesX0);
             XmlAttrib(sb, "DisplayPrimariesX1", DisplayPrimariesX1);
             XmlAttrib(sb, "DisplayPrimariesX2", DisplayPrimariesX2);
             XmlAttrib(sb, "DisplayPrimariesY0", DisplayPrimariesY0);
             XmlAttrib(sb, "DisplayPrimariesY1", DisplayPrimariesY1);
             XmlAttrib(sb, "DisplayPrimariesY2", DisplayPrimariesY2);
             XmlAttrib(sb, "WhitePointX", WhitePointX);
             XmlAttrib(sb, "WhitePointY", WhitePointY);
             XmlAttrib(sb, "MaxDisplayMasteringLuminance", MaxDisplayMasteringLuminance);
             XmlAttrib(sb, "MinDisplayMasteringLuminance", MinDisplayMasteringLuminance);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "MaxFALL", MaxFALL);
             XmlAttrib(sb, "RetStatus", RetStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "hAllocation", "Gamut", "EOTF", "DisplayPrimariesX0", "DisplayPrimariesX1", "DisplayPrimariesX2", "DisplayPrimariesY0", "DisplayPrimariesY1", "DisplayPrimariesY2", "WhitePointX", "WhitePointY", "MaxDisplayMasteringLuminance", "MinDisplayMasteringLuminance", "MaxCLL", "MaxFALL", "RetStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return hAllocation;
                case 1:
                    return Gamut;
                case 2:
                    return EOTF;
                case 3:
                    return DisplayPrimariesX0;
                case 4:
                    return DisplayPrimariesX1;
                case 5:
                    return DisplayPrimariesX2;
                case 6:
                    return DisplayPrimariesY0;
                case 7:
                    return DisplayPrimariesY1;
                case 8:
                    return DisplayPrimariesY2;
                case 9:
                    return WhitePointX;
                case 10:
                    return WhitePointY;
                case 11:
                    return MaxDisplayMasteringLuminance;
                case 12:
                    return MinDisplayMasteringLuminance;
                case 13:
                    return MaxCLL;
                case 14:
                    return MaxFALL;
                case 15:
                    return RetStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetHDRMetaData> m_target;
        #endregion
    }
    public sealed class t_SetMode_EnablePort : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(4); } }
        public int DotClock { get { return GetInt32At(8); } }
        public int HActive { get { return GetInt32At(12); } }
        public int VActive { get { return GetInt32At(16); } }
        public int HTotal { get { return GetInt32At(20); } }
        public int VTotal { get { return GetInt32At(24); } }
        public int VRefresh { get { return GetInt32At(28); } }

        #region Private
        internal t_SetMode_EnablePort(Action<t_SetMode_EnablePort> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetMode_EnablePort>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "VRefresh", VRefresh);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "Port", "DotClock", "HActive", "VActive", "HTotal", "VTotal", "VRefresh"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return Port;
                case 2:
                    return DotClock;
                case 3:
                    return HActive;
                case 4:
                    return VActive;
                case 5:
                    return HTotal;
                case 6:
                    return VTotal;
                case 7:
                    return VRefresh;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetMode_EnablePort> m_target;
        #endregion
    }
    public sealed class t_SetMode_PostDisplayDisable : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PORT_TYPES Port { get { return (PORT_TYPES)GetInt32At(4); } }

        #region Private
        internal t_SetMode_PostDisplayDisable(Action<t_SetMode_PostDisplayDisable> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_SetMode_PostDisplayDisable>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "Port"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_SetMode_PostDisplayDisable> m_target;
        #endregion
    }
    public sealed class t_GfxValStubDivaUlt : TraceEvent
    {
        public string FunctionName { get { return GetUnicodeStringAt(0); } }
        public int IsEntry { get { return GetByteAt(SkipUnicodeString(0)); } }

        #region Private
        internal t_GfxValStubDivaUlt(Action<t_GfxValStubDivaUlt> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+1));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxValStubDivaUlt>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FunctionName", FunctionName);
             XmlAttrib(sb, "IsEntry", IsEntry);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FunctionName", "IsEntry"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FunctionName;
                case 1:
                    return IsEntry;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxValStubDivaUlt> m_target;
        #endregion
    }
    public sealed class t_GfxPinning : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public long PinningLimit { get { return GetInt64At(SkipUnicodeString(0)); } }
        public bool PinningEnable { get { return GetInt32At(SkipUnicodeString(0)+8) != 0; } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+12); } }

        #region Private
        internal t_GfxPinning(Action<t_GfxPinning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinning>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "PinningLimit", PinningLimit);
             XmlAttrib(sb, "PinningEnable", PinningEnable);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "PinningLimit", "PinningEnable", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return PinningLimit;
                case 2:
                    return PinningEnable;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinning> m_target;
        #endregion
    }
    public sealed class t_GfxPinningCBInfo : TraceEvent
    {
        public int ReqID { get { return GetInt32At(0); } }

        #region Private
        internal t_GfxPinningCBInfo(Action<t_GfxPinningCBInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningCBInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ReqID", ReqID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ReqID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ReqID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningCBInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPinningArgs : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public int SrcID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int LayerId { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public Address GMMBlockDesc { get { return GetAddressAt(SkipUnicodeString(0)+8); } }
        public int Resource_Type { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+12, 1)); } }
        public PIN_STATUS Status { get { return (PIN_STATUS)GetInt32At(HostOffset(SkipUnicodeString(0)+16, 1)); } }

        #region Private
        internal t_GfxPinningArgs(Action<t_GfxPinningArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(SkipUnicodeString(0)+20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(SkipUnicodeString(0)+20, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "SrcID", SrcID);
             XmlAttrib(sb, "LayerId", LayerId);
             XmlAttribHex(sb, "GMMBlockDesc", GMMBlockDesc);
             XmlAttrib(sb, "Resource_Type", Resource_Type);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "SrcID", "LayerId", "GMMBlockDesc", "Resource_Type", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return SrcID;
                case 2:
                    return LayerId;
                case 3:
                    return GMMBlockDesc;
                case 4:
                    return Resource_Type;
                case 5:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningArgs> m_target;
        #endregion
    }
    public sealed class t_GfxPinningRequestInfo : TraceEvent
    {
        public int ReqID { get { return GetInt32At(0); } }
        public int NumOfRes { get { return GetInt32At(4); } }
        public int SourceID { get { return GetInt32At(8); } }
        public PIN_RESOURCE_TYPE ResourceType { get { return (PIN_RESOURCE_TYPE)GetInt32At(12); } }
        public Address GMMBlockDesc(int arrayIndex) { return GetAddressAt(16 + (arrayIndex * HostOffset(4, 1))); }
        public int LayerIndex(int arrayIndex) { return GetInt32At(HostOffset(0+ (NumOfRes*4)+16, 1) + (arrayIndex * HostOffset(4, 0))); }

        #region Private
        internal t_GfxPinningRequestInfo(Action<t_GfxPinningRequestInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(0+ (NumOfRes*4)+ (NumOfRes*4)+16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(0+ (NumOfRes*4)+ (NumOfRes*4)+16, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningRequestInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ReqID", ReqID);
             XmlAttrib(sb, "NumOfRes", NumOfRes);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ReqID", "NumOfRes", "SourceID", "ResourceType", "GMMBlockDesc", "LayerIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ReqID;
                case 1:
                    return NumOfRes;
                case 2:
                    return SourceID;
                case 3:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningRequestInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPinningResInfo : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public Address List { get { return GetAddressAt(SkipUnicodeString(0)); } }
        public Address Node { get { return GetAddressAt(HostOffset(SkipUnicodeString(0)+4, 1)); } }
        public Address GMMBlock { get { return GetAddressAt(HostOffset(SkipUnicodeString(0)+8, 2)); } }
        public int SrcID { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+12, 3)); } }
        public int PlaneID { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+16, 3)); } }
        public int ResSize { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+20, 3)); } }
        public PIN_RESOURCE_TYPE ResourceType { get { return (PIN_RESOURCE_TYPE)GetInt32At(HostOffset(SkipUnicodeString(0)+24, 3)); } }
        public PIN_STATUS Status { get { return (PIN_STATUS)GetInt32At(HostOffset(SkipUnicodeString(0)+28, 3)); } }

        #region Private
        internal t_GfxPinningResInfo(Action<t_GfxPinningResInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(SkipUnicodeString(0)+32, 3)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(SkipUnicodeString(0)+32, 3)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningResInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttribHex(sb, "List", List);
             XmlAttribHex(sb, "Node", Node);
             XmlAttribHex(sb, "GMMBlock", GMMBlock);
             XmlAttrib(sb, "SrcID", SrcID);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "ResSize", ResSize);
             XmlAttrib(sb, "ResourceType", ResourceType);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "List", "Node", "GMMBlock", "SrcID", "PlaneID", "ResSize", "ResourceType", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return List;
                case 2:
                    return Node;
                case 3:
                    return GMMBlock;
                case 4:
                    return SrcID;
                case 5:
                    return PlaneID;
                case 6:
                    return ResSize;
                case 7:
                    return ResourceType;
                case 8:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningResInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPinningSchedulerInfo : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }
        public int FenceID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal t_GfxPinningSchedulerInfo(Action<t_GfxPinningSchedulerInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningSchedulerInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "FenceID", FenceID);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "FenceID", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return FenceID;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningSchedulerInfo> m_target;
        #endregion
    }
    public sealed class t_GfxPinningStatusInfo : TraceEvent
    {
        public Address GMMBlock { get { return GetAddressAt(0); } }
        public PIN_STATUS PinningStatus { get { return (PIN_STATUS)GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal t_GfxPinningStatusInfo(Action<t_GfxPinningStatusInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxPinningStatusInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GMMBlock", GMMBlock);
             XmlAttrib(sb, "PinningStatus", PinningStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GMMBlock", "PinningStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GMMBlock;
                case 1:
                    return PinningStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxPinningStatusInfo> m_target;
        #endregion
    }
    public sealed class t_GfxEngineReset : TraceEvent
    {
        public IGFX_GPU_NODE NodeOrdinal { get { return (IGFX_GPU_NODE)GetInt16At(0); } }
        public IGFX_ENGINE_RESET_TYPE ResetType { get { return (IGFX_ENGINE_RESET_TYPE)GetInt16At(2); } }
        public bool Entry { get { return GetInt32At(4) != 0; } }
        public bool Induced { get { return GetInt32At(8) != 0; } }

        #region Private
        internal t_GfxEngineReset(Action<t_GfxEngineReset> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GfxEngineReset>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NodeOrdinal", NodeOrdinal);
             XmlAttrib(sb, "ResetType", ResetType);
             XmlAttrib(sb, "Entry", Entry);
             XmlAttrib(sb, "Induced", Induced);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NodeOrdinal", "ResetType", "Entry", "Induced"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NodeOrdinal;
                case 1:
                    return ResetType;
                case 2:
                    return Entry;
                case 3:
                    return Induced;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GfxEngineReset> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_EDPFillSimilarPnPId_Entry : TraceEvent
    {
        public int ucPanelType { get { return GetByteAt(0); } }

        #region Private
        internal t_VBTMANAGER_EDPFillSimilarPnPId_Entry(Action<t_VBTMANAGER_EDPFillSimilarPnPId_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_EDPFillSimilarPnPId_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucPanelType", ucPanelType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucPanelType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucPanelType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_EDPFillSimilarPnPId_Entry> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_EDPFillSimilarPnPId_Exit : TraceEvent
    {
        public int PanelIndex { get { return GetByteAt(0); } }

        #region Private
        internal t_VBTMANAGER_EDPFillSimilarPnPId_Exit(Action<t_VBTMANAGER_EDPFillSimilarPnPId_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_EDPFillSimilarPnPId_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PanelIndex", PanelIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PanelIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PanelIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_EDPFillSimilarPnPId_Exit> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_FillSimilarPnPId_Entry : TraceEvent
    {
        public int ucPanelType { get { return GetByteAt(0); } }

        #region Private
        internal t_VBTMANAGER_FillSimilarPnPId_Entry(Action<t_VBTMANAGER_FillSimilarPnPId_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_FillSimilarPnPId_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucPanelType", ucPanelType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucPanelType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucPanelType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_FillSimilarPnPId_Entry> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_FillSimilarPnPId_Exit : TraceEvent
    {
        public int PanelIndex { get { return GetByteAt(0); } }

        #region Private
        internal t_VBTMANAGER_FillSimilarPnPId_Exit(Action<t_VBTMANAGER_FillSimilarPnPId_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_FillSimilarPnPId_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PanelIndex", PanelIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PanelIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PanelIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_FillSimilarPnPId_Exit> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_GetBIOSDataBlockByID_Entry : TraceEvent
    {
        public int ucID { get { return GetByteAt(0); } }

        #region Private
        internal t_VBTMANAGER_GetBIOSDataBlockByID_Entry(Action<t_VBTMANAGER_GetBIOSDataBlockByID_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 1));
            Debug.Assert(!(Version > 0 && EventDataLength < 1));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_GetBIOSDataBlockByID_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ucID", ucID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ucID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ucID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_GetBIOSDataBlockByID_Entry> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_GetPSRDetails_Entry : TraceEvent
    {
        public long stHASConfig_ulValue { get { return GetInt64At(0); } }
        public int pLvds_Feats_PanelType { get { return GetByteAt(8); } }
        public int Drv_Feats_usPSR { get { return GetInt32At(9); } }

        #region Private
        internal t_VBTMANAGER_GetPSRDetails_Entry(Action<t_VBTMANAGER_GetPSRDetails_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_GetPSRDetails_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "stHASConfig_ulValue", stHASConfig_ulValue);
             XmlAttrib(sb, "pLvds_Feats_PanelType", pLvds_Feats_PanelType);
             XmlAttrib(sb, "Drv_Feats_usPSR", Drv_Feats_usPSR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "stHASConfig_ulValue", "pLvds_Feats_PanelType", "Drv_Feats_usPSR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return stHASConfig_ulValue;
                case 1:
                    return pLvds_Feats_PanelType;
                case 2:
                    return Drv_Feats_usPSR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_GetPSRDetails_Entry> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_GetPSRDetails_Exit : TraceEvent
    {
        public bool bRet { get { return GetInt32At(0) != 0; } }
        public int ucPanelNumber { get { return GetByteAt(4); } }

        #region Private
        internal t_VBTMANAGER_GetPSRDetails_Exit(Action<t_VBTMANAGER_GetPSRDetails_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_GetPSRDetails_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "bRet", bRet);
             XmlAttrib(sb, "ucPanelNumber", ucPanelNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "bRet", "ucPanelNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return bRet;
                case 1:
                    return ucPanelNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_GetPSRDetails_Exit> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_IsDisplayTypeSupported_Entry : TraceEvent
    {
        public int DisplayType { get { return GetInt32At(0); } }
        public int ucDisplayFlags { get { return GetByteAt(4); } }

        #region Private
        internal t_VBTMANAGER_IsDisplayTypeSupported_Entry(Action<t_VBTMANAGER_IsDisplayTypeSupported_Entry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_IsDisplayTypeSupported_Entry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DisplayType", DisplayType);
             XmlAttrib(sb, "ucDisplayFlags", ucDisplayFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayType", "ucDisplayFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayType;
                case 1:
                    return ucDisplayFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_IsDisplayTypeSupported_Entry> m_target;
        #endregion
    }
    public sealed class t_VBTMANAGER_IsDisplayTypeSupported_Exit : TraceEvent
    {
        public bool rtn_status { get { return GetInt32At(0) != 0; } }
        public int ucDisplayFlags { get { return GetByteAt(4); } }

        #region Private
        internal t_VBTMANAGER_IsDisplayTypeSupported_Exit(Action<t_VBTMANAGER_IsDisplayTypeSupported_Exit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_VBTMANAGER_IsDisplayTypeSupported_Exit>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "rtn_status", rtn_status);
             XmlAttrib(sb, "ucDisplayFlags", ucDisplayFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "rtn_status", "ucDisplayFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return rtn_status;
                case 1:
                    return ucDisplayFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_VBTMANAGER_IsDisplayTypeSupported_Exit> m_target;
        #endregion
    }
    public sealed class t_WaterMarkInitialize : TraceEvent
    {
        public int LPLatency_0 { get { return GetInt16At(0); } }
        public int LPLatency_1 { get { return GetInt16At(2); } }
        public int LPLatency_2 { get { return GetInt16At(4); } }
        public int LPLatency_3 { get { return GetInt16At(6); } }
        public int LPLatency_4 { get { return GetInt16At(8); } }
        public int LPLatency_5 { get { return GetInt16At(10); } }
        public int LPLatency_6 { get { return GetInt16At(12); } }
        public int LPLatency_7 { get { return GetInt16At(14); } }

        #region Private
        internal t_WaterMarkInitialize(Action<t_WaterMarkInitialize> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WaterMarkInitialize>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LPLatency_0", LPLatency_0);
             XmlAttrib(sb, "LPLatency_1", LPLatency_1);
             XmlAttrib(sb, "LPLatency_2", LPLatency_2);
             XmlAttrib(sb, "LPLatency_3", LPLatency_3);
             XmlAttrib(sb, "LPLatency_4", LPLatency_4);
             XmlAttrib(sb, "LPLatency_5", LPLatency_5);
             XmlAttrib(sb, "LPLatency_6", LPLatency_6);
             XmlAttrib(sb, "LPLatency_7", LPLatency_7);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LPLatency_0", "LPLatency_1", "LPLatency_2", "LPLatency_3", "LPLatency_4", "LPLatency_5", "LPLatency_6", "LPLatency_7"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LPLatency_0;
                case 1:
                    return LPLatency_1;
                case 2:
                    return LPLatency_2;
                case 3:
                    return LPLatency_3;
                case 4:
                    return LPLatency_4;
                case 5:
                    return LPLatency_5;
                case 6:
                    return LPLatency_6;
                case 7:
                    return LPLatency_7;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WaterMarkInitialize> m_target;
        #endregion
    }
    public sealed class t_WiDiOpenLoop : TraceEvent
    {
        public bool IsDWMOn { get { return GetInt32At(0) != 0; } }
        public bool CloneSecondaryOL { get { return GetInt32At(4) != 0; } }

        #region Private
        internal t_WiDiOpenLoop(Action<t_WiDiOpenLoop> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WiDiOpenLoop>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsDWMOn", IsDWMOn);
             XmlAttrib(sb, "CloneSecondaryOL", CloneSecondaryOL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsDWMOn", "CloneSecondaryOL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsDWMOn;
                case 1:
                    return CloneSecondaryOL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WiDiOpenLoop> m_target;
        #endregion
    }
    public sealed class t_IGD_ALLOC_CHANNEL_BW_ARGS : TraceEvent
    {
        public int WiGIGPath { get { return GetInt32At(0); } }
        public int BWNeededForConnection { get { return GetInt32At(4); } }

        #region Private
        internal t_IGD_ALLOC_CHANNEL_BW_ARGS(Action<t_IGD_ALLOC_CHANNEL_BW_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IGD_ALLOC_CHANNEL_BW_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGIGPath", WiGIGPath);
             XmlAttrib(sb, "BWNeededForConnection", BWNeededForConnection);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGIGPath", "BWNeededForConnection"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGIGPath;
                case 1:
                    return BWNeededForConnection;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IGD_ALLOC_CHANNEL_BW_ARGS> m_target;
        #endregion
    }
    public sealed class t_WiGIGRetStatus : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal t_WiGIGRetStatus(Action<t_WiGIGRetStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WiGIGRetStatus>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WiGIGRetStatus> m_target;
        #endregion
    }
    public sealed class t_GMM_EncodeState : TraceEvent
    {
        public Address CpuAddress { get { return GetAddressAt(0); } }
        public long GfxAddress { get { return GetInt64At(HostOffset(4, 1)); } }
        public int Size_Sps { get { return GetInt32At(HostOffset(12, 1)); } }
        public int Size_Pps { get { return GetInt32At(HostOffset(16, 1)); } }
        public long Pitch { get { return GetInt64At(HostOffset(20, 1)); } }
        public int PpsOffset { get { return GetInt32At(HostOffset(28, 1)); } }
        public int SpsOffset { get { return GetInt32At(HostOffset(32, 1)); } }

        #region Private
        internal t_GMM_EncodeState(Action<t_GMM_EncodeState> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(36, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(36, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GMM_EncodeState>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "CpuAddress", CpuAddress);
             XmlAttrib(sb, "GfxAddress", GfxAddress);
             XmlAttrib(sb, "Size_Sps", Size_Sps);
             XmlAttrib(sb, "Size_Pps", Size_Pps);
             XmlAttrib(sb, "Pitch", Pitch);
             XmlAttrib(sb, "PpsOffset", PpsOffset);
             XmlAttrib(sb, "SpsOffset", SpsOffset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CpuAddress", "GfxAddress", "Size_Sps", "Size_Pps", "Pitch", "PpsOffset", "SpsOffset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CpuAddress;
                case 1:
                    return GfxAddress;
                case 2:
                    return Size_Sps;
                case 3:
                    return Size_Pps;
                case 4:
                    return Pitch;
                case 5:
                    return PpsOffset;
                case 6:
                    return SpsOffset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GMM_EncodeState> m_target;
        #endregion
    }
    public sealed class t_GMM_EncodeDisRefSurface : TraceEvent
    {
        public int BaseHeight { get { return GetInt32At(0); } }
        public long BaseWidth { get { return GetInt64At(4); } }
        public int Format { get { return GetInt32At(12); } }
        public long GfxAddress { get { return GetInt64At(16); } }
        public long Pitch { get { return GetInt64At(24); } }
        public long UOffsetY { get { return GetInt64At(32); } }
        public long VOffsetY { get { return GetInt64At(40); } }

        #region Private
        internal t_GMM_EncodeDisRefSurface(Action<t_GMM_EncodeDisRefSurface> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 48));
            Debug.Assert(!(Version > 0 && EventDataLength < 48));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GMM_EncodeDisRefSurface>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BaseHeight", BaseHeight);
             XmlAttrib(sb, "BaseWidth", BaseWidth);
             XmlAttrib(sb, "Format", Format);
             XmlAttrib(sb, "GfxAddress", GfxAddress);
             XmlAttrib(sb, "Pitch", Pitch);
             XmlAttrib(sb, "UOffsetY", UOffsetY);
             XmlAttrib(sb, "VOffsetY", VOffsetY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BaseHeight", "BaseWidth", "Format", "GfxAddress", "Pitch", "UOffsetY", "VOffsetY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BaseHeight;
                case 1:
                    return BaseWidth;
                case 2:
                    return Format;
                case 3:
                    return GfxAddress;
                case 4:
                    return Pitch;
                case 5:
                    return UOffsetY;
                case 6:
                    return VOffsetY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GMM_EncodeDisRefSurface> m_target;
        #endregion
    }
    public sealed class t_GMM_EncodeTfdSurface : TraceEvent
    {
        public Address CpuAddress { get { return GetAddressAt(0); } }
        public long GfxAddress { get { return GetInt64At(HostOffset(4, 1)); } }
        public int Entries { get { return GetInt32At(HostOffset(12, 1)); } }
        public int EntrySize { get { return GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal t_GMM_EncodeTfdSurface(Action<t_GMM_EncodeTfdSurface> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GMM_EncodeTfdSurface>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "CpuAddress", CpuAddress);
             XmlAttrib(sb, "GfxAddress", GfxAddress);
             XmlAttrib(sb, "Entries", Entries);
             XmlAttrib(sb, "EntrySize", EntrySize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CpuAddress", "GfxAddress", "Entries", "EntrySize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CpuAddress;
                case 1:
                    return GfxAddress;
                case 2:
                    return Entries;
                case 3:
                    return EntrySize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GMM_EncodeTfdSurface> m_target;
        #endregion
    }
    public sealed class t_GMMResFree : TraceEvent
    {
        public Address GmmBlockDesc { get { return GetAddressAt(0); } }

        #region Private
        internal t_GMMResFree(Action<t_GMMResFree> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_GMMResFree>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "GmmBlockDesc", GmmBlockDesc);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GmmBlockDesc"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GmmBlockDesc;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_GMMResFree> m_target;
        #endregion
    }
    public sealed class t_WIGIG_IGDCallBackFunctionInfo : TraceEvent
    {
        public int IFVersion { get { return GetInt32At(0); } }

        #region Private
        internal t_WIGIG_IGDCallBackFunctionInfo(Action<t_WIGIG_IGDCallBackFunctionInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WIGIG_IGDCallBackFunctionInfo>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IFVersion", IFVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IFVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IFVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WIGIG_IGDCallBackFunctionInfo> m_target;
        #endregion
    }
    public sealed class t_WNIC_CLK_REF_COUNTER_ARGS : TraceEvent
    {
        public int WiGIGPath { get { return GetInt32At(0); } }
        public int ClockRefCtr { get { return GetInt32At(4); } }
        public int Status { get { return GetInt32At(8); } }

        #region Private
        internal t_WNIC_CLK_REF_COUNTER_ARGS(Action<t_WNIC_CLK_REF_COUNTER_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WNIC_CLK_REF_COUNTER_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGIGPath", WiGIGPath);
             XmlAttrib(sb, "ClockRefCtr", ClockRefCtr);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGIGPath", "ClockRefCtr", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGIGPath;
                case 1:
                    return ClockRefCtr;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WNIC_CLK_REF_COUNTER_ARGS> m_target;
        #endregion
    }
    public sealed class t_WIGIG_PASSTHROUGH_DATA : TraceEvent
    {
        public int DataSize { get { return GetInt32At(0); } }
        public Address pData { get { return GetAddressAt(4); } }

        #region Private
        internal t_WIGIG_PASSTHROUGH_DATA(Action<t_WIGIG_PASSTHROUGH_DATA> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WIGIG_PASSTHROUGH_DATA>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttribHex(sb, "pData", pData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DataSize", "pData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DataSize;
                case 1:
                    return pData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WIGIG_PASSTHROUGH_DATA> m_target;
        #endregion
    }
    public sealed class t_WNIC_RECEIVER_CONNECTIVITY_ARGS : TraceEvent
    {
        public bool ReceiverDetected { get { return GetInt32At(0) != 0; } }
        public WNIC_RECEIVER_NOTIFY_REASON ReceiverNotifyReason { get { return (WNIC_RECEIVER_NOTIFY_REASON)GetInt32At(4); } }

        #region Private
        internal t_WNIC_RECEIVER_CONNECTIVITY_ARGS(Action<t_WNIC_RECEIVER_CONNECTIVITY_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WNIC_RECEIVER_CONNECTIVITY_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ReceiverDetected", ReceiverDetected);
             XmlAttrib(sb, "ReceiverNotifyReason", ReceiverNotifyReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ReceiverDetected", "ReceiverNotifyReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ReceiverDetected;
                case 1:
                    return ReceiverNotifyReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WNIC_RECEIVER_CONNECTIVITY_ARGS> m_target;
        #endregion
    }
    public sealed class t_IGD_TFD_HEAD_TAIL_PTR_ARGS : TraceEvent
    {
        public int WiGIGPath { get { return GetInt32At(0); } }
        public Address TFDPointer { get { return GetAddressAt(4); } }

        #region Private
        internal t_IGD_TFD_HEAD_TAIL_PTR_ARGS(Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGIGPath", WiGIGPath);
             XmlAttribHex(sb, "TFDPointer", TFDPointer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGIGPath", "TFDPointer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGIGPath;
                case 1:
                    return TFDPointer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IGD_TFD_HEAD_TAIL_PTR_ARGS> m_target;
        #endregion
    }
    public sealed class t_WNIC_IGD_STATUS_ARGS : TraceEvent
    {
        public WNIC_IGD_READINESS IGDReady { get { return (WNIC_IGD_READINESS)GetInt32At(0); } }
        public WNIC_IGD_READY_REASON ReadyReason { get { return (WNIC_IGD_READY_REASON)GetInt32At(4); } }

        #region Private
        internal t_WNIC_IGD_STATUS_ARGS(Action<t_WNIC_IGD_STATUS_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WNIC_IGD_STATUS_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IGDReady", IGDReady);
             XmlAttrib(sb, "ReadyReason", ReadyReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IGDReady", "ReadyReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IGDReady;
                case 1:
                    return ReadyReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WNIC_IGD_STATUS_ARGS> m_target;
        #endregion
    }
    public sealed class t_WGBOX1_CAPTURE_COMPLETE : TraceEvent
    {
        public int CapSyncCount { get { return GetInt32At(0); } }
        public int DefaultQP { get { return GetInt32At(4); } }
        public int WGBoxStatus { get { return GetInt32At(8); } }
        public int WGBoxTargetFrameByteSize { get { return GetInt32At(12); } }
        public int PTSTimeStampDelta { get { return GetInt32At(16); } }
        public int PCRClock { get { return GetInt32At(20); } }
        public int CurrentFrameByte { get { return GetInt32At(24); } }
        public int WGBoxSTDBitRate { get { return GetInt32At(28); } }
        public int FrameCounter { get { return GetInt32At(32); } }
        public int ClocksForFrameEncoding { get { return GetInt32At(36); } }

        #region Private
        internal t_WGBOX1_CAPTURE_COMPLETE(Action<t_WGBOX1_CAPTURE_COMPLETE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WGBOX1_CAPTURE_COMPLETE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CapSyncCount", CapSyncCount);
             XmlAttrib(sb, "DefaultQP", DefaultQP);
             XmlAttrib(sb, "WGBoxStatus", WGBoxStatus);
             XmlAttrib(sb, "WGBoxTargetFrameByteSize", WGBoxTargetFrameByteSize);
             XmlAttrib(sb, "PTSTimeStampDelta", PTSTimeStampDelta);
             XmlAttrib(sb, "PCRClock", PCRClock);
             XmlAttrib(sb, "CurrentFrameByte", CurrentFrameByte);
             XmlAttrib(sb, "WGBoxSTDBitRate", WGBoxSTDBitRate);
             XmlAttrib(sb, "FrameCounter", FrameCounter);
             XmlAttrib(sb, "ClocksForFrameEncoding", ClocksForFrameEncoding);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CapSyncCount", "DefaultQP", "WGBoxStatus", "WGBoxTargetFrameByteSize", "PTSTimeStampDelta", "PCRClock", "CurrentFrameByte", "WGBoxSTDBitRate", "FrameCounter", "ClocksForFrameEncoding"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CapSyncCount;
                case 1:
                    return DefaultQP;
                case 2:
                    return WGBoxStatus;
                case 3:
                    return WGBoxTargetFrameByteSize;
                case 4:
                    return PTSTimeStampDelta;
                case 5:
                    return PCRClock;
                case 6:
                    return CurrentFrameByte;
                case 7:
                    return WGBoxSTDBitRate;
                case 8:
                    return FrameCounter;
                case 9:
                    return ClocksForFrameEncoding;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WGBOX1_CAPTURE_COMPLETE> m_target;
        #endregion
    }
    public sealed class t_WGBOX1_END_OF_FRAME_INTERRUPT : TraceEvent
    {
        public int CapsyncCount { get { return GetInt32At(0); } }
        public int DefaultQP { get { return GetInt32At(4); } }
        public int WGBoxStatus { get { return GetInt32At(8); } }
        public int WGboxTgtFrameByteSize { get { return GetInt32At(12); } }
        public int PTSTimeStampDelta { get { return GetInt32At(16); } }
        public int PCRClock { get { return GetInt32At(20); } }
        public int CurrentFrameBytes { get { return GetInt32At(24); } }
        public int WGBoxSTDBitRate { get { return GetInt32At(28); } }
        public int FrameCounter { get { return GetInt32At(32); } }
        public int ClocksForFrameEncoding { get { return GetInt32At(36); } }

        #region Private
        internal t_WGBOX1_END_OF_FRAME_INTERRUPT(Action<t_WGBOX1_END_OF_FRAME_INTERRUPT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WGBOX1_END_OF_FRAME_INTERRUPT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CapsyncCount", CapsyncCount);
             XmlAttrib(sb, "DefaultQP", DefaultQP);
             XmlAttrib(sb, "WGBoxStatus", WGBoxStatus);
             XmlAttrib(sb, "WGboxTgtFrameByteSize", WGboxTgtFrameByteSize);
             XmlAttrib(sb, "PTSTimeStampDelta", PTSTimeStampDelta);
             XmlAttrib(sb, "PCRClock", PCRClock);
             XmlAttrib(sb, "CurrentFrameBytes", CurrentFrameBytes);
             XmlAttrib(sb, "WGBoxSTDBitRate", WGBoxSTDBitRate);
             XmlAttrib(sb, "FrameCounter", FrameCounter);
             XmlAttrib(sb, "ClocksForFrameEncoding", ClocksForFrameEncoding);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CapsyncCount", "DefaultQP", "WGBoxStatus", "WGboxTgtFrameByteSize", "PTSTimeStampDelta", "PCRClock", "CurrentFrameBytes", "WGBoxSTDBitRate", "FrameCounter", "ClocksForFrameEncoding"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CapsyncCount;
                case 1:
                    return DefaultQP;
                case 2:
                    return WGBoxStatus;
                case 3:
                    return WGboxTgtFrameByteSize;
                case 4:
                    return PTSTimeStampDelta;
                case 5:
                    return PCRClock;
                case 6:
                    return CurrentFrameBytes;
                case 7:
                    return WGBoxSTDBitRate;
                case 8:
                    return FrameCounter;
                case 9:
                    return ClocksForFrameEncoding;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WGBOX1_END_OF_FRAME_INTERRUPT> m_target;
        #endregion
    }
    public sealed class t_WGBOX1_LATE_RUN : TraceEvent
    {
        public WIGIG_LATE_RUN LateRunStatus { get { return (WIGIG_LATE_RUN)GetInt32At(0); } }
        public int DefaultQP { get { return GetInt32At(4); } }
        public int WGBoxStatus { get { return GetInt32At(8); } }
        public int WGBoxTratgetFrame { get { return GetInt32At(12); } }
        public int PTSTimeStampDelta { get { return GetInt32At(16); } }
        public int PCRClock { get { return GetInt32At(20); } }
        public int CurrentFrameBytes { get { return GetInt32At(24); } }
        public int WGBoxSTDBitRate { get { return GetInt32At(28); } }
        public int FrameCounter { get { return GetInt32At(32); } }
        public int ClocksForFrameEncoding { get { return GetInt32At(36); } }

        #region Private
        internal t_WGBOX1_LATE_RUN(Action<t_WGBOX1_LATE_RUN> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WGBOX1_LATE_RUN>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LateRunStatus", LateRunStatus);
             XmlAttrib(sb, "DefaultQP", DefaultQP);
             XmlAttrib(sb, "WGBoxStatus", WGBoxStatus);
             XmlAttrib(sb, "WGBoxTratgetFrame", WGBoxTratgetFrame);
             XmlAttrib(sb, "PTSTimeStampDelta", PTSTimeStampDelta);
             XmlAttrib(sb, "PCRClock", PCRClock);
             XmlAttrib(sb, "CurrentFrameBytes", CurrentFrameBytes);
             XmlAttrib(sb, "WGBoxSTDBitRate", WGBoxSTDBitRate);
             XmlAttrib(sb, "FrameCounter", FrameCounter);
             XmlAttrib(sb, "ClocksForFrameEncoding", ClocksForFrameEncoding);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LateRunStatus", "DefaultQP", "WGBoxStatus", "WGBoxTratgetFrame", "PTSTimeStampDelta", "PCRClock", "CurrentFrameBytes", "WGBoxSTDBitRate", "FrameCounter", "ClocksForFrameEncoding"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LateRunStatus;
                case 1:
                    return DefaultQP;
                case 2:
                    return WGBoxStatus;
                case 3:
                    return WGBoxTratgetFrame;
                case 4:
                    return PTSTimeStampDelta;
                case 5:
                    return PCRClock;
                case 6:
                    return CurrentFrameBytes;
                case 7:
                    return WGBoxSTDBitRate;
                case 8:
                    return FrameCounter;
                case 9:
                    return ClocksForFrameEncoding;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WGBOX1_LATE_RUN> m_target;
        #endregion
    }
    public sealed class t_IGD_TERMINATE_ARGS : TraceEvent
    {
        public int WiGIGPath { get { return GetInt32At(0); } }
        public int ReasonForTermn { get { return GetInt32At(4); } }

        #region Private
        internal t_IGD_TERMINATE_ARGS(Action<t_IGD_TERMINATE_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IGD_TERMINATE_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGIGPath", WiGIGPath);
             XmlAttrib(sb, "ReasonForTermn", ReasonForTermn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGIGPath", "ReasonForTermn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGIGPath;
                case 1:
                    return ReasonForTermn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IGD_TERMINATE_ARGS> m_target;
        #endregion
    }
    public sealed class t_IGD_NOTIFY_TFD_PTR_ARGS : TraceEvent
    {
        public int WiGIGPath { get { return GetInt32At(0); } }
        public int TFDVideoSize { get { return GetInt32At(4); } }
        public int NumVideoTFDEntries { get { return GetInt32At(8); } }
        public int TFDAudioSize { get { return GetInt32At(12); } }
        public int NumAudioTFDEntries { get { return GetInt32At(16); } }
        public Address VideoTFDAddr { get { return GetAddressAt(20); } }
        public int TFDVideoAllocSize { get { return GetInt32At(HostOffset(24, 1)); } }
        public Address AudioTFDAddr { get { return GetAddressAt(HostOffset(28, 1)); } }
        public int TFDAudioAllocSize { get { return GetInt32At(HostOffset(32, 2)); } }

        #region Private
        internal t_IGD_NOTIFY_TFD_PTR_ARGS(Action<t_IGD_NOTIFY_TFD_PTR_ARGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(36, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(36, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_IGD_NOTIFY_TFD_PTR_ARGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGIGPath", WiGIGPath);
             XmlAttrib(sb, "TFDVideoSize", TFDVideoSize);
             XmlAttrib(sb, "NumVideoTFDEntries", NumVideoTFDEntries);
             XmlAttrib(sb, "TFDAudioSize", TFDAudioSize);
             XmlAttrib(sb, "NumAudioTFDEntries", NumAudioTFDEntries);
             XmlAttribHex(sb, "VideoTFDAddr", VideoTFDAddr);
             XmlAttrib(sb, "TFDVideoAllocSize", TFDVideoAllocSize);
             XmlAttribHex(sb, "AudioTFDAddr", AudioTFDAddr);
             XmlAttrib(sb, "TFDAudioAllocSize", TFDAudioAllocSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGIGPath", "TFDVideoSize", "NumVideoTFDEntries", "TFDAudioSize", "NumAudioTFDEntries", "VideoTFDAddr", "TFDVideoAllocSize", "AudioTFDAddr", "TFDAudioAllocSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGIGPath;
                case 1:
                    return TFDVideoSize;
                case 2:
                    return NumVideoTFDEntries;
                case 3:
                    return TFDAudioSize;
                case 4:
                    return NumAudioTFDEntries;
                case 5:
                    return VideoTFDAddr;
                case 6:
                    return TFDVideoAllocSize;
                case 7:
                    return AudioTFDAddr;
                case 8:
                    return TFDAudioAllocSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_IGD_NOTIFY_TFD_PTR_ARGS> m_target;
        #endregion
    }
    public sealed class t_WiGigEventData : TraceEvent
    {
        public SB_WIGIG_EVENT_OBJECT_INDEX WiGigEventObjIndex { get { return (SB_WIGIG_EVENT_OBJECT_INDEX)GetInt32At(0); } }
        public int TimeOut { get { return GetInt32At(4); } }

        #region Private
        internal t_WiGigEventData(Action<t_WiGigEventData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_WiGigEventData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WiGigEventObjIndex", WiGigEventObjIndex);
             XmlAttrib(sb, "TimeOut", TimeOut);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WiGigEventObjIndex", "TimeOut"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WiGigEventObjIndex;
                case 1:
                    return TimeOut;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_WiGigEventData> m_target;
        #endregion
    }
    public sealed class t_RegDeRegCallBackEntry : TraceEvent
    {
        public bool Register { get { return GetInt32At(0) != 0; } }

        #region Private
        internal t_RegDeRegCallBackEntry(Action<t_RegDeRegCallBackEntry> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<t_RegDeRegCallBackEntry>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Register", Register);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Register"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Register;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<t_RegDeRegCallBackEntry> m_target;
        #endregion
    }
    public enum ACPIOPREGION_MAILBOX_TYPE
    {
        ACPI_PUBLICMETHODSMAILBOX = 0x1,
        BIOSTODRIVERNOTIFICATION_MAILBOX = 0x2,
        EXT_BIOSTODRIVERNOTIFICATION_MAILBOX = 0x3,
    }
    public enum ACPIOPREGION_VERSION
    {
        ACPI_OPREGION1_0 = 0x1,
        ACPI_OPREGION1_1 = 0x2,
        ACPI_OPREGION2_0 = 0x3,
    }
    public enum AUDIO_CONFIG_TYPE
    {
        AUDIO_UNINITIALIZED = 0x0,
        CLONED_AUDIO = 0x1,
        INDEPENDENT_AUDIO = 0x2,
    }
    public enum AUDIO_EVENT
    {
        TIMER_EVENT = 0x0,
        SEND_VERBCOMMANDINFO_EVENT = 0x1,
    }
    public enum AUDIO_VERB_COMMAND
    {
        INVALID = 0x0,
        SAVE_VERB_COMMAND_0xF08 = 0x1,
        RESTORE_VERB_COMMAND_0x708 = 0x2,
        PW2_OFF_VERB_COMMAND_0x71C = 0x3,
        PW2_ON_VERB_COMMAND_0x71C = 0x4,
    }
    public enum AUDIOSTATE
    {
        CPREADY = 0x1,
        PD = 0x2,
        IA = 0x4,
        ELD = 0x8,
    }
    public enum CHILDDEVICE_POWER_STATE
    {
        UnspecifiedState = 0x0,
        D0 = 0x1,
        D1 = 0x2,
        D2 = 0x3,
        D3 = 0x4,
        D4 = 0x5,
        D5 = 0x6,
        NumPowerStates = 0x7,
    }
    public enum CHIPSET_PLATFORM_TYPE
    {
        PLATFORM_NONE = 0x0,
        PLATFORM_DESKTOP = 0x1,
        PLATFORM_MOBILE = 0x2,
        PLATFORM_TABLET = 0x3,
        PLATFORM_ALL = 0xff,
    }
    public enum CHIPSET_PRODUCT_FAMILY
    {
        IGFX_HASWELL = 0xe,
        IGFX_VALLEYVIEW = 0xf,
        IGFX_BROADWELL = 0x10,
        IGFX_CHERRYVIEW = 0x11,
        IGFX_SKYLAKE = 0x12,
        IGFX_WILLOWVIEW = 0x13,
        IGFX_BROXTON = 0x14,
        IGFX_CANNONLAKE = 0x15,
    }
    public enum CONNECTOR_TYPE
    {
        DVI = 0x4,
        HDMI = 0x5,
        LVDS = 0x6,
        DP_EXTERNAL = 0xa,
        DP_EMBEDDED = 0xb,
        MIRACAST = 0xf,
    }
    public enum CP_PROTECTION_LEVEL_HDCP
    {
        HDCP_OFF = 0x0,
        HDCP_ON = 0x1,
        HDCP_ON_TYPE1 = 0x2,
    }
    [Flags]
    public enum CP_PROTECTION_TYPE
    {
        TYPE_NONE = 0x0,
        TYPE_HDCP = 0x8,
        TYPE_HDCP_TYPE_ENFORCEMENT = 0x20,
    }
    public enum CPU_TYPE
    {
        UNDEFINED = 0x0,
        CORE_I3 = 0x1,
        CORE_I5 = 0x2,
        CORE_I7 = 0x3,
        PENTIUM = 0x4,
        CELERON = 0x5,
        CORE = 0x6,
        VPRO = 0x7,
        SUPER_SKU = 0x8,
        ATOM = 0x9,
        CORE1 = 0xa,
        CORE2 = 0xb,
        WS = 0xc,
        SERVER = 0xd,
        CORE_I5_I7 = 0xe,
    }
    public enum CSC_OPERATION_TYPE
    {
        GET_CSC_PARAMETERS = 0x1,
        SET_CSC_PARAMETERS = 0x2,
    }
    public enum CURSOR_ID
    {
        CURSOR_INVALID = 0x0,
        CURSOR_A = 0x1,
        CURSOR_B = 0x2,
        CURSOR_C = 0x3,
        CURSOR_TPV = 0x4,
    }
    public enum CURSOR_OPERATIONS
    {
        CURSOR_GET_CAPS = 0x1,
        CURSOR_SET_POSITION = 0x2,
        CURSOR_GET_POSITION = 0x3,
        CURSOR_SET_SHAPE = 0x4,
        CURSOR_GET_SHAPE = 0x5,
        CURSOR_SET_PALETTE = 0x6,
        CURSOR_GET_PALETTE = 0x7,
        CURSOR_CONNECT_PIPE = 0x8,
        CURSOR_DISCONNECT_PIPE = 0x9,
        CURSOR_GET_DATA = 0xa,
        CURSOR_180_ROTATION = 0xb,
        CURSOR_ENABLE_DISABLE_CSC = 0xc,
    }
    public enum CUSTOM_MODE_TYPE
    {
        STANDARD_CUSTOM_MODE_TYPE = 0x1,
        DETAILED_CUSTOM_MODE_TYPE = 0x2,
        ANY_CUSTOM_MODE_TYPE = 0x3,
    }
    public enum CUSTOM_SCALING_OP_TYPE
    {
        CUSTOM_SCALING_ENABLE = 0x1,
        CUSTOM_SCALING_DISABLE = 0x2,
        CUSTOM_SCALING_APPLY = 0x3,
    }
    public enum CUSTOMMODE_ERRORCODES
    {
        CUSTOMMODE_NO_ERROR = 0x0,
        CUSTOMMODE_INVALID_PARAMETER = 0x1,
        CUSTOMMODE_STANDARD_CUSTOM_MODE_EXISTS = 0x2,
        CUSTOMMODE_DETAILED_CUSTOM_MODE_EXISTS = 0x3,
        CUSTOMMODE_NON_CUSTOM_MATCHING_MODE_EXISTS = 0x4,
        CUSTOMMODE_INSUFFICIENT_MEMORY = 0x5,
        CUSTOMMODE_UNSUPPORTED_REFRESH_RATE = 0x6,
        CUSTOMMODE_UNSUPPORTED_TIMING = 0x7,
        CUSTOMMODE_UNDEFINED_ERROR_CODE = 0x8,
    }
    public enum D3DKMDT_ENUMCOFUNCMODALITY_PIVOT_TYPE
    {
        UNINITIALIZED = 0x0,
        VIDPNSOURCE = 0x1,
        VIDPNTARGET = 0x2,
        SCALING = 0x3,
        ROTATION = 0x4,
        NOPIVOT = 0x5,
    }
    public enum DC_POWER_STATE
    {
        DC_NONE = 0x0,
        DC5 = 0x1,
        DC6 = 0x2,
        DC9 = 0x3,
    }
    public enum DEV_POWER_STATE
    {
        PS_UNDEFINED = 0x0,
        DEVICE_ON = 0x1,
        DEVICE_STANDBY = 0x2,
        DEVICE_SUSPEND = 0x3,
        DEVICE_OFF = 0x4,
        DEVICE_HIBERNATE = 0x5,
        DEVICE_SHUTDOWN = 0x6,
        DEVICE_REDUCED_ON = 0x7,
    }
    public enum DEVICE_POWER_STATE
    {
        Unspecified = 0x0,
        D0 = 0x1,
        D1 = 0x2,
        D2 = 0x3,
        D3 = 0x4,
        Maximum = 0x5,
    }
    public enum DISPLAY_DETAILS_FLAG
    {
        QUERY_DISPLAYUID = 0x1,
        QUERY_DISPLAYTYPE_INDEX = 0x2,
    }
    public enum DISPLAY_TYPE
    {
        NULL_DISPLAY_TYPE = 0x0,
        CRT_TYPE = 0x1,
        RESERVED_TYPE = 0x2,
        DFP_TYPE = 0x3,
        LFP_TYPE = 0x4,
        MAX_DISPLAY_TYPES = 0x5,
    }
    public enum DisplayConfig
    {
        SPSD = 0x0,
        TWIN = 0x1,
        CLONE = 0x2,
        EXTENDED = 0x4,
        HOR_COLLAGE = 0x8,
        VER_COLLAGE = 0x10,
    }
    public enum DP_LINK_TRAINING_STATUS
    {
        INVALID_LINK_RATE = 0x0,
        SET_LINK_BW_FAIL = 0x1,
        SET_LANE_COUNT_FAIL = 0x2,
        SET_TP_FAIL = 0x3,
        SET_VSWING_AND_PREMPH_FAIL = 0x4,
        SET_TRAIN_LEVEL_FAIL = 0x5,
        GET_CURRENT_LINK_STATUS_FAIL = 0x6,
        SINK_REQUEST_FAIL = 0x7,
        CR_FAILED = 0x8,
        CH_EQ_FAILED = 0x9,
        LINK_TRAINING_LBR_FAILED = 0xa,
        LINK_TRAINING_HBR_FAILED = 0xb,
        LINK_TRAINING_FAILED = 0xc,
        LINK_TRAINING_SUCCESSFUL = 0xd,
        LINK_TRAINING_HBR2_FAILED = 0xe,
        LINK_TRAINING_HBR3_FAILED = 0xf,
        SET_TP1_FAIL = 0x10,
        SET_TP2_FAIL = 0x11,
    }
    public enum DVMT_VERSION
    {
        eDVMT20 = 0x0,
        eDVMT30 = 0x1,
        eDVMT40 = 0x2,
        eDVMT50 = 0x3,
    }
    public enum DXGK_CHILD_STATUS_TYPE
    {
        Uninitialized = 0x0,
        Connection = 0x1,
        Rotation = 0x2,
        MiracastConnection = 0x3,
    }
    public enum DXGK_CRTC_VSYNC_STATE
    {
        ENABLE = 0x0,
        DISABLE_KEEP_PHASE = 0x1,
        DISABLE_NO_PHASE = 0x2,
    }
    public enum DXGK_EVENT_TYPE
    {
        Undefined = 0x0,
        Acpi = 0x1,
        PowerState = 0x2,
        Docking = 0x3,
    }
    public enum DXGK_INTERRUPT_STATE
    {
        ENABLE = 0x0,
        DISABLE = 0x1,
    }
    public enum DXGK_INTERRUPT_TYPE
    {
        DMA_COMPLETED = 0x1,
        DMA_PREEMPTED = 0x2,
        CRTC_VSYNC = 0x3,
        DMA_FAULTED = 0x4,
        DISPLAYONLY_VSYNC = 0x5,
        DISPLAYONLY_PRESENT_PROGRESS = 0x6,
        CRTC_VSYNC_WITH_MULTIPLANE_OVERLAY = 0x7,
        MICACAST_CHUNK_PROCESSING_COMPLETE = 0x8,
    }
    [Flags]
    public enum DXGK_MODE_BEHAVIOR_FLAGS
    {
        PrioritizeHDR = 0x1,
    }
    [Flags]
    public enum DXGK_MONITORLINKINFO_Capabilities
    {
        Stereo = 0x1,
        WideColorSpace = 0x2,
        HighColorSpace = 0x4,
    }
    [Flags]
    public enum DXGK_PAGE_FAULT_FLAGS
    {
        DXGK_PAGE_FAULT_WRITE = 0x1,
        DXGK_PAGE_FAULT_FENCE_INVALID = 0x2,
        DXGK_PAGE_FAULT_ADAPTER_RESET_REQUIRED = 0x4,
        DXGK_PAGE_FAULT_ENGINE_RESET_REQUIRED = 0x8,
        DXGK_PAGE_FAULT_FATAL_HARDWARE_ERROR = 0x10,
        DXGK_PAGE_FAULT_IOMMU = 0x20,
    }
    public enum DXGK_QUERYADAPTERINFOTYPE
    {
        UMDRIVERPRIVATE = 0x0,
        DRIVERCAPS = 0x1,
        QUERYSEGMENT = 0x2,
        ALLOCATIONGROUP = 0x3,
        QUERYSEGMENT2 = 0x4,
        QUERYSEGMENT3 = 0x5,
        NUMPOWERCOMPONENTS = 0x6,
        POWERCOMPONENTINFO = 0x7,
        PREFERREDGPUNODE = 0x8,
        POWERCOMPONENTPSTATEINFO = 0x9,
        HISTORYBUFFERPRECISION = 0xa,
    }
    public enum EVENT_OPERATION
    {
        UNDEFINED = 0x0,
        ENABLE = 0x1,
        DISABLE = 0x2,
        MASK = 0x3,
        UNMASK = 0x4,
    }
    public enum FW_ENGINE_TYPE
    {
        FORCEWAKE_BLITTER = 0x0,
        FORCEWAKE_RENDER = 0x1,
        FORCEWAKE_MEDIA = 0x2,
        FORCEWAKE_ALL = 0x3,
        FORCEWAKE_MAX_ENGINE = 0x4,
    }
    public enum GENERIC_STATES
    {
        DISABLE = 0x0,
        ENABLE = 0x1,
    }
    public enum GFX_CLIENT_STATUS
    {
        ACQUIRE_DOORBELL = 0x0,
        GRAPHICS_CLIENT_UNLOAD = 0x1,
        GRAPHICS_CLIENT_NOT_AVAILABLE = 0x2,
        GRAPHICS_CLIENT_AVAILABLE = 0x3,
    }
    public enum GFX_CLIENT_TYPE
    {
        TOUCH = 0x0,
        CLIFTON_HIGH = 0x1,
        CLIFTON_NORMAL = 0x2,
        AUDIO = 0x3,
        OTHER = 0x4,
    }
    public enum GFX_STATUS
    {
        GPU_AVAILABLE = 0x0,
        GPU_NOT_AVAILABLE = 0x1,
        GPU_ENGINE_RESET = 0x2,
        GRAPHICS_DRIVER_UNLOAD = 0x3,
    }
    public enum GMCH_AUX_ERROR_TYPE
    {
        GMCH_AUX_NOERROR = 0x0,
        GMCH_AUX_ERROR_BUSY = 0x1,
        GMCH_AUX_ERROR_UNKNOWN = 0x2,
        GMCH_AUX_ERROR_INVALID_PARAMETER = 0x3,
        GMCH_AUX_ERROR_NOTSUPPORTED = 0x4,
        GMCH_AUX_ERROR_OPEN = 0x5,
        GMCH_AUX_ERROR_DATA_READ = 0x6,
        GMCH_AUX_ERROR_DATA_WRITE = 0x7,
        GMCH_AUX_ERROR_INVALID_PORT = 0x8,
        GMCH_AUX_ERROR_MORE_DATA = 0x9,
        GMCH_AUX_ERROR_DEFER = 0xa,
        GMCH_AUX_ERROR_TIMEOUT = 0xb,
    }
    public enum GMCH_DP_PREEMPHASIS_LEVEL
    {
        eNoPreEmphasis = 0x0,
        e3_5dB = 0x1,
        e6dB = 0x2,
        e9_5dB = 0x3,
        e0_5dB = 0x4,
        e2_5dB = 0x5,
        e4_5dB = 0x6,
        e2dB = 0x7,
        e3dB = 0x8,
        e4_8dB = 0x9,
    }
    public enum GMCH_DP_VOLTAGE_SWING_LEVEL
    {
        e0_4 = 0x0,
        e0_6 = 0x1,
        e0_8 = 0x2,
        e1_2 = 0x3,
        e0_75 = 0x4,
        e0_85 = 0x5,
        e1_0 = 0x6,
        e0_2 = 0x7,
        e0_25 = 0x8,
        e0_35 = 0x9,
        e0_5 = 0xa,
    }
    public enum GMCH_I2C_COMMAND
    {
        GMCH_I2C_COMMAND_NULL = 0x0,
        GMCH_I2C_COMMAND_READ = 0x1,
        GMCH_I2C_COMMAND_WRITE = 0x2,
        GMCH_I2C_COMMAND_STATUS = 0x3,
        GMCH_I2C_COMMAND_RESET = 0x4,
    }
    public enum GMCH_I2C_ERROR_TYPE
    {
        GMCH_I2C_NOERROR = 0x0,
        GMCH_I2C_ERROR_BUSY = 0x1,
        GMCH_I2C_ERROR_UNKNOWN = 0x2,
        GMCH_I2C_ERROR_INVALID_PARAMETER = 0x3,
        GMCH_I2C_ERROR_NOTSUPPORTED = 0x4,
        GMCH_I2C_ERROR_OPEN = 0x5,
        GMCH_I2C_ERROR_DATA_READ = 0x6,
        GMCH_I2C_ERROR_DATA_WRITE = 0x7,
        GMCH_I2C_ERROR_INVALID_PORT = 0x8,
    }
    public enum GRM_STATUS
    {
        GRM_FAILURE = 0x0,
        GRM_INSUFFICIENT_BUFFER = 0x1,
        GRM_NO_BANDWIDTH = 0x2,
        GRM_NO_RESOURCE = 0x3,
        GRM_PORT_ATTACH_FAILURE = 0x4,
        GRM_PIPE_ATTACH_FAILURE = 0x5,
        GRM_PLANE_ATTACH_FAILURE = 0x6,
        GRM_INVALID_PARAM = 0x7,
        GRM_INVALID_DISPLAY_COMBO = 0x8,
        GRM_RESOURCE_CURRENTLY_IN_USE = 0x9,
        GRM_OK = 0xa,
        GRM_SUCCESSFUL = 0xb,
    }
    public enum GRM_VIDEO_FORMAT
    {
        PLANAR_FORMAT = 0x0,
        PACKED_FORMAT = 0x1,
        RGB_FORMAT = 0x2,
        UNKNOWN_FORMAT = 0x3,
    }
    public enum GTC_STATE
    {
        GTC_DISABLE = 0x0,
        GTC_ENABLE = 0x1,
        GTC_LOCK_FAIL = 0x2,
        GTC_LOCK_ACQUIRED = 0x3,
    }
    public enum IGFX_DEV_POWER_STATE
    {
        IGFX_Dev_Power_UnSpecified = 0x0,
        IGFX_Dev_Power_D0 = 0x1,
        IGFX_Dev_Power_D1 = 0x2,
        IGFX_Dev_Power_D2 = 0x3,
        IGFX_Dev_Power_D3 = 0x4,
    }
    public enum IGFX_ENCRYPTION_TYPE
    {
        NO_ENCRYPTION = 0x0,
        PAVP_PLANE_ENCRYPTED = 0x1,
        ISOLATED_DECODE = 0x2,
    }
    public enum IGFX_ENGINE_RESET_TYPE
    {
        KM_RESET_TYPE_MEDIA_RESET = 0x0,
        KM_RESET_TYPE_WINDOWS_ENGINE_RESET = 0x1,
        KM_RESET_TYPE_PRIVATE_ENGINE_RESET = 0x2,
    }
    public enum IGFX_GPU_NODE
    {
        GPUNODE_3D = 0x0,
        GPUNODE_VIDEO = 0x1,
        GPUNODE_BLT = 0x2,
        GPUNODE_VE = 0x3,
        GPUNODE_VCS2 = 0x4,
        GPUNODE_PICS = 0x5,
    }
    public enum IGFX_IMPORTANCE_ORDINAL
    {
        UNINITIALIZED = 0x0,
        PRIMARY = 0x1,
        SECONDARY = 0x2,
        TERTIARY = 0x3,
        QUATERNARY = 0x4,
        QUINARY = 0x5,
        SENARY = 0x6,
        SEPTENARY = 0x7,
        OCTONARY = 0x8,
        NONARY = 0x9,
        DENARY = 0xa,
    }
    public enum IGFX_PC_NOTIFY_EVENT
    {
        MONITOR_OFF = 0x0,
        PRE_MODE_CHANGE = 0x1,
        POST_MODE_CHANGE = 0x2,
        PRE_PATH_CLEANUP = 0x3,
        POST_PATH_CLEANUP = 0x4,
    }
    public enum IGFX_POWER_COMPONENT
    {
        IGFX_POWER_COMPONENT_INTERRUPT = 0x0,
        IGFX_POWER_COMPONENT_POWERCONS = 0x1,
        IGFX_POWER_COMPONENT_RENDER = 0x2,
        IGFX_POWER_COMPONENT_VED = 0x3,
        IGFX_POWER_COMPONENT_GMM = 0x4,
        IGFX_POWER_COMPONENT_ACPI_MANAGER = 0x5,
        IGFX_POWER_COMPONENT_DISPLAY = 0x6,
        IGFX_POWER_COMPONENT_MAXCOUNT = 0x7,
        IGFX_POWER_COMPONENT_NONE = 0x8,
    }
    public enum IGFX_ROTATION
    {
        UNINITIALIZED = 0x0,
        IDENTITY = 0x1,
        ROTATE90 = 0x2,
        ROTATE180 = 0x3,
        ROTATE270 = 0x4,
        UNPINNED = 0xfe,
        ROTATION_UNSPECIFIED = 0xff,
    }
    public enum IGFX_SCALING
    {
        UNINITIALIZED = 0x0,
        IDENTITY = 0x1,
        CENTERED = 0x2,
        STRETCHED = 0x4,
        ASPECTRATIOCENTEREDMAX = 0x8,
        CUSTOM = 0x10,
        UNPINNED = 0xfe,
        UNSPECIFIED = 0xff,
    }
    public enum IGFX_SYS_POWER_ACTION
    {
        IGFX_Power_Action_UnSpecified = 0x0,
        IGFX_Power_Action_None = 0x1,
        IGFX_Power_Action_Sleep = 0x2,
        IGFX_Power_Action_Hibernate = 0x3,
        IGFX_Power_Action_Shutdown = 0x4,
        IGFX_Power_Action_ShutdownReset = 0x5,
        IGFX_Power_Action_ShutdownOff = 0x6,
    }
    public enum INTERRUPT_EVENT
    {
        UNDEFINED_EVENT = 0x0,
        VSYNC_PIPEA_EVENT = 0x1000,
        VSYNC_PIPEB_EVENT = 0x1001,
        VSYNC_PIPEC_EVENT = 0x1002,
        VBLANK_PIPEA_EVENT = 0x1003,
        VBLANK_PIPEB_EVENT = 0x1004,
        VBLANK_PIPEC_EVENT = 0x1005,
        CRCDONE_PIPEA_EVENT = 0x1006,
        CRCDONE_PIPEB_EVENT = 0x1007,
        CRCDONE_PIPEC_EVENT = 0x1008,
        CRCERROR_PIPEA_EVENT = 0x1009,
        CRCERROR_PIPEB_EVENT = 0x100a,
        CRCERROR_PIPEC_EVENT = 0x100b,
        SPRITE_PLANEAFLIPDONE_EVENT = 0x100c,
        SPRITE_PLANEBFLIPDONE_EVENT = 0x100d,
        SPRITE_PLANECFLIPDONE_EVENT = 0x100e,
        SVM_WAITDESCRIPTORCOMPLETED_EVENT = 0x100f,
        SVM_VTDFAULT_EVENT = 0x1010,
        SVM_PRQ_EVENT = 0x1011,
        MIPIA_EVENT = 0x1012,
        MIPIC_EVENT = 0x1013,
        LPE_PIPEA_EVENT = 0x1014,
        LPE_PIPEB_EVENT = 0x1015,
        LPE_PIPEC_EVENT = 0x1016,
        LPEAUDIO_PIPEA_EVENT = 0x1017,
        LPEAUDIO_PIPEB_EVENT = 0x1018,
        LPEAUDIO_PIPEC_EVENT = 0x1019,
        PSR_GTC_EVENT = 0x101a,
        WD_EVENT = 0x101b,
        WD_END_OF_FRAME_EVENT = 0x101c,
        DEMISC_WD_COMBINED_EVENT = 0x101d,
        UNDERRUN_PIPEA_EVENT = 0x101e,
        UNDERRUN_PIPEB_EVENT = 0x101f,
        UNDERRUN_PIPEC_EVENT = 0x1020,
        SDVOB_HOTPLUG_EVENT = 0x2000,
        SDVOC_HOTPLUG_EVENT = 0x2001,
        SDVOD_HOTPLUG_EVENT = 0x2002,
        CRT_HOTPLUG_EVENT = 0x2003,
        RESERVED_HOTPLUG_EVENT = 0x2004,
        INTDP_HDMIA_HOTPLUG_EVENT = 0x2005,
        INTDP_HDMIB_HOTPLUG_EVENT = 0x2006,
        INTDP_HDMIC_HOTPLUG_EVENT = 0x2007,
        INTDP_HDMID_HOTPLUG_EVENT = 0x2008,
        INTDP_HDMIA_SPI_EVENT = 0x2009,
        INTDP_HDMIB_SPI_EVENT = 0x200a,
        INTDP_HDMIC_SPI_EVENT = 0x200b,
        INTDP_HDMID_SPI_EVENT = 0x200c,
        AUDIO_HDCP_PIPE_A_EVENT = 0x200d,
        AUDIO_HDCP_PIPE_B_EVENT = 0x200e,
        AUDIO_HDCP_PIPE_C_EVENT = 0x200f,
        INTDP_HDMIE_HOTPLUG_EVENT = 0x2010,
        INTDP_HDMIE_SPI_EVENT = 0x2011,
        REN_GEY_EVAL_FREQ_CHANGE = 0x3000,
        REN_GEY_SW_COMMAND_COMPLETE = 0x3001,
        REN_GEY_AVGBUSY_THRESHOLD = 0x3002,
        REN_GEY_CONTINUOUS_BUSY_THRESHOLD = 0x3003,
        REN_GEY_UP_EVAL_INTERVAL = 0x3004,
        REN_GEY_DOWN_EVAL_INTERVAL = 0x3005,
        REN_GEY_CONTROLLER_DISABLE = 0x3006,
        RENDER_DEBUG_EVENT = 0x4000,
        RENDER_PIPE_CONTROL_NOTIFY_EVENT = 0x4001,
        RENDER_USER_EVENT = 0x4002,
        RENDER_MMIO_SYNC_FLUSH_EVENT = 0x4003,
        RENDER_WATCHDOG_COUNTER_EXCEED = 0x4004,
        RENDER_AS_CONTEXT_SWITCH = 0x4005,
        RENDER_PAGE_FAULT = 0x4006,
        RENDER_PARITY_ERROR = 0x4007,
        RENDER_PERF_BUFFER_HALF_FULL = 0x4008,
        RENDER_TDL_RETRY_INTERRUPT = 0x4009,
        VIDEO_USER_EVENT = 0x5000,
        VIDEO_DEC_PIPELINE_COUNTER_EXCEED = 0x5001,
        VIDEO_MI_FLUSH_DW_NOTIFY = 0x5002,
        VIDEO_MMIO_SYNC_FLUSH_EVENT = 0x5003,
        VIDEO_AS_CONTEXT_SWITCH = 0x5004,
        VIDEO_PAGE_FAULT = 0x5005,
        VIDEO_PAVP_UNSOLICITED_ATTACK = 0x5006,
        VIDEO_USER_INTERRUPT2 = 0x5007,
        VIDEO_DEC_PIPELINE_COUNTER_EXCEED2 = 0x5008,
        VIDEO_MI_FLUSH_DW_NOTIFY2 = 0x5009,
        VIDEO_AS_CONTEXT_SWITCH2 = 0x500a,
        VIDEO_PAGE_FAULT2 = 0x500b,
        VIDEO_PAVP_UNSOLICITED_ATTACK2 = 0x500c,
        VE_USER_EVENT = 0x6000,
        VE_MI_FLUSH_DW_NOTIFY = 0x6001,
        VE_MMIO_SYNC_FLUSH_EVENT = 0x6002,
        VE_CMD_PARSER_MASTER_ERROR = 0x6003,
        VE_AS_CONTEXT_SWITCH = 0x6004,
        VE_WATCHDOG_COUNTER_EXCEED = 0x6005,
        BLITTER_AS_CONTEXT_SWITCH = 0x7000,
        BLITTER_MI_FLUSH_DW_NOTIFY = 0x7001,
        BLITTER_MMIO_SYNC_FLUSH_EVENT = 0x7002,
        BLITTER_USER_EVENT = 0x7003,
        BLITTER_PAGE_FAULT = 0x7004,
        PINNING_AS_CONTEXT_SWITCH = 0x8000,
        PINNING_USER_EVENT = 0x8001,
        PC_LBPC_PIPEAEVENT = 0x9000,
        PC_LBPC_PIPEBEVENT = 0x9001,
        PC_DPST_HISTOGRAM_EVENT = 0x9002,
        PC_DPST_HISTOGRAM_PIPEAEVENT = 0x9003,
        PC_DPST_HISTOGRAM_PIPEBEVENT = 0x9004,
        PC_DPST_HISTOGRAM_PIPECEVENT = 0x9005,
        PC_DPST_PHASEIN_EVENT = 0x9006,
        PC_PCU_DRIVER_MB_EVENT = 0x9007,
        PC_REN_FREQ_DOWN_RC6TIMEOUT = 0x9008,
        PC_RP_UP_THRESHOLD = 0x9009,
        PC_RP_DOWN_THRESHOLD = 0x900a,
        PC_RP_UP_EI = 0x900b,
        GUC_TO_HOST_EVENT = 0xa000,
        ASLE_EVENT = 0xb000,
        GSE_SYSTEM_LEVEL = 0xb001,
        ISP_INTERRUPT = 0xb002,
        MSVDX_DEVICE_EVENT = 0xb003,
        MSVDX_POWER_EVENT = 0xb004,
        VED_BLOCK_EVENT = 0xb005,
        VED_POWER_EVENT = 0xb006,
        VBLANK_TPV = 0xb007,
        INVALID_GTT_PAGE_TABLE_ENTRY_EVENT = 0xb008,
        INVALID_PAGE_TABLE_ENTRY_DATA_EVENT = 0xb009,
        PIPEA_PLANE1FLIPDONE_EVENT = 0xc000,
        PIPEA_PLANE2FLIPDONE_EVENT = 0xc001,
        PIPEA_PLANE3FLIPDONE_EVENT = 0xc002,
        PIPEB_PLANE1FLIPDONE_EVENT = 0xc003,
        PIPEB_PLANE2FLIPDONE_EVENT = 0xc004,
        PIPEB_PLANE3FLIPDONE_EVENT = 0xc005,
        PIPEC_PLANE1FLIPDONE_EVENT = 0xc006,
        PIPEC_PLANE2FLIPDONE_EVENT = 0xc007,
        PIPEC_PLANE3FLIPDONE_EVENT = 0xc008,
        PIPEA_PLANE1FLIPQUEUEEMPTY_EVENT = 0xc009,
        PIPEA_PLANE2FLIPQUEUEEMPTY_EVENT = 0xc00a,
        PIPEA_PLANE3FLIPQUEUEEMPTY_EVENT = 0xc00b,
        PIPEB_PLANE1FLIPQUEUEEMPTY_EVENT = 0xc00c,
        PIPEB_PLANE2FLIPQUEUEEMPTY_EVENT = 0xc00d,
        PIPEB_PLANE3FLIPQUEUEEMPTY_EVENT = 0xc00e,
        PIPEC_PLANE1FLIPQUEUEEMPTY_EVENT = 0xc00f,
        PIPEC_PLANE2FLIPQUEUEEMPTY_EVENT = 0xc010,
        PIPEC_PLANE3FLIPQUEUEEMPTY_EVENT = 0xc011,
        PIPEA_PLANE4FLIPDONE_EVENT = 0xc012,
        PIPEB_PLANE4FLIPDONE_EVENT = 0xc013,
        PIPEC_PLANE4FLIPDONE_EVENT = 0xc014,
        PIPEA_PLANE1GTTFAULTSTATUS_EVENT = 0xd000,
        PIPEA_PLANE2GTTFAULTSTATUS_EVENT = 0xd001,
        PIPEA_PLANE3GTTFAULTSTATUS_EVENT = 0xd002,
        PIPEA_PLANE4GTTFAULTSTATUS_EVENT = 0xd003,
        PIPEA_CURSORGTTFAULTSTATUS_EVENT = 0xd004,
        PIPEB_PLANE1GTTFAULTSTATUS_EVENT = 0xd005,
        PIPEB_PLANE2GTTFAULTSTATUS_EVENT = 0xd006,
        PIPEB_PLANE3GTTFAULTSTATUS_EVENT = 0xd007,
        PIPEB_PLANE4GTTFAULTSTATUS_EVENT = 0xd008,
        PIPEB_CURSORGTTFAULTSTATUS_EVENT = 0xd009,
        PIPEC_PLANE1GTTFAULTSTATUS_EVENT = 0xd00a,
        PIPEC_PLANE2GTTFAULTSTATUS_EVENT = 0xd00b,
        PIPEC_PLANE3GTTFAULTSTATUS_EVENT = 0xd00c,
        PIPEC_PLANE4GTTFAULTSTATUS_EVENT = 0xd00d,
        PIPEC_CURSORGTTFAULTSTATUS_EVENT = 0xd00e,
    }
    public enum INTERRUPT_EVENT_MESSAGE_TYPE
    {
        DXGKDDIINTERRUPTROUTINE_ENTRY = 0x0,
        GEN11_MASTER_INTERRUPT_REGISTER_MSB_DISABLE = 0x1,
        GEN11_PENDING_INTERRUPT_BIT_POSITION = 0x2,
        GEN11_DW_OFFSET = 0x3,
        GEN11_DW_VALUE = 0x4,
        GEN11_INTERRUPT_IDENTITY_SELECT_REGISTER = 0x5,
        INTERRUPT_IDENTITY_REGISTER = 0x6,
        INTERRUPT_IDENTITY_REGISTER_CLEAR = 0x7,
        GEN11_DW_RESET = 0x8,
        GEN11_MASTER_INTERRUPT_REGISTER_INTERRUPT_BITS_CLEAR = 0x9,
        GEN11_MASTER_INTERRUPT_REGISTER_MSB_ENABLE = 0xa,
        DXGKDDIINTERRUPTROUTINE_EXIT = 0xb,
    }
    public enum INTERRUPT_OPERATION
    {
        ENABLE_INTERRUPT = 0x1,
        DISABLE_INTERRUPT = 0x2,
        MASK_INTERRUPT = 0x3,
        UNMASK_INTERRUPT = 0x4,
        GET_DISABLED_INTERRUPTS = 0x5,
    }
    public enum LID_STATE
    {
        LID_OPENED = 0x0,
        LID_CLOSED = 0x1,
    }
    public enum LIVE_STATE
    {
        DISCONNECTED = 0x0,
        CONNECTED = 0x1,
    }
    public enum OPERATION
    {
        GET = 0x0,
        SET = 0x1,
    }
    public enum PAVP_ACTION
    {
        PavpSlotAlloc = 0x0,
        PavpSlotFree = 0x1,
        PavpTeardown = 0x2,
        PavpRecover = 0x3,
        PavpAppIDSet = 0x4,
        PavpAppIDClear = 0x5,
    }
    public enum PAVP_TEARDOWN_REASON
    {
        None = 0x0,
        TeardownFromPower = 0x1,
        TeardownFromHardware = 0x2,
        TeardownFromSoftware = 0x3,
    }
    public enum PIN_RESOURCE_TYPE
    {
        PIN_RESOURCE_TYPE_INVALID = 0x0,
        PIN_RESOURCE_TYPE_NON_MPO_MMIO_FLIP = 0x1,
        PIN_RESOURCE_TYPE_MPO_MMIO_FLIP = 0x2,
        PIN_RESOURCE_TYPE_CS_FLIP = 0x3,
        PIN_RESOURCE_TYPE_OVERLAY_FLIP = 0x4,
    }
    public enum PIN_STATUS
    {
        STATUS_NOT_PINNED = 0x0,
        STATUS_PINNING_IN_QUEUE = 0x1,
        STATUS_UNPINNING_IN_QUEUE = 0x2,
        STATUS_PINNED_AND_VALID = 0x3,
        STATUS_SUCCESSFUL = 0x4,
        STATUS_INVALID_PARAMETER = 0x5,
        STATUS_OUT_OF_MEMORY = 0x6,
        STATUS_NOT_SUPPORTED = 0x7,
        STATUS_UNSUCCESSFUL = 0x8,
    }
    public enum PIPE_ID
    {
        PIPE_A = 0x0,
        PIPE_B = 0x1,
        PIPE_C = 0x2,
        MAX_INTEL_PIPES = 0x3,
        PIPE_ANY = 0x7e,
        NULL_PIPE = 0x7f,
    }
    public enum PIPE_ORIENTATION
    {
        ORIENTATION_UNDEFINED = 0x0,
        ORIENTATION_0 = 0x1,
        ORIENTATION_90 = 0x2,
        ORIENTATION_180 = 0x3,
        ORIENTATION_270 = 0x4,
    }
    public enum PipeIndex
    {
        PIPEA = 0x0,
        PIPEB = 0x1,
        PIPEC = 0x2,
    }
    public enum PLANE_ORIENTATION
    {
        ORIENTATION_0 = 0x0,
        ORIENTATION_90 = 0x1,
        ORIENTATION_180 = 0x2,
        ORIENTATION_270 = 0x3,
    }
    public enum PLANE_TYPE
    {
        PLANE_VGA = 0x0,
        PLANE_A = 0x1,
        PLANE_B = 0x2,
        PLANE_C = 0x3,
        PLANE_SPRITE_A = 0x4,
        PLANE_SPRITE_B = 0x5,
        PLANE_SPRITE_C = 0x6,
        PLANE_SPRITE_D = 0x7,
        PLANE_SPRITE_E = 0x8,
        PLANE_SPRITE_F = 0x9,
        CURSORPLANE_A = 0xa,
        CURSORPLANE_B = 0xb,
        CURSORPLANE_C = 0xc,
        PLANE_OVERLAY = 0xd,
        PLANE_ALL = 0x10,
        TPV_PLANE = 0x3c,
        NULL_PLANE = 0x7f,
    }
    public enum PLANE_ZORDER
    {
        ZORDER_1 = 0x0,
        ZORDER_2 = 0x1,
        ZORDER_3 = 0x2,
        ZORDER_4 = 0x3,
        ZORDER_INVALID = 0x7f,
    }
    public enum POINTERSHAPE_FLAGS
    {
        Monochrome = 0x1,
        Color = 0x2,
        MaskedColor = 0x4,
    }
    public enum PORT_TYPES
    {
        ANALOG_PORT = 0x0,
        DVOA_PORT = 0x1,
        DVOB_PORT = 0x2,
        DVOC_PORT = 0x3,
        DVOD_PORT = 0x4,
        LVDS_PORT = 0x5,
        INTDPE_PORT = 0x6,
        INTHDMIB_PORT = 0x7,
        INTHDMIC_PORT = 0x8,
        INTHDMID_PORT = 0x9,
        INT_DVI_PORT = 0xa,
        INTDPA_PORT = 0xb,
        INTDPB_PORT = 0xc,
        INTDPC_PORT = 0xd,
        INTDPD_PORT = 0xe,
        TPV_PORT = 0xf,
        INTMIPIA_PORT = 0x10,
        INTMIPIC_PORT = 0x11,
        MAX_PORTS = 0x12,
    }
    public enum POSH_EVENT_TYPE
    {
        POSH_EVENT_CONTEXT_CREATION = 0x0,
        POSH_EVENT_CONTEXT_SUBMISSION = 0x1,
        POSH_EVENT_POST_PREEMPT_FREEZE_BIT = 0x2,
        POSH_EVENT_SET_CONTEXT_ELEMENT = 0x3,
    }
    public enum POWER_ACTION
    {
        None = 0x0,
        Reserved = 0x1,
        Sleep = 0x2,
        Hibernate = 0x3,
        Shutdown = 0x4,
        ShutdownReset = 0x5,
        ShutdownOff = 0x6,
        WarmEject = 0x7,
    }
    public enum PW2ENABLE_CONFIG
    {
        DISABLE = 0x0,
        ENABLE = 0x1,
        IGNORE = 0x2,
    }
    public enum S3D_DISPLAY_TYPE
    {
        INVALID_DISPLAY = 0x0,
        S3D_HDMI = 0x1,
        S3D_EDP = 0x2,
        S3D_WIDI = 0x3,
    }
    public enum S3D_FORMAT
    {
        eS3DFramePacking = 0x0,
        eS3DFieldAlternative = 0x1,
        eS3DLineAlternative = 0x2,
        eS3DSideBySideFull = 0x3,
        eS3DLDepth = 0x4,
        eS3DLDepthGraphicsGraphicsDeptch = 0x5,
        eS3DTopBottom = 0x6,
        eS3DSideBySideHalfHorizSubSampling = 0x7,
        eS3DSideBySideHalfQuincunxSubSampling = 0x8,
        eS3DPageFlipping = 0x9,
        eNonS3D = 0x3f,
    }
    public enum SB_AUX_ERROR_TYPE
    {
        SB_AUX_NOERROR = 0x0,
        SB_AUX_CORRUPT_BUFFER = 0x1,
        SB_AUX_INVALID_AUX_DEVICE = 0x2,
        SB_AUX_INVALID_OPERATION_TYPE = 0x3,
        SB_AUX_INVALID_AUX_DATA_SIZE = 0x4,
        SB_AUX_INVALID_AUX_ADDRESS = 0x5,
        SB_AUX_ERROR_DEFER = 0x6,
        SB_AUX_ERROR_TIMEOUT = 0x7,
        SB_AUX_ERROR_INCOMPLETE_WRITE = 0x8,
        SB_AUX_ERROR_UNKNOWN = 0x9,
        SB_MAX_ERRORS = 0xa,
    }
    public enum SB_BLA_ERRORCODES
    {
        SB_BLA_PSR_NO_ERROR = 0x0,
        SB_BLA_NO_PSR_CAPABILITY = 0x1,
        SB_BLA_PSR_MAX_ERROR_CODES = 0x2,
    }
    public enum SB_CLK_BENDING_CMD
    {
        CLK_BENDING_GET_PARAMS = 0x0,
        CLK_BENDING_SET_PARAMS = 0x1,
        CLK_BENDING_POST_EVENT_NOTIFICATION = 0x2,
        CLK_BENDING_SSC4_HALTED = 0x3,
        CLK_BENDING_MAX_CMDS = 0x4,
    }
    public enum SB_COLORSPACE_SUPPORTED
    {
        SUPPORTS_COLORSPACE_NONE = 0x0,
        SUPPORTS_COLORSPACE_YCbCr = 0x1,
        SUPPORTS_COLORSPACE_xvYCC = 0x2,
    }
    public enum SB_CSC_MATRIX_TYPE_EN
    {
        eHueAndSaturationMatrixType = 0x0,
        eCustomWideGamutMatrixType = 0x1,
        eCustomGamutLUTMatrix = 0x2,
        eCustomNarrowGamutMatrixType = 0x3,
    }
    public enum SB_DP_SIMULATION_TOPOLOGY_CMD
    {
        SB_DP_TOPO_SIMUL_START = 0x0,
        SB_DP_TOPO_SIMUL_STOP = 0x1,
    }
    public enum SB_DP_TRAINING_PATTERN
    {
        eSBTrainingNotInProgress = 0x0,
        eSBTrainingPattern1 = 0x1,
        eSBTrainingPattern2 = 0x2,
        eSBTrainingPattern3 = 0x3,
        eSBD102WithoutScrambling = 0x4,
        eSBSymbolErrMsrCnt = 0x5,
        eSBPRBS7 = 0x6,
        eSBIdlePattern = 0x7,
        eSBScramblingDisable = 0x8,
        eSBHBR2EyeCompliance = 0x9,
        eSBBits80Custom = 0xa,
        eSBPCTPattern = 0xb,
        eSBManchesterEncoding = 0xc,
        eSBInvalidTrainingPattern = 0xff,
    }
    public enum SB_EVENT_NOTIFICATION_TYPE
    {
        OVERLAY_ENABLE = 0x1,
        OVERLAY_DISABLE = 0x2,
        OVERLAY_UPDATE = 0x3,
        PRIMARY_SURFACE_CHANGE = 0x4,
        FORMAT_CHANGE_DETAILS = 0x5,
        CURSOR_ENABLE = 0x6,
    }
    public enum SB_GETTIMINGINFO_OPTIONS
    {
        SB_MODETABLE_TIMING = 0x0,
        SB_HW_TIMING = 0x1,
    }
    public enum SB_HDCP_STATUS_TYPE
    {
        eSB_HDCPSTATUS_LINKINTEGRITY = 0x0,
        eSB_HDCPSTATUS_AUTH_PROGRESS = 0x1,
        eSB_HDCPSTATUS_AUTH_DATA = 0x2,
    }
    public enum SB_HDR_CAPS
    {
        eHDR_CAP_ERROR_SYSTEM_INCAPABLE = 0x0,
        eHDR_CAP_ERROR_MULTI_MON_ACTIVE = 0x1,
        eHDR_CAP_ERROR_NONE_HDR_PORT = 0x2,
        eHDR_CAP_ERROR_NO_HDR_DISPLAY = 0x3,
        eHDR_CAP_GOOD_TO_GO = 0x4,
    }
    public enum SB_LEAFTYPE
    {
        eSB_InValidType = 0x0,
        eSB_DPType = 0x1,
        eSB_DVI_HDMIType = 0x2,
        eSB_VGAType = 0x3,
    }
    public enum SB_OPERATION_TYPE
    {
        SB_OPTYPE_UNKNOWN = 0x0,
        SB_OPTYPE_GET = 0x1,
        SB_OPTYPE_SET = 0x2,
        SB_OPTYPE_SET_PERSISTENCE = 0x3,
        NUM_OF_SB_OPTYPE = 0x4,
    }
    public enum SB_PIXELFORMAT
    {
        SB_UNINITIALIZED = 0x0,
        SB_8BPP_INDEXED = 0x1,
        SB_B5G6R5X0 = 0x2,
        SB_B8G8R8X8 = 0x3,
        SB_B8G8R8A8 = 0x4,
        SB_R8G8B8X8 = 0x5,
        SB_R8G8B8A8 = 0x6,
        SB_R10G10B10X2 = 0x7,
        SB_R10G10B10A2 = 0x8,
        SB_B10G10R10X2 = 0x9,
        SB_B10G10R10A2 = 0xa,
        SB_R10G10B10A2_XR_BIAS = 0xb,
        SB_R16G16B16X16F = 0xc,
        SB_R16G16B16A16F = 0xd,
        SB_MAX_PIXELFORMAT = 0xe,
        SB_NV12YUV420 = 0xf,
        SB_YUV422 = 0x10,
    }
    public enum SB_PSR_COMMAND
    {
        SB_PSR_ENABLE = 0x0,
        SB_PSR_DISABLE = 0x1,
        SB_PSR_ENABLE_SFU_MODE = 0x2,
        SB_PSR_DISABLE_SFU_MODE = 0x3,
        SB_PSR_SEND_SFU = 0x4,
        SB_PSR_ENABLE_SU = 0x5,
        SB_PSR_DISABLE_SU = 0x6,
        SB_PSR_MAX_COMMAND = 0x7,
    }
    public enum SB_PSR_MODE
    {
        SB_PSR_INVALID_MODE = 0x0,
        SB_PSR_HW_MODE = 0x1,
        SB_PSR_SW_MODE = 0x2,
        SB_PSR_HW_TIMER_MODE_VLV = 0x3,
        SB_PSR_SW_TIMER_MODE_VLV = 0x4,
        SB_PSR_MAX_MODES = 0x5,
    }
    public enum SB_SCALER_MODESET_FLAGS
    {
        UNUSED = 0x0,
        SCALER_SOURCE = 0x1,
        SCALER_DESTINATION = 0x2,
        SCALER_POSITION = 0x3,
    }
    public enum SB_VERSION_TYPE
    {
        SB_VBIOSVersion = 0x0,
        SB_GOPVersion = 0x1,
    }
    public enum SB_WATERMARK_RETURN_CODE
    {
        SB_WM_SUCCESSFUL = 0x0,
        SB_WM_ERROR_UNKNOWN = 0x1,
        SB_WM_ERROR_EXCEEDED_FIFO = 0x2,
        SB_WM_ERROR_UNUSED = 0x3,
    }
    public enum SB_WATERMARK_TYPE_GEN6
    {
        WATERMARK_MAIN = 0x0,
        WATERMARK_LP1 = 0x1,
        WATERMARK_LP2 = 0x2,
        WATERMARK_LP3 = 0x3,
        WATERMARK_LP_MAX = 0x4,
    }
    public enum SB_WIGIG_EVENT_OBJECT_INDEX
    {
        CONN_SETUP_EVENT = 0x0,
        DEV_CONN_EVENT = 0x1,
    }
    public enum SET_VBIOS_DISP_CALLER_TYPE
    {
        BSOD_SWITCH = 0x0,
        STOP_DEVICE = 0x1,
        NOTIFY_POST_MODE_CHANGE = 0x2,
    }
    public enum SST_GENERAL_EVENT_TYPE_EN
    {
        PRESENCE_DETECT_VALID_EVENT = 0x1,
        PRESENCE_DETECT_INVALID_EVENT = 0x2,
        ELD_VALID_EVENT = 0x4,
        ELD_INVALID_EVENT = 0x8,
        NOTIFY_D3_EVENT = 0x10,
        NOTIFY_DRIVER_UNLOAD_EVENT = 0x20,
    }
    public enum SST_GET_CONFIG_REQ_EN
    {
        GET_MODE_INFO = 0x1,
        GET_ELD_INFO = 0x2,
        GET_DISPLAY_CONFIG = 0x3,
    }
    public enum SST_HDCPSESSION_STAT_EN
    {
        HDCPSession_Uninit = 0x0,
        HDCPSession_VALID = 0x1,
        HDCPSession_INVALID = 0x3,
    }
    public enum SST_SET_CONFIG_REQ_EN
    {
        ENABLE_AUDIO = 0x1,
        DISABLE_AUDIO = 0x2,
        ENABLE_AUDIO_INT = 0x3,
        DISABLE_AUDIO_INT = 0x4,
    }
    public enum SUB_FUNC_TYPE
    {
        eSetDPParam = 0x0,
        eSetPHYPattern = 0x1,
        eSetDPParamWithoutLT = 0x2,
        eOnCompliance = 0x3,
        eOnNormal = 0x4,
        eGetDPParam = 0x5,
        eSetMode = 0x6,
        eDisableDisplay = 0x7,
    }
    public enum SURFACE_MEMORY_TYPE
    {
        INVALID = 0x0,
        LINEAR = 0x1,
        X_TILED = 0x2,
        Y_LEGACY_TILED = 0x4,
        Y_F_TILED = 0x8,
    }
    public enum TDR_OPERATION
    {
        TDR_OPERATION_RESET = 0x1,
        TDR_OPERATION_RESET_PRE_GDRST = 0x2,
        TDR_OPERATION_RESET_POST_GDRST = 0x3,
        TDR_OPERATION_RESTART = 0x4,
        TDR_OPERATION_COLLECT_INFO_SAFE_REGISTERS = 0x5,
        TDR_OPERATION_COLLECT_INFO_REGISTERS = 0x6,
        TDR_OPERATION_COLLECT_INFO_STATE = 0x7,
    }
    public enum TIMEOUT
    {
        INVALID = 0x0,
        TIMEDOUT = 0x1,
        NOT_TIMEDOUT = 0x2,
    }
    public enum TIMEOUTEVENT
    {
        INVALID = 0x0,
        WAIT_ON_ICSCOMMANDBUSY_BIT = 0x1,
        WAIT_ON_ICSREPLYREADY_BIT = 0x2,
        WAIT_ON_CODEC_SLEEP_STATE_BIT14 = 0x3,
        WAIT_ON_VANILLABITENABLEFORDP12_BIT31 = 0x4,
        WAIT_ON_VANILLABITENABLEFORDP12_FIRSTTIME_PW2OFF_BIT31 = 0x5,
    }
    public enum TRANSACTION_OPERATION
    {
        READ = 0x0,
        WRITE = 0x1,
    }
    public enum WDDMVer
    {
        WIN7 = 0x2005,
        WIN8 = 0x300e,
        WDDM13 = 0x4002,
        WDDM13Plush = 0x4003,
        WDDM20 = 0x5013,
    }
    public enum WIGIG_LATE_RUN
    {
        WD_TG_LATE_RUN = 0x0,
        WD_WDBOX_LATE_RUN = 0x1,
    }
    public enum WNIC_IGD_READINESS
    {
        UNDEFINED = 0x0,
        READY = 0x1,
        NOT_READY_INTERFACE_KILL = 0x2,
        NOT_READY_INTERFACE_UP = 0x3,
    }
    public enum WNIC_IGD_READY_REASON
    {
        UNDEFINED = 0x0,
        DRV_UNLOAD = 0x1,
        PM_ENTRY = 0x2,
        INIT_FAILURE = 0x3,
        DRV_LOADED = 0x4,
        PM_RESUME = 0x5,
    }
    public enum WNIC_RECEIVER_NOTIFY_REASON
    {
        UNDEFINED = 0x0,
        GRACEFUL_DISCONNECT = 0x1,
        LINK_LOST = 0x2,
        IN_RANGE = 0x3,
    }
}
