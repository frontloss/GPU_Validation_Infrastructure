#######################################################################################################################
# @file         fast_lace_hw_histogramgeneration_verification.py
# @addtogroup   Test_Color
# @section      fast_lace_hw_histogramgeneration_verification.py
# @remarks      @ref fast_lace_hw_histogramgeneration_verification.py \n
#               The test script invokes Driver PCEscape call to enable LACE using Lux .
#               For a static image the Histogram generated by HW is compared against the golden histogram values
# @author       Soorya R
#######################################################################################################################
import win32api
from Tests.Color.LACE.lace_base import *


class LACEHWHistogramGeneration(LACEBase):

    def runTest(self):
        IMAGE_FILE = "gradient_pattern.bmp"
        # LACE enable
        lux_val = 1500
        if driver_escape.als_aggressiveness_level_override(display_and_adapter_info=self.lfp_target_ids[0], lux=lux_val,
                                                           lux_operation=True):
            logging.info(" Als Lux override set successfully - Lux : %d" % lux_val)

        for index in range(len(self.lfp_target_ids)):
            time.sleep(2)  # For PartA and PartB histogram load and IE programming completion
            if not verify_lace_register_programming(self.lfp_pipe_ids[index], self.lfp_target_ids[index], lux_val):
                self.fail("Verify FastLACE register programming failed for LACE Enable !!")

        ##
        # Enable DFT
        self.mpo.enable_disable_mpo_dft(True, 1)
        ##
        # Set Cursor Position to (0,0)
        win32api.SetCursorPos((0, 0))
        ##
        # Flip image
        self.display_staticimage(IMAGE_FILE)
        time.sleep(5)

        ##
        # Disable color pipe line
        self.disable_color_pipeline_blocks()
        ##
        # Get Histogram from registers and compare with reference
        for index in range(len(self.lfp_target_ids)):
            tiles_per_row, tiles_per_col = self.get_no_of_tiles(self.lfp_target_ids[index])
            prog_lace_params = read_histogram_from_registers(self.lfp_pipe_ids[index], tiles_per_row, tiles_per_col)
            logging.debug("Programmed LACE Params are :")
            logging.debug(prog_lace_params)
            file_name = "HistData_gradient_" + str(self.lfp_pipe_ids[index]) + ".txt"
            write_histogram_to_file(file_name, LaceParams, tiles_per_row, tiles_per_col)
            status = compare_histograms(file_name, prog_lace_params, tiles_per_row, tiles_per_col)
            if not status:
                self.fail("Histogram mismatch observed")
            else:
                logging.info("Histogram comparison successful")

        ##
        # Disable DFT
        self.mpo.enable_disable_mpo_dft(False, 1)

        if self.underrun.verify_underrun():
            logging.error("Underrun Occured")

        # LACE disable
        lux_val = 150
        if driver_escape.als_aggressiveness_level_override(display_and_adapter_info=self.lfp_target_ids[0], lux=lux_val,
                                                           lux_operation=True):
            logging.info(" Als Lux override set successfully - Lux : %d" % lux_val)

        for index in range(len(self.lfp_target_ids)):
            time.sleep(2)  # For PartA and PartB histogram load and IE programming completion
            if not verify_lace_register_programming(self.lfp_pipe_ids[index], self.lfp_target_ids[index], lux_val):
                self.fail("Verify FastLACE register programming failed for LACE Disable !!")


if __name__ == '__main__':
    TestEnvironment.initialize()
    outcome = unittest.main(exit=False, argv=[sys.argv[0]])
    TestEnvironment.cleanup(outcome.result)
