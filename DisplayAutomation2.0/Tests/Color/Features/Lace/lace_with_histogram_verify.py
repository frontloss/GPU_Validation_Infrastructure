#######################################################################################################################
# @file         fast_lace_hw_histogramgeneration_verification.py
# @addtogroup   Test_Color
# @section      fast_lace_hw_histogramgeneration_verification.py
# @remarks      @ref fast_lace_hw_histogramgeneration_verification.py \n
#               The test script invokes Driver PCEscape call to enable LACE using Lux .
#               For a static image the Histogram generated by HW is compared against the golden histogram values
# @author       Soorya R
#######################################################################################################################
import ctypes
import sys
import unittest
import logging
import time

from Libs.Core import display_essential
from Libs.Core.sw_sim import driver_interface
from Libs.Core.test_env.test_environment import TestEnvironment
from Libs.Core.wrapper import control_api_wrapper
from Libs.Core.wrapper import control_api_args
from Libs.Core.display_config import display_config
from Libs.Core.test_env import test_context
from Tests.Color.Common import color_constants, color_escapes
from Tests.Color.Features.Lace.lace_base import *
from Tests.Control_API.control_api_base import testBase
from Tests.Color.Verification import gen_verify_pipe, feature_basic_verify


##
# @brief - Get Lace Control Library Test
class testGetSetLaceAPI(LACEBase):

    ##
    # @brief            Unittest runTest function
    # @return           void
    def runTest(self):
        self.lfp_pipe_ids = []
        for gfx_index, adapter in self.context_args.adapters.items():
            for port, panel in adapter.panels.items():
                if panel.is_active and panel.is_lfp:
                    self.lfp_pipe_ids.append(panel.pipe)
                    IMAGE_FILE = "gradient_pattern.bmp"
                    # LACE enable
                    ##
                    # LACE enable
                    if self.enable_and_verify(gfx_index, adapter.platform, panel.pipe, panel.display_and_adapterInfo,
                                              panel, True):
                        logging.info("Pass: Lace was enabled and verified successfully")
                    else:
                        self.fail("Lace enable/disable with verification failed")

                    ##
                    # Enable DFT
                    self.mpo.enable_disable_mpo_dft(True, 1)
                    ##
                    # Set Cursor Position to (0,0)
                    win32api.SetCursorPos((0, 0))
                    ##
                    # Flip image
                    self.display_staticimage(IMAGE_FILE)
                    time.sleep(5)

                    ##
                    # Disable color pipe line
                    self.disable_color_pipeline_blocks()
                    ##
                    # Get Histogram from registers and compare with reference
                    for index in range(len(self.lfp_target_ids)):
                        tiles_per_row, tiles_per_col = self.get_no_of_tiles(self.lfp_target_ids[index])
                        prog_lace_params = read_histogram_from_registers(self.lfp_pipe_ids[index], tiles_per_row,
                                                                         tiles_per_col)
                        logging.debug("Programmed LACE Params are :")
                        logging.debug(prog_lace_params)
                        file_name = "HistData_gradient_" + str(self.lfp_pipe_ids[index]) + ".txt"
                        write_histogram_to_file(file_name, LaceParams, tiles_per_row, tiles_per_col)
                        status = compare_histograms(file_name, prog_lace_params, tiles_per_row, tiles_per_col)
                        if not status:
                            self.fail("Histogram mismatch observed")
                        else:
                            logging.info("Histogram comparison successful")

                    ##
                    # Disable DFT
                    self.mpo.enable_disable_mpo_dft(False, 1)

                    if self.underrun.verify_underrun():
                        logging.error("Underrun Occured")

                    # LACE disable
                    lux_val = 150
                    if color_igcl_escapes.set_lace_config(self.triggerType, self.setOperation, 0,
                                                     panel.display_and_adapterInfo):

                        time.sleep(1)
                        ##
                        # verify_lace_feature
                        if feature_basic_verify.verify_lace_feature(gfx_index, adapter.platform, panel.pipe, True,
                                                                    "LEGACY", panel.target_id) is False:
                            self.fail("Lace verification failed")


if __name__ == '__main__':
    TestEnvironment.initialize()
    logging.info('Test purpose: Control Library get lace API Verification with DC5 and DC6 persistence')
    outcome = unittest.main(exit=False, argv=[sys.argv[0]])
    TestEnvironment.cleanup(outcome.result)