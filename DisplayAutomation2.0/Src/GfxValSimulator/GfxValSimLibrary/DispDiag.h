#pragma once
#include "Windows.h"

#define MAX_DISPLAY_FOR_DIAGNOSTICS 16
#define MAX_NUM_OF_GAMMA_SAMPLES_FOR_DIAGNOSTICS 16

typedef UINT D3DDDI_VIDEO_PRESENT_TARGET_ID;

typedef enum _DISPLAY_DIAG_TYPE
{
    NONE         = 0,
    NONINTRUSIVE = 1,
    INTRUSIVE    = 2,
} DISPLAY_DIAG_TYPE;

typedef enum _DXGK_DIAG_MONITOR_STATE
{
    DXGK_DIAG_MONITOR_STATE_UNINITIALIZED = 0,
    DXGK_DIAG_MONITOR_READY               = 1,
    DXGK_DIAG_MONITOR_NOT_READY           = 2,
    DXGK_DIAG_MONITOR_READY_NOTAPPLICABLE = 3,
} DXGK_DIAG_MONITOR_STATE;

typedef enum _DXGK_DIAG_DISPLAY_SCANOUT_STATE
{
    DXGK_DIAG_DISPLAY_SCANOUT_STATE_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_SCANOUT_DISABLED            = 1,
    DXGK_DIAG_DISPLAY_SCANOUT_ACTIVE              = 2,
    DXGK_DIAG_DISPLAY_SCANOUT_ACTIVE_BLACK        = 3,
} DXGK_DIAG_DISPLAY_SCANOUT_STATE;

typedef enum _DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC
{
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC_BLACK         = 1,
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC_NON_BLACK     = 2,
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC_ERROR         = 3,
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC_UNKNOWN       = 4,
} DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC;

typedef enum _DXGK_DIAG_DISPLAY_HARDWARE_ERROR_STATE
{
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_STATE_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_NONE                = 1,
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_SCANOUT_UNDERFLOW   = 2,
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_TDRNORECOVERY       = 3,
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_UNSPECIFIED         = 4,
} DXGK_DIAG_DISPLAY_HARDWARE_ERROR_STATE;

typedef enum _DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH
{
    DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH_SUFFICIENT    = 1,
    DXGK_DIAG_DISPLAY_HARDWARE_LINK_BANDWIDTH_LIMITED  = 2,
    DXGK_DIAG_DISPLAY_HARDWARE_SOC_BANDWIDTH_LIMITED   = 3,
    DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH_ERROR         = 4,
    DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH_UNKNOWN       = 5,
} DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH;

typedef enum _DXGK_DIAG_DISPLAY_CONNECTIVITY
{
    DXGK_DIAG_DISPLAY_CONNECTIVITY_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_NOT_CONNECTED              = 1,
    DXGK_DIAG_DISPLAY_CONNECTED                  = 2,
} DXGK_DIAG_DISPLAY_CONNECTIVITY;

typedef enum _DXGK_DIAG_DISPLAY_LID_STATE
{
    DXGK_DIAG_DISPLAY_LID_STATE_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_LID_STATE_NOTAPPLICABLE = 1,
    DXGK_DIAG_DISPLAY_LID_STATE_OPEN          = 2,
    DXGK_DIAG_DISPLAY_LID_STATE_CLOSE         = 3,
    DXGK_DIAG_DISPLAY_LID_STATE_UNKNOWN       = 4,
} DXGK_DIAG_DISPLAY_LID_STATE;

typedef enum _DXGK_DIAG_BASIC_DISPLAY_TOPOLOGY
{
    DXGK_DIAG_BASIC_DISPLAY_TOPOLOGY_UNINITIALIZED   = 0,
    DXGK_DIAG_DISPLAY_CONNECTED_DIRECTLY             = 1,
    DXGK_DIAG_DISPLAY_CONNECTED_INDIRECTLY_CONVERTOR = 2,
    DXGK_DIAG_DISPLAY_CONNECTED_INDIRECTLY_HUB       = 3,
    DXGK_DIAG_DISPLAY_CONNECTED_INDIRECTLY           = 4,
    DXGK_DIAG_DISPLAY_CONNECTED_UNKNOWN              = 5,
} DXGK_DIAG_BASIC_DISPLAY_TOPOLOGY;

typedef enum _DXGK_DIAG_DISPLAY_LINK_STATE
{
    DXGK_DIAG_DISPLAY_LINK_STATE_UNINITIALIZED              = 0,
    DXGK_DIAG_DISPLAY_LINK_STATE_NOTAPPLICABLE              = 1,
    DXGK_DIAG_DISPLAY_LINK_STATE_STABLE                     = 2,
    DXGK_DIAG_DISPLAY_LINK_STATE_FAILED                     = 3,
    DXGK_DIAG_DISPLAY_LINK_STATE_CONTINUOUS_TRAINING        = 4,
    DXGK_DIAG_DISPLAY_LINK_STATE_CONTINUOUS_TRAINING_STABLE = 5,
    DXGK_DIAG_DISPLAY_LINK_STATE_CONTINUOUS_TRAINING_FAILED = 6,
} DXGK_DIAG_DISPLAY_LINK_STATE;

typedef enum _DXGK_DIAG_DISPLAY_MODE_SET
{
    DXGK_DIAG_DISPLAY_MODE_SET_UNINITIALIZED = 0,
    DXGK_DIAG_DISPLAY_MODE_SET_NO            = 1,
    DXGK_DIAG_DISPLAY_MODE_SET_YES           = 2,
} DXGK_DIAG_DISPLAY_MODE_SET;

typedef enum _DXGK_DIAG_GETDISPLAYSTATE_SUBSTATUS_FLAGS
{
    DXGK_DIAG_GETDISPLAYSTATE_SUCCESS                 = 0x0,
    DXGK_DIAG_GETDISPLAYSTATE_CAUSED_GLITCH           = 0x1,
    DXGK_DIAG_GETDISPLAYSTATE_CHANGED_DISPLAY_STATE   = 0x2,
    DXGK_DIAG_GETDISPLAYSTATE_MONITOR_NOT_CONNECTED   = 0x4,
    DXGK_DIAG_GETDISPLAYSTATE_TIMEOUT                 = 0x8,
    DXGK_DIAG_GETDISPLAYSTATE_ERROR_HARDWARE          = 0x10,
    DXGK_DIAG_GETDISPLAYSTATE_ERROR_DRIVER            = 0x20,
    DXGK_DIAG_GETDISPLAYSTATE_VIDPNTARGETID_NOT_FOUND = 0x40,
} DXGK_DIAG_GETDISPLAYSTATE_SUBSTATUS_FLAGS;

typedef struct _DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_HISTOGRAM
{
    INT MinPixelValue; // Out
    INT MaxPixelValue; // Out
} DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_HISTOGRAM;

typedef struct _DXGK_DIAG_DISPLAY_SAMPLED_GAMMA
{
    float Red[MAX_NUM_OF_GAMMA_SAMPLES_FOR_DIAGNOSTICS];   // Out
    float Green[MAX_NUM_OF_GAMMA_SAMPLES_FOR_DIAGNOSTICS]; // Out
    float Blue[MAX_NUM_OF_GAMMA_SAMPLES_FOR_DIAGNOSTICS];  // Out
    float ColorMatrix[3][3];                               // Out
} DXGK_DIAG_DISPLAY_SAMPLED_GAMMA;

typedef struct _DXGK_DIAG_SCANOUT_BUFFER_CONTENT
{
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_CRC       ScanoutBufferCrc;       // Out
    DXGK_DIAG_DISPLAY_SCANOUT_BUFFER_HISTOGRAM ScanoutBufferHistogram; // Out
} DXGK_DIAG_SCANOUT_BUFFER_CONTENT;

typedef struct _DXGKARG_DISPLAYSTATE_INTRUSIVE
{
    D3DDDI_VIDEO_PRESENT_TARGET_ID         VidPnTargetId;        // In
    DXGK_DIAG_MONITOR_STATE                MonitorState;         // Out
    DXGK_DIAG_DISPLAY_SCANOUT_STATE        DisplayScanoutState;  // Out
    DXGK_DIAG_DISPLAY_SAMPLED_GAMMA        DisplaySampledGamma;  // Out
    DXGK_DIAG_SCANOUT_BUFFER_CONTENT       DisplayBufferContent; // Out
    DXGK_DIAG_DISPLAY_HARDWARE_ERROR_STATE DisplayErrorState;    // Out
    DXGK_DIAG_DISPLAY_HARDWARE_BANDWIDTH   DisplayBandwidth;     // Out
    UINT                                   ReturnSubStatus;      // Out: DXGK_DIAG_GETDISPLAYSTATE_SUBSTATUS_FLAGS
} DXGK_DISPLAYSTATE_INTRUSIVE;

typedef struct _DXGK_DISPLAYSTATE_NONINTRUSIVE
{
    D3DDDI_VIDEO_PRESENT_TARGET_ID   VidPnTargetId;       // In
    DXGK_DIAG_DISPLAY_CONNECTIVITY   DisplayConnectivity; // Out
    DXGK_DIAG_DISPLAY_LID_STATE      DisplayLidState;     // Out
    DXGK_DIAG_BASIC_DISPLAY_TOPOLOGY DisplayTopology;     // Out
    DXGK_DIAG_DISPLAY_LINK_STATE     DisplayLinkState;    // Out
    DXGK_DIAG_DISPLAY_MODE_SET       DisplayModeSet;      // Out
    UINT                             ReturnSubStatus;     // Out: DXGK_DIAG_GETDISPLAYSTATE_SUBSTATUS_FLAGS
} DXGK_DISPLAYSTATE_NONINTRUSIVE;

typedef struct _DXGKARG_GETDISPLAYSTATE_INTRUSIVE
{
    UINT NumOfTargets;                       // In
    UINT SizeOfDisplayStateIntrusiveElement; // In

    _Field_size_(NumOfTargets) DXGK_DISPLAYSTATE_INTRUSIVE **ppDisplayStateIntrusive; // In/Out Pointer to an array of pointers to DXGKARG_DISPLAYSTATE_INTRUSIVE
} DXGKARG_GETDISPLAYSTATEINTRUSIVE, *PDXGKARG_GETDISPLAYSTATEINTRUSIVE;

typedef struct _DXGKARG_GETDISPLAYSTATE_NONINTRUSIVE
{
    UINT NumOfTargets;                          // In
    UINT SizeOfDisplayStateNonIntrusiveElement; // In

    _Field_size_(NumOfTargets) DXGK_DISPLAYSTATE_NONINTRUSIVE **ppDisplayStateNonIntrusive; // In/Out: Pointer to an array of pointers to DXGK_DISPLAYSTATE_NONINTRUSIVE
} DXGKARG_GETDISPLAYSTATENONINTRUSIVE, *PDXGKARG_GETDISPLAYSTATENONINTRUSIVE;

typedef struct _SIMDRV_DISPLAY_DIAG_DATA
{
    DISPLAY_DIAG_TYPE type;
    union {
        DXGKARG_GETDISPLAYSTATENONINTRUSIVE nonIntrusiveData;
        DXGKARG_GETDISPLAYSTATEINTRUSIVE    intrusiveData;
    };
    ULONG sizeofData; // out
} SIMDRV_DISPLAY_DIAG_DATA;

typedef struct _DISPLAYSTATE_INTRUSIVE
{
    UINT                        NumOfTargets;
    DXGK_DISPLAYSTATE_INTRUSIVE IntrusiveData[MAX_DISPLAY_FOR_DIAGNOSTICS];
} DISPLAYSTATE_INTRUSIVE, *PDISPLAYSTATE_INTRUSIVE;

typedef struct _DISPLAYSTATE_NONINTRUSIVE
{
    UINT                        NumOfTargets;
    DXGK_DISPLAYSTATE_NONINTRUSIVE NonIntrusiveData[MAX_DISPLAY_FOR_DIAGNOSTICS];
} DISPLAYSTATE_NONINTRUSIVE, *PDISPLAYSTATE_NONINTRUSIVE;
