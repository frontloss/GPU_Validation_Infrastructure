using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present
#pragma warning disable 114, 108    // disable warnings on hiding inhertiting variable names

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverDisplay;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IntelGfxDriverDisplayTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Intel-Gfx-Driver-Display";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x6f556899), unchecked((short) 0x027a), unchecked((short) 0x45ec), 0xa3, 0xf5, 0xc5, 0x8e, 0x7f, 0xb9, 0x4f, 0xf5);
        public enum Keywords : long
        {
            Osl = 0x1,
            Hal = 0x2,
            Protocol = 0x4,
            Diagnostics = 0x8,
            Hdcp = 0x10,
            Hdmi = 0x20,
            Dp = 0x40,
            Mipi = 0x80,
            Modeset = 0x100,
            Audio = 0x200,
            Flip = 0x400,
            Displaypowercons = 0x800,
            Interrupt = 0x1000,
            Autologger = 0x2000,
        };

        public IntelGfxDriverDisplayTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<AcpiEventStatus_t> AcpiEventStatus
        {
            add
            {
                source.RegisterEventTemplate(AcpiEventStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 214, ProviderGuid);
            }
        }
        public event Action<AsyncFlipLineCount_t> AsyncFlipLineInfo
        {
            add
            {
                source.RegisterEventTemplate(AsyncFlipLineInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 306, ProviderGuid);
            }
        }
        public event Action<Aux_t> AuxDPCDRead
        {
            add
            {
                source.RegisterEventTemplate(AuxDPCDReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<Aux_t> AuxDPCDWrite
        {
            add
            {
                source.RegisterEventTemplate(AuxDPCDWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<AuxChannelToPortMap_t> AuxTransactionAuxChannelToPortMap
        {
            add
            {
                source.RegisterEventTemplate(AuxTransactionAuxChannelToPortMapTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, ProviderGuid);
            }
        }
        public event Action<AuxInfo_t> AuxTransactionReceive
        {
            add
            {
                source.RegisterEventTemplate(AuxTransactionReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, ProviderGuid);
            }
        }
        public event Action<AuxInfo_t> AuxTransactionSend
        {
            add
            {
                source.RegisterEventTemplate(AuxTransactionSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<BitBash_t> BitBashRead
        {
            add
            {
                source.RegisterEventTemplate(BitBashReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 434, ProviderGuid);
            }
        }
        public event Action<CancelFlip_t> CancelFlip
        {
            add
            {
                source.RegisterEventTemplate(CancelFlipTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 85, ProviderGuid);
            }
        }
        public event Action<CheckLegacyOverlaySupport_t> CheckLegacyOverlaySupport
        {
            add
            {
                source.RegisterEventTemplate(CheckLegacyOverlaySupportTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 201, ProviderGuid);
            }
        }
        public event Action<CheckMpoPlaneDetails_t> CheckMpoPlaneInfo
        {
            add
            {
                source.RegisterEventTemplate(CheckMpoPlaneInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 200, ProviderGuid);
            }
        }
        public event Action<CmtgStatusParams_t> CmtgStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(CmtgStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 432, ProviderGuid);
            }
        }
        public event Action<CollageEscape_t> CollageEscape
        {
            add
            {
                source.RegisterEventTemplate(CollageEscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 171, ProviderGuid);
            }
        }
        public event Action<CollageSupport_t> CollageEscapeError
        {
            add
            {
                source.RegisterEventTemplate(CollageEscapeErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 173, ProviderGuid);
            }
        }
        public event Action<CollageTopology_t> CollageEscapeInfo
        {
            add
            {
                source.RegisterEventTemplate(CollageEscapeInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 172, ProviderGuid);
            }
        }
        public event Action<SetAdjustedColorimetry_t> ColorSetAdjustedColorimetryColor
        {
            add
            {
                source.RegisterEventTemplate(ColorSetAdjustedColorimetryColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 218, ProviderGuid);
            }
        }
        public event Action<ConditionalAssert_t> ConditionalAssert
        {
            add
            {
                source.RegisterEventTemplate(ConditionalAssertTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 373, ProviderGuid);
            }
        }
        public event Action<OSGivenCSC_t> CSCDataColor
        {
            add
            {
                source.RegisterEventTemplate(CSCDataColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 238, ProviderGuid);
            }
        }
        public event Action<DBufInfo_t> DBuf
        {
            add
            {
                source.RegisterEventTemplate(DBufTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<CursorDbuf_t> DBufCursor
        {
            add
            {
                source.RegisterEventTemplate(DBufCursorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 213, ProviderGuid);
            }
        }
        public event Action<BDF_t> DbufOverlapInfo
        {
            add
            {
                source.RegisterEventTemplate(DbufOverlapInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 395, ProviderGuid);
            }
        }
        public event Action<Dc6vParameters_t> Dc6vOrDc3CoParametersProgram
        {
            add
            {
                source.RegisterEventTemplate(Dc6vOrDc3CoParametersProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 370, ProviderGuid);
            }
        }
        public event Action<DcStateClientEventHandler_t> DCStateClient
        {
            add
            {
                source.RegisterEventTemplate(DCStateClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 386, ProviderGuid);
            }
        }
        public event Action<DcStateExternalEventHandler_t> DCStateExternal
        {
            add
            {
                source.RegisterEventTemplate(DCStateExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 385, ProviderGuid);
            }
        }
        public event Action<DCStateRequest_t> DCStateInfo
        {
            add
            {
                source.RegisterEventTemplate(DCStateInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 217, ProviderGuid);
            }
        }
        public event Action<DebugPrint_t> DebugPrint
        {
            add
            {
                source.RegisterEventTemplate(DebugPrintTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<DetectionCheckRequired_t> DetectionCheckRequiredInfo
        {
            add
            {
                source.RegisterEventTemplate(DetectionCheckRequiredInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 378, ProviderGuid);
            }
        }
        public event Action<OneDLUT_Param_t> DGLUTParamsInfo
        {
            add
            {
                source.RegisterEventTemplate(DGLUTParamsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 345, ProviderGuid);
            }
        }
        public event Action<Assert_t> DisplayAssert
        {
            add
            {
                source.RegisterEventTemplate(DisplayAssertTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 183, ProviderGuid);
            }
        }
        public event Action<DisplayAudioLinkHandlingEvent_t> DisplayAudioLinkHandlingEventInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayAudioLinkHandlingEventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 317, ProviderGuid);
            }
        }
        public event Action<BlcApply_t> DisplayBrightness2Apply
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 265, ProviderGuid);
            }
        }
        public event Action<BlcAggrLevelData_t> DisplayBrightness2ApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 377, ProviderGuid);
            }
        }
        public event Action<BlcMap_t> DisplayBrightness2Associate
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2AssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 264, ProviderGuid);
            }
        }
        public event Action<BlcComputeNewPercentage_t> DisplayBrightness2Calculate
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2CalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 266, ProviderGuid);
            }
        }
        public event Action<BlcDdi2Caps_t> DisplayBrightness2Capability
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2CapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 260, ProviderGuid);
            }
        }
        public event Action<BlcClientEvents_t> DisplayBrightness2Client
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 263, ProviderGuid);
            }
        }
        public event Action<BlcDdi2State_t> DisplayBrightness2Enable
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2EnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 261, ProviderGuid);
            }
        }
        public event Action<BlcBacklightReduction_t> DisplayBrightness2Info
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 375, ProviderGuid);
            }
        }
        public event Action<BlcStaticData_t> DisplayBrightness2Initialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2InitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 275, ProviderGuid);
            }
        }
        public event Action<BlcDdi2Optimization_t> DisplayBrightness2Process
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 262, ProviderGuid);
            }
        }
        public event Action<BlcPortBrightness_t> DisplayBrightness2Program
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 273, ProviderGuid);
            }
        }
        public event Action<BlcDdi2Data_t> DisplayBrightness2Read
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2ReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 259, ProviderGuid);
            }
        }
        public event Action<BlcPortPwmFrequency_t> DisplayBrightness2Setup
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2SetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 274, ProviderGuid);
            }
        }
        public event Action<BlcWarningData_t> DisplayBrightness2Warning
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2WarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 376, ProviderGuid);
            }
        }
        public event Action<BlcDdi2Data_t> DisplayBrightness2Write
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness2WriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 258, ProviderGuid);
            }
        }
        public event Action<BlcTransitionData_t> DisplayBrightness3Associate
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3AssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 271, ProviderGuid);
            }
        }
        public event Action<BlcDdi3Caps_t> DisplayBrightness3Capability
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3CapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 269, ProviderGuid);
            }
        }
        public event Action<HDRPixelBoostData_t> DisplayBrightness3Color
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3ColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 421, ProviderGuid);
            }
        }
        public event Action<DisplayBrightness3_Info_t> DisplayBrightness3Info
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 308, ProviderGuid);
            }
        }
        public event Action<BlcDdi3Optimization_t> DisplayBrightness3Process
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3ProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 270, ProviderGuid);
            }
        }
        public event Action<BlcGetSetNitsBrightness_t> DisplayBrightness3Program
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3ProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 272, ProviderGuid);
            }
        }
        public event Action<BlcDdi3Get_t> DisplayBrightness3Read
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3ReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 268, ProviderGuid);
            }
        }
        public event Action<DisplayBrightness3_RxCaps_t> DisplayBrightness3RxCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3RxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 307, ProviderGuid);
            }
        }
        public event Action<BlcDdi3Set_t> DisplayBrightness3Write
        {
            add
            {
                source.RegisterEventTemplate(DisplayBrightness3WriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 267, ProviderGuid);
            }
        }
        public event Action<Display_Caps_t> DisplayCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<DisplayCaps_HDR10P_Caps_t> DisplayCaps_HDR10P_CapsInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayCaps_HDR10P_CapsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 440, ProviderGuid);
            }
        }
        public event Action<Did_HdrCaps_t> DisplayCapsCapability
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 387, ProviderGuid);
            }
        }
        public event Action<HDRCaps_t> DisplayCapsColor
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 199, ProviderGuid);
            }
        }
        public event Action<DpDeviceInfo_t> DisplayCapsDpBranchDevInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsDpBranchDevInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 399, ProviderGuid);
            }
        }
        public event Action<DPRxCapsDPCDs_t> DisplayCapsDPCDsRxCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsDPCDsRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 215, ProviderGuid);
            }
        }
        public event Action<DpDeviceInfo_t> DisplayCapsDpSinkDevInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsDpSinkDevInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 400, ProviderGuid);
            }
        }
        public event Action<SinkEdid_t> DisplayCapsEDID
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsEDIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<DPRxCaps_t> DisplayCapsRxCaps
        {
            add
            {
                source.RegisterEventTemplate(DisplayCapsRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnostics
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsError
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsMayDay
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsMayDayTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<DiagnosticData_t> DisplayDiagnosticsWarning
        {
            add
            {
                source.RegisterEventTemplate(DisplayDiagnosticsWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<GenlockEnableDisable_t> DisplayGenlockEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayGenlockEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 415, ProviderGuid);
            }
        }
        public event Action<GenlockCommonTiming_t> DisplayGenlockExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayGenlockExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 416, ProviderGuid);
            }
        }
        public event Action<GenlockInfo_t> DisplayGenlockInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayGenlockInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 414, ProviderGuid);
            }
        }
        public event Action<GenlockTranscoder_t> DisplayGenlockTranscoder
        {
            add
            {
                source.RegisterEventTemplate(DisplayGenlockTranscoderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 417, ProviderGuid);
            }
        }
        public event Action<BlcDiagnosticData_t> DisplayPcBlcAllParam
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBlcAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 427, ProviderGuid);
            }
        }
        public event Action<DisplayPcBlcCapability_t> DisplayPcBlcCapability
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBlcCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 445, ProviderGuid);
            }
        }
        public event Action<BlcExternalEventHandler_t> DisplayPcBlcExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBlcExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 409, ProviderGuid);
            }
        }
        public event Action<DisplayPcBlcInfo_t> DisplayPcBlcInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBlcInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 446, ProviderGuid);
            }
        }
        public event Action<BrtOptimizationDiagnosticData_t> DisplayPcBrtOptimizationAllParam
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBrtOptimizationAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 428, ProviderGuid);
            }
        }
        public event Action<BrtAggrLevelMappingData_t> DisplayPcBrtOptimizationAssociate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBrtOptimizationAssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 366, ProviderGuid);
            }
        }
        public event Action<BrtOptimizationCapability_t> DisplayPcBrtOptimizationCapability
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBrtOptimizationCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 429, ProviderGuid);
            }
        }
        public event Action<BrtOptimizationInfo_t> DisplayPcBrtOptimizationInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcBrtOptimizationInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 343, ProviderGuid);
            }
        }
        public event Action<DcStateClientEventHandler_t> DisplayPcDcStateClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDcStateClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 364, ProviderGuid);
            }
        }
        public event Action<DcStateExternalEventHandler_t> DisplayPcDcStateExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDcStateExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 363, ProviderGuid);
            }
        }
        public event Action<DpsEventHandlerData_t> DisplayPcDPSEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 117, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcDPSInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
            }
        }
        public event Action<DpsStaticData_t> DisplayPcDPSInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 246, ProviderGuid);
            }
        }
        public event Action<DpsEvents_t> DisplayPcDPSProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 247, ProviderGuid);
            }
        }
        public event Action<DpsStatus_t> DisplayPcDPSProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 248, ProviderGuid);
            }
        }
        public event Action<DpsGetUserDpsParamsData_t> DisplayPcDPSRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 119, ProviderGuid);
            }
        }
        public event Action<DpsInitSupportedPStatesData_t> DisplayPcDPSSetup
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSSetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 115, ProviderGuid);
            }
        }
        public event Action<DpstDiagData_t> DisplayPcDPSTAllParam
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 404, ProviderGuid);
            }
        }
        public event Action<DpstEventHandlerData_t> DisplayPcDPSTEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 163, ProviderGuid);
            }
        }
        public event Action<DpstAlgoVersionData_t> DisplayPcDPSTInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 331, ProviderGuid);
            }
        }
        public event Action<DpstStaticData_t> DisplayPcDPSTInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 286, ProviderGuid);
            }
        }
        public event Action<DpstAlgorithm_t> DisplayPcDPSTLiveState
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTLiveStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 280, ProviderGuid);
            }
        }
        public event Action<DpstPolicyParams_t> DisplayPcDPSTSystem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSTSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 403, ProviderGuid);
            }
        }
        public event Action<DpsSetUserDpsParamsData_t> DisplayPcDPSWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcDPSWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 120, ProviderGuid);
            }
        }
        public event Action<PwrConsEscapeData_t> DisplayPcEscape
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 139, ProviderGuid);
            }
        }
        public event Action<PipeConfChangePipePortMappingData_t> DisplayPcEventInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 169, ProviderGuid);
            }
        }
        public event Action<PowerSourceState_t> DisplayPcEventLiveState
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventLiveStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 249, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcEventNotificationExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventNotificationExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 168, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcEventNotificationProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventNotificationProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 92, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcEventNotificationReceive
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcEventNotificationReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
            }
        }
        public event Action<FbcCfbInit_t> DisplayPcFbcInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcFbcInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 418, ProviderGuid);
            }
        }
        public event Action<FbcPlaneConfig_t> DisplayPcFbcProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcFbcProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 419, ProviderGuid);
            }
        }
        public event Action<GheTriggerParams_t> DisplayPcGheAllParam
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcGheAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 424, ProviderGuid);
            }
        }
        public event Action<GheRestrictions_t> DisplayPcGheAssociate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcGheAssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 422, ProviderGuid);
            }
        }
        public event Action<GheEventHandler_t> DisplayPcGheEventHandler
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcGheEventHandlerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 423, ProviderGuid);
            }
        }
        public event Action<GheInfo_t> DisplayPcGheInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcGheInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 425, ProviderGuid);
            }
        }
        public event Action<GheAlgorithm_t> DisplayPcGheLiveState
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcGheLiveStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 426, ProviderGuid);
            }
        }
        public event Action<DisplayPcFeaturePolicy_t> DisplayPcInitInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 402, ProviderGuid);
            }
        }
        public event Action<DisplayPcPolicyTable_t> DisplayPcInitInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 257, ProviderGuid);
            }
        }
        public event Action<DisplayPcLfpDetails_t> DisplayPcInitSystem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcInitSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 256, ProviderGuid);
            }
        }
        public event Action<LaceApplyIeData_t> DisplayPcLACEApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 158, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEApplyFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
            }
        }
        public event Action<LaceClientEventHandler_t> DisplayPcLACEClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 160, ProviderGuid);
            }
        }
        public event Action<LaceControlData_t> DisplayPcLACEDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
            }
        }
        public event Action<LaceControlData_t> DisplayPcLACEEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
            }
        }
        public event Action<PcEventNotificationData_t> DisplayPcLACEExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 159, ProviderGuid);
            }
        }
        public event Action<Lace_Restriction_t> DisplayPcLACEInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 391, ProviderGuid);
            }
        }
        public event Action<LaceHistogramReadData_t> DisplayPcLACERead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 157, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcLACEStop
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
            }
        }
        public event Action<Lace_Operations_t> DisplayPcLACEWarning
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 390, ProviderGuid);
            }
        }
        public event Action<PcRegValueFullPathDword_t> DisplayPcLACEWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLACEWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 161, ProviderGuid);
            }
        }
        public event Action<PsrPrEvents_t> DisplayPcLobfInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLobfInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 457, ProviderGuid);
            }
        }
        public event Action<LobfRestrictionInfo_t> DisplayPcLobfInfo458
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLobfInfo458Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 458, ProviderGuid);
            }
        }
        public event Action<DisplayPcLRR_t> DisplayPcLRRInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcLRRInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 311, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorApplyFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorApplyFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorProgramFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorProgramFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorProgramAdjustData_t> DisplayPcPhaseCoordinatorProgramStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorProgramStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorReset
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorSetupDpstPhasing_t> DisplayPcPhaseCoordinatorSetup
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSetupTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
            }
        }
        public event Action<SmoothenDpstTemporalLutData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 330, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 327, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 326, ProviderGuid);
            }
        }
        public event Action<SmoothenBlcTemporalData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalAssociate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalAssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 362, ProviderGuid);
            }
        }
        public event Action<DpstIirFilterCoefficientData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalCalculate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 329, ProviderGuid);
            }
        }
        public event Action<SmoothenDpstTemporalData_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 328, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorContextData_7_x_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramFinish
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramFinishTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 325, ProviderGuid);
            }
        }
        public event Action<PhaseCoordinatorProgramAdjustData_7_x_t> DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 324, ProviderGuid);
            }
        }
        public event Action<PcPhaseCoordinatorDpsMamStartTimer_t> DisplayPcPhaseCoordinatorStart
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcPhaseCoordinatorStop
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
            }
        }
        public event Action<PcTimePoint_t> DisplayPcPhaseCoordinatorWorkItem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPhaseCoordinatorWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
            }
        }
        public event Action<PsrPrClientEvent_t> DisplayPcPsrPrClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 288, ProviderGuid);
            }
        }
        public event Action<PsrPrStatus_t> DisplayPcPsrPrDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 244, ProviderGuid);
            }
        }
        public event Action<PsrPrStatus_t> DisplayPcPsrPrEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 243, ProviderGuid);
            }
        }
        public event Action<Sfsu_Dpst_t> DisplayPcPsrPrInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 341, ProviderGuid);
            }
        }
        public event Action<PsrRestrictionsInfo_t> DisplayPcPsrPrInfo351
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrInfo351Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 351, ProviderGuid);
            }
        }
        public event Action<PsrSwEventRestrictions_t> DisplayPcPsrPrInfo407
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrInfo407Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 407, ProviderGuid);
            }
        }
        public event Action<Psr2SdpTransTimeData_t> DisplayPcPsrPrInfo430
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrInfo430Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 430, ProviderGuid);
            }
        }
        public event Action<PsrPrStaticData_t> DisplayPcPsrPrInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 242, ProviderGuid);
            }
        }
        public event Action<PsrPrEvents_t> DisplayPcPsrPrProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcPsrPrProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 245, ProviderGuid);
            }
        }
        public event Action<PwrConsUserPolicyData_t> DisplayPcUserPreference
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcUserPreferenceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 143, ProviderGuid);
            }
        }
        public event Action<DisplayPwrConsD0D3StateChangeData_t> DisplayPcUtilInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcUtilInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 162, ProviderGuid);
            }
        }
        public event Action<PcPowerPlanRegValueData_t> DisplayPcUtilRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcUtilReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 144, ProviderGuid);
            }
        }
        public event Action<DpstPipeHistogram_t> DisplayPcXPSTApply
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 282, ProviderGuid);
            }
        }
        public event Action<DpstProbabilityOfFullScreenSolidColorData_t> DisplayPcXPSTCalculate
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 367, ProviderGuid);
            }
        }
        public event Action<DpstGuardBandThreshold_t> DisplayPcXPSTCapability
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 381, ProviderGuid);
            }
        }
        public event Action<DpstClientEvents_t> DisplayPcXPSTClient
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTClientTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 278, ProviderGuid);
            }
        }
        public event Action<DpstPipeHistogram_t> DisplayPcXPSTDisable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 284, ProviderGuid);
            }
        }
        public event Action<DpstPipeHistogram_t> DisplayPcXPSTEnable
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 283, ProviderGuid);
            }
        }
        public event Action<DpstExternalEvents_t> DisplayPcXPSTExternal
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 277, ProviderGuid);
            }
        }
        public event Action<DpstPipeState_t> DisplayPcXPSTProcess
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTProcessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 382, ProviderGuid);
            }
        }
        public event Action<DpstProgramDIET_t> DisplayPcXPSTProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 281, ProviderGuid);
            }
        }
        public event Action<DpstHistogram_t> DisplayPcXPSTRead
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 276, ProviderGuid);
            }
        }
        public event Action<DpstPipeHistogram_t> DisplayPcXPSTReset
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTResetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 285, ProviderGuid);
            }
        }
        public event Action<DpstWarningData_t> DisplayPcXPSTWarning
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTWarningTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 380, ProviderGuid);
            }
        }
        public event Action<XpstWorkItemCallback_t> DisplayPcXPSTWorkItem
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTWorkItemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 279, ProviderGuid);
            }
        }
        public event Action<XpstGuardband_t> DisplayPcXPSTWrite
        {
            add
            {
                source.RegisterEventTemplate(DisplayPcXPSTWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 455, ProviderGuid);
            }
        }
        public event Action<DisplayShiftEscapeInfo_t> DisplayShiftEscapeInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayShiftEscapeInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 346, ProviderGuid);
            }
        }
        public event Action<DisplayShiftGetStatus_t> DisplayShiftGetStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayShiftGetStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 347, ProviderGuid);
            }
        }
        public event Action<DisplayShiftSupportInfo_t> DisplayShiftSupportInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayShiftSupportInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 348, ProviderGuid);
            }
        }
        public event Action<DisplayShiftSwitchStatusInfo_t> DisplayShiftSwitchStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayShiftSwitchStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 349, ProviderGuid);
            }
        }
        public event Action<DisplayShiftSwPsrInfo_t> DisplayShiftSwPsrInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayShiftSwPsrInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 350, ProviderGuid);
            }
        }
        public event Action<Dsb_Idle_t> DisplayStateBufferInfo
        {
            add
            {
                source.RegisterEventTemplate(DisplayStateBufferInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 221, ProviderGuid);
            }
        }
        public event Action<Dsb_Prepare_t> DisplayStateBufferInitialize
        {
            add
            {
                source.RegisterEventTemplate(DisplayStateBufferInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 222, ProviderGuid);
            }
        }
        public event Action<Dsb_Execute_t> DisplayStateBufferProgram
        {
            add
            {
                source.RegisterEventTemplate(DisplayStateBufferProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 223, ProviderGuid);
            }
        }
        public event Action<TestData_t> DisplayTest
        {
            add
            {
                source.RegisterEventTemplate(DisplayTestTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<UR_Info_t> DispPipeUnderRun
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<UR_Dbuf_Data_t> DispPipeUnderRunDBuf
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunDBufTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<UR_Dbuf_Data_t> DispPipeUnderRunGen10Legacy
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunGen10LegacyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<UR_PlaneData_t> DispPipeUnderRunPlane
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<UR_Watermark_Data> DispPipeUnderRunSystem
        {
            add
            {
                source.RegisterEventTemplate(DispPipeUnderRunSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<Pipe_t> DmcErrorInterrupt
        {
            add
            {
                source.RegisterEventTemplate(DmcErrorInterruptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 441, ProviderGuid);
            }
        }
        public event Action<DmcErrorInterrupt_t> DmcErrorInterruptError
        {
            add
            {
                source.RegisterEventTemplate(DmcErrorInterruptErrorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 431, ProviderGuid);
            }
        }
        public event Action<DpVscSdp_Info_t> DP_VscSdp_InfoDP
        {
            add
            {
                source.RegisterEventTemplate(DP_VscSdp_InfoDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 452, ProviderGuid);
            }
        }
        public event Action<DPCurrentMstState_t> DPCurrentMstStateInfo
        {
            add
            {
                source.RegisterEventTemplate(DPCurrentMstStateInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 219, ProviderGuid);
            }
        }
        public event Action<DPDiagnosticData_t> DPDiagnosticEventsDP
        {
            add
            {
                source.RegisterEventTemplate(DPDiagnosticEventsDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 230, ProviderGuid);
            }
        }
        public event Action<DpMst_DPRXCaps_pipe_t> DpMstPathDPRXInfoDP
        {
            add
            {
                source.RegisterEventTemplate(DpMstPathDPRXInfoDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 453, ProviderGuid);
            }
        }
        public event Action<MstPathDscInfo_t> DpMstPathDscInfo
        {
            add
            {
                source.RegisterEventTemplate(DpMstPathDscInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 237, ProviderGuid);
            }
        }
        public event Action<SidebandMsg_t> DPSidebandMsgReceive
        {
            add
            {
                source.RegisterEventTemplate(DPSidebandMsgReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<SidebandMsg_t> DPSidebandMsgSend
        {
            add
            {
                source.RegisterEventTemplate(DPSidebandMsgSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<DramBwDetails_t> DramBwDetailInfo
        {
            add
            {
                source.RegisterEventTemplate(DramBwDetailInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 203, ProviderGuid);
            }
        }
        public event Action<DramMemDetail_t> DramMemDetailInfo
        {
            add
            {
                source.RegisterEventTemplate(DramMemDetailInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 216, ProviderGuid);
            }
        }
        public event Action<DriverBuild_t> DriverBuild
        {
            add
            {
                source.RegisterEventTemplate(DriverBuildTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 181, ProviderGuid);
            }
        }
        public event Action<DscSuDetails_t> DscSuParamsInfo
        {
            add
            {
                source.RegisterEventTemplate(DscSuParamsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 398, ProviderGuid);
            }
        }
        public event Action<DsmInfo_t> DsmTransactionInfo
        {
            add
            {
                source.RegisterEventTemplate(DsmTransactionInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 338, ProviderGuid);
            }
        }
        public event Action<DumpSetTimingData_t> DumpSetTimingDataInfo
        {
            add
            {
                source.RegisterEventTemplate(DumpSetTimingDataInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 287, ProviderGuid);
            }
        }
        public event Action<DynamicCdClockDvfs_t> DynamicCdClock
        {
            add
            {
                source.RegisterEventTemplate(DynamicCdClockTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 167, ProviderGuid);
            }
        }
        public event Action<PowerHandlerGetOptimalCdClock_t> DynamicCdClockCalculate
        {
            add
            {
                source.RegisterEventTemplate(DynamicCdClockCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 165, ProviderGuid);
            }
        }
        public event Action<PowerHandlerChangeCdClock_t> DynamicCdClockProgram
        {
            add
            {
                source.RegisterEventTemplate(DynamicCdClockProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 166, ProviderGuid);
            }
        }
        public event Action<EdidData_t> EdidDataInfo
        {
            add
            {
                source.RegisterEventTemplate(EdidDataInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 420, ProviderGuid);
            }
        }
        public event Action<EdidMgmtEsc_t> EdidMgmtEsc
        {
            add
            {
                source.RegisterEventTemplate(EdidMgmtEscTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 368, ProviderGuid);
            }
        }
        public event Action<Display_Caps_t> EdidMgmtPersistenceRestoreRxCaps
        {
            add
            {
                source.RegisterEventTemplate(EdidMgmtPersistenceRestoreRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 369, ProviderGuid);
            }
        }
        public event Action<TConCaps_t> EdpHDRColor
        {
            add
            {
                source.RegisterEventTemplate(EdpHDRColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 198, ProviderGuid);
            }
        }
        public event Action<EscapeData_t> Escape
        {
            add
            {
                source.RegisterEventTemplate(EscapeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 74, ProviderGuid);
            }
        }
        public event Action<EscapeStructDump_t> Escape190
        {
            add
            {
                source.RegisterEventTemplate(Escape190Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 190, ProviderGuid);
            }
        }
        public event Action<EvalAcpiMethod_t> EvalAcpiMethod
        {
            add
            {
                source.RegisterEventTemplate(EvalAcpiMethodTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 337, ProviderGuid);
            }
        }
        public event Action<EcvmPivot_t> EvcmPivotTypeInfo
        {
            add
            {
                source.RegisterEventTemplate(EvcmPivotTypeInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 292, ProviderGuid);
            }
        }
        public event Action<FBCChangeOnVBI_t> FBCChangeOnVBI
        {
            add
            {
                source.RegisterEventTemplate(FBCChangeOnVBITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 323, ProviderGuid);
            }
        }
        public event Action<FBCPlaneRestriction_t> FBCRestrictionInfo
        {
            add
            {
                source.RegisterEventTemplate(FBCRestrictionInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 312, ProviderGuid);
            }
        }
        public event Action<FBCStateChange_t> FbcStateChangeInfo
        {
            add
            {
                source.RegisterEventTemplate(FbcStateChangeInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 315, ProviderGuid);
            }
        }
        public event Action<FeatureControl_t> FeatureControl
        {
            add
            {
                source.RegisterEventTemplate(FeatureControlTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
            }
        }
        public event Action<FeatureStatus_t> FeatureStatus
        {
            add
            {
                source.RegisterEventTemplate(FeatureStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, ProviderGuid);
            }
        }
        public event Action<FecEnable_t> FecSinkEnableInfo
        {
            add
            {
                source.RegisterEventTemplate(FecSinkEnableInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 236, ProviderGuid);
            }
        }
        public event Action<FecEnable_t> FecSourceEnableInfo
        {
            add
            {
                source.RegisterEventTemplate(FecSourceEnableInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 235, ProviderGuid);
            }
        }
        public event Action<FlipAllParam_t> FlipAllParam
        {
            add
            {
                source.RegisterEventTemplate(FlipAllParamTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
            }
        }
        public event Action<FlipAddress_t> FlipAsync
        {
            add
            {
                source.RegisterEventTemplate(FlipAsyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, ProviderGuid);
            }
        }
        public event Action<ColorPixelDescPlane_t> FlipColor
        {
            add
            {
                source.RegisterEventTemplate(FlipColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 239, ProviderGuid);
            }
        }
        public event Action<FlipDoneInterrupt_t> FlipDoneInterruptPipeA
        {
            add
            {
                source.RegisterEventTemplate(FlipDoneInterruptPipeATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 184, ProviderGuid);
            }
        }
        public event Action<FlipDoneInterrupt_t> FlipDoneInterruptPipeB
        {
            add
            {
                source.RegisterEventTemplate(FlipDoneInterruptPipeBTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 185, ProviderGuid);
            }
        }
        public event Action<FlipDoneInterrupt_t> FlipDoneInterruptPipeC
        {
            add
            {
                source.RegisterEventTemplate(FlipDoneInterruptPipeCTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 186, ProviderGuid);
            }
        }
        public event Action<FlipDoneInterrupt_t> FlipDoneInterruptPipeD
        {
            add
            {
                source.RegisterEventTemplate(FlipDoneInterruptPipeDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 187, ProviderGuid);
            }
        }
        public event Action<FlipProcessDetails_t> FlipProcessDetailsInfo
        {
            add
            {
                source.RegisterEventTemplate(FlipProcessDetailsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 393, ProviderGuid);
            }
        }
        public event Action<FlipQExecuted_t> FlipQExecutedInfo
        {
            add
            {
                source.RegisterEventTemplate(FlipQExecutedInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 433, ProviderGuid);
            }
        }
        public event Action<FlipQInsertStart_t> FlipQInsertStart
        {
            add
            {
                source.RegisterEventTemplate(FlipQInsertStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 442, ProviderGuid);
            }
        }
        public event Action<FlipQInsertStop_t> FlipQInsertStop
        {
            add
            {
                source.RegisterEventTemplate(FlipQInsertStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 443, ProviderGuid);
            }
        }
        public event Action<FlipQMode_t> FlipQMode
        {
            add
            {
                source.RegisterEventTemplate(FlipQModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
            }
        }
        public event Action<FlipQueueSwitch_t> FlipQSwToHwSwitch
        {
            add
            {
                source.RegisterEventTemplate(FlipQSwToHwSwitchTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 87, ProviderGuid);
            }
        }
        public event Action<FlipAddress_t> FlipSync
        {
            add
            {
                source.RegisterEventTemplate(FlipSyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, ProviderGuid);
            }
        }
        public event Action<FmsModesetStatus_t> FmsStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(FmsStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 309, ProviderGuid);
            }
        }
        public event Action<FunctionTrack_t> FunctionTrack
        {
            add
            {
                source.RegisterEventTemplate(FunctionTrackTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<Gmbus_t> GmbusRead
        {
            add
            {
                source.RegisterEventTemplate(GmbusReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 435, ProviderGuid);
            }
        }
        public event Action<GTT_Fault_t> GttPageFaultInfo
        {
            add
            {
                source.RegisterEventTemplate(GttPageFaultInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 336, ProviderGuid);
            }
        }
        public event Action<PortEncryption_t> HDCPEncryption
        {
            add
            {
                source.RegisterEventTemplate(HDCPEncryptionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<GscInterfaceInfo_t> HdcpGscInterfaceInfo
        {
            add
            {
                source.RegisterEventTemplate(HdcpGscInterfaceInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 211, ProviderGuid);
            }
        }
        public event Action<HdcpPortAccess_t> HdcpPortAccess
        {
            add
            {
                source.RegisterEventTemplate(HdcpPortAccessTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
            }
        }
        public event Action<HdcpStateInfo_t> HdcpProtocolStateInfo
        {
            add
            {
                source.RegisterEventTemplate(HdcpProtocolStateInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 210, ProviderGuid);
            }
        }
        public event Action<TranscoderEncryption_t> HDCPTranscoder
        {
            add
            {
                source.RegisterEventTemplate(HDCPTranscoderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<HDMIDiagnosticData_t> HDMIDiagnosticEventsHDMI
        {
            add
            {
                source.RegisterEventTemplate(HDMIDiagnosticEventsHDMITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 318, ProviderGuid);
            }
        }
        public event Action<HdmiModeInfo_t> HdmiModeInfoHDMI
        {
            add
            {
                source.RegisterEventTemplate(HdmiModeInfoHDMITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 298, ProviderGuid);
            }
        }
        public event Action<HdmiRx_Caps_t> HdmiSinkHDMI
        {
            add
            {
                source.RegisterEventTemplate(HdmiSinkHDMITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 297, ProviderGuid);
            }
        }
        public event Action<HdrStaticMetadata_t> HDRMetadataColor
        {
            add
            {
                source.RegisterEventTemplate(HDRMetadataColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 196, ProviderGuid);
            }
        }
        public event Action<DpHdrMetadata_v2_t> HDRMetadataDP
        {
            add
            {
                source.RegisterEventTemplate(HDRMetadataDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 451, ProviderGuid);
            }
        }
        public event Action<HdrStaticMetadata_t> HDRMetadataExternal
        {
            add
            {
                source.RegisterEventTemplate(HDRMetadataExternalTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 197, ProviderGuid);
            }
        }
        public event Action<HdrStaticMetadata_t> HDRMetadataPlane
        {
            add
            {
                source.RegisterEventTemplate(HDRMetadataPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 195, ProviderGuid);
            }
        }
        public event Action<HPD_t> HotPlugDetect
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<HPDLiveState_t> HotPlugDetectLiveState
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectLiveStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<SPI_t> HotPlugDetectSPI
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectSPITemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<HotplugTypeC_t> HotPlugDetectTypeC
        {
            add
            {
                source.RegisterEventTemplate(HotPlugDetectTypeCTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 170, ProviderGuid);
            }
        }
        public event Action<HPDScdc_t> HPDScdcInfo
        {
            add
            {
                source.RegisterEventTemplate(HPDScdcInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 353, ProviderGuid);
            }
        }
        public event Action<LayerToPlaneMap_t> HwPlaneToLayerIndex
        {
            add
            {
                source.RegisterEventTemplate(HwPlaneToLayerIndexTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 227, ProviderGuid);
            }
        }
        public event Action<Aux_t> I2CAuxRead
        {
            add
            {
                source.RegisterEventTemplate(I2CAuxReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<Aux_t> I2CAuxWrite
        {
            add
            {
                source.RegisterEventTemplate(I2CAuxWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<I2C_t> I2CRead
        {
            add
            {
                source.RegisterEventTemplate(I2CReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<I2C_t> I2CWrite
        {
            add
            {
                source.RegisterEventTemplate(I2CWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<RrSwitch_t> IdleVpbSeamlessRrSwitchInfo
        {
            add
            {
                source.RegisterEventTemplate(IdleVpbSeamlessRrSwitchInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 332, ProviderGuid);
            }
        }
        public event Action<Intel_ArcSync_t> IntelArcSyncProfileInfo
        {
            add
            {
                source.RegisterEventTemplate(IntelArcSyncProfileInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 361, ProviderGuid);
            }
        }
        public event Action<IntelArcSyncOverride_t> IntelArcSyncProfileInitialize
        {
            add
            {
                source.RegisterEventTemplate(IntelArcSyncProfileInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 401, ProviderGuid);
            }
        }
        public event Action<InterruptRepart_t> InterruptRepart
        {
            add
            {
                source.RegisterEventTemplate(InterruptRepartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 164, ProviderGuid);
            }
        }
        public event Action<IsDramBwSupported_t> IsDramBwSupportedInfo
        {
            add
            {
                source.RegisterEventTemplate(IsDramBwSupportedInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 204, ProviderGuid);
            }
        }
        public event Action<LastConnectionEvent_t> LastConnectionEvent
        {
            add
            {
                source.RegisterEventTemplate(LastConnectionEventTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 379, ProviderGuid);
            }
        }
        public event Action<LPFPanelIndex_t> LFPPanelIndexInfo
        {
            add
            {
                source.RegisterEventTemplate(LFPPanelIndexInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 226, ProviderGuid);
            }
        }
        public event Action<LidStateNotification_t> LidStateInfo
        {
            add
            {
                source.RegisterEventTemplate(LidStateInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 342, ProviderGuid);
            }
        }
        public event Action<LinkTrainingInfo_t> LinkTrainingDP
        {
            add
            {
                source.RegisterEventTemplate(LinkTrainingDPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 454, ProviderGuid);
            }
        }
        public event Action<LiveAddress_t> LiveAddress
        {
            add
            {
                source.RegisterEventTemplate(LiveAddressTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, ProviderGuid);
            }
        }
        public event Action<MdmEvent_t> MdmInfo
        {
            add
            {
                source.RegisterEventTemplate(MdmInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 444, ProviderGuid);
            }
        }
        public event Action<MipiDsiLinkReadyStatus_t> MipiDsi_LinkReadyStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsi_LinkReadyStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 255, ProviderGuid);
            }
        }
        public event Action<MipiDsiPacketTransaction_t> MipiDsi_LongPacketRead
        {
            add
            {
                source.RegisterEventTemplate(MipiDsi_LongPacketReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 252, ProviderGuid);
            }
        }
        public event Action<MipiDsiPacketTransaction_t> MipiDsi_LongPacketWrite
        {
            add
            {
                source.RegisterEventTemplate(MipiDsi_LongPacketWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 253, ProviderGuid);
            }
        }
        public event Action<MipiDsiPacketTransaction_t> MipiDsi_ShortPacketRead
        {
            add
            {
                source.RegisterEventTemplate(MipiDsi_ShortPacketReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 250, ProviderGuid);
            }
        }
        public event Action<MipiDsiPacketTransaction_t> MipiDsi_ShortPacketWrite
        {
            add
            {
                source.RegisterEventTemplate(MipiDsi_ShortPacketWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 251, ProviderGuid);
            }
        }
        public event Action<MipiDsiDataRateInHz_t> MipiDsiDataRateInHzInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsiDataRateInHzInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 359, ProviderGuid);
            }
        }
        public event Action<MipiDsiHorizontalTimingInfo_t> MipiDsiHorizontalTimingInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsiHorizontalTimingInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 360, ProviderGuid);
            }
        }
        public event Action<MipiDsiPacketInfo_t> MipiDsiPacketInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsiPacketInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 357, ProviderGuid);
            }
        }
        public event Action<MipiDsiPanelInfo_t> MipiDsiPanelInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsiPanelInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 254, ProviderGuid);
            }
        }
        public event Action<MipiDsiPayloadCreditsSentInfo_t> MipiDsiPayloadCreditsSentInfo
        {
            add
            {
                source.RegisterEventTemplate(MipiDsiPayloadCreditsSentInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 358, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipPlaneDetails_t> Mpo3FlipInfo
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 179, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipPlaneIn_t> Mpo3FlipPlane
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipIn_t> Mpo3FlipStart
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, ProviderGuid);
            }
        }
        public event Action<Mpo3FlipOut_t> Mpo3FlipStop
        {
            add
            {
                source.RegisterEventTemplate(Mpo3FlipStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, ProviderGuid);
            }
        }
        public event Action<MsgBusTransaction_t> MsgBusTransactionRead
        {
            add
            {
                source.RegisterEventTemplate(MsgBusTransactionReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 333, ProviderGuid);
            }
        }
        public event Action<MsgBusTransaction_t> MsgBusTransactionWrite
        {
            add
            {
                source.RegisterEventTemplate(MsgBusTransactionWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 334, ProviderGuid);
            }
        }
        public event Action<MstPathPanelReplayInfo_t> MstPanelReplayPathInfoDpBranchDevInfo
        {
            add
            {
                source.RegisterEventTemplate(MstPanelReplayPathInfoDpBranchDevInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 447, ProviderGuid);
            }
        }
        public event Action<MstPeerDeviceInfo_t> MstPeerDeviceInfoDpBranchDevInfo
        {
            add
            {
                source.RegisterEventTemplate(MstPeerDeviceInfoDpBranchDevInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 450, ProviderGuid);
            }
        }
        public event Action<MstPathVrrInfo_t> MstVrrPathInfoDpBranchDevInfo
        {
            add
            {
                source.RegisterEventTemplate(MstVrrPathInfoDpBranchDevInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 448, ProviderGuid);
            }
        }
        public event Action<NotifyPeriodicFrame_t> NotifyPeriodicFrame
        {
            add
            {
                source.RegisterEventTemplate(NotifyPeriodicFrameTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 55, ProviderGuid);
            }
        }
        public event Action<NotifyVSyncMpo2_Info_t> NotifyVSync
        {
            add
            {
                source.RegisterEventTemplate(NotifyVSyncTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 76, ProviderGuid);
            }
        }
        public event Action<NotifyVsyncLogBuffer_Plane_Ext_t> NotifyVsyncLogBufferExtension
        {
            add
            {
                source.RegisterEventTemplate(NotifyVsyncLogBufferExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 305, ProviderGuid);
            }
        }
        public event Action<NotifyVsyncLogBuffer_Plane_t> NotifyVsyncLogBufferPlane
        {
            add
            {
                source.RegisterEventTemplate(NotifyVsyncLogBufferPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 304, ProviderGuid);
            }
        }
        public event Action<NotifyVSyncMpo2_Layer_t> NotifyVSyncPlane
        {
            add
            {
                source.RegisterEventTemplate(NotifyVSyncPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 77, ProviderGuid);
            }
        }
        public event Action<OsGiven1dLut_t> OneDLUT_DataColor
        {
            add
            {
                source.RegisterEventTemplate(OneDLUT_DataColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 240, ProviderGuid);
            }
        }
        public event Action<OneDLUT_Param_t> OneDLUT_ParamsColor
        {
            add
            {
                source.RegisterEventTemplate(OneDLUT_ParamsColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 192, ProviderGuid);
            }
        }
        public event Action<Opregion_t> Opregion
        {
            add
            {
                source.RegisterEventTemplate(OpregionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
            }
        }
        public event Action<VbtData_t> Opregion182
        {
            add
            {
                source.RegisterEventTemplate(Opregion182Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 182, ProviderGuid);
            }
        }
        public event Action<OSOutputColorInfo_t> OSOutputColorInfoColor
        {
            add
            {
                source.RegisterEventTemplate(OSOutputColorInfoColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 194, ProviderGuid);
            }
        }
        public event Action<Pps_t> PanelPowerSeq
        {
            add
            {
                source.RegisterEventTemplate(PanelPowerSeqTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 75, ProviderGuid);
            }
        }
        public event Action<PcFeatureSpecificGenericRestrictions_t> PcFeatureGenericRestrictions
        {
            add
            {
                source.RegisterEventTemplate(PcFeatureGenericRestrictionsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 408, ProviderGuid);
            }
        }
        public event Action<PconDiagnsticData_t> PCONDiagnosticDataEventsInfo
        {
            add
            {
                source.RegisterEventTemplate(PCONDiagnosticDataEventsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 322, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfiler
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfilerStart
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<ProfilingData_t> PerfProfilerStop
        {
            add
            {
                source.RegisterEventTemplate(PerfProfilerStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<PeriodicFrame_t> PeriodicFrameStart
        {
            add
            {
                source.RegisterEventTemplate(PeriodicFrameStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, ProviderGuid);
            }
        }
        public event Action<PeriodicFrame_t> PeriodicFrameStop
        {
            add
            {
                source.RegisterEventTemplate(PeriodicFrameStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, ProviderGuid);
            }
        }
        public event Action<CSC_Params_t> PipeCSCColor
        {
            add
            {
                source.RegisterEventTemplate(PipeCSCColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 191, ProviderGuid);
            }
        }
        public event Action<Pipe_t> PipeDmcFlipQInterrupt
        {
            add
            {
                source.RegisterEventTemplate(PipeDmcFlipQInterruptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 406, ProviderGuid);
            }
        }
        public event Action<CSC_Params_t> PipeOCSCColor
        {
            add
            {
                source.RegisterEventTemplate(PipeOCSCColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 193, ProviderGuid);
            }
        }
        public event Action<PMDemandRequest_t> PMDemandRequest
        {
            add
            {
                source.RegisterEventTemplate(PMDemandRequestTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 389, ProviderGuid);
            }
        }
        public event Action<PortAdjDriveSetting_t> PortAdjDriveSettingInfo
        {
            add
            {
                source.RegisterEventTemplate(PortAdjDriveSettingInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 319, ProviderGuid);
            }
        }
        public event Action<PowerWellRequest_t> PowerWellRequest
        {
            add
            {
                source.RegisterEventTemplate(PowerWellRequestTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 224, ProviderGuid);
            }
        }
        public event Action<PowerWellFail_t> PowerWellRequestFail
        {
            add
            {
                source.RegisterEventTemplate(PowerWellRequestFailTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 225, ProviderGuid);
            }
        }
        public event Action<ProcessConfigTableEntry_t> ProcessConfigTableEntry
        {
            add
            {
                source.RegisterEventTemplate(ProcessConfigTableEntryTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 405, ProviderGuid);
            }
        }
        public event Action<ProgramLegacyOverlay_t> ProgramLegacyOverlay
        {
            add
            {
                source.RegisterEventTemplate(ProgramLegacyOverlayTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 202, ProviderGuid);
            }
        }
        public event Action<Psr2SdpTransTimeData_t> Psr2SdpTransmissionInfo
        {
            add
            {
                source.RegisterEventTemplate(Psr2SdpTransmissionInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 335, ProviderGuid);
            }
        }
        public event Action<QueryInterface_t> QueryInterfaceInfo
        {
            add
            {
                source.RegisterEventTemplate(QueryInterfaceInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 228, ProviderGuid);
            }
        }
        public event Action<MonitorMode_t> RecommendMonitorModesInfo
        {
            add
            {
                source.RegisterEventTemplate(RecommendMonitorModesInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 293, ProviderGuid);
            }
        }
        public event Action<MonitorMode_t> RecommendMonitorModesReceive
        {
            add
            {
                source.RegisterEventTemplate(RecommendMonitorModesReceiveTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 294, ProviderGuid);
            }
        }
        public event Action<RmCaps_t> ResourceManagerInitialize
        {
            add
            {
                source.RegisterEventTemplate(ResourceManagerInitializeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
            }
        }
        public event Action<RestrictSagv_t> RestrictSagvPointsInfo
        {
            add
            {
                source.RegisterEventTemplate(RestrictSagvPointsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 212, ProviderGuid);
            }
        }
        public event Action<RRCappedMode_t> RRCappedModeInfo
        {
            add
            {
                source.RegisterEventTemplate(RRCappedModeInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 241, ProviderGuid);
            }
        }
        public event Action<RrSwitchState_t> RrSwitch
        {
            add
            {
                source.RegisterEventTemplate(RrSwitchTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 371, ProviderGuid);
            }
        }
        public event Action<RrSwitchCapsCommon_t> RrSwitchCapsCommonRxCaps
        {
            add
            {
                source.RegisterEventTemplate(RrSwitchCapsCommonRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 354, ProviderGuid);
            }
        }
        public event Action<RrSwitchCapsFixed_t> RrSwitchCapsFixedRxCaps
        {
            add
            {
                source.RegisterEventTemplate(RrSwitchCapsFixedRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 356, ProviderGuid);
            }
        }
        public event Action<RrSwitchCapsVariable_t> RrSwitchCapsVariableRxCaps
        {
            add
            {
                source.RegisterEventTemplate(RrSwitchCapsVariableRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 355, ProviderGuid);
            }
        }
        public event Action<RrSwitchProgram_t> RrSwitchProgram
        {
            add
            {
                source.RegisterEventTemplate(RrSwitchProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 372, ProviderGuid);
            }
        }
        public event Action<SagvState_t> SagvStatus
        {
            add
            {
                source.RegisterEventTemplate(SagvStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 189, ProviderGuid);
            }
        }
        public event Action<ScalerForFlip_t> Scaler
        {
            add
            {
                source.RegisterEventTemplate(ScalerTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 320, ProviderGuid);
            }
        }
        public event Action<ScalerEnableDisable_t> ScalerPlane
        {
            add
            {
                source.RegisterEventTemplate(ScalerPlaneTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 321, ProviderGuid);
            }
        }
        public event Action<Pipe_t> ScanlineInterrupt
        {
            add
            {
                source.RegisterEventTemplate(ScanlineInterruptTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 54, ProviderGuid);
            }
        }
        public event Action<SelectiveFetchInfo_t> SelectiveFetchInfo
        {
            add
            {
                source.RegisterEventTemplate(SelectiveFetchInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 209, ProviderGuid);
            }
        }
        public event Action<SFSUSelectiveFetchProgram_t> SelectiveFetchProgramInfo
        {
            add
            {
                source.RegisterEventTemplate(SelectiveFetchProgramInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 383, ProviderGuid);
            }
        }
        public event Action<SelectiveFetchRestrictionInfo_t> SelectiveFetchRestriction
        {
            add
            {
                source.RegisterEventTemplate(SelectiveFetchRestrictionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 456, ProviderGuid);
            }
        }
        public event Action<SFSUSelectiveUpdateProgram_t> SelectiveUpdateProgramInfo
        {
            add
            {
                source.RegisterEventTemplate(SelectiveUpdateProgramInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 384, ProviderGuid);
            }
        }
        public event Action<AVI_InfoFrameData> SendInfoFrame
        {
            add
            {
                source.RegisterEventTemplate(SendInfoFrameTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 231, ProviderGuid);
            }
        }
        public event Action<FlipQLogBuffer> SetFlipQLogBufferInfo
        {
            add
            {
                source.RegisterEventTemplate(SetFlipQLogBufferInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 365, ProviderGuid);
            }
        }
        public event Action<SetInterruptTargetPresentId_t> SetInterruptTargetPresentId
        {
            add
            {
                source.RegisterEventTemplate(SetInterruptTargetPresentIdTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 86, ProviderGuid);
            }
        }
        public event Action<ProtocolSetTimingData_t> SetTiming
        {
            add
            {
                source.RegisterEventTemplate(SetTimingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<ColorPixelDescPipe_t> SetTimingColor
        {
            add
            {
                source.RegisterEventTemplate(SetTimingColorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<OsSetTiming_t> SetTimingOsState
        {
            add
            {
                source.RegisterEventTemplate(SetTimingOsStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 180, ProviderGuid);
            }
        }
        public event Action<SfSuConfigParams_t> SfsuConfigParamsInfo
        {
            add
            {
                source.RegisterEventTemplate(SfsuConfigParamsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 396, ProviderGuid);
            }
        }
        public event Action<SharedGfxPowerComponentFxState_t> SharedGfxPowerComponentFxStateInfo
        {
            add
            {
                source.RegisterEventTemplate(SharedGfxPowerComponentFxStateInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 316, ProviderGuid);
            }
        }
        public event Action<SharpnessCoefficients_t> SharpnessFeatureCoefficientsStop
        {
            add
            {
                source.RegisterEventTemplate(SharpnessFeatureCoefficientsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 413, ProviderGuid);
            }
        }
        public event Action<SharpnessData_t> SharpnessParams
        {
            add
            {
                source.RegisterEventTemplate(SharpnessParamsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 410, ProviderGuid);
            }
        }
        public event Action<SpeedframeBuffer_t> SpeedFrameBufferMgmt
        {
            add
            {
                source.RegisterEventTemplate(SpeedFrameBufferMgmtTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 374, ProviderGuid);
            }
        }
        public event Action<StructureDump_t> StructureDump
        {
            add
            {
                source.RegisterEventTemplate(StructureDumpTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<SystemInfo_t> SystemDetailsInfo
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
            }
        }
        public event Action<JointTargetProp_t> SystemDetailsJointTarget
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsJointTargetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 178, ProviderGuid);
            }
        }
        public event Action<Target_Mode_t> SystemDetailsMode
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
            }
        }
        public event Action<Display_Caps_t> SystemDetailsRxCaps
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsRxCapsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, ProviderGuid);
            }
        }
        public event Action<Target_Info_t> SystemDetailsSink
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsSinkTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
            }
        }
        public event Action<PlatformCaps_t> SystemDetailsSystem
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsSystemTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 303, ProviderGuid);
            }
        }
        public event Action<CcdSetTimingData_t> SystemDetailsTranscoder
        {
            add
            {
                source.RegisterEventTemplate(SystemDetailsTranscoderTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
            }
        }
        public event Action<Target_Info_t> Target
        {
            add
            {
                source.RegisterEventTemplate(TargetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<MonitorLinkInfo_t> TargetCapability
        {
            add
            {
                source.RegisterEventTemplate(TargetCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 388, ProviderGuid);
            }
        }
        public event Action<TargetConnectionState_t> TargetConnectionDriverState
        {
            add
            {
                source.RegisterEventTemplate(TargetConnectionDriverStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 176, ProviderGuid);
            }
        }
        public event Action<JointTargetProp_t> TargetConnectionJointTarget
        {
            add
            {
                source.RegisterEventTemplate(TargetConnectionJointTargetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 174, ProviderGuid);
            }
        }
        public event Action<TargetConnectionChange_t> TargetConnectionOsState
        {
            add
            {
                source.RegisterEventTemplate(TargetConnectionOsStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 175, ProviderGuid);
            }
        }
        public event Action<TargetDetect_t> TargetDetectInfo
        {
            add
            {
                source.RegisterEventTemplate(TargetDetectInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 177, ProviderGuid);
            }
        }
        public event Action<Target_Edid> TargetEDID
        {
            add
            {
                source.RegisterEventTemplate(TargetEDIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<Target_Mode_t> TargetMode
        {
            add
            {
                source.RegisterEventTemplate(TargetModeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<TargetModePrunedInfo_t> TargetModePruningInfo
        {
            add
            {
                source.RegisterEventTemplate(TargetModePruningInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 220, ProviderGuid);
            }
        }
        public event Action<ElpCaps_t> TconElpCapability
        {
            add
            {
                source.RegisterEventTemplate(TconElpCapabilityTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 344, ProviderGuid);
            }
        }
        public event Action<ThreeDLUT_t> ThreeDLUTInfo
        {
            add
            {
                source.RegisterEventTemplate(ThreeDLUTInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 397, ProviderGuid);
            }
        }
        public event Action<AuxlessAlpm_t> TimingParametersInfo
        {
            add
            {
                source.RegisterEventTemplate(TimingParametersInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 438, ProviderGuid);
            }
        }
        public event Action<AuxlessAlpm_t> TimingParametersInfo439
        {
            add
            {
                source.RegisterEventTemplate(TimingParametersInfo439Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 439, ProviderGuid);
            }
        }
        public event Action<OsSourceMode_t> TranslatedOsModeSource
        {
            add
            {
                source.RegisterEventTemplate(TranslatedOsModeSourceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 291, ProviderGuid);
            }
        }
        public event Action<OsTargetMode_t> TranslatedOsModeTarget
        {
            add
            {
                source.RegisterEventTemplate(TranslatedOsModeTargetTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 290, ProviderGuid);
            }
        }
        public event Action<TranslatedOsPath_t> TranslatedOsPathInfo
        {
            add
            {
                source.RegisterEventTemplate(TranslatedOsPathInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 289, ProviderGuid);
            }
        }
        public event Action<UncoreInitStart_t> UncoreInitStatusStart
        {
            add
            {
                source.RegisterEventTemplate(UncoreInitStatusStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 295, ProviderGuid);
            }
        }
        public event Action<UncoreInitStop_t> UncoreInitStatusStop
        {
            add
            {
                source.RegisterEventTemplate(UncoreInitStatusStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 296, ProviderGuid);
            }
        }
        public event Action<Usb4DynamicBWMgmtDetectionCaps_t> Usb4DynamicBWMgmtCapsDetectionInfo
        {
            add
            {
                source.RegisterEventTemplate(Usb4DynamicBWMgmtCapsDetectionInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 411, ProviderGuid);
            }
        }
        public event Action<Usb4DynamicBWMgmtSPICaps_t> Usb4DynamicBWMgmtCapsSpiInfo
        {
            add
            {
                source.RegisterEventTemplate(Usb4DynamicBWMgmtCapsSpiInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 412, ProviderGuid);
            }
        }
        public event Action<VbiOptimizationState_t> VbiOptimizationState
        {
            add
            {
                source.RegisterEventTemplate(VbiOptimizationStateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 394, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeA
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeB
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeBTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeC
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeCTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeD
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<PipeVBI_t> VBlankInterruptPipeVirtual
        {
            add
            {
                source.RegisterEventTemplate(VBlankInterruptPipeVirtualTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<VbtBlkParse_t> VbtBlkParse
        {
            add
            {
                source.RegisterEventTemplate(VbtBlkParseTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 310, ProviderGuid);
            }
        }
        public event Action<VdscPPSParams_t> VdscPPSParamsInfo
        {
            add
            {
                source.RegisterEventTemplate(VdscPPSParamsInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 234, ProviderGuid);
            }
        }
        public event Action<VdscSinkEnable_t> VdscSinkEnableInfo
        {
            add
            {
                source.RegisterEventTemplate(VdscSinkEnableInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 233, ProviderGuid);
            }
        }
        public event Action<VdscSourceEnable_t> VdscSourceEnableInfo
        {
            add
            {
                source.RegisterEventTemplate(VdscSourceEnableInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 232, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceBalance_t> VrrAdaptiveBalance
        {
            add
            {
                source.RegisterEventTemplate(VrrAdaptiveBalanceTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 299, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceApply_t> VrrAdaptiveBalanceApply
        {
            add
            {
                source.RegisterEventTemplate(VrrAdaptiveBalanceApplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 300, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceCalculate_t> VrrAdaptiveBalanceCalculate
        {
            add
            {
                source.RegisterEventTemplate(VrrAdaptiveBalanceCalculateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 302, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceHwCounterMismatch_t> VrrAdaptiveBalanceHwCounterMismatch
        {
            add
            {
                source.RegisterEventTemplate(VrrAdaptiveBalanceHwCounterMismatchTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 301, ProviderGuid);
            }
        }
        public event Action<VrrCertificationParams_t> VrrCertificationInfo
        {
            add
            {
                source.RegisterEventTemplate(VrrCertificationInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 352, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceConfig_t> VrrDcBalancingAlgoConfigInfo
        {
            add
            {
                source.RegisterEventTemplate(VrrDcBalancingAlgoConfigInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 436, ProviderGuid);
            }
        }
        public event Action<VrrAdaptiveBalanceCalculateV2_t> VrrDcBalancingAlgoOutputInfo
        {
            add
            {
                source.RegisterEventTemplate(VrrDcBalancingAlgoOutputInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 437, ProviderGuid);
            }
        }
        public event Action<VrrDisableParams_t> VrrEnableDisableStatusDisable
        {
            add
            {
                source.RegisterEventTemplate(VrrEnableDisableStatusDisableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 208, ProviderGuid);
            }
        }
        public event Action<VrrEnableParams_t> VrrEnableDisableStatusEnable
        {
            add
            {
                source.RegisterEventTemplate(VrrEnableDisableStatusEnableTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 207, ProviderGuid);
            }
        }
        public event Action<VrrStatusParams_t> VrrEnableDisableStatusInfo
        {
            add
            {
                source.RegisterEventTemplate(VrrEnableDisableStatusInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 339, ProviderGuid);
            }
        }
        public event Action<VrrUpdateParams_t> VrrEnableDisableStatusProgram
        {
            add
            {
                source.RegisterEventTemplate(VrrEnableDisableStatusProgramTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 340, ProviderGuid);
            }
        }
        public event Action<VrrWorking_t> VrrWorkingStatus
        {
            add
            {
                source.RegisterEventTemplate(VrrWorkingStatusTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 205, ProviderGuid);
            }
        }
        public event Action<VrrWorking_t> VrrWorkingStatusFail
        {
            add
            {
                source.RegisterEventTemplate(VrrWorkingStatusFailTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 206, ProviderGuid);
            }
        }
        public event Action<VsyncTimeoutInfo_t> VsyncTimeout
        {
            add
            {
                source.RegisterEventTemplate(VsyncTimeoutTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 392, ProviderGuid);
            }
        }
        public event Action<WakelockInfo_t> Wakelock
        {
            add
            {
                source.RegisterEventTemplate(WakelockTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 449, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkCursor
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkCursorTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<WaterMarkInfo_t> WaterMarkInfo
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkInfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkLPWM
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkLPWMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }
        public event Action<WaterMarkData_t> WaterMarkPlaneY
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkPlaneYTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 188, ProviderGuid);
            }
        }
        public event Action<TransWaterMarkData_t> WaterMarkTransWM
        {
            add
            {
                source.RegisterEventTemplate(WaterMarkTransWMTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AcpiEventStatus_t AcpiEventStatusTemplate(Action<AcpiEventStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AcpiEventStatus_t(action, 214, 88, "AcpiEventStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AsyncFlipLineCount_t AsyncFlipLineInfoTemplate(Action<AsyncFlipLineCount_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AsyncFlipLineCount_t(action, 306, 127, "AsyncFlipLine", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Aux_t AuxDPCDReadTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 5, 15, "AuxDPCD", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private Aux_t AuxDPCDWriteTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 4, 15, "AuxDPCD", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private AuxChannelToPortMap_t AuxTransactionAuxChannelToPortMapTemplate(Action<AuxChannelToPortMap_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuxChannelToPortMap_t(action, 53, 7, "AuxTransaction", Guid.Empty, 33, "AuxChannelToPortMap", ProviderGuid, ProviderName );
        }
        static private AuxInfo_t AuxTransactionReceiveTemplate(Action<AuxInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuxInfo_t(action, 52, 7, "AuxTransaction", Guid.Empty, 22, "Receive", ProviderGuid, ProviderName );
        }
        static private AuxInfo_t AuxTransactionSendTemplate(Action<AuxInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuxInfo_t(action, 41, 7, "AuxTransaction", Guid.Empty, 21, "Send", ProviderGuid, ProviderName );
        }
        static private BitBash_t BitBashReadTemplate(Action<BitBash_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BitBash_t(action, 434, 207, "BitBash", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private CancelFlip_t CancelFlipTemplate(Action<CancelFlip_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CancelFlip_t(action, 85, 8, "CancelFlip", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CheckLegacyOverlaySupport_t CheckLegacyOverlaySupportTemplate(Action<CheckLegacyOverlaySupport_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CheckLegacyOverlaySupport_t(action, 201, 78, "CheckLegacyOverlaySupport", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CheckMpoPlaneDetails_t CheckMpoPlaneInfoTemplate(Action<CheckMpoPlaneDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CheckMpoPlaneDetails_t(action, 200, 77, "CheckMpoPlane", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private CmtgStatusParams_t CmtgStatusInfoTemplate(Action<CmtgStatusParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CmtgStatusParams_t(action, 432, 205, "CmtgStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private CollageEscape_t CollageEscapeTemplate(Action<CollageEscape_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CollageEscape_t(action, 171, 61, "CollageEscape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CollageSupport_t CollageEscapeErrorTemplate(Action<CollageSupport_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CollageSupport_t(action, 173, 61, "CollageEscape", Guid.Empty, 23, "Error", ProviderGuid, ProviderName );
        }
        static private CollageTopology_t CollageEscapeInfoTemplate(Action<CollageTopology_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CollageTopology_t(action, 172, 61, "CollageEscape", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SetAdjustedColorimetry_t ColorSetAdjustedColorimetryColorTemplate(Action<SetAdjustedColorimetry_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SetAdjustedColorimetry_t(action, 218, 91, "ColorSetAdjustedColorimetry", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private ConditionalAssert_t ConditionalAssertTemplate(Action<ConditionalAssert_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ConditionalAssert_t(action, 373, 175, "ConditionalAssert", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private OSGivenCSC_t CSCDataColorTemplate(Action<OSGivenCSC_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OSGivenCSC_t(action, 238, 107, "CSCData", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private DBufInfo_t DBufTemplate(Action<DBufInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DBufInfo_t(action, 39, 19, "DBuf", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CursorDbuf_t DBufCursorTemplate(Action<CursorDbuf_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CursorDbuf_t(action, 213, 19, "DBuf", Guid.Empty, 41, "Cursor", ProviderGuid, ProviderName );
        }
        static private BDF_t DbufOverlapInfoTemplate(Action<BDF_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BDF_t(action, 395, 186, "DbufOverlap", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Dc6vParameters_t Dc6vOrDc3CoParametersProgramTemplate(Action<Dc6vParameters_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Dc6vParameters_t(action, 370, 173, "Dc6vOrDc3CoParameters", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private DcStateClientEventHandler_t DCStateClientTemplate(Action<DcStateClientEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DcStateClientEventHandler_t(action, 386, 20, "DCState", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private DcStateExternalEventHandler_t DCStateExternalTemplate(Action<DcStateExternalEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DcStateExternalEventHandler_t(action, 385, 20, "DCState", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private DCStateRequest_t DCStateInfoTemplate(Action<DCStateRequest_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DCStateRequest_t(action, 217, 20, "DCState", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DebugPrint_t DebugPrintTemplate(Action<DebugPrint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DebugPrint_t(action, 1, 1, "DebugPrint", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DetectionCheckRequired_t DetectionCheckRequiredInfoTemplate(Action<DetectionCheckRequired_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DetectionCheckRequired_t(action, 378, 177, "DetectionCheckRequired", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private OneDLUT_Param_t DGLUTParamsInfoTemplate(Action<OneDLUT_Param_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OneDLUT_Param_t(action, 345, 152, "DGLUTParams", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Assert_t DisplayAssertTemplate(Action<Assert_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Assert_t(action, 183, 67, "DisplayAssert", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DisplayAudioLinkHandlingEvent_t DisplayAudioLinkHandlingEventInfoTemplate(Action<DisplayAudioLinkHandlingEvent_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayAudioLinkHandlingEvent_t(action, 317, 135, "DisplayAudioLinkHandlingEvent", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private BlcApply_t DisplayBrightness2ApplyTemplate(Action<BlcApply_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcApply_t(action, 265, 113, "DisplayBrightness2", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private BlcAggrLevelData_t DisplayBrightness2ApplyStartTemplate(Action<BlcAggrLevelData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcAggrLevelData_t(action, 377, 113, "DisplayBrightness2", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private BlcMap_t DisplayBrightness2AssociateTemplate(Action<BlcMap_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcMap_t(action, 264, 113, "DisplayBrightness2", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private BlcComputeNewPercentage_t DisplayBrightness2CalculateTemplate(Action<BlcComputeNewPercentage_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcComputeNewPercentage_t(action, 266, 113, "DisplayBrightness2", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private BlcDdi2Caps_t DisplayBrightness2CapabilityTemplate(Action<BlcDdi2Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi2Caps_t(action, 260, 113, "DisplayBrightness2", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private BlcClientEvents_t DisplayBrightness2ClientTemplate(Action<BlcClientEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcClientEvents_t(action, 263, 113, "DisplayBrightness2", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private BlcDdi2State_t DisplayBrightness2EnableTemplate(Action<BlcDdi2State_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi2State_t(action, 261, 113, "DisplayBrightness2", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private BlcBacklightReduction_t DisplayBrightness2InfoTemplate(Action<BlcBacklightReduction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcBacklightReduction_t(action, 375, 113, "DisplayBrightness2", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private BlcStaticData_t DisplayBrightness2InitializeTemplate(Action<BlcStaticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcStaticData_t(action, 275, 113, "DisplayBrightness2", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private BlcDdi2Optimization_t DisplayBrightness2ProcessTemplate(Action<BlcDdi2Optimization_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi2Optimization_t(action, 262, 113, "DisplayBrightness2", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private BlcPortBrightness_t DisplayBrightness2ProgramTemplate(Action<BlcPortBrightness_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcPortBrightness_t(action, 273, 113, "DisplayBrightness2", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private BlcDdi2Data_t DisplayBrightness2ReadTemplate(Action<BlcDdi2Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi2Data_t(action, 259, 113, "DisplayBrightness2", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private BlcPortPwmFrequency_t DisplayBrightness2SetupTemplate(Action<BlcPortPwmFrequency_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcPortPwmFrequency_t(action, 274, 113, "DisplayBrightness2", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private BlcWarningData_t DisplayBrightness2WarningTemplate(Action<BlcWarningData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcWarningData_t(action, 376, 113, "DisplayBrightness2", Guid.Empty, 24, "Warning", ProviderGuid, ProviderName );
        }
        static private BlcDdi2Data_t DisplayBrightness2WriteTemplate(Action<BlcDdi2Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi2Data_t(action, 258, 113, "DisplayBrightness2", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private BlcTransitionData_t DisplayBrightness3AssociateTemplate(Action<BlcTransitionData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcTransitionData_t(action, 271, 114, "DisplayBrightness3", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private BlcDdi3Caps_t DisplayBrightness3CapabilityTemplate(Action<BlcDdi3Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi3Caps_t(action, 269, 114, "DisplayBrightness3", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private HDRPixelBoostData_t DisplayBrightness3ColorTemplate(Action<HDRPixelBoostData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HDRPixelBoostData_t(action, 421, 114, "DisplayBrightness3", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private DisplayBrightness3_Info_t DisplayBrightness3InfoTemplate(Action<DisplayBrightness3_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayBrightness3_Info_t(action, 308, 114, "DisplayBrightness3", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private BlcDdi3Optimization_t DisplayBrightness3ProcessTemplate(Action<BlcDdi3Optimization_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi3Optimization_t(action, 270, 114, "DisplayBrightness3", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private BlcGetSetNitsBrightness_t DisplayBrightness3ProgramTemplate(Action<BlcGetSetNitsBrightness_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcGetSetNitsBrightness_t(action, 272, 114, "DisplayBrightness3", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private BlcDdi3Get_t DisplayBrightness3ReadTemplate(Action<BlcDdi3Get_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi3Get_t(action, 268, 114, "DisplayBrightness3", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DisplayBrightness3_RxCaps_t DisplayBrightness3RxCapsTemplate(Action<DisplayBrightness3_RxCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayBrightness3_RxCaps_t(action, 307, 114, "DisplayBrightness3", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private BlcDdi3Set_t DisplayBrightness3WriteTemplate(Action<BlcDdi3Set_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDdi3Set_t(action, 267, 114, "DisplayBrightness3", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private Display_Caps_t DisplayCapsTemplate(Action<Display_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Display_Caps_t(action, 34, 30, "DisplayCaps", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DisplayCaps_HDR10P_Caps_t DisplayCaps_HDR10P_CapsInfoTemplate(Action<DisplayCaps_HDR10P_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayCaps_HDR10P_Caps_t(action, 440, 212, "DisplayCaps_HDR10P_Caps", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Did_HdrCaps_t DisplayCapsCapabilityTemplate(Action<Did_HdrCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Did_HdrCaps_t(action, 387, 30, "DisplayCaps", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private HDRCaps_t DisplayCapsColorTemplate(Action<HDRCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HDRCaps_t(action, 199, 30, "DisplayCaps", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private DpDeviceInfo_t DisplayCapsDpBranchDevInfoTemplate(Action<DpDeviceInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpDeviceInfo_t(action, 399, 30, "DisplayCaps", Guid.Empty, 80, "DpBranchDevInfo", ProviderGuid, ProviderName );
        }
        static private DPRxCapsDPCDs_t DisplayCapsDPCDsRxCapsTemplate(Action<DPRxCapsDPCDs_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DPRxCapsDPCDs_t(action, 215, 89, "DisplayCapsDPCDs", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private DpDeviceInfo_t DisplayCapsDpSinkDevInfoTemplate(Action<DpDeviceInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpDeviceInfo_t(action, 400, 30, "DisplayCaps", Guid.Empty, 81, "DpSinkDevInfo", ProviderGuid, ProviderName );
        }
        static private SinkEdid_t DisplayCapsEDIDTemplate(Action<SinkEdid_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SinkEdid_t(action, 35, 30, "DisplayCaps", Guid.Empty, 35, "EDID", ProviderGuid, ProviderName );
        }
        static private DPRxCaps_t DisplayCapsRxCapsTemplate(Action<DPRxCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DPRxCaps_t(action, 36, 30, "DisplayCaps", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 28, 25, "DisplayDiagnostics", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsErrorTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 25, 25, "DisplayDiagnostics", Guid.Empty, 23, "Error", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsInfoTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 27, 25, "DisplayDiagnostics", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsMayDayTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 24, 25, "DisplayDiagnostics", Guid.Empty, 32, "MayDay", ProviderGuid, ProviderName );
        }
        static private DiagnosticData_t DisplayDiagnosticsWarningTemplate(Action<DiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DiagnosticData_t(action, 26, 25, "DisplayDiagnostics", Guid.Empty, 24, "Warning", ProviderGuid, ProviderName );
        }
        static private GenlockEnableDisable_t DisplayGenlockEnableTemplate(Action<GenlockEnableDisable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GenlockEnableDisable_t(action, 415, 198, "DisplayGenlock", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private GenlockCommonTiming_t DisplayGenlockExternalTemplate(Action<GenlockCommonTiming_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GenlockCommonTiming_t(action, 416, 198, "DisplayGenlock", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private GenlockInfo_t DisplayGenlockInfoTemplate(Action<GenlockInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GenlockInfo_t(action, 414, 198, "DisplayGenlock", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private GenlockTranscoder_t DisplayGenlockTranscoderTemplate(Action<GenlockTranscoder_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GenlockTranscoder_t(action, 417, 198, "DisplayGenlock", Guid.Empty, 39, "Transcoder", ProviderGuid, ProviderName );
        }
        static private BlcDiagnosticData_t DisplayPcBlcAllParamTemplate(Action<BlcDiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcDiagnosticData_t(action, 427, 193, "DisplayPcBlc", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private DisplayPcBlcCapability_t DisplayPcBlcCapabilityTemplate(Action<DisplayPcBlcCapability_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcBlcCapability_t(action, 445, 193, "DisplayPcBlc", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private BlcExternalEventHandler_t DisplayPcBlcExternalTemplate(Action<BlcExternalEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlcExternalEventHandler_t(action, 409, 193, "DisplayPcBlc", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private DisplayPcBlcInfo_t DisplayPcBlcInfoTemplate(Action<DisplayPcBlcInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcBlcInfo_t(action, 446, 193, "DisplayPcBlc", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private BrtOptimizationDiagnosticData_t DisplayPcBrtOptimizationAllParamTemplate(Action<BrtOptimizationDiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BrtOptimizationDiagnosticData_t(action, 428, 203, "DisplayPcBrtOptimization", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private BrtAggrLevelMappingData_t DisplayPcBrtOptimizationAssociateTemplate(Action<BrtAggrLevelMappingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BrtAggrLevelMappingData_t(action, 366, 203, "DisplayPcBrtOptimization", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private BrtOptimizationCapability_t DisplayPcBrtOptimizationCapabilityTemplate(Action<BrtOptimizationCapability_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BrtOptimizationCapability_t(action, 429, 203, "DisplayPcBrtOptimization", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private BrtOptimizationInfo_t DisplayPcBrtOptimizationInfoTemplate(Action<BrtOptimizationInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BrtOptimizationInfo_t(action, 343, 203, "DisplayPcBrtOptimization", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DcStateClientEventHandler_t DisplayPcDcStateClientTemplate(Action<DcStateClientEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DcStateClientEventHandler_t(action, 364, 169, "DisplayPcDcState", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private DcStateExternalEventHandler_t DisplayPcDcStateExternalTemplate(Action<DcStateExternalEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DcStateExternalEventHandler_t(action, 363, 169, "DisplayPcDcState", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private DpsEventHandlerData_t DisplayPcDPSEventHandlerTemplate(Action<DpsEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsEventHandlerData_t(action, 117, 49, "DisplayPcDPS", Guid.Empty, 64, "EventHandler", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcDPSInfoTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 114, 49, "DisplayPcDPS", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DpsStaticData_t DisplayPcDPSInitializeTemplate(Action<DpsStaticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsStaticData_t(action, 246, 49, "DisplayPcDPS", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private DpsEvents_t DisplayPcDPSProcessTemplate(Action<DpsEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsEvents_t(action, 247, 49, "DisplayPcDPS", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private DpsStatus_t DisplayPcDPSProgramTemplate(Action<DpsStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsStatus_t(action, 248, 49, "DisplayPcDPS", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private DpsGetUserDpsParamsData_t DisplayPcDPSReadTemplate(Action<DpsGetUserDpsParamsData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsGetUserDpsParamsData_t(action, 119, 49, "DisplayPcDPS", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DpsInitSupportedPStatesData_t DisplayPcDPSSetupTemplate(Action<DpsInitSupportedPStatesData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsInitSupportedPStatesData_t(action, 115, 49, "DisplayPcDPS", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private DpstDiagData_t DisplayPcDPSTAllParamTemplate(Action<DpstDiagData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstDiagData_t(action, 404, 51, "DisplayPcDPST", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private DpstEventHandlerData_t DisplayPcDPSTEventHandlerTemplate(Action<DpstEventHandlerData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstEventHandlerData_t(action, 163, 51, "DisplayPcDPST", Guid.Empty, 64, "EventHandler", ProviderGuid, ProviderName );
        }
        static private DpstAlgoVersionData_t DisplayPcDPSTInfoTemplate(Action<DpstAlgoVersionData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstAlgoVersionData_t(action, 331, 51, "DisplayPcDPST", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DpstStaticData_t DisplayPcDPSTInitializeTemplate(Action<DpstStaticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstStaticData_t(action, 286, 51, "DisplayPcDPST", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private DpstAlgorithm_t DisplayPcDPSTLiveStateTemplate(Action<DpstAlgorithm_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstAlgorithm_t(action, 280, 51, "DisplayPcDPST", Guid.Empty, 19, "LiveState", ProviderGuid, ProviderName );
        }
        static private DpstPolicyParams_t DisplayPcDPSTSystemTemplate(Action<DpstPolicyParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPolicyParams_t(action, 403, 51, "DisplayPcDPST", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private DpsSetUserDpsParamsData_t DisplayPcDPSWriteTemplate(Action<DpsSetUserDpsParamsData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpsSetUserDpsParamsData_t(action, 120, 49, "DisplayPcDPS", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private PwrConsEscapeData_t DisplayPcEscapeTemplate(Action<PwrConsEscapeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PwrConsEscapeData_t(action, 139, 52, "DisplayPcEscape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PipeConfChangePipePortMappingData_t DisplayPcEventInfoTemplate(Action<PipeConfChangePipePortMappingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeConfChangePipePortMappingData_t(action, 169, 60, "DisplayPcEvent", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PowerSourceState_t DisplayPcEventLiveStateTemplate(Action<PowerSourceState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PowerSourceState_t(action, 249, 60, "DisplayPcEvent", Guid.Empty, 19, "LiveState", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcEventNotificationExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 168, 45, "DisplayPcEventNotification", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcEventNotificationProcessTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 92, 45, "DisplayPcEventNotification", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcEventNotificationReceiveTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 91, 45, "DisplayPcEventNotification", Guid.Empty, 22, "Receive", ProviderGuid, ProviderName );
        }
        static private FbcCfbInit_t DisplayPcFbcInitializeTemplate(Action<FbcCfbInit_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FbcCfbInit_t(action, 418, 199, "DisplayPcFbc", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private FbcPlaneConfig_t DisplayPcFbcProgramTemplate(Action<FbcPlaneConfig_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FbcPlaneConfig_t(action, 419, 199, "DisplayPcFbc", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private GheTriggerParams_t DisplayPcGheAllParamTemplate(Action<GheTriggerParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GheTriggerParams_t(action, 424, 202, "DisplayPcGhe", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private GheRestrictions_t DisplayPcGheAssociateTemplate(Action<GheRestrictions_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GheRestrictions_t(action, 422, 202, "DisplayPcGhe", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private GheEventHandler_t DisplayPcGheEventHandlerTemplate(Action<GheEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GheEventHandler_t(action, 423, 202, "DisplayPcGhe", Guid.Empty, 64, "EventHandler", ProviderGuid, ProviderName );
        }
        static private GheInfo_t DisplayPcGheInfoTemplate(Action<GheInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GheInfo_t(action, 425, 202, "DisplayPcGhe", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private GheAlgorithm_t DisplayPcGheLiveStateTemplate(Action<GheAlgorithm_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GheAlgorithm_t(action, 426, 202, "DisplayPcGhe", Guid.Empty, 19, "LiveState", ProviderGuid, ProviderName );
        }
        static private DisplayPcFeaturePolicy_t DisplayPcInitInfoTemplate(Action<DisplayPcFeaturePolicy_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcFeaturePolicy_t(action, 402, 53, "DisplayPcInit", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayPcPolicyTable_t DisplayPcInitInitializeTemplate(Action<DisplayPcPolicyTable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcPolicyTable_t(action, 257, 53, "DisplayPcInit", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private DisplayPcLfpDetails_t DisplayPcInitSystemTemplate(Action<DisplayPcLfpDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcLfpDetails_t(action, 256, 53, "DisplayPcInit", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private LaceApplyIeData_t DisplayPcLACEApplyTemplate(Action<LaceApplyIeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceApplyIeData_t(action, 158, 57, "DisplayPcLACE", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEApplyFinishTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 156, 57, "DisplayPcLACE", Guid.Empty, 66, "ApplyFinish", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEApplyStartTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 155, 57, "DisplayPcLACE", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private LaceClientEventHandler_t DisplayPcLACEClientTemplate(Action<LaceClientEventHandler_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceClientEventHandler_t(action, 160, 57, "DisplayPcLACE", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private LaceControlData_t DisplayPcLACEDisableTemplate(Action<LaceControlData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceControlData_t(action, 152, 57, "DisplayPcLACE", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private LaceControlData_t DisplayPcLACEEnableTemplate(Action<LaceControlData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceControlData_t(action, 151, 57, "DisplayPcLACE", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private PcEventNotificationData_t DisplayPcLACEExternalTemplate(Action<PcEventNotificationData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcEventNotificationData_t(action, 159, 57, "DisplayPcLACE", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private Lace_Restriction_t DisplayPcLACEInfoTemplate(Action<Lace_Restriction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Lace_Restriction_t(action, 391, 57, "DisplayPcLACE", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LaceHistogramReadData_t DisplayPcLACEReadTemplate(Action<LaceHistogramReadData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LaceHistogramReadData_t(action, 157, 57, "DisplayPcLACE", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEStartTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 153, 57, "DisplayPcLACE", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcLACEStopTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 154, 57, "DisplayPcLACE", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Lace_Operations_t DisplayPcLACEWarningTemplate(Action<Lace_Operations_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Lace_Operations_t(action, 390, 57, "DisplayPcLACE", Guid.Empty, 24, "Warning", ProviderGuid, ProviderName );
        }
        static private PcRegValueFullPathDword_t DisplayPcLACEWriteTemplate(Action<PcRegValueFullPathDword_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcRegValueFullPathDword_t(action, 161, 57, "DisplayPcLACE", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private PsrPrEvents_t DisplayPcLobfInfoTemplate(Action<PsrPrEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrEvents_t(action, 457, 222, "DisplayPcLobf", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LobfRestrictionInfo_t DisplayPcLobfInfo458Template(Action<LobfRestrictionInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LobfRestrictionInfo_t(action, 458, 222, "DisplayPcLobf", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayPcLRR_t DisplayPcLRRInfoTemplate(Action<DisplayPcLRR_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPcLRR_t(action, 311, 130, "DisplayPcLRR", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorApplyFinishTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 109, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 66, "ApplyFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorApplyStartTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 108, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorInitializeTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 103, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorProgramFinishTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 111, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 68, "ProgramFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorProgramAdjustData_t DisplayPcPhaseCoordinatorProgramStartTemplate(Action<PhaseCoordinatorProgramAdjustData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorProgramAdjustData_t(action, 110, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 67, "ProgramStart", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorResetTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 106, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 58, "Reset", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorSetupDpstPhasing_t DisplayPcPhaseCoordinatorSetupTemplate(Action<PhaseCoordinatorSetupDpstPhasing_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorSetupDpstPhasing_t(action, 112, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 55, "Setup", ProviderGuid, ProviderName );
        }
        static private SmoothenDpstTemporalLutData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyTemplate(Action<SmoothenDpstTemporalLutData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SmoothenDpstTemporalLutData_t(action, 330, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyFinishTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 327, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 66, "ApplyFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyStartTemplate(Action<PhaseCoordinatorContextData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_t(action, 326, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 65, "ApplyStart", ProviderGuid, ProviderName );
        }
        static private SmoothenBlcTemporalData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalAssociateTemplate(Action<SmoothenBlcTemporalData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SmoothenBlcTemporalData_t(action, 362, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 62, "Associate", ProviderGuid, ProviderName );
        }
        static private DpstIirFilterCoefficientData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalCalculateTemplate(Action<DpstIirFilterCoefficientData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstIirFilterCoefficientData_t(action, 329, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private SmoothenDpstTemporalData_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalInfoTemplate(Action<SmoothenDpstTemporalData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SmoothenDpstTemporalData_t(action, 328, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorContextData_7_x_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramFinishTemplate(Action<PhaseCoordinatorContextData_7_x_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorContextData_7_x_t(action, 325, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 68, "ProgramFinish", ProviderGuid, ProviderName );
        }
        static private PhaseCoordinatorProgramAdjustData_7_x_t DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramStartTemplate(Action<PhaseCoordinatorProgramAdjustData_7_x_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PhaseCoordinatorProgramAdjustData_7_x_t(action, 324, 143, "DisplayPcPhaseCoordinatorSmoothenDpstTemporal", Guid.Empty, 67, "ProgramStart", ProviderGuid, ProviderName );
        }
        static private PcPhaseCoordinatorDpsMamStartTimer_t DisplayPcPhaseCoordinatorStartTemplate(Action<PcPhaseCoordinatorDpsMamStartTimer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcPhaseCoordinatorDpsMamStartTimer_t(action, 104, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcPhaseCoordinatorStopTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 105, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PcTimePoint_t DisplayPcPhaseCoordinatorWorkItemTemplate(Action<PcTimePoint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcTimePoint_t(action, 107, 48, "DisplayPcPhaseCoordinator", Guid.Empty, 61, "WorkItem", ProviderGuid, ProviderName );
        }
        static private PsrPrClientEvent_t DisplayPcPsrPrClientTemplate(Action<PsrPrClientEvent_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrClientEvent_t(action, 288, 46, "DisplayPcPsrPr", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private PsrPrStatus_t DisplayPcPsrPrDisableTemplate(Action<PsrPrStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrStatus_t(action, 244, 46, "DisplayPcPsrPr", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private PsrPrStatus_t DisplayPcPsrPrEnableTemplate(Action<PsrPrStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrStatus_t(action, 243, 46, "DisplayPcPsrPr", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private Sfsu_Dpst_t DisplayPcPsrPrInfoTemplate(Action<Sfsu_Dpst_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Sfsu_Dpst_t(action, 341, 46, "DisplayPcPsrPr", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PsrRestrictionsInfo_t DisplayPcPsrPrInfo351Template(Action<PsrRestrictionsInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrRestrictionsInfo_t(action, 351, 46, "DisplayPcPsrPr", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PsrSwEventRestrictions_t DisplayPcPsrPrInfo407Template(Action<PsrSwEventRestrictions_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrSwEventRestrictions_t(action, 407, 46, "DisplayPcPsrPr", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Psr2SdpTransTimeData_t DisplayPcPsrPrInfo430Template(Action<Psr2SdpTransTimeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Psr2SdpTransTimeData_t(action, 430, 46, "DisplayPcPsrPr", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PsrPrStaticData_t DisplayPcPsrPrInitializeTemplate(Action<PsrPrStaticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrStaticData_t(action, 242, 46, "DisplayPcPsrPr", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private PsrPrEvents_t DisplayPcPsrPrProcessTemplate(Action<PsrPrEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PsrPrEvents_t(action, 245, 46, "DisplayPcPsrPr", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private PwrConsUserPolicyData_t DisplayPcUserPreferenceTemplate(Action<PwrConsUserPolicyData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PwrConsUserPolicyData_t(action, 143, 54, "DisplayPcUserPreference", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DisplayPwrConsD0D3StateChangeData_t DisplayPcUtilInfoTemplate(Action<DisplayPwrConsD0D3StateChangeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayPwrConsD0D3StateChangeData_t(action, 162, 55, "DisplayPcUtil", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PcPowerPlanRegValueData_t DisplayPcUtilReadTemplate(Action<PcPowerPlanRegValueData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcPowerPlanRegValueData_t(action, 144, 55, "DisplayPcUtil", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DpstPipeHistogram_t DisplayPcXPSTApplyTemplate(Action<DpstPipeHistogram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPipeHistogram_t(action, 282, 201, "DisplayPcXPST", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private DpstProbabilityOfFullScreenSolidColorData_t DisplayPcXPSTCalculateTemplate(Action<DpstProbabilityOfFullScreenSolidColorData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstProbabilityOfFullScreenSolidColorData_t(action, 367, 201, "DisplayPcXPST", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private DpstGuardBandThreshold_t DisplayPcXPSTCapabilityTemplate(Action<DpstGuardBandThreshold_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstGuardBandThreshold_t(action, 381, 201, "DisplayPcXPST", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private DpstClientEvents_t DisplayPcXPSTClientTemplate(Action<DpstClientEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstClientEvents_t(action, 278, 201, "DisplayPcXPST", Guid.Empty, 59, "Client", ProviderGuid, ProviderName );
        }
        static private DpstPipeHistogram_t DisplayPcXPSTDisableTemplate(Action<DpstPipeHistogram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPipeHistogram_t(action, 284, 201, "DisplayPcXPST", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private DpstPipeHistogram_t DisplayPcXPSTEnableTemplate(Action<DpstPipeHistogram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPipeHistogram_t(action, 283, 201, "DisplayPcXPST", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private DpstExternalEvents_t DisplayPcXPSTExternalTemplate(Action<DpstExternalEvents_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstExternalEvents_t(action, 277, 201, "DisplayPcXPST", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private DpstPipeState_t DisplayPcXPSTProcessTemplate(Action<DpstPipeState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPipeState_t(action, 382, 201, "DisplayPcXPST", Guid.Empty, 57, "Process", ProviderGuid, ProviderName );
        }
        static private DpstProgramDIET_t DisplayPcXPSTProgramTemplate(Action<DpstProgramDIET_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstProgramDIET_t(action, 281, 201, "DisplayPcXPST", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private DpstHistogram_t DisplayPcXPSTReadTemplate(Action<DpstHistogram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstHistogram_t(action, 276, 201, "DisplayPcXPST", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private DpstPipeHistogram_t DisplayPcXPSTResetTemplate(Action<DpstPipeHistogram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstPipeHistogram_t(action, 285, 201, "DisplayPcXPST", Guid.Empty, 58, "Reset", ProviderGuid, ProviderName );
        }
        static private DpstWarningData_t DisplayPcXPSTWarningTemplate(Action<DpstWarningData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpstWarningData_t(action, 380, 201, "DisplayPcXPST", Guid.Empty, 24, "Warning", ProviderGuid, ProviderName );
        }
        static private XpstWorkItemCallback_t DisplayPcXPSTWorkItemTemplate(Action<XpstWorkItemCallback_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new XpstWorkItemCallback_t(action, 279, 201, "DisplayPcXPST", Guid.Empty, 61, "WorkItem", ProviderGuid, ProviderName );
        }
        static private XpstGuardband_t DisplayPcXPSTWriteTemplate(Action<XpstGuardband_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new XpstGuardband_t(action, 455, 201, "DisplayPcXPST", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private DisplayShiftEscapeInfo_t DisplayShiftEscapeInfoTemplate(Action<DisplayShiftEscapeInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayShiftEscapeInfo_t(action, 346, 153, "DisplayShiftEscape", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayShiftGetStatus_t DisplayShiftGetStatusInfoTemplate(Action<DisplayShiftGetStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayShiftGetStatus_t(action, 347, 154, "DisplayShiftGetStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayShiftSupportInfo_t DisplayShiftSupportInfoTemplate(Action<DisplayShiftSupportInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayShiftSupportInfo_t(action, 348, 155, "DisplayShiftSupport", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayShiftSwitchStatusInfo_t DisplayShiftSwitchStatusInfoTemplate(Action<DisplayShiftSwitchStatusInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayShiftSwitchStatusInfo_t(action, 349, 156, "DisplayShiftSwitchStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DisplayShiftSwPsrInfo_t DisplayShiftSwPsrInfoTemplate(Action<DisplayShiftSwPsrInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DisplayShiftSwPsrInfo_t(action, 350, 157, "DisplayShiftSwPsr", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Dsb_Idle_t DisplayStateBufferInfoTemplate(Action<Dsb_Idle_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Dsb_Idle_t(action, 221, 94, "DisplayStateBuffer", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Dsb_Prepare_t DisplayStateBufferInitializeTemplate(Action<Dsb_Prepare_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Dsb_Prepare_t(action, 222, 94, "DisplayStateBuffer", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private Dsb_Execute_t DisplayStateBufferProgramTemplate(Action<Dsb_Execute_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Dsb_Execute_t(action, 223, 94, "DisplayStateBuffer", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private TestData_t DisplayTestTemplate(Action<TestData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TestData_t(action, 20, 5, "DisplayTest", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private UR_Info_t DispPipeUnderRunTemplate(Action<UR_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Info_t(action, 14, 26, "DispPipeUnderRun", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private UR_Dbuf_Data_t DispPipeUnderRunDBufTemplate(Action<UR_Dbuf_Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Dbuf_Data_t(action, 16, 26, "DispPipeUnderRun", Guid.Empty, 27, "DBuf", ProviderGuid, ProviderName );
        }
        static private UR_Dbuf_Data_t DispPipeUnderRunGen10LegacyTemplate(Action<UR_Dbuf_Data_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Dbuf_Data_t(action, 19, 26, "DispPipeUnderRun", Guid.Empty, 31, "Gen10Legacy", ProviderGuid, ProviderName );
        }
        static private UR_PlaneData_t DispPipeUnderRunPlaneTemplate(Action<UR_PlaneData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_PlaneData_t(action, 15, 26, "DispPipeUnderRun", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private UR_Watermark_Data DispPipeUnderRunSystemTemplate(Action<UR_Watermark_Data> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UR_Watermark_Data(action, 18, 26, "DispPipeUnderRun", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private Pipe_t DmcErrorInterruptTemplate(Action<Pipe_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Pipe_t(action, 441, 204, "DmcErrorInterrupt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DmcErrorInterrupt_t DmcErrorInterruptErrorTemplate(Action<DmcErrorInterrupt_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DmcErrorInterrupt_t(action, 431, 204, "DmcErrorInterrupt", Guid.Empty, 23, "Error", ProviderGuid, ProviderName );
        }
        static private DpVscSdp_Info_t DP_VscSdp_InfoDPTemplate(Action<DpVscSdp_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpVscSdp_Info_t(action, 452, 219, "DP_VscSdp_Info", Guid.Empty, 74, "DP", ProviderGuid, ProviderName );
        }
        static private DPCurrentMstState_t DPCurrentMstStateInfoTemplate(Action<DPCurrentMstState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DPCurrentMstState_t(action, 219, 92, "DPCurrentMstState", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DPDiagnosticData_t DPDiagnosticEventsDPTemplate(Action<DPDiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DPDiagnosticData_t(action, 230, 99, "DPDiagnosticEvents", Guid.Empty, 74, "DP", ProviderGuid, ProviderName );
        }
        static private DpMst_DPRXCaps_pipe_t DpMstPathDPRXInfoDPTemplate(Action<DpMst_DPRXCaps_pipe_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpMst_DPRXCaps_pipe_t(action, 453, 220, "DpMstPathDPRXInfo", Guid.Empty, 74, "DP", ProviderGuid, ProviderName );
        }
        static private MstPathDscInfo_t DpMstPathDscInfoTemplate(Action<MstPathDscInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MstPathDscInfo_t(action, 237, 106, "DpMstPathDscInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SidebandMsg_t DPSidebandMsgReceiveTemplate(Action<SidebandMsg_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SidebandMsg_t(action, 11, 24, "DPSidebandMsg", Guid.Empty, 240, "Receive", ProviderGuid, ProviderName );
        }
        static private SidebandMsg_t DPSidebandMsgSendTemplate(Action<SidebandMsg_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SidebandMsg_t(action, 10, 24, "DPSidebandMsg", Guid.Empty, 9, "Send", ProviderGuid, ProviderName );
        }
        static private DramBwDetails_t DramBwDetailInfoTemplate(Action<DramBwDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DramBwDetails_t(action, 203, 86, "DramBwDetail", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DramMemDetail_t DramMemDetailInfoTemplate(Action<DramMemDetail_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DramMemDetail_t(action, 216, 90, "DramMemDetail", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DriverBuild_t DriverBuildTemplate(Action<DriverBuild_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DriverBuild_t(action, 181, 65, "DriverBuild", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DscSuDetails_t DscSuParamsInfoTemplate(Action<DscSuDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DscSuDetails_t(action, 398, 189, "DscSuParams", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DsmInfo_t DsmTransactionInfoTemplate(Action<DsmInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DsmInfo_t(action, 338, 148, "DsmTransaction", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DumpSetTimingData_t DumpSetTimingDataInfoTemplate(Action<DumpSetTimingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DumpSetTimingData_t(action, 287, 115, "DumpSetTimingData", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private DynamicCdClockDvfs_t DynamicCdClockTemplate(Action<DynamicCdClockDvfs_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DynamicCdClockDvfs_t(action, 167, 59, "DynamicCdClock", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PowerHandlerGetOptimalCdClock_t DynamicCdClockCalculateTemplate(Action<PowerHandlerGetOptimalCdClock_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PowerHandlerGetOptimalCdClock_t(action, 165, 59, "DynamicCdClock", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private PowerHandlerChangeCdClock_t DynamicCdClockProgramTemplate(Action<PowerHandlerChangeCdClock_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PowerHandlerChangeCdClock_t(action, 166, 59, "DynamicCdClock", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private EdidData_t EdidDataInfoTemplate(Action<EdidData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EdidData_t(action, 420, 200, "EdidDataInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EdidMgmtEsc_t EdidMgmtEscTemplate(Action<EdidMgmtEsc_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EdidMgmtEsc_t(action, 368, 171, "EdidMgmtEsc", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Display_Caps_t EdidMgmtPersistenceRestoreRxCapsTemplate(Action<Display_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Display_Caps_t(action, 369, 172, "EdidMgmtPersistenceRestore", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private TConCaps_t EdpHDRColorTemplate(Action<TConCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TConCaps_t(action, 198, 76, "EdpHDR", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private EscapeData_t EscapeTemplate(Action<EscapeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EscapeData_t(action, 74, 38, "Escape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EscapeStructDump_t Escape190Template(Action<EscapeStructDump_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EscapeStructDump_t(action, 190, 38, "Escape", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EvalAcpiMethod_t EvalAcpiMethodTemplate(Action<EvalAcpiMethod_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EvalAcpiMethod_t(action, 337, 149, "EvalAcpiMethod", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EcvmPivot_t EvcmPivotTypeInfoTemplate(Action<EcvmPivot_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EcvmPivot_t(action, 292, 120, "EvcmPivotType", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FBCChangeOnVBI_t FBCChangeOnVBITemplate(Action<FBCChangeOnVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FBCChangeOnVBI_t(action, 323, 142, "FBCChangeOnVBI", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FBCPlaneRestriction_t FBCRestrictionInfoTemplate(Action<FBCPlaneRestriction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FBCPlaneRestriction_t(action, 312, 131, "FBCRestriction", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FBCStateChange_t FbcStateChangeInfoTemplate(Action<FBCStateChange_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FBCStateChange_t(action, 315, 133, "FbcStateChange", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FeatureControl_t FeatureControlTemplate(Action<FeatureControl_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FeatureControl_t(action, 84, 44, "FeatureControl", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FeatureStatus_t FeatureStatusTemplate(Action<FeatureStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FeatureStatus_t(action, 59, 47, "FeatureStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FecEnable_t FecSinkEnableInfoTemplate(Action<FecEnable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FecEnable_t(action, 236, 105, "FecSinkEnableInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FecEnable_t FecSourceEnableInfoTemplate(Action<FecEnable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FecEnable_t(action, 235, 104, "FecSourceEnableInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FlipAllParam_t FlipAllParamTemplate(Action<FlipAllParam_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAllParam_t(action, 71, 37, "Flip", Guid.Empty, 52, "AllParam", ProviderGuid, ProviderName );
        }
        static private FlipAddress_t FlipAsyncTemplate(Action<FlipAddress_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAddress_t(action, 73, 37, "Flip", Guid.Empty, 54, "Async", ProviderGuid, ProviderName );
        }
        static private ColorPixelDescPlane_t FlipColorTemplate(Action<ColorPixelDescPlane_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ColorPixelDescPlane_t(action, 239, 37, "Flip", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private FlipDoneInterrupt_t FlipDoneInterruptPipeATemplate(Action<FlipDoneInterrupt_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipDoneInterrupt_t(action, 184, 68, "FlipDoneInterrupt", Guid.Empty, 45, "PipeA", ProviderGuid, ProviderName );
        }
        static private FlipDoneInterrupt_t FlipDoneInterruptPipeBTemplate(Action<FlipDoneInterrupt_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipDoneInterrupt_t(action, 185, 68, "FlipDoneInterrupt", Guid.Empty, 46, "PipeB", ProviderGuid, ProviderName );
        }
        static private FlipDoneInterrupt_t FlipDoneInterruptPipeCTemplate(Action<FlipDoneInterrupt_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipDoneInterrupt_t(action, 186, 68, "FlipDoneInterrupt", Guid.Empty, 47, "PipeC", ProviderGuid, ProviderName );
        }
        static private FlipDoneInterrupt_t FlipDoneInterruptPipeDTemplate(Action<FlipDoneInterrupt_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipDoneInterrupt_t(action, 187, 68, "FlipDoneInterrupt", Guid.Empty, 48, "PipeD", ProviderGuid, ProviderName );
        }
        static private FlipProcessDetails_t FlipProcessDetailsInfoTemplate(Action<FlipProcessDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipProcessDetails_t(action, 393, 184, "FlipProcessDetails", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FlipQExecuted_t FlipQExecutedInfoTemplate(Action<FlipQExecuted_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQExecuted_t(action, 433, 206, "FlipQExecuted", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FlipQInsertStart_t FlipQInsertStartTemplate(Action<FlipQInsertStart_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQInsertStart_t(action, 442, 213, "FlipQInsert", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private FlipQInsertStop_t FlipQInsertStopTemplate(Action<FlipQInsertStop_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQInsertStop_t(action, 443, 213, "FlipQInsert", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private FlipQMode_t FlipQModeTemplate(Action<FlipQMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQMode_t(action, 121, 182, "FlipQMode", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FlipQueueSwitch_t FlipQSwToHwSwitchTemplate(Action<FlipQueueSwitch_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQueueSwitch_t(action, 87, 35, "FlipQSwToHwSwitch", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FlipAddress_t FlipSyncTemplate(Action<FlipAddress_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipAddress_t(action, 72, 37, "Flip", Guid.Empty, 53, "Sync", ProviderGuid, ProviderName );
        }
        static private FmsModesetStatus_t FmsStatusInfoTemplate(Action<FmsModesetStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FmsModesetStatus_t(action, 309, 128, "FmsStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private FunctionTrack_t FunctionTrackTemplate(Action<FunctionTrack_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FunctionTrack_t(action, 2, 2, "FunctionTrack", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Gmbus_t GmbusReadTemplate(Action<Gmbus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Gmbus_t(action, 435, 208, "Gmbus", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private GTT_Fault_t GttPageFaultInfoTemplate(Action<GTT_Fault_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GTT_Fault_t(action, 336, 147, "GttPageFault", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PortEncryption_t HDCPEncryptionTemplate(Action<PortEncryption_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PortEncryption_t(action, 37, 31, "HDCP", Guid.Empty, 38, "Encryption", ProviderGuid, ProviderName );
        }
        static private GscInterfaceInfo_t HdcpGscInterfaceInfoTemplate(Action<GscInterfaceInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GscInterfaceInfo_t(action, 211, 85, "HdcpGscInterface", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private HdcpPortAccess_t HdcpPortAccessTemplate(Action<HdcpPortAccess_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdcpPortAccess_t(action, 81, 42, "HdcpPortAccess", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private HdcpStateInfo_t HdcpProtocolStateInfoTemplate(Action<HdcpStateInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdcpStateInfo_t(action, 210, 84, "HdcpProtocolState", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private TranscoderEncryption_t HDCPTranscoderTemplate(Action<TranscoderEncryption_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TranscoderEncryption_t(action, 38, 31, "HDCP", Guid.Empty, 39, "Transcoder", ProviderGuid, ProviderName );
        }
        static private HDMIDiagnosticData_t HDMIDiagnosticEventsHDMITemplate(Action<HDMIDiagnosticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HDMIDiagnosticData_t(action, 318, 136, "HDMIDiagnosticEvents", Guid.Empty, 77, "HDMI", ProviderGuid, ProviderName );
        }
        static private HdmiModeInfo_t HdmiModeInfoHDMITemplate(Action<HdmiModeInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdmiModeInfo_t(action, 298, 124, "HdmiModeInfo", Guid.Empty, 77, "HDMI", ProviderGuid, ProviderName );
        }
        static private HdmiRx_Caps_t HdmiSinkHDMITemplate(Action<HdmiRx_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdmiRx_Caps_t(action, 297, 123, "HdmiSink", Guid.Empty, 77, "HDMI", ProviderGuid, ProviderName );
        }
        static private HdrStaticMetadata_t HDRMetadataColorTemplate(Action<HdrStaticMetadata_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdrStaticMetadata_t(action, 196, 75, "HDRMetadata", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private DpHdrMetadata_v2_t HDRMetadataDPTemplate(Action<DpHdrMetadata_v2_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DpHdrMetadata_v2_t(action, 451, 75, "HDRMetadata", Guid.Empty, 74, "DP", ProviderGuid, ProviderName );
        }
        static private HdrStaticMetadata_t HDRMetadataExternalTemplate(Action<HdrStaticMetadata_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdrStaticMetadata_t(action, 197, 75, "HDRMetadata", Guid.Empty, 60, "External", ProviderGuid, ProviderName );
        }
        static private HdrStaticMetadata_t HDRMetadataPlaneTemplate(Action<HdrStaticMetadata_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HdrStaticMetadata_t(action, 195, 75, "HDRMetadata", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private HPD_t HotPlugDetectTemplate(Action<HPD_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HPD_t(action, 9, 16, "HotPlugDetect", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private HPDLiveState_t HotPlugDetectLiveStateTemplate(Action<HPDLiveState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HPDLiveState_t(action, 12, 16, "HotPlugDetect", Guid.Empty, 19, "LiveState", ProviderGuid, ProviderName );
        }
        static private SPI_t HotPlugDetectSPITemplate(Action<SPI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SPI_t(action, 8, 16, "HotPlugDetect", Guid.Empty, 18, "SPI", ProviderGuid, ProviderName );
        }
        static private HotplugTypeC_t HotPlugDetectTypeCTemplate(Action<HotplugTypeC_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HotplugTypeC_t(action, 170, 16, "HotPlugDetect", Guid.Empty, 69, "TypeC", ProviderGuid, ProviderName );
        }
        static private HPDScdc_t HPDScdcInfoTemplate(Action<HPDScdc_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HPDScdc_t(action, 353, 160, "HPDScdc", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LayerToPlaneMap_t HwPlaneToLayerIndexTemplate(Action<LayerToPlaneMap_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LayerToPlaneMap_t(action, 227, 97, "HwPlaneToLayerIndex", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Aux_t I2CAuxReadTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 6, 23, "I2CAux", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private Aux_t I2CAuxWriteTemplate(Action<Aux_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Aux_t(action, 7, 23, "I2CAux", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private I2C_t I2CReadTemplate(Action<I2C_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new I2C_t(action, 29, 14, "I2C", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private I2C_t I2CWriteTemplate(Action<I2C_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new I2C_t(action, 30, 14, "I2C", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private RrSwitch_t IdleVpbSeamlessRrSwitchInfoTemplate(Action<RrSwitch_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitch_t(action, 332, 144, "IdleVpbSeamlessRrSwitch", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Intel_ArcSync_t IntelArcSyncProfileInfoTemplate(Action<Intel_ArcSync_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Intel_ArcSync_t(action, 361, 168, "IntelArcSyncProfile", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private IntelArcSyncOverride_t IntelArcSyncProfileInitializeTemplate(Action<IntelArcSyncOverride_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IntelArcSyncOverride_t(action, 401, 168, "IntelArcSyncProfile", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private InterruptRepart_t InterruptRepartTemplate(Action<InterruptRepart_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InterruptRepart_t(action, 164, 58, "InterruptRepart", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private IsDramBwSupported_t IsDramBwSupportedInfoTemplate(Action<IsDramBwSupported_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsDramBwSupported_t(action, 204, 80, "IsDramBwSupported", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LastConnectionEvent_t LastConnectionEventTemplate(Action<LastConnectionEvent_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LastConnectionEvent_t(action, 379, 178, "LastConnectionEvent", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private LPFPanelIndex_t LFPPanelIndexInfoTemplate(Action<LPFPanelIndex_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LPFPanelIndex_t(action, 226, 96, "LFPPanelIndex", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LidStateNotification_t LidStateInfoTemplate(Action<LidStateNotification_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LidStateNotification_t(action, 342, 150, "LidState", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private LinkTrainingInfo_t LinkTrainingDPTemplate(Action<LinkTrainingInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LinkTrainingInfo_t(action, 454, 21, "LinkTraining", Guid.Empty, 74, "DP", ProviderGuid, ProviderName );
        }
        static private LiveAddress_t LiveAddressTemplate(Action<LiveAddress_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LiveAddress_t(action, 58, 56, "LiveAddress", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private MdmEvent_t MdmInfoTemplate(Action<MdmEvent_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MdmEvent_t(action, 444, 214, "Mdm", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiLinkReadyStatus_t MipiDsi_LinkReadyStatusInfoTemplate(Action<MipiDsiLinkReadyStatus_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiLinkReadyStatus_t(action, 255, 112, "MipiDsi_LinkReadyStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiPacketTransaction_t MipiDsi_LongPacketReadTemplate(Action<MipiDsiPacketTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPacketTransaction_t(action, 252, 110, "MipiDsi_LongPacket", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private MipiDsiPacketTransaction_t MipiDsi_LongPacketWriteTemplate(Action<MipiDsiPacketTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPacketTransaction_t(action, 253, 110, "MipiDsi_LongPacket", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private MipiDsiPacketTransaction_t MipiDsi_ShortPacketReadTemplate(Action<MipiDsiPacketTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPacketTransaction_t(action, 250, 109, "MipiDsi_ShortPacket", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private MipiDsiPacketTransaction_t MipiDsi_ShortPacketWriteTemplate(Action<MipiDsiPacketTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPacketTransaction_t(action, 251, 109, "MipiDsi_ShortPacket", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private MipiDsiDataRateInHz_t MipiDsiDataRateInHzInfoTemplate(Action<MipiDsiDataRateInHz_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiDataRateInHz_t(action, 359, 166, "MipiDsiDataRateInHz", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiHorizontalTimingInfo_t MipiDsiHorizontalTimingInfoTemplate(Action<MipiDsiHorizontalTimingInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiHorizontalTimingInfo_t(action, 360, 167, "MipiDsiHorizontalTimingInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiPacketInfo_t MipiDsiPacketInfoTemplate(Action<MipiDsiPacketInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPacketInfo_t(action, 357, 164, "MipiDsiPacketInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiPanelInfo_t MipiDsiPanelInfoTemplate(Action<MipiDsiPanelInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPanelInfo_t(action, 254, 111, "MipiDsiPanel", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MipiDsiPayloadCreditsSentInfo_t MipiDsiPayloadCreditsSentInfoTemplate(Action<MipiDsiPayloadCreditsSentInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MipiDsiPayloadCreditsSentInfo_t(action, 358, 165, "MipiDsiPayloadCreditsSentInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipPlaneDetails_t Mpo3FlipInfoTemplate(Action<Mpo3FlipPlaneDetails_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipPlaneDetails_t(action, 179, 41, "Mpo3Flip", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipPlaneIn_t Mpo3FlipPlaneTemplate(Action<Mpo3FlipPlaneIn_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipPlaneIn_t(action, 80, 41, "Mpo3Flip", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipIn_t Mpo3FlipStartTemplate(Action<Mpo3FlipIn_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipIn_t(action, 78, 41, "Mpo3Flip", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private Mpo3FlipOut_t Mpo3FlipStopTemplate(Action<Mpo3FlipOut_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Mpo3FlipOut_t(action, 79, 41, "Mpo3Flip", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private MsgBusTransaction_t MsgBusTransactionReadTemplate(Action<MsgBusTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MsgBusTransaction_t(action, 333, 145, "MsgBusTransaction", Guid.Empty, 10, "Read", ProviderGuid, ProviderName );
        }
        static private MsgBusTransaction_t MsgBusTransactionWriteTemplate(Action<MsgBusTransaction_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MsgBusTransaction_t(action, 334, 145, "MsgBusTransaction", Guid.Empty, 11, "Write", ProviderGuid, ProviderName );
        }
        static private MstPathPanelReplayInfo_t MstPanelReplayPathInfoDpBranchDevInfoTemplate(Action<MstPathPanelReplayInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MstPathPanelReplayInfo_t(action, 447, 215, "MstPanelReplayPathInfo", Guid.Empty, 80, "DpBranchDevInfo", ProviderGuid, ProviderName );
        }
        static private MstPeerDeviceInfo_t MstPeerDeviceInfoDpBranchDevInfoTemplate(Action<MstPeerDeviceInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MstPeerDeviceInfo_t(action, 450, 218, "MstPeerDeviceInfo", Guid.Empty, 80, "DpBranchDevInfo", ProviderGuid, ProviderName );
        }
        static private MstPathVrrInfo_t MstVrrPathInfoDpBranchDevInfoTemplate(Action<MstPathVrrInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MstPathVrrInfo_t(action, 448, 216, "MstVrrPathInfo", Guid.Empty, 80, "DpBranchDevInfo", ProviderGuid, ProviderName );
        }
        static private NotifyPeriodicFrame_t NotifyPeriodicFrameTemplate(Action<NotifyPeriodicFrame_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyPeriodicFrame_t(action, 55, 139, "NotifyPeriodicFrame", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private NotifyVSyncMpo2_Info_t NotifyVSyncTemplate(Action<NotifyVSyncMpo2_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVSyncMpo2_Info_t(action, 76, 40, "NotifyVSync", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private NotifyVsyncLogBuffer_Plane_Ext_t NotifyVsyncLogBufferExtensionTemplate(Action<NotifyVsyncLogBuffer_Plane_Ext_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVsyncLogBuffer_Plane_Ext_t(action, 305, 126, "NotifyVsyncLogBuffer", Guid.Empty, 5, "Extension", ProviderGuid, ProviderName );
        }
        static private NotifyVsyncLogBuffer_Plane_t NotifyVsyncLogBufferPlaneTemplate(Action<NotifyVsyncLogBuffer_Plane_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVsyncLogBuffer_Plane_t(action, 304, 126, "NotifyVsyncLogBuffer", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private NotifyVSyncMpo2_Layer_t NotifyVSyncPlaneTemplate(Action<NotifyVSyncMpo2_Layer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NotifyVSyncMpo2_Layer_t(action, 77, 40, "NotifyVSync", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private OsGiven1dLut_t OneDLUT_DataColorTemplate(Action<OsGiven1dLut_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OsGiven1dLut_t(action, 240, 74, "OneDLUT_Data", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private OneDLUT_Param_t OneDLUT_ParamsColorTemplate(Action<OneDLUT_Param_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OneDLUT_Param_t(action, 192, 70, "OneDLUT_Params", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private Opregion_t OpregionTemplate(Action<Opregion_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Opregion_t(action, 70, 36, "Opregion", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private VbtData_t Opregion182Template(Action<VbtData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VbtData_t(action, 182, 36, "Opregion", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private OSOutputColorInfo_t OSOutputColorInfoColorTemplate(Action<OSOutputColorInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OSOutputColorInfo_t(action, 194, 73, "OSOutputColorInfo", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private Pps_t PanelPowerSeqTemplate(Action<Pps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Pps_t(action, 75, 39, "PanelPowerSeq", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PcFeatureSpecificGenericRestrictions_t PcFeatureGenericRestrictionsTemplate(Action<PcFeatureSpecificGenericRestrictions_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PcFeatureSpecificGenericRestrictions_t(action, 408, 192, "PcFeatureGenericRestrictions", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PconDiagnsticData_t PCONDiagnosticDataEventsInfoTemplate(Action<PconDiagnsticData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PconDiagnsticData_t(action, 322, 141, "PCONDiagnosticDataEvents", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 22, 27, "PerfProfiler", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerStartTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 21, 27, "PerfProfiler", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private ProfilingData_t PerfProfilerStopTemplate(Action<ProfilingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProfilingData_t(action, 23, 27, "PerfProfiler", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private PeriodicFrame_t PeriodicFrameStartTemplate(Action<PeriodicFrame_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PeriodicFrame_t(action, 56, 140, "PeriodicFrame", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private PeriodicFrame_t PeriodicFrameStopTemplate(Action<PeriodicFrame_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PeriodicFrame_t(action, 57, 140, "PeriodicFrame", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private CSC_Params_t PipeCSCColorTemplate(Action<CSC_Params_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CSC_Params_t(action, 191, 71, "PipeCSC", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private Pipe_t PipeDmcFlipQInterruptTemplate(Action<Pipe_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Pipe_t(action, 406, 191, "PipeDmcFlipQInterrupt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CSC_Params_t PipeOCSCColorTemplate(Action<CSC_Params_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CSC_Params_t(action, 193, 72, "PipeOCSC", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private PMDemandRequest_t PMDemandRequestTemplate(Action<PMDemandRequest_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PMDemandRequest_t(action, 389, 181, "PMDemandRequest", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PortAdjDriveSetting_t PortAdjDriveSettingInfoTemplate(Action<PortAdjDriveSetting_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PortAdjDriveSetting_t(action, 319, 137, "PortAdjDriveSetting", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private PowerWellRequest_t PowerWellRequestTemplate(Action<PowerWellRequest_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PowerWellRequest_t(action, 224, 95, "PowerWellRequest", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PowerWellFail_t PowerWellRequestFailTemplate(Action<PowerWellFail_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PowerWellFail_t(action, 225, 95, "PowerWellRequest", Guid.Empty, 12, "Fail", ProviderGuid, ProviderName );
        }
        static private ProcessConfigTableEntry_t ProcessConfigTableEntryTemplate(Action<ProcessConfigTableEntry_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProcessConfigTableEntry_t(action, 405, 190, "ProcessConfigTableEntry", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ProgramLegacyOverlay_t ProgramLegacyOverlayTemplate(Action<ProgramLegacyOverlay_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProgramLegacyOverlay_t(action, 202, 79, "ProgramLegacyOverlay", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Psr2SdpTransTimeData_t Psr2SdpTransmissionInfoTemplate(Action<Psr2SdpTransTimeData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Psr2SdpTransTimeData_t(action, 335, 146, "Psr2SdpTransmissionInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private QueryInterface_t QueryInterfaceInfoTemplate(Action<QueryInterface_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new QueryInterface_t(action, 228, 98, "QueryInterfaceInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MonitorMode_t RecommendMonitorModesInfoTemplate(Action<MonitorMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MonitorMode_t(action, 293, 121, "RecommendMonitorModes", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private MonitorMode_t RecommendMonitorModesReceiveTemplate(Action<MonitorMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MonitorMode_t(action, 294, 121, "RecommendMonitorModes", Guid.Empty, 22, "Receive", ProviderGuid, ProviderName );
        }
        static private RmCaps_t ResourceManagerInitializeTemplate(Action<RmCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RmCaps_t(action, 82, 43, "ResourceManager", Guid.Empty, 15, "Initialize", ProviderGuid, ProviderName );
        }
        static private RestrictSagv_t RestrictSagvPointsInfoTemplate(Action<RestrictSagv_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RestrictSagv_t(action, 212, 87, "RestrictSagvPoints", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private RRCappedMode_t RRCappedModeInfoTemplate(Action<RRCappedMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RRCappedMode_t(action, 241, 108, "RRCappedMode", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private RrSwitchState_t RrSwitchTemplate(Action<RrSwitchState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitchState_t(action, 371, 174, "RrSwitch", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private RrSwitchCapsCommon_t RrSwitchCapsCommonRxCapsTemplate(Action<RrSwitchCapsCommon_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitchCapsCommon_t(action, 354, 161, "RrSwitchCapsCommon", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private RrSwitchCapsFixed_t RrSwitchCapsFixedRxCapsTemplate(Action<RrSwitchCapsFixed_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitchCapsFixed_t(action, 356, 163, "RrSwitchCapsFixed", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private RrSwitchCapsVariable_t RrSwitchCapsVariableRxCapsTemplate(Action<RrSwitchCapsVariable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitchCapsVariable_t(action, 355, 162, "RrSwitchCapsVariable", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private RrSwitchProgram_t RrSwitchProgramTemplate(Action<RrSwitchProgram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RrSwitchProgram_t(action, 372, 174, "RrSwitch", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private SagvState_t SagvStatusTemplate(Action<SagvState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SagvState_t(action, 189, 69, "SagvStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ScalerForFlip_t ScalerTemplate(Action<ScalerForFlip_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ScalerForFlip_t(action, 320, 138, "Scaler", Guid.Empty, 29, "Scaler", ProviderGuid, ProviderName );
        }
        static private ScalerEnableDisable_t ScalerPlaneTemplate(Action<ScalerEnableDisable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ScalerEnableDisable_t(action, 321, 138, "Scaler", Guid.Empty, 28, "Plane", ProviderGuid, ProviderName );
        }
        static private Pipe_t ScanlineInterruptTemplate(Action<Pipe_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Pipe_t(action, 54, 34, "ScanlineInterrupt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SelectiveFetchInfo_t SelectiveFetchInfoTemplate(Action<SelectiveFetchInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SelectiveFetchInfo_t(action, 209, 83, "SelectiveFetch", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SFSUSelectiveFetchProgram_t SelectiveFetchProgramInfoTemplate(Action<SFSUSelectiveFetchProgram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SFSUSelectiveFetchProgram_t(action, 383, 179, "SelectiveFetchProgram", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SelectiveFetchRestrictionInfo_t SelectiveFetchRestrictionTemplate(Action<SelectiveFetchRestrictionInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SelectiveFetchRestrictionInfo_t(action, 456, 221, "SelectiveFetchRestriction", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SFSUSelectiveUpdateProgram_t SelectiveUpdateProgramInfoTemplate(Action<SFSUSelectiveUpdateProgram_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SFSUSelectiveUpdateProgram_t(action, 384, 180, "SelectiveUpdateProgram", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private AVI_InfoFrameData SendInfoFrameTemplate(Action<AVI_InfoFrameData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AVI_InfoFrameData(action, 231, 100, "SendInfoFrame", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private FlipQLogBuffer SetFlipQLogBufferInfoTemplate(Action<FlipQLogBuffer> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FlipQLogBuffer(action, 365, 170, "SetFlipQLogBuffer", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SetInterruptTargetPresentId_t SetInterruptTargetPresentIdTemplate(Action<SetInterruptTargetPresentId_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SetInterruptTargetPresentId_t(action, 86, 9, "SetInterruptTargetPresentId", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ProtocolSetTimingData_t SetTimingTemplate(Action<ProtocolSetTimingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProtocolSetTimingData_t(action, 45, 32, "SetTiming", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ColorPixelDescPipe_t SetTimingColorTemplate(Action<ColorPixelDescPipe_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ColorPixelDescPipe_t(action, 46, 32, "SetTiming", Guid.Empty, 44, "Color", ProviderGuid, ProviderName );
        }
        static private OsSetTiming_t SetTimingOsStateTemplate(Action<OsSetTiming_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OsSetTiming_t(action, 180, 32, "SetTiming", Guid.Empty, 71, "OsState", ProviderGuid, ProviderName );
        }
        static private SfSuConfigParams_t SfsuConfigParamsInfoTemplate(Action<SfSuConfigParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SfSuConfigParams_t(action, 396, 187, "SfsuConfigParams", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SharedGfxPowerComponentFxState_t SharedGfxPowerComponentFxStateInfoTemplate(Action<SharedGfxPowerComponentFxState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SharedGfxPowerComponentFxState_t(action, 316, 134, "SharedGfxPowerComponentFxState", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private SharpnessCoefficients_t SharpnessFeatureCoefficientsStopTemplate(Action<SharpnessCoefficients_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SharpnessCoefficients_t(action, 413, 197, "SharpnessFeatureCoefficients", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private SharpnessData_t SharpnessParamsTemplate(Action<SharpnessData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SharpnessData_t(action, 410, 194, "SharpnessParams", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SpeedframeBuffer_t SpeedFrameBufferMgmtTemplate(Action<SpeedframeBuffer_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SpeedframeBuffer_t(action, 374, 176, "SpeedFrameBufferMgmt", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private StructureDump_t StructureDumpTemplate(Action<StructureDump_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StructureDump_t(action, 3, 3, "StructureDump", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SystemInfo_t SystemDetailsInfoTemplate(Action<SystemInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SystemInfo_t(action, 83, 29, "SystemDetails", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private JointTargetProp_t SystemDetailsJointTargetTemplate(Action<JointTargetProp_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new JointTargetProp_t(action, 178, 29, "SystemDetails", Guid.Empty, 72, "JointTarget", ProviderGuid, ProviderName );
        }
        static private Target_Mode_t SystemDetailsModeTemplate(Action<Target_Mode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Mode_t(action, 62, 29, "SystemDetails", Guid.Empty, 36, "Mode", ProviderGuid, ProviderName );
        }
        static private Display_Caps_t SystemDetailsRxCapsTemplate(Action<Display_Caps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Display_Caps_t(action, 64, 29, "SystemDetails", Guid.Empty, 37, "RxCaps", ProviderGuid, ProviderName );
        }
        static private Target_Info_t SystemDetailsSinkTemplate(Action<Target_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Info_t(action, 61, 29, "SystemDetails", Guid.Empty, 50, "Sink", ProviderGuid, ProviderName );
        }
        static private PlatformCaps_t SystemDetailsSystemTemplate(Action<PlatformCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PlatformCaps_t(action, 303, 29, "SystemDetails", Guid.Empty, 30, "System", ProviderGuid, ProviderName );
        }
        static private CcdSetTimingData_t SystemDetailsTranscoderTemplate(Action<CcdSetTimingData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CcdSetTimingData_t(action, 60, 29, "SystemDetails", Guid.Empty, 39, "Transcoder", ProviderGuid, ProviderName );
        }
        static private Target_Info_t TargetTemplate(Action<Target_Info_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Info_t(action, 31, 28, "Target", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private MonitorLinkInfo_t TargetCapabilityTemplate(Action<MonitorLinkInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MonitorLinkInfo_t(action, 388, 28, "Target", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private TargetConnectionState_t TargetConnectionDriverStateTemplate(Action<TargetConnectionState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TargetConnectionState_t(action, 176, 63, "TargetConnection", Guid.Empty, 70, "DriverState", ProviderGuid, ProviderName );
        }
        static private JointTargetProp_t TargetConnectionJointTargetTemplate(Action<JointTargetProp_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new JointTargetProp_t(action, 174, 63, "TargetConnection", Guid.Empty, 72, "JointTarget", ProviderGuid, ProviderName );
        }
        static private TargetConnectionChange_t TargetConnectionOsStateTemplate(Action<TargetConnectionChange_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TargetConnectionChange_t(action, 175, 63, "TargetConnection", Guid.Empty, 71, "OsState", ProviderGuid, ProviderName );
        }
        static private TargetDetect_t TargetDetectInfoTemplate(Action<TargetDetect_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TargetDetect_t(action, 177, 62, "TargetDetect", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private Target_Edid TargetEDIDTemplate(Action<Target_Edid> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Edid(action, 32, 28, "Target", Guid.Empty, 35, "EDID", ProviderGuid, ProviderName );
        }
        static private Target_Mode_t TargetModeTemplate(Action<Target_Mode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Target_Mode_t(action, 33, 28, "Target", Guid.Empty, 36, "Mode", ProviderGuid, ProviderName );
        }
        static private TargetModePrunedInfo_t TargetModePruningInfoTemplate(Action<TargetModePrunedInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TargetModePrunedInfo_t(action, 220, 93, "TargetModePruning", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private ElpCaps_t TconElpCapabilityTemplate(Action<ElpCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ElpCaps_t(action, 344, 151, "TconElp", Guid.Empty, 20, "Capability", ProviderGuid, ProviderName );
        }
        static private ThreeDLUT_t ThreeDLUTInfoTemplate(Action<ThreeDLUT_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreeDLUT_t(action, 397, 188, "ThreeDLUT", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private AuxlessAlpm_t TimingParametersInfoTemplate(Action<AuxlessAlpm_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuxlessAlpm_t(action, 438, 211, "TimingParameters", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private AuxlessAlpm_t TimingParametersInfo439Template(Action<AuxlessAlpm_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AuxlessAlpm_t(action, 439, 211, "TimingParameters", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private OsSourceMode_t TranslatedOsModeSourceTemplate(Action<OsSourceMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OsSourceMode_t(action, 291, 119, "TranslatedOsMode", Guid.Empty, 75, "Source", ProviderGuid, ProviderName );
        }
        static private OsTargetMode_t TranslatedOsModeTargetTemplate(Action<OsTargetMode_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OsTargetMode_t(action, 290, 119, "TranslatedOsMode", Guid.Empty, 76, "Target", ProviderGuid, ProviderName );
        }
        static private TranslatedOsPath_t TranslatedOsPathInfoTemplate(Action<TranslatedOsPath_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TranslatedOsPath_t(action, 289, 118, "TranslatedOsPath", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private UncoreInitStart_t UncoreInitStatusStartTemplate(Action<UncoreInitStart_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UncoreInitStart_t(action, 295, 122, "UncoreInitStatus", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private UncoreInitStop_t UncoreInitStatusStopTemplate(Action<UncoreInitStop_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new UncoreInitStop_t(action, 296, 122, "UncoreInitStatus", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private Usb4DynamicBWMgmtDetectionCaps_t Usb4DynamicBWMgmtCapsDetectionInfoTemplate(Action<Usb4DynamicBWMgmtDetectionCaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Usb4DynamicBWMgmtDetectionCaps_t(action, 411, 195, "Usb4DynamicBWMgmtCapsDetectionInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Usb4DynamicBWMgmtSPICaps_t Usb4DynamicBWMgmtCapsSpiInfoTemplate(Action<Usb4DynamicBWMgmtSPICaps_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Usb4DynamicBWMgmtSPICaps_t(action, 412, 196, "Usb4DynamicBWMgmtCapsSpiInfo", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private VbiOptimizationState_t VbiOptimizationStateTemplate(Action<VbiOptimizationState_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VbiOptimizationState_t(action, 394, 185, "VbiOptimizationState", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeATemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 47, 33, "VBlankInterrupt", Guid.Empty, 45, "PipeA", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeBTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 48, 33, "VBlankInterrupt", Guid.Empty, 46, "PipeB", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeCTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 49, 33, "VBlankInterrupt", Guid.Empty, 47, "PipeC", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeDTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 50, 33, "VBlankInterrupt", Guid.Empty, 48, "PipeD", ProviderGuid, ProviderName );
        }
        static private PipeVBI_t VBlankInterruptPipeVirtualTemplate(Action<PipeVBI_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PipeVBI_t(action, 51, 33, "VBlankInterrupt", Guid.Empty, 49, "PipeVirtual", ProviderGuid, ProviderName );
        }
        static private VbtBlkParse_t VbtBlkParseTemplate(Action<VbtBlkParse_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VbtBlkParse_t(action, 310, 129, "VbtBlkParse", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private VdscPPSParams_t VdscPPSParamsInfoTemplate(Action<VdscPPSParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VdscPPSParams_t(action, 234, 103, "VdscPPSParams", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VdscSinkEnable_t VdscSinkEnableInfoTemplate(Action<VdscSinkEnable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VdscSinkEnable_t(action, 233, 102, "VdscSinkEnableInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VdscSourceEnable_t VdscSourceEnableInfoTemplate(Action<VdscSourceEnable_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VdscSourceEnable_t(action, 232, 101, "VdscSourceEnableInfo", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceBalance_t VrrAdaptiveBalanceTemplate(Action<VrrAdaptiveBalanceBalance_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceBalance_t(action, 299, 125, "VrrAdaptiveBalance", Guid.Empty, 78, "Balance", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceApply_t VrrAdaptiveBalanceApplyTemplate(Action<VrrAdaptiveBalanceApply_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceApply_t(action, 300, 125, "VrrAdaptiveBalance", Guid.Empty, 56, "Apply", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceCalculate_t VrrAdaptiveBalanceCalculateTemplate(Action<VrrAdaptiveBalanceCalculate_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceCalculate_t(action, 302, 125, "VrrAdaptiveBalance", Guid.Empty, 63, "Calculate", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceHwCounterMismatch_t VrrAdaptiveBalanceHwCounterMismatchTemplate(Action<VrrAdaptiveBalanceHwCounterMismatch_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceHwCounterMismatch_t(action, 301, 125, "VrrAdaptiveBalance", Guid.Empty, 79, "HwCounterMismatch", ProviderGuid, ProviderName );
        }
        static private VrrCertificationParams_t VrrCertificationInfoTemplate(Action<VrrCertificationParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrCertificationParams_t(action, 352, 159, "VrrCertification", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceConfig_t VrrDcBalancingAlgoConfigInfoTemplate(Action<VrrAdaptiveBalanceConfig_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceConfig_t(action, 436, 209, "VrrDcBalancingAlgoConfig", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VrrAdaptiveBalanceCalculateV2_t VrrDcBalancingAlgoOutputInfoTemplate(Action<VrrAdaptiveBalanceCalculateV2_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrAdaptiveBalanceCalculateV2_t(action, 437, 210, "VrrDcBalancingAlgoOutput", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VrrDisableParams_t VrrEnableDisableStatusDisableTemplate(Action<VrrDisableParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrDisableParams_t(action, 208, 82, "VrrEnableDisableStatus", Guid.Empty, 13, "Disable", ProviderGuid, ProviderName );
        }
        static private VrrEnableParams_t VrrEnableDisableStatusEnableTemplate(Action<VrrEnableParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrEnableParams_t(action, 207, 82, "VrrEnableDisableStatus", Guid.Empty, 14, "Enable", ProviderGuid, ProviderName );
        }
        static private VrrStatusParams_t VrrEnableDisableStatusInfoTemplate(Action<VrrStatusParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrStatusParams_t(action, 339, 82, "VrrEnableDisableStatus", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private VrrUpdateParams_t VrrEnableDisableStatusProgramTemplate(Action<VrrUpdateParams_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrUpdateParams_t(action, 340, 82, "VrrEnableDisableStatus", Guid.Empty, 17, "Program", ProviderGuid, ProviderName );
        }
        static private VrrWorking_t VrrWorkingStatusTemplate(Action<VrrWorking_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrWorking_t(action, 205, 81, "VrrWorkingStatus", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private VrrWorking_t VrrWorkingStatusFailTemplate(Action<VrrWorking_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VrrWorking_t(action, 206, 81, "VrrWorkingStatus", Guid.Empty, 12, "Fail", ProviderGuid, ProviderName );
        }
        static private VsyncTimeoutInfo_t VsyncTimeoutTemplate(Action<VsyncTimeoutInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new VsyncTimeoutInfo_t(action, 392, 183, "VsyncTimeout", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WakelockInfo_t WakelockTemplate(Action<WakelockInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WakelockInfo_t(action, 449, 217, "Wakelock", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkCursorTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 42, 18, "WaterMark", Guid.Empty, 41, "Cursor", ProviderGuid, ProviderName );
        }
        static private WaterMarkInfo_t WaterMarkInfoTemplate(Action<WaterMarkInfo_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkInfo_t(action, 40, 18, "WaterMark", Guid.Empty, 25, "Info", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkLPWMTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 43, 18, "WaterMark", Guid.Empty, 42, "LPWM", ProviderGuid, ProviderName );
        }
        static private WaterMarkData_t WaterMarkPlaneYTemplate(Action<WaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WaterMarkData_t(action, 188, 18, "WaterMark", Guid.Empty, 73, "PlaneY", ProviderGuid, ProviderName );
        }
        static private TransWaterMarkData_t WaterMarkTransWMTemplate(Action<TransWaterMarkData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new TransWaterMarkData_t(action, 44, 18, "WaterMark", Guid.Empty, 43, "TransWM", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[405];
                templates[0] = DebugPrintTemplate(null);
                templates[1] = FunctionTrackTemplate(null);
                templates[2] = StructureDumpTemplate(null);
                templates[3] = AuxDPCDReadTemplate(null);
                templates[4] = AuxDPCDWriteTemplate(null);
                templates[5] = I2CAuxReadTemplate(null);
                templates[6] = I2CAuxWriteTemplate(null);
                templates[7] = AuxTransactionSendTemplate(null);
                templates[8] = AuxTransactionReceiveTemplate(null);
                templates[9] = AuxTransactionAuxChannelToPortMapTemplate(null);
                templates[10] = HotPlugDetectSPITemplate(null);
                templates[11] = HotPlugDetectTemplate(null);
                templates[12] = DPSidebandMsgSendTemplate(null);
                templates[13] = DPSidebandMsgReceiveTemplate(null);
                templates[14] = HotPlugDetectLiveStateTemplate(null);
                templates[15] = DispPipeUnderRunTemplate(null);
                templates[16] = DispPipeUnderRunPlaneTemplate(null);
                templates[17] = DispPipeUnderRunDBufTemplate(null);
                templates[18] = DispPipeUnderRunSystemTemplate(null);
                templates[19] = DispPipeUnderRunGen10LegacyTemplate(null);
                templates[20] = DisplayTestTemplate(null);
                templates[21] = PerfProfilerStartTemplate(null);
                templates[22] = PerfProfilerTemplate(null);
                templates[23] = PerfProfilerStopTemplate(null);
                templates[24] = DisplayDiagnosticsMayDayTemplate(null);
                templates[25] = DisplayDiagnosticsErrorTemplate(null);
                templates[26] = DisplayDiagnosticsWarningTemplate(null);
                templates[27] = DisplayDiagnosticsInfoTemplate(null);
                templates[28] = DisplayDiagnosticsTemplate(null);
                templates[29] = I2CReadTemplate(null);
                templates[30] = I2CWriteTemplate(null);
                templates[31] = TargetTemplate(null);
                templates[32] = TargetEDIDTemplate(null);
                templates[33] = TargetModeTemplate(null);
                templates[34] = DisplayCapsTemplate(null);
                templates[35] = DisplayCapsEDIDTemplate(null);
                templates[36] = DisplayCapsRxCapsTemplate(null);
                templates[37] = HDCPEncryptionTemplate(null);
                templates[38] = HDCPTranscoderTemplate(null);
                templates[39] = DBufTemplate(null);
                templates[40] = WaterMarkInfoTemplate(null);
                templates[41] = WaterMarkCursorTemplate(null);
                templates[42] = WaterMarkLPWMTemplate(null);
                templates[43] = WaterMarkTransWMTemplate(null);
                templates[44] = SetTimingTemplate(null);
                templates[45] = SetTimingColorTemplate(null);
                templates[46] = VBlankInterruptPipeATemplate(null);
                templates[47] = VBlankInterruptPipeBTemplate(null);
                templates[48] = VBlankInterruptPipeCTemplate(null);
                templates[49] = VBlankInterruptPipeDTemplate(null);
                templates[50] = VBlankInterruptPipeVirtualTemplate(null);
                templates[51] = ScanlineInterruptTemplate(null);
                templates[52] = NotifyPeriodicFrameTemplate(null);
                templates[53] = PeriodicFrameStartTemplate(null);
                templates[54] = PeriodicFrameStopTemplate(null);
                templates[55] = LiveAddressTemplate(null);
                templates[56] = FeatureStatusTemplate(null);
                templates[57] = SystemDetailsTranscoderTemplate(null);
                templates[58] = SystemDetailsSinkTemplate(null);
                templates[59] = SystemDetailsModeTemplate(null);
                templates[60] = SystemDetailsRxCapsTemplate(null);
                templates[61] = OpregionTemplate(null);
                templates[62] = FlipAllParamTemplate(null);
                templates[63] = FlipSyncTemplate(null);
                templates[64] = FlipAsyncTemplate(null);
                templates[65] = FlipQSwToHwSwitchTemplate(null);
                templates[66] = EscapeTemplate(null);
                templates[67] = PanelPowerSeqTemplate(null);
                templates[68] = NotifyVSyncTemplate(null);
                templates[69] = NotifyVSyncPlaneTemplate(null);
                templates[70] = Mpo3FlipStartTemplate(null);
                templates[71] = Mpo3FlipStopTemplate(null);
                templates[72] = Mpo3FlipPlaneTemplate(null);
                templates[73] = HdcpPortAccessTemplate(null);
                templates[74] = ResourceManagerInitializeTemplate(null);
                templates[75] = SystemDetailsInfoTemplate(null);
                templates[76] = FeatureControlTemplate(null);
                templates[77] = CancelFlipTemplate(null);
                templates[78] = SetInterruptTargetPresentIdTemplate(null);
                templates[79] = DisplayPcEventNotificationReceiveTemplate(null);
                templates[80] = DisplayPcEventNotificationProcessTemplate(null);
                templates[81] = DisplayPcPhaseCoordinatorInitializeTemplate(null);
                templates[82] = DisplayPcPhaseCoordinatorStartTemplate(null);
                templates[83] = DisplayPcPhaseCoordinatorStopTemplate(null);
                templates[84] = DisplayPcPhaseCoordinatorResetTemplate(null);
                templates[85] = DisplayPcPhaseCoordinatorWorkItemTemplate(null);
                templates[86] = DisplayPcPhaseCoordinatorApplyStartTemplate(null);
                templates[87] = DisplayPcPhaseCoordinatorApplyFinishTemplate(null);
                templates[88] = DisplayPcPhaseCoordinatorProgramStartTemplate(null);
                templates[89] = DisplayPcPhaseCoordinatorProgramFinishTemplate(null);
                templates[90] = DisplayPcPhaseCoordinatorSetupTemplate(null);
                templates[91] = DisplayPcDPSInfoTemplate(null);
                templates[92] = DisplayPcDPSSetupTemplate(null);
                templates[93] = DisplayPcDPSEventHandlerTemplate(null);
                templates[94] = DisplayPcDPSReadTemplate(null);
                templates[95] = DisplayPcDPSWriteTemplate(null);
                templates[96] = FlipQModeTemplate(null);
                templates[97] = DisplayPcEscapeTemplate(null);
                templates[98] = DisplayPcUserPreferenceTemplate(null);
                templates[99] = DisplayPcUtilReadTemplate(null);
                templates[100] = DisplayPcLACEEnableTemplate(null);
                templates[101] = DisplayPcLACEDisableTemplate(null);
                templates[102] = DisplayPcLACEStartTemplate(null);
                templates[103] = DisplayPcLACEStopTemplate(null);
                templates[104] = DisplayPcLACEApplyStartTemplate(null);
                templates[105] = DisplayPcLACEApplyFinishTemplate(null);
                templates[106] = DisplayPcLACEReadTemplate(null);
                templates[107] = DisplayPcLACEApplyTemplate(null);
                templates[108] = DisplayPcLACEExternalTemplate(null);
                templates[109] = DisplayPcLACEClientTemplate(null);
                templates[110] = DisplayPcLACEWriteTemplate(null);
                templates[111] = DisplayPcUtilInfoTemplate(null);
                templates[112] = DisplayPcDPSTEventHandlerTemplate(null);
                templates[113] = InterruptRepartTemplate(null);
                templates[114] = DynamicCdClockCalculateTemplate(null);
                templates[115] = DynamicCdClockProgramTemplate(null);
                templates[116] = DynamicCdClockTemplate(null);
                templates[117] = DisplayPcEventNotificationExternalTemplate(null);
                templates[118] = DisplayPcEventInfoTemplate(null);
                templates[119] = HotPlugDetectTypeCTemplate(null);
                templates[120] = CollageEscapeTemplate(null);
                templates[121] = CollageEscapeInfoTemplate(null);
                templates[122] = CollageEscapeErrorTemplate(null);
                templates[123] = TargetConnectionJointTargetTemplate(null);
                templates[124] = TargetConnectionOsStateTemplate(null);
                templates[125] = TargetConnectionDriverStateTemplate(null);
                templates[126] = TargetDetectInfoTemplate(null);
                templates[127] = SystemDetailsJointTargetTemplate(null);
                templates[128] = Mpo3FlipInfoTemplate(null);
                templates[129] = SetTimingOsStateTemplate(null);
                templates[130] = DriverBuildTemplate(null);
                templates[131] = OpregionTemplate(null);
                templates[132] = DisplayAssertTemplate(null);
                templates[133] = FlipDoneInterruptPipeATemplate(null);
                templates[134] = FlipDoneInterruptPipeBTemplate(null);
                templates[135] = FlipDoneInterruptPipeCTemplate(null);
                templates[136] = FlipDoneInterruptPipeDTemplate(null);
                templates[137] = WaterMarkPlaneYTemplate(null);
                templates[138] = SagvStatusTemplate(null);
                templates[139] = EscapeTemplate(null);
                templates[140] = PipeCSCColorTemplate(null);
                templates[141] = OneDLUT_ParamsColorTemplate(null);
                templates[142] = PipeOCSCColorTemplate(null);
                templates[143] = OSOutputColorInfoColorTemplate(null);
                templates[144] = HDRMetadataPlaneTemplate(null);
                templates[145] = HDRMetadataColorTemplate(null);
                templates[146] = HDRMetadataExternalTemplate(null);
                templates[147] = EdpHDRColorTemplate(null);
                templates[148] = DisplayCapsColorTemplate(null);
                templates[149] = CheckMpoPlaneInfoTemplate(null);
                templates[150] = CheckLegacyOverlaySupportTemplate(null);
                templates[151] = ProgramLegacyOverlayTemplate(null);
                templates[152] = DramBwDetailInfoTemplate(null);
                templates[153] = IsDramBwSupportedInfoTemplate(null);
                templates[154] = VrrWorkingStatusTemplate(null);
                templates[155] = VrrWorkingStatusFailTemplate(null);
                templates[156] = VrrEnableDisableStatusEnableTemplate(null);
                templates[157] = VrrEnableDisableStatusDisableTemplate(null);
                templates[158] = SelectiveFetchInfoTemplate(null);
                templates[159] = HdcpProtocolStateInfoTemplate(null);
                templates[160] = HdcpGscInterfaceInfoTemplate(null);
                templates[161] = RestrictSagvPointsInfoTemplate(null);
                templates[162] = DBufCursorTemplate(null);
                templates[163] = AcpiEventStatusTemplate(null);
                templates[164] = DisplayCapsDPCDsRxCapsTemplate(null);
                templates[165] = DramMemDetailInfoTemplate(null);
                templates[166] = DCStateInfoTemplate(null);
                templates[167] = ColorSetAdjustedColorimetryColorTemplate(null);
                templates[168] = DPCurrentMstStateInfoTemplate(null);
                templates[169] = TargetModePruningInfoTemplate(null);
                templates[170] = DisplayStateBufferInfoTemplate(null);
                templates[171] = DisplayStateBufferInitializeTemplate(null);
                templates[172] = DisplayStateBufferProgramTemplate(null);
                templates[173] = PowerWellRequestTemplate(null);
                templates[174] = PowerWellRequestFailTemplate(null);
                templates[175] = LFPPanelIndexInfoTemplate(null);
                templates[176] = HwPlaneToLayerIndexTemplate(null);
                templates[177] = QueryInterfaceInfoTemplate(null);
                templates[178] = DPDiagnosticEventsDPTemplate(null);
                templates[179] = SendInfoFrameTemplate(null);
                templates[180] = VdscSourceEnableInfoTemplate(null);
                templates[181] = VdscSinkEnableInfoTemplate(null);
                templates[182] = VdscPPSParamsInfoTemplate(null);
                templates[183] = FecSourceEnableInfoTemplate(null);
                templates[184] = FecSinkEnableInfoTemplate(null);
                templates[185] = DpMstPathDscInfoTemplate(null);
                templates[186] = CSCDataColorTemplate(null);
                templates[187] = FlipColorTemplate(null);
                templates[188] = OneDLUT_DataColorTemplate(null);
                templates[189] = RRCappedModeInfoTemplate(null);
                templates[190] = DisplayPcPsrPrInitializeTemplate(null);
                templates[191] = DisplayPcPsrPrEnableTemplate(null);
                templates[192] = DisplayPcPsrPrDisableTemplate(null);
                templates[193] = DisplayPcPsrPrProcessTemplate(null);
                templates[194] = DisplayPcDPSInitializeTemplate(null);
                templates[195] = DisplayPcDPSProcessTemplate(null);
                templates[196] = DisplayPcDPSProgramTemplate(null);
                templates[197] = DisplayPcEventLiveStateTemplate(null);
                templates[198] = MipiDsi_ShortPacketReadTemplate(null);
                templates[199] = MipiDsi_ShortPacketWriteTemplate(null);
                templates[200] = MipiDsi_LongPacketReadTemplate(null);
                templates[201] = MipiDsi_LongPacketWriteTemplate(null);
                templates[202] = MipiDsiPanelInfoTemplate(null);
                templates[203] = MipiDsi_LinkReadyStatusInfoTemplate(null);
                templates[204] = DisplayPcInitSystemTemplate(null);
                templates[205] = DisplayPcInitInitializeTemplate(null);
                templates[206] = DisplayBrightness2WriteTemplate(null);
                templates[207] = DisplayBrightness2ReadTemplate(null);
                templates[208] = DisplayBrightness2CapabilityTemplate(null);
                templates[209] = DisplayBrightness2EnableTemplate(null);
                templates[210] = DisplayBrightness2ProcessTemplate(null);
                templates[211] = DisplayBrightness2ClientTemplate(null);
                templates[212] = DisplayBrightness2AssociateTemplate(null);
                templates[213] = DisplayBrightness2ApplyTemplate(null);
                templates[214] = DisplayBrightness2CalculateTemplate(null);
                templates[215] = DisplayBrightness3WriteTemplate(null);
                templates[216] = DisplayBrightness3ReadTemplate(null);
                templates[217] = DisplayBrightness3CapabilityTemplate(null);
                templates[218] = DisplayBrightness3ProcessTemplate(null);
                templates[219] = DisplayBrightness3AssociateTemplate(null);
                templates[220] = DisplayBrightness3ProgramTemplate(null);
                templates[221] = DisplayBrightness2ProgramTemplate(null);
                templates[222] = DisplayBrightness2SetupTemplate(null);
                templates[223] = DisplayBrightness2InitializeTemplate(null);
                templates[224] = DisplayPcXPSTReadTemplate(null);
                templates[225] = DisplayPcXPSTExternalTemplate(null);
                templates[226] = DisplayPcXPSTClientTemplate(null);
                templates[227] = DisplayPcXPSTWorkItemTemplate(null);
                templates[228] = DisplayPcDPSTLiveStateTemplate(null);
                templates[229] = DisplayPcXPSTProgramTemplate(null);
                templates[230] = DisplayPcXPSTApplyTemplate(null);
                templates[231] = DisplayPcXPSTEnableTemplate(null);
                templates[232] = DisplayPcXPSTDisableTemplate(null);
                templates[233] = DisplayPcXPSTResetTemplate(null);
                templates[234] = DisplayPcDPSTInitializeTemplate(null);
                templates[235] = DumpSetTimingDataInfoTemplate(null);
                templates[236] = DisplayPcPsrPrClientTemplate(null);
                templates[237] = TranslatedOsPathInfoTemplate(null);
                templates[238] = TranslatedOsModeTargetTemplate(null);
                templates[239] = TranslatedOsModeSourceTemplate(null);
                templates[240] = EvcmPivotTypeInfoTemplate(null);
                templates[241] = RecommendMonitorModesInfoTemplate(null);
                templates[242] = RecommendMonitorModesReceiveTemplate(null);
                templates[243] = UncoreInitStatusStartTemplate(null);
                templates[244] = UncoreInitStatusStopTemplate(null);
                templates[245] = HdmiSinkHDMITemplate(null);
                templates[246] = HdmiModeInfoHDMITemplate(null);
                templates[247] = VrrAdaptiveBalanceTemplate(null);
                templates[248] = VrrAdaptiveBalanceApplyTemplate(null);
                templates[249] = VrrAdaptiveBalanceHwCounterMismatchTemplate(null);
                templates[250] = VrrAdaptiveBalanceCalculateTemplate(null);
                templates[251] = SystemDetailsSystemTemplate(null);
                templates[252] = NotifyVsyncLogBufferPlaneTemplate(null);
                templates[253] = NotifyVsyncLogBufferExtensionTemplate(null);
                templates[254] = AsyncFlipLineInfoTemplate(null);
                templates[255] = DisplayBrightness3RxCapsTemplate(null);
                templates[256] = DisplayBrightness3InfoTemplate(null);
                templates[257] = FmsStatusInfoTemplate(null);
                templates[258] = VbtBlkParseTemplate(null);
                templates[259] = DisplayPcLRRInfoTemplate(null);
                templates[260] = FBCRestrictionInfoTemplate(null);
                templates[261] = FbcStateChangeInfoTemplate(null);
                templates[262] = SharedGfxPowerComponentFxStateInfoTemplate(null);
                templates[263] = DisplayAudioLinkHandlingEventInfoTemplate(null);
                templates[264] = HDMIDiagnosticEventsHDMITemplate(null);
                templates[265] = PortAdjDriveSettingInfoTemplate(null);
                templates[266] = ScalerTemplate(null);
                templates[267] = ScalerPlaneTemplate(null);
                templates[268] = PCONDiagnosticDataEventsInfoTemplate(null);
                templates[269] = FBCChangeOnVBITemplate(null);
                templates[270] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramStartTemplate(null);
                templates[271] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalProgramFinishTemplate(null);
                templates[272] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyStartTemplate(null);
                templates[273] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyFinishTemplate(null);
                templates[274] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalInfoTemplate(null);
                templates[275] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalCalculateTemplate(null);
                templates[276] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalApplyTemplate(null);
                templates[277] = DisplayPcDPSTInfoTemplate(null);
                templates[278] = IdleVpbSeamlessRrSwitchInfoTemplate(null);
                templates[279] = MsgBusTransactionReadTemplate(null);
                templates[280] = MsgBusTransactionWriteTemplate(null);
                templates[281] = Psr2SdpTransmissionInfoTemplate(null);
                templates[282] = GttPageFaultInfoTemplate(null);
                templates[283] = EvalAcpiMethodTemplate(null);
                templates[284] = DsmTransactionInfoTemplate(null);
                templates[285] = VrrEnableDisableStatusInfoTemplate(null);
                templates[286] = VrrEnableDisableStatusProgramTemplate(null);
                templates[287] = DisplayPcPsrPrInfoTemplate(null);
                templates[288] = LidStateInfoTemplate(null);
                templates[289] = DisplayPcBrtOptimizationInfoTemplate(null);
                templates[290] = TconElpCapabilityTemplate(null);
                templates[291] = DGLUTParamsInfoTemplate(null);
                templates[292] = DisplayShiftEscapeInfoTemplate(null);
                templates[293] = DisplayShiftGetStatusInfoTemplate(null);
                templates[294] = DisplayShiftSupportInfoTemplate(null);
                templates[295] = DisplayShiftSwitchStatusInfoTemplate(null);
                templates[296] = DisplayShiftSwPsrInfoTemplate(null);
                templates[297] = DisplayPcPsrPrInfoTemplate(null);
                templates[298] = VrrCertificationInfoTemplate(null);
                templates[299] = HPDScdcInfoTemplate(null);
                templates[300] = RrSwitchCapsCommonRxCapsTemplate(null);
                templates[301] = RrSwitchCapsVariableRxCapsTemplate(null);
                templates[302] = RrSwitchCapsFixedRxCapsTemplate(null);
                templates[303] = MipiDsiPacketInfoTemplate(null);
                templates[304] = MipiDsiPayloadCreditsSentInfoTemplate(null);
                templates[305] = MipiDsiDataRateInHzInfoTemplate(null);
                templates[306] = MipiDsiHorizontalTimingInfoTemplate(null);
                templates[307] = IntelArcSyncProfileInfoTemplate(null);
                templates[308] = DisplayPcPhaseCoordinatorSmoothenDpstTemporalAssociateTemplate(null);
                templates[309] = DisplayPcDcStateExternalTemplate(null);
                templates[310] = DisplayPcDcStateClientTemplate(null);
                templates[311] = SetFlipQLogBufferInfoTemplate(null);
                templates[312] = DisplayPcBrtOptimizationAssociateTemplate(null);
                templates[313] = DisplayPcXPSTCalculateTemplate(null);
                templates[314] = EdidMgmtEscTemplate(null);
                templates[315] = EdidMgmtPersistenceRestoreRxCapsTemplate(null);
                templates[316] = Dc6vOrDc3CoParametersProgramTemplate(null);
                templates[317] = RrSwitchTemplate(null);
                templates[318] = RrSwitchProgramTemplate(null);
                templates[319] = ConditionalAssertTemplate(null);
                templates[320] = SpeedFrameBufferMgmtTemplate(null);
                templates[321] = DisplayBrightness2InfoTemplate(null);
                templates[322] = DisplayBrightness2WarningTemplate(null);
                templates[323] = DisplayBrightness2ApplyStartTemplate(null);
                templates[324] = DetectionCheckRequiredInfoTemplate(null);
                templates[325] = LastConnectionEventTemplate(null);
                templates[326] = DisplayPcXPSTWarningTemplate(null);
                templates[327] = DisplayPcXPSTCapabilityTemplate(null);
                templates[328] = DisplayPcXPSTProcessTemplate(null);
                templates[329] = SelectiveFetchProgramInfoTemplate(null);
                templates[330] = SelectiveUpdateProgramInfoTemplate(null);
                templates[331] = DCStateExternalTemplate(null);
                templates[332] = DCStateClientTemplate(null);
                templates[333] = DisplayCapsCapabilityTemplate(null);
                templates[334] = TargetCapabilityTemplate(null);
                templates[335] = PMDemandRequestTemplate(null);
                templates[336] = DisplayPcLACEWarningTemplate(null);
                templates[337] = DisplayPcLACEInfoTemplate(null);
                templates[338] = VsyncTimeoutTemplate(null);
                templates[339] = FlipProcessDetailsInfoTemplate(null);
                templates[340] = VbiOptimizationStateTemplate(null);
                templates[341] = DbufOverlapInfoTemplate(null);
                templates[342] = SfsuConfigParamsInfoTemplate(null);
                templates[343] = ThreeDLUTInfoTemplate(null);
                templates[344] = DscSuParamsInfoTemplate(null);
                templates[345] = DisplayCapsDpBranchDevInfoTemplate(null);
                templates[346] = DisplayCapsDpSinkDevInfoTemplate(null);
                templates[347] = IntelArcSyncProfileInitializeTemplate(null);
                templates[348] = DisplayPcInitInfoTemplate(null);
                templates[349] = DisplayPcDPSTSystemTemplate(null);
                templates[350] = DisplayPcDPSTAllParamTemplate(null);
                templates[351] = ProcessConfigTableEntryTemplate(null);
                templates[352] = PipeDmcFlipQInterruptTemplate(null);
                templates[353] = DisplayPcPsrPrInfoTemplate(null);
                templates[354] = PcFeatureGenericRestrictionsTemplate(null);
                templates[355] = DisplayPcBlcExternalTemplate(null);
                templates[356] = SharpnessParamsTemplate(null);
                templates[357] = Usb4DynamicBWMgmtCapsDetectionInfoTemplate(null);
                templates[358] = Usb4DynamicBWMgmtCapsSpiInfoTemplate(null);
                templates[359] = SharpnessFeatureCoefficientsStopTemplate(null);
                templates[360] = DisplayGenlockInfoTemplate(null);
                templates[361] = DisplayGenlockEnableTemplate(null);
                templates[362] = DisplayGenlockExternalTemplate(null);
                templates[363] = DisplayGenlockTranscoderTemplate(null);
                templates[364] = DisplayPcFbcInitializeTemplate(null);
                templates[365] = DisplayPcFbcProgramTemplate(null);
                templates[366] = EdidDataInfoTemplate(null);
                templates[367] = DisplayBrightness3ColorTemplate(null);
                templates[368] = DisplayPcGheAssociateTemplate(null);
                templates[369] = DisplayPcGheEventHandlerTemplate(null);
                templates[370] = DisplayPcGheAllParamTemplate(null);
                templates[371] = DisplayPcGheInfoTemplate(null);
                templates[372] = DisplayPcGheLiveStateTemplate(null);
                templates[373] = DisplayPcBlcAllParamTemplate(null);
                templates[374] = DisplayPcBrtOptimizationAllParamTemplate(null);
                templates[375] = DisplayPcBrtOptimizationCapabilityTemplate(null);
                templates[376] = DisplayPcPsrPrInfoTemplate(null);
                templates[377] = DmcErrorInterruptErrorTemplate(null);
                templates[378] = CmtgStatusInfoTemplate(null);
                templates[379] = FlipQExecutedInfoTemplate(null);
                templates[380] = BitBashReadTemplate(null);
                templates[381] = GmbusReadTemplate(null);
                templates[382] = VrrDcBalancingAlgoConfigInfoTemplate(null);
                templates[383] = VrrDcBalancingAlgoOutputInfoTemplate(null);
                templates[384] = TimingParametersInfoTemplate(null);
                templates[385] = TimingParametersInfoTemplate(null);
                templates[386] = DisplayCaps_HDR10P_CapsInfoTemplate(null);
                templates[387] = DmcErrorInterruptTemplate(null);
                templates[388] = FlipQInsertStartTemplate(null);
                templates[389] = FlipQInsertStopTemplate(null);
                templates[390] = MdmInfoTemplate(null);
                templates[391] = DisplayPcBlcCapabilityTemplate(null);
                templates[392] = DisplayPcBlcInfoTemplate(null);
                templates[393] = MstPanelReplayPathInfoDpBranchDevInfoTemplate(null);
                templates[394] = MstVrrPathInfoDpBranchDevInfoTemplate(null);
                templates[395] = WakelockTemplate(null);
                templates[396] = MstPeerDeviceInfoDpBranchDevInfoTemplate(null);
                templates[397] = DpMstPathDPRXInfoDPTemplate(null);
                templates[398] = LinkTrainingDPTemplate(null);
                templates[399] = HDRMetadataDPTemplate(null);
                templates[400] = DisplayPcXPSTWriteTemplate(null);
                templates[401] = DP_VscSdp_InfoDPTemplate(null);
                templates[402] = SelectiveFetchRestrictionTemplate(null);
                templates[403] = DisplayPcLobfInfoTemplate(null);
                templates[404] = DisplayPcLobfInfoTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverDisplay
{
    public sealed class AcpiEventStatus_t : TraceEvent
    {
        public DXGK_EVENT_TYPE EventType { get { return (DXGK_EVENT_TYPE)GetInt32At(0); } }
        public uint Event { get { return (uint)GetInt32At(4); } }
        public Address Argument { get { return GetAddressAt(8); } }

        #region Private
        internal AcpiEventStatus_t(Action<AcpiEventStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AcpiEventStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "Event", Event);
             XmlAttribHex(sb, "Argument", Argument);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "Event", "Argument"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return Event;
                case 2:
                    return Argument;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AcpiEventStatus_t> m_target;
        #endregion
    }
    public sealed class AsyncFlipLineCount_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public int Plane { get { return GetByteAt(8); } }
        public uint FLipLine { get { return (uint)GetInt32At(9); } }

        #region Private
        internal AsyncFlipLineCount_t(Action<AsyncFlipLineCount_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AsyncFlipLineCount_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Plane", Plane);
             XmlAttrib(sb, "FLipLine", FLipLine);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "Plane", "FLipLine"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return Plane;
                case 3:
                    return FLipLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AsyncFlipLineCount_t> m_target;
        #endregion
    }
    public sealed class Aux_t : TraceEvent
    {
        public DD_DP_AUX_CHANNEL_TYPE Channel { get { return (DD_DP_AUX_CHANNEL_TYPE)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public uint Address { get { return (uint)GetInt32At(8); } }
        public int Size { get { return GetInt16At(12); } }
        public byte[] Data { get { return GetByteArrayAt(14, (int)Size); } }
        public uint ActualTxnSize { get { return (uint)GetInt32At(((int)Size*1)+14); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+18 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Aux_t(Action<Aux_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+22));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Aux_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Channel", Channel);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "ActualTxnSize", ActualTxnSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Channel", "Status", "Address", "Size", "Data", "ActualTxnSize", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Channel;
                case 1:
                    return Status;
                case 2:
                    return Address;
                case 3:
                    return Size;
                case 4:
                    return Data;
                case 5:
                    return ActualTxnSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Aux_t> m_target;
        #endregion
    }
    public sealed class AuxChannelToPortMap_t : TraceEvent
    {
        public int ArraySize { get { return GetInt16At(0); } }
        public DD_PORT_TYPES Map_AuxChannelToPort(int arrayIndex) { return (DD_PORT_TYPES)GetInt32At(2 + (arrayIndex * HostOffset(4, 0))); }
        public int BDF(int arrayIndex) { return GetByteAt(((int)ArraySize*4)+2 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal AuxChannelToPortMap_t(Action<AuxChannelToPortMap_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)ArraySize*4)+6));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)ArraySize*4)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AuxChannelToPortMap_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ArraySize", ArraySize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ArraySize", "Map_AuxChannelToPort", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ArraySize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AuxChannelToPortMap_t> m_target;
        #endregion
    }
    public sealed class AuxInfo_t : TraceEvent
    {
        public DD_DP_AUX_CHANNEL_TYPE Channel { get { return (DD_DP_AUX_CHANNEL_TYPE)GetInt32At(0); } }
        public int Size { get { return GetInt16At(4); } }
        public byte[] Data { get { return GetByteArrayAt(6, (int)Size); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(((int)Size*1)+6); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+10 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal AuxInfo_t(Action<AuxInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+14));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AuxInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Channel", Channel);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Channel", "Size", "Data", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Channel;
                case 1:
                    return Size;
                case 2:
                    return Data;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AuxInfo_t> m_target;
        #endregion
    }
    public sealed class BitBash_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint ReadOrWrite { get { return (uint)GetInt32At(4); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(8); } }
        public uint BufferSize { get { return (uint)GetInt32At(12); } }
        public byte[] pBuffer { get { return GetByteArrayAt(16, (int)BufferSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)BufferSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BitBash_t(Action<BitBash_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)BufferSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)BufferSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BitBash_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "ReadOrWrite", ReadOrWrite);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "BufferSize", BufferSize);
             XmlAttrib(sb, "pBuffer", pBuffer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "ReadOrWrite", "Status", "BufferSize", "pBuffer", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return ReadOrWrite;
                case 2:
                    return Status;
                case 3:
                    return BufferSize;
                case 4:
                    return pBuffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BitBash_t> m_target;
        #endregion
    }
    public sealed class CancelFlip_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public long EntryTimeStamp { get { return GetInt64At(4); } }
        public int SourceId { get { return GetByteAt(12); } }
        public int LayerIndex { get { return GetByteAt(13); } }
        public long PresentIdCancelRequested { get { return GetInt64At(14); } }
        public long PresentIdCancelled { get { return GetInt64At(22); } }
        public uint HwAddressBase { get { return (uint)GetInt32At(30); } }
        public uint HwAddressBaseCancelled { get { return (uint)GetInt32At(34); } }

        #region Private
        internal CancelFlip_t(Action<CancelFlip_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 38));
            Debug.Assert(!(Version > 0 && EventDataLength < 38));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CancelFlip_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryTimeStamp", EntryTimeStamp);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "PresentIdCancelRequested", PresentIdCancelRequested);
             XmlAttrib(sb, "PresentIdCancelled", PresentIdCancelled);
             XmlAttrib(sb, "HwAddressBase", HwAddressBase);
             XmlAttrib(sb, "HwAddressBaseCancelled", HwAddressBaseCancelled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "EntryTimeStamp", "SourceId", "LayerIndex", "PresentIdCancelRequested", "PresentIdCancelled", "HwAddressBase", "HwAddressBaseCancelled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return EntryTimeStamp;
                case 2:
                    return SourceId;
                case 3:
                    return LayerIndex;
                case 4:
                    return PresentIdCancelRequested;
                case 5:
                    return PresentIdCancelled;
                case 6:
                    return HwAddressBase;
                case 7:
                    return HwAddressBaseCancelled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CancelFlip_t> m_target;
        #endregion
    }
    public sealed class CheckLegacyOverlaySupport_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint LayerIndex { get { return (uint)GetInt32At(4); } }
        public uint SurfSizeX { get { return (uint)GetInt32At(8); } }
        public uint SurfSizeY { get { return (uint)GetInt32At(12); } }
        public PIXEL_FMT PixelFormat { get { return (PIXEL_FMT)GetInt32At(16); } }
        public bool Supported { get { return GetInt32At(20) != 0; } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CheckLegacyOverlaySupport_t(Action<CheckLegacyOverlaySupport_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CheckLegacyOverlaySupport_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "SurfSizeX", SurfSizeX);
             XmlAttrib(sb, "SurfSizeY", SurfSizeY);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "Supported", Supported);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "LayerIndex", "SurfSizeX", "SurfSizeY", "PixelFormat", "Supported", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return LayerIndex;
                case 2:
                    return SurfSizeX;
                case 3:
                    return SurfSizeY;
                case 4:
                    return PixelFormat;
                case 5:
                    return Supported;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CheckLegacyOverlaySupport_t> m_target;
        #endregion
    }
    public sealed class CheckMpoPlaneDetails_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint SrcSizeX { get { return (uint)GetInt32At(4); } }
        public uint SrcSizeY { get { return (uint)GetInt32At(8); } }
        public uint DestSizeX { get { return (uint)GetInt32At(12); } }
        public uint DestSizeY { get { return (uint)GetInt32At(16); } }
        public PIXEL_FMT PixelFormat { get { return (PIXEL_FMT)GetInt32At(20); } }
        public uint Orientation { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CheckMpoPlaneDetails_t(Action<CheckMpoPlaneDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CheckMpoPlaneDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "SrcSizeX", SrcSizeX);
             XmlAttrib(sb, "SrcSizeY", SrcSizeY);
             XmlAttrib(sb, "DestSizeX", DestSizeX);
             XmlAttrib(sb, "DestSizeY", DestSizeY);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "Orientation", Orientation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "SrcSizeX", "SrcSizeY", "DestSizeX", "DestSizeY", "PixelFormat", "Orientation", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return SrcSizeX;
                case 2:
                    return SrcSizeY;
                case 3:
                    return DestSizeX;
                case 4:
                    return DestSizeY;
                case 5:
                    return PixelFormat;
                case 6:
                    return Orientation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CheckMpoPlaneDetails_t> m_target;
        #endregion
    }
    public sealed class CmtgStatusParams_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool Active { get { return GetInt32At(4) != 0; } }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(8); } }

        #region Private
        internal CmtgStatusParams_t(Action<CmtgStatusParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CmtgStatusParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Active", Active);
             XmlAttrib(sb, "PipeID", PipeID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Active", "PipeID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Active;
                case 2:
                    return PipeID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CmtgStatusParams_t> m_target;
        #endregion
    }
    public sealed class CollageEscape_t : TraceEvent
    {
        public DD_CUI_ESC_COLLAGE_OPERATION CollageOp { get { return (DD_CUI_ESC_COLLAGE_OPERATION)GetInt32At(0); } }
        public bool CollageSupport { get { return GetInt32At(4) != 0; } }
        public uint Status { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CollageEscape_t(Action<CollageEscape_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CollageEscape_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CollageOp", CollageOp);
             XmlAttrib(sb, "CollageSupport", CollageSupport);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CollageOp", "CollageSupport", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CollageOp;
                case 1:
                    return CollageSupport;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CollageEscape_t> m_target;
        #endregion
    }
    public sealed class CollageSupport_t : TraceEvent
    {
        public uint Status { get { return (uint)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CollageSupport_t(Action<CollageSupport_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CollageSupport_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CollageSupport_t> m_target;
        #endregion
    }
    public sealed class CollageTopology_t : TraceEvent
    {
        public uint NumOfHTiles { get { return (uint)GetInt32At(0); } }
        public uint NumOfVTiles { get { return (uint)GetInt32At(4); } }
        public uint ChildId { get { return (uint)GetInt32At(8); } }
        public uint HLocation { get { return (uint)GetInt32At(12); } }
        public uint VLocation { get { return (uint)GetInt32At(16); } }
        public uint BezelInfo { get { return (uint)GetInt32At(20); } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CollageTopology_t(Action<CollageTopology_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CollageTopology_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumOfHTiles", NumOfHTiles);
             XmlAttrib(sb, "NumOfVTiles", NumOfVTiles);
             XmlAttrib(sb, "ChildId", ChildId);
             XmlAttrib(sb, "HLocation", HLocation);
             XmlAttrib(sb, "VLocation", VLocation);
             XmlAttrib(sb, "BezelInfo", BezelInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NumOfHTiles", "NumOfVTiles", "ChildId", "HLocation", "VLocation", "BezelInfo", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NumOfHTiles;
                case 1:
                    return NumOfVTiles;
                case 2:
                    return ChildId;
                case 3:
                    return HLocation;
                case 4:
                    return VLocation;
                case 5:
                    return BezelInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CollageTopology_t> m_target;
        #endregion
    }
    public sealed class SetAdjustedColorimetry_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint SdrWhiteLevel { get { return (uint)GetInt32At(4); } }
        public uint RedPointcx { get { return (uint)GetInt32At(8); } }
        public uint RedPointcy { get { return (uint)GetInt32At(12); } }
        public uint GreenPointcx { get { return (uint)GetInt32At(16); } }
        public uint GreenPointcy { get { return (uint)GetInt32At(20); } }
        public uint BluePointcx { get { return (uint)GetInt32At(24); } }
        public uint BluePointcy { get { return (uint)GetInt32At(28); } }
        public uint WhitePointcx { get { return (uint)GetInt32At(32); } }
        public uint WhitePointcy { get { return (uint)GetInt32At(36); } }
        public uint MinLuminance { get { return (uint)GetInt32At(40); } }
        public uint MaxLuminance { get { return (uint)GetInt32At(44); } }
        public uint MaxFullFrameLuminance { get { return (uint)GetInt32At(48); } }
        public uint FormatBitDepths { get { return (uint)GetInt32At(52); } }
        public uint StandardColorimetryFlags { get { return (uint)GetInt32At(56); } }
        public bool IsSetColorimetryDdi { get { return GetInt32At(60) != 0; } }
        public int BDFData(int arrayIndex) { return GetByteAt(64 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SetAdjustedColorimetry_t(Action<SetAdjustedColorimetry_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 68));
            Debug.Assert(!(Version > 1 && EventDataLength < 68));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SetAdjustedColorimetry_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SdrWhiteLevel", SdrWhiteLevel);
             XmlAttrib(sb, "RedPointcx", RedPointcx);
             XmlAttrib(sb, "RedPointcy", RedPointcy);
             XmlAttrib(sb, "GreenPointcx", GreenPointcx);
             XmlAttrib(sb, "GreenPointcy", GreenPointcy);
             XmlAttrib(sb, "BluePointcx", BluePointcx);
             XmlAttrib(sb, "BluePointcy", BluePointcy);
             XmlAttrib(sb, "WhitePointcx", WhitePointcx);
             XmlAttrib(sb, "WhitePointcy", WhitePointcy);
             XmlAttrib(sb, "MinLuminance", MinLuminance);
             XmlAttrib(sb, "MaxLuminance", MaxLuminance);
             XmlAttrib(sb, "MaxFullFrameLuminance", MaxFullFrameLuminance);
             XmlAttrib(sb, "FormatBitDepths", FormatBitDepths);
             XmlAttrib(sb, "StandardColorimetryFlags", StandardColorimetryFlags);
             XmlAttrib(sb, "IsSetColorimetryDdi", IsSetColorimetryDdi);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "SdrWhiteLevel", "RedPointcx", "RedPointcy", "GreenPointcx", "GreenPointcy", "BluePointcx", "BluePointcy", "WhitePointcx", "WhitePointcy", "MinLuminance", "MaxLuminance", "MaxFullFrameLuminance", "FormatBitDepths", "StandardColorimetryFlags", "IsSetColorimetryDdi", "BDFData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return SdrWhiteLevel;
                case 2:
                    return RedPointcx;
                case 3:
                    return RedPointcy;
                case 4:
                    return GreenPointcx;
                case 5:
                    return GreenPointcy;
                case 6:
                    return BluePointcx;
                case 7:
                    return BluePointcy;
                case 8:
                    return WhitePointcx;
                case 9:
                    return WhitePointcy;
                case 10:
                    return MinLuminance;
                case 11:
                    return MaxLuminance;
                case 12:
                    return MaxFullFrameLuminance;
                case 13:
                    return FormatBitDepths;
                case 14:
                    return StandardColorimetryFlags;
                case 15:
                    return IsSetColorimetryDdi;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SetAdjustedColorimetry_t> m_target;
        #endregion
    }
    public sealed class ConditionalAssert_t : TraceEvent
    {
        public string LhsExpr { get { return GetUTF8StringAt(0); } }
        public long LhsValue { get { return GetInt64At(SkipUTF8String(0)); } }
        public DD_ASSERT_TYPE Condition { get { return (DD_ASSERT_TYPE)GetInt32At(SkipUTF8String(0)+8); } }
        public string RhsExpr { get { return GetUTF8StringAt(SkipUTF8String(0)+12); } }
        public long RhsValue { get { return GetInt64At(SkipUTF8String(SkipUTF8String(0)+12)); } }
        public string Function { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0)+12)+8); } }
        public long Address { get { return GetInt64At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)); } }
        public uint Line { get { return (uint)GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+8); } }
        public string File { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12); } }
        public string Comment { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12)); } }
        public long Mask { get { return GetInt64At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12))); } }
        public bool IsFailed { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12))+8) != 0; } }

        #region Private
        internal ConditionalAssert_t(Action<ConditionalAssert_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12))+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+12)+8)+12))+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ConditionalAssert_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LhsExpr", LhsExpr);
             XmlAttrib(sb, "LhsValue", LhsValue);
             XmlAttrib(sb, "Condition", Condition);
             XmlAttrib(sb, "RhsExpr", RhsExpr);
             XmlAttrib(sb, "RhsValue", RhsValue);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Line", Line);
             XmlAttrib(sb, "File", File);
             XmlAttrib(sb, "Comment", Comment);
             XmlAttrib(sb, "Mask", Mask);
             XmlAttrib(sb, "IsFailed", IsFailed);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LhsExpr", "LhsValue", "Condition", "RhsExpr", "RhsValue", "Function", "Address", "Line", "File", "Comment", "Mask", "IsFailed"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LhsExpr;
                case 1:
                    return LhsValue;
                case 2:
                    return Condition;
                case 3:
                    return RhsExpr;
                case 4:
                    return RhsValue;
                case 5:
                    return Function;
                case 6:
                    return Address;
                case 7:
                    return Line;
                case 8:
                    return File;
                case 9:
                    return Comment;
                case 10:
                    return Mask;
                case 11:
                    return IsFailed;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ConditionalAssert_t> m_target;
        #endregion
    }
    public sealed class OSGivenCSC_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public D3DDDI_GAMMA_TYPE GammaRampType { get { return (D3DDDI_GAMMA_TYPE)GetInt32At(4); } }
        public float ScalarMultiplier { get { return GetSingleAt(8); } }
        public uint Matrix3x4Size { get { return (uint)GetInt32At(12); } }
        public byte[] Matrix3x4Data { get { return GetByteArrayAt(16, (int)Matrix3x4Size); } }

        #region Private
        internal OSGivenCSC_t(Action<OSGivenCSC_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)Matrix3x4Size*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)Matrix3x4Size*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OSGivenCSC_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "GammaRampType", GammaRampType);
             XmlAttrib(sb, "ScalarMultiplier", ScalarMultiplier);
             XmlAttrib(sb, "Matrix3x4Size", Matrix3x4Size);
             XmlAttrib(sb, "Matrix3x4Data", Matrix3x4Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "GammaRampType", "ScalarMultiplier", "Matrix3x4Size", "Matrix3x4Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return GammaRampType;
                case 2:
                    return ScalarMultiplier;
                case 3:
                    return Matrix3x4Size;
                case 4:
                    return Matrix3x4Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OSGivenCSC_t> m_target;
        #endregion
    }
    public sealed class DBufInfo_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int NumPlanes { get { return GetByteAt(4); } }
        public bool InSufficientDbuf { get { return GetInt32At(5) != 0; } }
        public int CurStart { get { return GetInt16At(9); } }
        public int CurEnd { get { return GetInt16At(11); } }
        public int P0_Start { get { return GetInt16At(13); } }
        public int P0_End { get { return GetInt16At(15); } }
        public int P1_Start { get { return GetInt16At(17); } }
        public int P1_End { get { return GetInt16At(19); } }
        public int P2_Start { get { return GetInt16At(21); } }
        public int P2_End { get { return GetInt16At(23); } }
        public int BDF(int arrayIndex) { return GetByteAt(25 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DBufInfo_t(Action<DBufInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 29));
            Debug.Assert(!(Version > 1 && EventDataLength < 29));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DBufInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "NumPlanes", NumPlanes);
             XmlAttrib(sb, "InSufficientDbuf", InSufficientDbuf);
             XmlAttrib(sb, "CurStart", CurStart);
             XmlAttrib(sb, "CurEnd", CurEnd);
             XmlAttrib(sb, "P0_Start", P0_Start);
             XmlAttrib(sb, "P0_End", P0_End);
             XmlAttrib(sb, "P1_Start", P1_Start);
             XmlAttrib(sb, "P1_End", P1_End);
             XmlAttrib(sb, "P2_Start", P2_Start);
             XmlAttrib(sb, "P2_End", P2_End);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "NumPlanes", "InSufficientDbuf", "CurStart", "CurEnd", "P0_Start", "P0_End", "P1_Start", "P1_End", "P2_Start", "P2_End", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return NumPlanes;
                case 2:
                    return InSufficientDbuf;
                case 3:
                    return CurStart;
                case 4:
                    return CurEnd;
                case 5:
                    return P0_Start;
                case 6:
                    return P0_End;
                case 7:
                    return P1_Start;
                case 8:
                    return P1_End;
                case 9:
                    return P2_Start;
                case 10:
                    return P2_End;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DBufInfo_t> m_target;
        #endregion
    }
    public sealed class CursorDbuf_t : TraceEvent
    {
        public uint PipeId { get { return (uint)GetInt32At(0); } }
        public uint CurStart { get { return (uint)GetInt32At(4); } }
        public uint CurEnd { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal CursorDbuf_t(Action<CursorDbuf_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CursorDbuf_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "CurStart", CurStart);
             XmlAttrib(sb, "CurEnd", CurEnd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "CurStart", "CurEnd", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return CurStart;
                case 2:
                    return CurEnd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CursorDbuf_t> m_target;
        #endregion
    }
    public sealed class BDF_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BDF_t(Action<BDF_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BDF_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BDF_t> m_target;
        #endregion
    }
    public sealed class Dc6vParameters_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint UpperGuardBand { get { return (uint)GetInt32At(12); } }
        public uint LowerGuardBand { get { return (uint)GetInt32At(16); } }
        public uint EarlyEntryGaurdBand { get { return (uint)GetInt32At(20); } }
        public uint RestoreTimeinMicroSec { get { return (uint)GetInt32At(24); } }
        public uint LineTimeInMicroSec { get { return (uint)GetInt32At(28); } }

        #region Private
        internal Dc6vParameters_t(Action<Dc6vParameters_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Dc6vParameters_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "UpperGuardBand", UpperGuardBand);
             XmlAttrib(sb, "LowerGuardBand", LowerGuardBand);
             XmlAttrib(sb, "EarlyEntryGaurdBand", EarlyEntryGaurdBand);
             XmlAttrib(sb, "RestoreTimeinMicroSec", RestoreTimeinMicroSec);
             XmlAttrib(sb, "LineTimeInMicroSec", LineTimeInMicroSec);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "Port", "UpperGuardBand", "LowerGuardBand", "EarlyEntryGaurdBand", "RestoreTimeinMicroSec", "LineTimeInMicroSec"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return Port;
                case 3:
                    return UpperGuardBand;
                case 4:
                    return LowerGuardBand;
                case 5:
                    return EarlyEntryGaurdBand;
                case 6:
                    return RestoreTimeinMicroSec;
                case 7:
                    return LineTimeInMicroSec;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Dc6vParameters_t> m_target;
        #endregion
    }
    public sealed class DcStateClientEventHandler_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public DISPLAY_DCSTATE_EVENT Operation { get { return (DISPLAY_DCSTATE_EVENT)GetInt32At(8); } }
        public DD_DC_STATE_RESTRICTIONS Feature { get { return (DD_DC_STATE_RESTRICTIONS)GetInt32At(12); } }
        public uint FeatureRestrictionPerPipe { get { return (uint)GetInt32At(16); } }
        public uint CombinedRestrictionForFeature { get { return (uint)GetInt32At(20); } }
        public DISPLAY_DC_STATE_RESTRICTION DcStateRestriction { get { return (DISPLAY_DC_STATE_RESTRICTION)GetInt32At(24); } }

        #region Private
        internal DcStateClientEventHandler_t(Action<DcStateClientEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DcStateClientEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "FeatureRestrictionPerPipe", FeatureRestrictionPerPipe);
             XmlAttrib(sb, "CombinedRestrictionForFeature", CombinedRestrictionForFeature);
             XmlAttrib(sb, "DcStateRestriction", DcStateRestriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Operation", "Feature", "FeatureRestrictionPerPipe", "CombinedRestrictionForFeature", "DcStateRestriction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Operation;
                case 3:
                    return Feature;
                case 4:
                    return FeatureRestrictionPerPipe;
                case 5:
                    return CombinedRestrictionForFeature;
                case 6:
                    return DcStateRestriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DcStateClientEventHandler_t> m_target;
        #endregion
    }
    public sealed class DcStateExternalEventHandler_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public DISPLAY_PC_EVENT_NOTIFICATION_OPERATION Operation { get { return (DISPLAY_PC_EVENT_NOTIFICATION_OPERATION)GetInt32At(8); } }
        public DD_DC_STATE_RESTRICTIONS Feature { get { return (DD_DC_STATE_RESTRICTIONS)GetInt32At(12); } }
        public uint FeatureRestrictionPerPipe { get { return (uint)GetInt32At(16); } }
        public uint CombinedRestrictionForFeature { get { return (uint)GetInt32At(20); } }
        public DISPLAY_DC_STATE_RESTRICTION DcStateRestriction { get { return (DISPLAY_DC_STATE_RESTRICTION)GetInt32At(24); } }

        #region Private
        internal DcStateExternalEventHandler_t(Action<DcStateExternalEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DcStateExternalEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "FeatureRestrictionPerPipe", FeatureRestrictionPerPipe);
             XmlAttrib(sb, "CombinedRestrictionForFeature", CombinedRestrictionForFeature);
             XmlAttrib(sb, "DcStateRestriction", DcStateRestriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Operation", "Feature", "FeatureRestrictionPerPipe", "CombinedRestrictionForFeature", "DcStateRestriction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Operation;
                case 3:
                    return Feature;
                case 4:
                    return FeatureRestrictionPerPipe;
                case 5:
                    return CombinedRestrictionForFeature;
                case 6:
                    return DcStateRestriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DcStateExternalEventHandler_t> m_target;
        #endregion
    }
    public sealed class DCStateRequest_t : TraceEvent
    {
        public DD_DC_PWR_STATE DcStateRequested { get { return (DD_DC_PWR_STATE)GetInt32At(0); } }
        public DISPLAY_DC_STATE_RESTRICTION DcStateRestriction { get { return (DISPLAY_DC_STATE_RESTRICTION)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DCStateRequest_t(Action<DCStateRequest_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DCStateRequest_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DcStateRequested", DcStateRequested);
             XmlAttrib(sb, "DcStateRestriction", DcStateRestriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DcStateRequested", "DcStateRestriction", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DcStateRequested;
                case 1:
                    return DcStateRestriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DCStateRequest_t> m_target;
        #endregion
    }
    public sealed class DebugPrint_t : TraceEvent
    {
        public uint Level { get { return (uint)GetInt32At(0); } }
        public string Message { get { return GetUTF8StringAt(4); } }
        public string Function { get { return GetUTF8StringAt(SkipUTF8String(4)); } }
        public uint Line { get { return (uint)GetInt32At(SkipUTF8String(SkipUTF8String(4))); } }

        #region Private
        internal DebugPrint_t(Action<DebugPrint_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(4))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DebugPrint_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Line", Line);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Level", "Message", "Function", "Line"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Level;
                case 1:
                    return Message;
                case 2:
                    return Function;
                case 3:
                    return Line;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DebugPrint_t> m_target;
        #endregion
    }
    public sealed class DetectionCheckRequired_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetByteAt(4); } }
        public DD_PROTOCOL_TYPE Protocol { get { return (DD_PROTOCOL_TYPE)GetInt32At(5); } }
        public int SinkIndex { get { return GetByteAt(9); } }
        public DPL_ACTIVE_DETECTION_STATUS_EN ActiveDetectionStatus { get { return (DPL_ACTIVE_DETECTION_STATUS_EN)GetByteAt(10); } }
        public DPL_DETECTION_REQUIRED_EN DetectionReqStatus { get { return (DPL_DETECTION_REQUIRED_EN)GetByteAt(11); } }

        #region Private
        internal DetectionCheckRequired_t(Action<DetectionCheckRequired_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DetectionCheckRequired_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "ActiveDetectionStatus", ActiveDetectionStatus);
             XmlAttrib(sb, "DetectionReqStatus", DetectionReqStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "Protocol", "SinkIndex", "ActiveDetectionStatus", "DetectionReqStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return Protocol;
                case 3:
                    return SinkIndex;
                case 4:
                    return ActiveDetectionStatus;
                case 5:
                    return DetectionReqStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DetectionCheckRequired_t> m_target;
        #endregion
    }
    public sealed class OneDLUT_Param_t : TraceEvent
    {
        public D3DDDI_GAMMA_TYPE Type { get { return (D3DDDI_GAMMA_TYPE)GetInt32At(0); } }
        public int Operation { get { return GetInt32At(4); } }
        public uint Num_Samples { get { return (uint)GetInt32At(8); } }
        public bool Enable { get { return GetInt32At(12) != 0; } }
        public int Config_Flag { get { return GetByteAt(16); } }
        public int Client { get { return GetByteAt(17); } }
        public uint TargetID { get { return (uint)GetInt32At(18); } }

        #region Private
        internal OneDLUT_Param_t(Action<OneDLUT_Param_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 22));
            Debug.Assert(!(Version > 0 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OneDLUT_Param_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Num_Samples", Num_Samples);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "Config_Flag", Config_Flag);
             XmlAttrib(sb, "Client", Client);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Operation", "Num_Samples", "Enable", "Config_Flag", "Client", "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Operation;
                case 2:
                    return Num_Samples;
                case 3:
                    return Enable;
                case 4:
                    return Config_Flag;
                case 5:
                    return Client;
                case 6:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OneDLUT_Param_t> m_target;
        #endregion
    }
    public sealed class Assert_t : TraceEvent
    {
        public string Function { get { return GetUTF8StringAt(0); } }
        public string Assert { get { return GetUTF8StringAt(SkipUTF8String(0)); } }
        public uint Line { get { return (uint)GetInt32At(SkipUTF8String(SkipUTF8String(0))); } }
        public string File { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0))+4); } }

        #region Private
        internal Assert_t(Action<Assert_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(0))+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(0))+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Assert_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Assert", Assert);
             XmlAttrib(sb, "Line", Line);
             XmlAttrib(sb, "File", File);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Assert", "Line", "File"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Assert;
                case 2:
                    return Line;
                case 3:
                    return File;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Assert_t> m_target;
        #endregion
    }
    public sealed class DisplayAudioLinkHandlingEvent_t : TraceEvent
    {
        public DISPLAYAUDIO_LINK_HANDLING_EVENT DisplayAudioLinkEvent { get { return (DISPLAYAUDIO_LINK_HANDLING_EVENT)GetInt32At(0); } }
        public bool IsSGPCEnabled { get { return GetInt32At(4) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayAudioLinkHandlingEvent_t(Action<DisplayAudioLinkHandlingEvent_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayAudioLinkHandlingEvent_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DisplayAudioLinkEvent", DisplayAudioLinkEvent);
             XmlAttrib(sb, "IsSGPCEnabled", IsSGPCEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayAudioLinkEvent", "IsSGPCEnabled", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayAudioLinkEvent;
                case 1:
                    return IsSGPCEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayAudioLinkHandlingEvent_t> m_target;
        #endregion
    }
    public sealed class BlcApply_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint User { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcApply_t(Action<BlcApply_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcApply_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "User", User);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "PipeId", "User", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return PipeId;
                case 2:
                    return User;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcApply_t> m_target;
        #endregion
    }
    public sealed class BlcAggrLevelData_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public DISPLAY_BLC_OS_OPTIMIZATION AggrLevel { get { return (DISPLAY_BLC_OS_OPTIMIZATION)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcAggrLevelData_t(Action<BlcAggrLevelData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcAggrLevelData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "AggrLevel", AggrLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "PipeID", "AggrLevel", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return PipeID;
                case 2:
                    return AggrLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcAggrLevelData_t> m_target;
        #endregion
    }
    public sealed class BlcMap_t : TraceEvent
    {
        public uint UserBrightness { get { return (uint)GetInt32At(0); } }
        public uint ReturnBrightness { get { return (uint)GetInt32At(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint BclmTableSize { get { return (uint)GetInt32At(12); } }
        public byte[] BclmTable { get { return GetByteArrayAt(16, (int)BclmTableSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)BclmTableSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcMap_t(Action<BlcMap_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)BclmTableSize*1)+20));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)BclmTableSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcMap_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "UserBrightness", UserBrightness);
             XmlAttrib(sb, "ReturnBrightness", ReturnBrightness);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "BclmTableSize", BclmTableSize);
             XmlAttrib(sb, "BclmTable", BclmTable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "UserBrightness", "ReturnBrightness", "Port", "BclmTableSize", "BclmTable", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return UserBrightness;
                case 1:
                    return ReturnBrightness;
                case 2:
                    return Port;
                case 3:
                    return BclmTableSize;
                case 4:
                    return BclmTable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcMap_t> m_target;
        #endregion
    }
    public sealed class BlcComputeNewPercentage_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint User { get { return (uint)GetInt32At(8); } }
        public uint DpstAdjust { get { return (uint)GetInt32At(12); } }
        public uint BlcMinBrightness { get { return (uint)GetInt32At(16); } }
        public uint ActualBrightnessValue { get { return (uint)GetInt32At(20); } }
        public uint IsPipeActive { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcComputeNewPercentage_t(Action<BlcComputeNewPercentage_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcComputeNewPercentage_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "User", User);
             XmlAttrib(sb, "DpstAdjust", DpstAdjust);
             XmlAttrib(sb, "BlcMinBrightness", BlcMinBrightness);
             XmlAttrib(sb, "ActualBrightnessValue", ActualBrightnessValue);
             XmlAttrib(sb, "IsPipeActive", IsPipeActive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "PipeId", "User", "DpstAdjust", "BlcMinBrightness", "ActualBrightnessValue", "IsPipeActive", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return PipeId;
                case 2:
                    return User;
                case 3:
                    return DpstAdjust;
                case 4:
                    return BlcMinBrightness;
                case 5:
                    return ActualBrightnessValue;
                case 6:
                    return IsPipeActive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcComputeNewPercentage_t> m_target;
        #endregion
    }
    public sealed class BlcDdi2Caps_t : TraceEvent
    {
        public uint SmoothBrightness { get { return (uint)GetInt32At(0); } }
        public uint AdaptiveBrightness { get { return (uint)GetInt32At(4); } }

        #region Private
        internal BlcDdi2Caps_t(Action<BlcDdi2Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi2Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SmoothBrightness", SmoothBrightness);
             XmlAttrib(sb, "AdaptiveBrightness", AdaptiveBrightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SmoothBrightness", "AdaptiveBrightness"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SmoothBrightness;
                case 1:
                    return AdaptiveBrightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi2Caps_t> m_target;
        #endregion
    }
    public sealed class BlcClientEvents_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_BLC_OPERATION Operation { get { return (DD_BLC_OPERATION)GetInt32At(8); } }
        public uint TargetBrightness { get { return (uint)GetInt32At(12); } }
        public uint CurrentBrightness { get { return (uint)GetInt32At(16); } }
        public uint HighPrecisionBrightness3 { get { return (uint)GetInt32At(20); } }
        public uint TransitionSteps { get { return (uint)GetInt32At(24); } }

        #region Private
        internal BlcClientEvents_t(Action<BlcClientEvents_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcClientEvents_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "TargetBrightness", TargetBrightness);
             XmlAttrib(sb, "CurrentBrightness", CurrentBrightness);
             XmlAttrib(sb, "HighPrecisionBrightness3", HighPrecisionBrightness3);
             XmlAttrib(sb, "TransitionSteps", TransitionSteps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "PipeId", "Operation", "TargetBrightness", "CurrentBrightness", "HighPrecisionBrightness3", "TransitionSteps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return PipeId;
                case 2:
                    return Operation;
                case 3:
                    return TargetBrightness;
                case 4:
                    return CurrentBrightness;
                case 5:
                    return HighPrecisionBrightness3;
                case 6:
                    return TransitionSteps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcClientEvents_t> m_target;
        #endregion
    }
    public sealed class BlcDdi2State_t : TraceEvent
    {
        public uint SmoothBrightnessValue { get { return (uint)GetInt32At(0); } }

        #region Private
        internal BlcDdi2State_t(Action<BlcDdi2State_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 4));
            Debug.Assert(!(Version > 1 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi2State_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SmoothBrightnessValue", SmoothBrightnessValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SmoothBrightnessValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SmoothBrightnessValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi2State_t> m_target;
        #endregion
    }
    public sealed class BlcBacklightReduction_t : TraceEvent
    {
        public int BlcUserSettings { get { return GetInt16At(0); } }
        public uint BlcEffective { get { return (uint)GetInt32At(2); } }
        public int BDF(int arrayIndex) { return GetByteAt(6 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcBacklightReduction_t(Action<BlcBacklightReduction_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcBacklightReduction_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BlcUserSettings", BlcUserSettings);
             XmlAttrib(sb, "BlcEffective", BlcEffective);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BlcUserSettings", "BlcEffective", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BlcUserSettings;
                case 1:
                    return BlcEffective;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcBacklightReduction_t> m_target;
        #endregion
    }
    public sealed class BlcStaticData_t : TraceEvent
    {
        public uint LfpId { get { return (uint)GetInt32At(0); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public uint PwmType { get { return (uint)GetInt32At(8); } }
        public uint IsPwmPolarityInverted { get { return (uint)GetInt32At(12); } }
        public uint PWMInverterFrequency { get { return (uint)GetInt32At(16); } }
        public uint MinBrightnessPercent { get { return (uint)GetInt32At(20); } }
        public uint DpstLowerThreshold { get { return (uint)GetInt32At(24); } }
        public uint User { get { return (uint)GetInt32At(28); } }
        public uint UserTarget { get { return (uint)GetInt32At(32); } }
        public uint ActualBrightnessValue { get { return (uint)GetInt32At(36); } }
        public uint DpstAdjust { get { return (uint)GetInt32At(40); } }
        public uint BlcPrecisionFactor { get { return (uint)GetInt32At(44); } }
        public int BrightnessPrecisionInBits { get { return GetByteAt(48); } }
        public uint LfpPostBrightness { get { return (uint)GetInt32At(49); } }
        public uint DpstUpperThreshold { get { return (uint)GetInt32At(53); } }
        public int BDF(int arrayIndex) { return GetByteAt(57 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcStaticData_t(Action<BlcStaticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 4 && EventDataLength != 61));
            Debug.Assert(!(Version > 4 && EventDataLength < 61));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcStaticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LfpId", LfpId);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PwmType", PwmType);
             XmlAttrib(sb, "IsPwmPolarityInverted", IsPwmPolarityInverted);
             XmlAttrib(sb, "PWMInverterFrequency", PWMInverterFrequency);
             XmlAttrib(sb, "MinBrightnessPercent", MinBrightnessPercent);
             XmlAttrib(sb, "DpstLowerThreshold", DpstLowerThreshold);
             XmlAttrib(sb, "User", User);
             XmlAttrib(sb, "UserTarget", UserTarget);
             XmlAttrib(sb, "ActualBrightnessValue", ActualBrightnessValue);
             XmlAttrib(sb, "DpstAdjust", DpstAdjust);
             XmlAttrib(sb, "BlcPrecisionFactor", BlcPrecisionFactor);
             XmlAttrib(sb, "BrightnessPrecisionInBits", BrightnessPrecisionInBits);
             XmlAttrib(sb, "LfpPostBrightness", LfpPostBrightness);
             XmlAttrib(sb, "DpstUpperThreshold", DpstUpperThreshold);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LfpId", "Port", "PwmType", "IsPwmPolarityInverted", "PWMInverterFrequency", "MinBrightnessPercent", "DpstLowerThreshold", "User", "UserTarget", "ActualBrightnessValue", "DpstAdjust", "BlcPrecisionFactor", "BrightnessPrecisionInBits", "LfpPostBrightness", "DpstUpperThreshold", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LfpId;
                case 1:
                    return Port;
                case 2:
                    return PwmType;
                case 3:
                    return IsPwmPolarityInverted;
                case 4:
                    return PWMInverterFrequency;
                case 5:
                    return MinBrightnessPercent;
                case 6:
                    return DpstLowerThreshold;
                case 7:
                    return User;
                case 8:
                    return UserTarget;
                case 9:
                    return ActualBrightnessValue;
                case 10:
                    return DpstAdjust;
                case 11:
                    return BlcPrecisionFactor;
                case 12:
                    return BrightnessPrecisionInBits;
                case 13:
                    return LfpPostBrightness;
                case 14:
                    return DpstUpperThreshold;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcStaticData_t> m_target;
        #endregion
    }
    public sealed class BlcDdi2Optimization_t : TraceEvent
    {
        public DXGK_BACKLIGHT_OPTIMIZATION_LEVEL OptimizationLevel { get { return (DXGK_BACKLIGHT_OPTIMIZATION_LEVEL)GetInt32At(0); } }
        public DISPLAY_BLC_OS_OPTIMIZATION AggrLevel { get { return (DISPLAY_BLC_OS_OPTIMIZATION)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi2Optimization_t(Action<BlcDdi2Optimization_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi2Optimization_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OptimizationLevel", OptimizationLevel);
             XmlAttrib(sb, "AggrLevel", AggrLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OptimizationLevel", "AggrLevel", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OptimizationLevel;
                case 1:
                    return AggrLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi2Optimization_t> m_target;
        #endregion
    }
    public sealed class BlcPortBrightness_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint BrightnessValue { get { return (uint)GetInt32At(4); } }
        public uint PwmDutyCycleOffset { get { return (uint)GetInt32At(8); } }
        public uint PwmDutyCycleValue { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcPortBrightness_t(Action<BlcPortBrightness_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcPortBrightness_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "BrightnessValue", BrightnessValue);
             XmlAttrib(sb, "PwmDutyCycleOffset", PwmDutyCycleOffset);
             XmlAttrib(sb, "PwmDutyCycleValue", PwmDutyCycleValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "BrightnessValue", "PwmDutyCycleOffset", "PwmDutyCycleValue", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return BrightnessValue;
                case 2:
                    return PwmDutyCycleOffset;
                case 3:
                    return PwmDutyCycleValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcPortBrightness_t> m_target;
        #endregion
    }
    public sealed class BlcDdi2Data_t : TraceEvent
    {
        public uint Brightness { get { return (uint)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi2Data_t(Action<BlcDdi2Data_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi2Data_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Brightness", Brightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Brightness", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Brightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi2Data_t> m_target;
        #endregion
    }
    public sealed class BlcPortPwmFrequency_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint ReferenceFreq { get { return (uint)GetInt32At(4); } }
        public uint PWMInverterFreqency { get { return (uint)GetInt32At(8); } }
        public uint PwmFreqOffset { get { return (uint)GetInt32At(12); } }
        public uint PwmFreqValue { get { return (uint)GetInt32At(16); } }
        public uint PwmCtrlOffset { get { return (uint)GetInt32At(20); } }
        public uint PwmCtrlBacklightPolarity { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcPortPwmFrequency_t(Action<BlcPortPwmFrequency_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcPortPwmFrequency_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "ReferenceFreq", ReferenceFreq);
             XmlAttrib(sb, "PWMInverterFreqency", PWMInverterFreqency);
             XmlAttrib(sb, "PwmFreqOffset", PwmFreqOffset);
             XmlAttrib(sb, "PwmFreqValue", PwmFreqValue);
             XmlAttrib(sb, "PwmCtrlOffset", PwmCtrlOffset);
             XmlAttrib(sb, "PwmCtrlBacklightPolarity", PwmCtrlBacklightPolarity);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "ReferenceFreq", "PWMInverterFreqency", "PwmFreqOffset", "PwmFreqValue", "PwmCtrlOffset", "PwmCtrlBacklightPolarity", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return ReferenceFreq;
                case 2:
                    return PWMInverterFreqency;
                case 3:
                    return PwmFreqOffset;
                case 4:
                    return PwmFreqValue;
                case 5:
                    return PwmCtrlOffset;
                case 6:
                    return PwmCtrlBacklightPolarity;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcPortPwmFrequency_t> m_target;
        #endregion
    }
    public sealed class BlcWarningData_t : TraceEvent
    {
        public DD_BLC_WARNING_TYPE Type { get { return (DD_BLC_WARNING_TYPE)GetInt32At(0); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(8); } }
        public uint Field1 { get { return (uint)GetInt32At(12); } }
        public uint Field2 { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcWarningData_t(Action<BlcWarningData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcWarningData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "Field1", Field1);
             XmlAttrib(sb, "Field2", Field2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Port", "PipeID", "Field1", "Field2", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Port;
                case 2:
                    return PipeID;
                case 3:
                    return Field1;
                case 4:
                    return Field2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcWarningData_t> m_target;
        #endregion
    }
    public sealed class BlcTransitionData_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint IsHdrModeActive { get { return (uint)GetInt32At(4); } }
        public uint TargetBrightnessInMilliUnits { get { return (uint)GetInt32At(8); } }
        public uint SinkDesiredMaxFall { get { return (uint)GetInt32At(12); } }
        public uint IsAuxBrightnessControl { get { return (uint)GetInt32At(16); } }
        public uint HighPrecisionBrightness3 { get { return (uint)GetInt32At(20); } }
        public uint BlcPrecisionFactor { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcTransitionData_t(Action<BlcTransitionData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcTransitionData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "IsHdrModeActive", IsHdrModeActive);
             XmlAttrib(sb, "TargetBrightnessInMilliUnits", TargetBrightnessInMilliUnits);
             XmlAttrib(sb, "SinkDesiredMaxFall", SinkDesiredMaxFall);
             XmlAttrib(sb, "IsAuxBrightnessControl", IsAuxBrightnessControl);
             XmlAttrib(sb, "HighPrecisionBrightness3", HighPrecisionBrightness3);
             XmlAttrib(sb, "BlcPrecisionFactor", BlcPrecisionFactor);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "IsHdrModeActive", "TargetBrightnessInMilliUnits", "SinkDesiredMaxFall", "IsAuxBrightnessControl", "HighPrecisionBrightness3", "BlcPrecisionFactor", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return IsHdrModeActive;
                case 2:
                    return TargetBrightnessInMilliUnits;
                case 3:
                    return SinkDesiredMaxFall;
                case 4:
                    return IsAuxBrightnessControl;
                case 5:
                    return HighPrecisionBrightness3;
                case 6:
                    return BlcPrecisionFactor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcTransitionData_t> m_target;
        #endregion
    }
    public sealed class BlcDdi3Caps_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint SmoothBrightness { get { return (uint)GetInt32At(4); } }
        public uint AdaptiveBrightness { get { return (uint)GetInt32At(8); } }
        public uint NitsBasedBrightness { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi3Caps_t(Action<BlcDdi3Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi3Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SmoothBrightness", SmoothBrightness);
             XmlAttrib(sb, "AdaptiveBrightness", AdaptiveBrightness);
             XmlAttrib(sb, "NitsBasedBrightness", NitsBasedBrightness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "SmoothBrightness", "AdaptiveBrightness", "NitsBasedBrightness", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return SmoothBrightness;
                case 2:
                    return AdaptiveBrightness;
                case 3:
                    return NitsBasedBrightness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi3Caps_t> m_target;
        #endregion
    }
    public sealed class HDRPixelBoostData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public uint SDRWhiteLevelInNits { get { return (uint)GetInt32At(12); } }
        public uint CurrentDisplayBrightnessInNits { get { return (uint)GetInt32At(16); } }

        #region Private
        internal HDRPixelBoostData_t(Action<HDRPixelBoostData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HDRPixelBoostData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SDRWhiteLevelInNits", SDRWhiteLevelInNits);
             XmlAttrib(sb, "CurrentDisplayBrightnessInNits", CurrentDisplayBrightnessInNits);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "TargetId", "SDRWhiteLevelInNits", "CurrentDisplayBrightnessInNits"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return TargetId;
                case 3:
                    return SDRWhiteLevelInNits;
                case 4:
                    return CurrentDisplayBrightnessInNits;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HDRPixelBoostData_t> m_target;
        #endregion
    }
    public sealed class DisplayBrightness3_Info_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public uint InfLfpNitRangeCount { get { return (uint)GetInt32At(8); } }
        public uint MinimumLevelMillinit { get { return (uint)GetInt32At(12); } }
        public uint MaximumLevelMillinit { get { return (uint)GetInt32At(16); } }
        public uint StepSizeMillinit { get { return (uint)GetInt32At(20); } }
        public uint DisableBoostNitRangeRegValue { get { return (uint)GetInt32At(24); } }

        #region Private
        internal DisplayBrightness3_Info_t(Action<DisplayBrightness3_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayBrightness3_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "InfLfpNitRangeCount", InfLfpNitRangeCount);
             XmlAttrib(sb, "MinimumLevelMillinit", MinimumLevelMillinit);
             XmlAttrib(sb, "MaximumLevelMillinit", MaximumLevelMillinit);
             XmlAttrib(sb, "StepSizeMillinit", StepSizeMillinit);
             XmlAttrib(sb, "DisableBoostNitRangeRegValue", DisableBoostNitRangeRegValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "InfLfpNitRangeCount", "MinimumLevelMillinit", "MaximumLevelMillinit", "StepSizeMillinit", "DisableBoostNitRangeRegValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return InfLfpNitRangeCount;
                case 3:
                    return MinimumLevelMillinit;
                case 4:
                    return MaximumLevelMillinit;
                case 5:
                    return StepSizeMillinit;
                case 6:
                    return DisableBoostNitRangeRegValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayBrightness3_Info_t> m_target;
        #endregion
    }
    public sealed class BlcDdi3Optimization_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DXGK_BACKLIGHT_OPTIMIZATION_LEVEL OptimizationLevel { get { return (DXGK_BACKLIGHT_OPTIMIZATION_LEVEL)GetInt32At(4); } }
        public uint IsNitsBased { get { return (uint)GetInt32At(8); } }
        public uint AggrLevel { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi3Optimization_t(Action<BlcDdi3Optimization_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi3Optimization_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "OptimizationLevel", OptimizationLevel);
             XmlAttrib(sb, "IsNitsBased", IsNitsBased);
             XmlAttrib(sb, "AggrLevel", AggrLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "OptimizationLevel", "IsNitsBased", "AggrLevel", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return OptimizationLevel;
                case 2:
                    return IsNitsBased;
                case 3:
                    return AggrLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi3Optimization_t> m_target;
        #endregion
    }
    public sealed class BlcGetSetNitsBrightness_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DD_GETSET_NITS_BRIGHTNESS_OPERATION OpType { get { return (DD_GETSET_NITS_BRIGHTNESS_OPERATION)GetInt32At(4); } }
        public uint Field1 { get { return (uint)GetInt32At(8); } }
        public uint Field2 { get { return (uint)GetInt32At(12); } }
        public uint Field3 { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcGetSetNitsBrightness_t(Action<BlcGetSetNitsBrightness_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcGetSetNitsBrightness_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "OpType", OpType);
             XmlAttrib(sb, "Field1", Field1);
             XmlAttrib(sb, "Field2", Field2);
             XmlAttrib(sb, "Field3", Field3);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "OpType", "Field1", "Field2", "Field3", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return OpType;
                case 2:
                    return Field1;
                case 3:
                    return Field2;
                case 4:
                    return Field3;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcGetSetNitsBrightness_t> m_target;
        #endregion
    }
    public sealed class BlcDdi3Get_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint CurrentBrightnessInMilliUnits { get { return (uint)GetInt32At(4); } }
        public uint TargetBrightnessInMilliUnits { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi3Get_t(Action<BlcDdi3Get_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi3Get_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "CurrentBrightnessInMilliUnits", CurrentBrightnessInMilliUnits);
             XmlAttrib(sb, "TargetBrightnessInMilliUnits", TargetBrightnessInMilliUnits);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "CurrentBrightnessInMilliUnits", "TargetBrightnessInMilliUnits", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return CurrentBrightnessInMilliUnits;
                case 2:
                    return TargetBrightnessInMilliUnits;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi3Get_t> m_target;
        #endregion
    }
    public sealed class DisplayBrightness3_RxCaps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public uint NormalRangeCount { get { return (uint)GetInt32At(8); } }
        public uint TotalRangeCount { get { return (uint)GetInt32At(12); } }
        public uint MinimumLevelMillinit { get { return (uint)GetInt32At(16); } }
        public uint MaximumLevelMillinit { get { return (uint)GetInt32At(20); } }
        public uint StepSizeMillinit { get { return (uint)GetInt32At(24); } }

        #region Private
        internal DisplayBrightness3_RxCaps_t(Action<DisplayBrightness3_RxCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayBrightness3_RxCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "NormalRangeCount", NormalRangeCount);
             XmlAttrib(sb, "TotalRangeCount", TotalRangeCount);
             XmlAttrib(sb, "MinimumLevelMillinit", MinimumLevelMillinit);
             XmlAttrib(sb, "MaximumLevelMillinit", MaximumLevelMillinit);
             XmlAttrib(sb, "StepSizeMillinit", StepSizeMillinit);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "NormalRangeCount", "TotalRangeCount", "MinimumLevelMillinit", "MaximumLevelMillinit", "StepSizeMillinit"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return NormalRangeCount;
                case 3:
                    return TotalRangeCount;
                case 4:
                    return MinimumLevelMillinit;
                case 5:
                    return MaximumLevelMillinit;
                case 6:
                    return StepSizeMillinit;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayBrightness3_RxCaps_t> m_target;
        #endregion
    }
    public sealed class BlcDdi3Set_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint BrightnessMillinits { get { return (uint)GetInt32At(4); } }
        public uint TransitionTimeMs { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal BlcDdi3Set_t(Action<BlcDdi3Set_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDdi3Set_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "BrightnessMillinits", BrightnessMillinits);
             XmlAttrib(sb, "TransitionTimeMs", TransitionTimeMs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "BrightnessMillinits", "TransitionTimeMs", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return BrightnessMillinits;
                case 2:
                    return TransitionTimeMs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDdi3Set_t> m_target;
        #endregion
    }
    public sealed class Display_Caps_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public int SinkIndex { get { return GetByteAt(4); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(5); } }
        public string MonitorName { get { return GetUTF8StringAt(9); } }
        public bool AudioSupport { get { return GetInt32At((13 + 9)) != 0; } }
        public DD_HDCP_VERSION HDCPVersion { get { return (DD_HDCP_VERSION)GetInt32At((13 + 9)+4); } }
        public PSR_SUPPORT PSRSupport { get { return (PSR_SUPPORT)GetInt32At((13 + 9)+8); } }
        public DD_EDID_TYPE EdidType { get { return (DD_EDID_TYPE)GetInt32At((13 + 9)+12); } }
        public int EdidSize { get { return GetInt16At((13 + 9)+16); } }
        public byte[] EdidData { get { return GetByteArrayAt((13 + 9)+18, (int)EdidSize); } }
        public int BDF(int arrayIndex) { return GetByteAt((13 + 9)+((int)EdidSize*1)+18 + (arrayIndex * HostOffset(1, 0))); }
        public DD_EDID_TYPE EdidMgmtEdidType { get { return (DD_EDID_TYPE)GetInt32At((13 + 9)+((int)EdidSize*1)+22); } }
        public int EdidMgmtEdidSize { get { return GetInt16At((13 + 9)+((int)EdidSize*1)+26); } }
        public byte[] EdidMgmtEdidData { get { return GetByteArrayAt((13 + 9)+((int)EdidSize*1)+28, (int)EdidMgmtEdidSize); } }
        public DISPLAY_CAPS_EDID_MGMT_FLAGS EdidMgmtFlags { get { return (DISPLAY_CAPS_EDID_MGMT_FLAGS)GetInt32At((13 + 9)+((int)EdidMgmtEdidSize*1)+ ((int)EdidSize*1)+28); } }

        #region Private
        internal Display_Caps_t(Action<Display_Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != (13 + 9)+((int)EdidMgmtEdidSize*1)+ ((int)EdidSize*1)+32));
            Debug.Assert(!(Version > 3 && EventDataLength < (13 + 9)+((int)EdidMgmtEdidSize*1)+ ((int)EdidSize*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Display_Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "MonitorName", MonitorName);
             XmlAttrib(sb, "AudioSupport", AudioSupport);
             XmlAttrib(sb, "HDCPVersion", HDCPVersion);
             XmlAttrib(sb, "PSRSupport", PSRSupport);
             XmlAttrib(sb, "EdidType", EdidType);
             XmlAttrib(sb, "EdidSize", EdidSize);
             XmlAttrib(sb, "EdidData", EdidData);
             XmlAttrib(sb, "EdidMgmtEdidType", EdidMgmtEdidType);
             XmlAttrib(sb, "EdidMgmtEdidSize", EdidMgmtEdidSize);
             XmlAttrib(sb, "EdidMgmtEdidData", EdidMgmtEdidData);
             XmlAttrib(sb, "EdidMgmtFlags", EdidMgmtFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "SinkIndex", "VOT", "MonitorName", "AudioSupport", "HDCPVersion", "PSRSupport", "EdidType", "EdidSize", "EdidData", "BDF", "EdidMgmtEdidType", "EdidMgmtEdidSize", "EdidMgmtEdidData", "EdidMgmtFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return SinkIndex;
                case 2:
                    return VOT;
                case 3:
                    return MonitorName;
                case 4:
                    return AudioSupport;
                case 5:
                    return HDCPVersion;
                case 6:
                    return PSRSupport;
                case 7:
                    return EdidType;
                case 8:
                    return EdidSize;
                case 9:
                    return EdidData;
                case 11:
                    return EdidMgmtEdidType;
                case 12:
                    return EdidMgmtEdidSize;
                case 13:
                    return EdidMgmtEdidData;
                case 14:
                    return EdidMgmtFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Display_Caps_t> m_target;
        #endregion
    }
    public sealed class DisplayCaps_HDR10P_Caps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(4); } }
        public int SinkIndex { get { return GetByteAt(8); } }
        public bool Hdr10PlusVsVdbFound { get { return GetInt32At(9) != 0; } }
        public int ApplicationVersion { get { return GetByteAt(13); } }
        public int IEEERegID(int arrayIndex) { return GetByteAt(14 + (arrayIndex * HostOffset(1, 0))); }
        public int FullFramePeakLuminanceIndex { get { return GetByteAt(17); } }
        public int PeakLuminanceIndex { get { return GetByteAt(18); } }
        public int MaxFALL { get { return GetInt16At(19); } }
        public int MaxCLL { get { return GetInt16At(21); } }
        public bool IsHdr10PlusSupported { get { return GetInt32At(23) != 0; } }

        #region Private
        internal DisplayCaps_HDR10P_Caps_t(Action<DisplayCaps_HDR10P_Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 27));
            Debug.Assert(!(Version > 1 && EventDataLength < 27));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayCaps_HDR10P_Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "Hdr10PlusVsVdbFound", Hdr10PlusVsVdbFound);
             XmlAttrib(sb, "ApplicationVersion", ApplicationVersion);
             XmlAttrib(sb, "FullFramePeakLuminanceIndex", FullFramePeakLuminanceIndex);
             XmlAttrib(sb, "PeakLuminanceIndex", PeakLuminanceIndex);
             XmlAttrib(sb, "MaxFALL", MaxFALL);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "IsHdr10PlusSupported", IsHdr10PlusSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "SinkType", "SinkIndex", "Hdr10PlusVsVdbFound", "ApplicationVersion", "IEEERegID", "FullFramePeakLuminanceIndex", "PeakLuminanceIndex", "MaxFALL", "MaxCLL", "IsHdr10PlusSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return SinkType;
                case 2:
                    return SinkIndex;
                case 3:
                    return Hdr10PlusVsVdbFound;
                case 4:
                    return ApplicationVersion;
                case 6:
                    return FullFramePeakLuminanceIndex;
                case 7:
                    return PeakLuminanceIndex;
                case 8:
                    return MaxFALL;
                case 9:
                    return MaxCLL;
                case 10:
                    return IsHdr10PlusSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayCaps_HDR10P_Caps_t> m_target;
        #endregion
    }
    public sealed class Did_HdrCaps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int SinkIndex { get { return GetByteAt(8); } }
        public uint EOTF { get { return (uint)GetInt32At(9); } }
        public DD_COLOR_GAMUT Gamut { get { return (DD_COLOR_GAMUT)GetInt32At(13); } }
        public int MaxFall { get { return GetInt16At(17); } }
        public int MaxCLL { get { return GetInt16At(19); } }
        public int MinCLL { get { return GetInt16At(21); } }

        #region Private
        internal Did_HdrCaps_t(Action<Did_HdrCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 23));
            Debug.Assert(!(Version > 0 && EventDataLength < 23));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Did_HdrCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "EOTF", EOTF);
             XmlAttrib(sb, "Gamut", Gamut);
             XmlAttrib(sb, "MaxFall", MaxFall);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "MinCLL", MinCLL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkIndex", "EOTF", "Gamut", "MaxFall", "MaxCLL", "MinCLL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkIndex;
                case 3:
                    return EOTF;
                case 4:
                    return Gamut;
                case 5:
                    return MaxFall;
                case 6:
                    return MaxCLL;
                case 7:
                    return MinCLL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Did_HdrCaps_t> m_target;
        #endregion
    }
    public sealed class HDRCaps_t : TraceEvent
    {
        public bool HDRMetadataBlockFound { get { return GetInt32At(0) != 0; } }
        public int EOTFSupported { get { return GetByteAt(4); } }
        public int HdrStaticMetaDataType { get { return GetByteAt(5); } }
        public int DesiredMaxCLL { get { return GetByteAt(6); } }
        public int DesiredMaxFALL { get { return GetByteAt(7); } }
        public int DesiredMinCLL { get { return GetByteAt(8); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(9); } }
        public int SinkIndex { get { return GetByteAt(13); } }
        public int BDF(int arrayIndex) { return GetByteAt(14 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal HDRCaps_t(Action<HDRCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 18));
            Debug.Assert(!(Version > 2 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HDRCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HDRMetadataBlockFound", HDRMetadataBlockFound);
             XmlAttrib(sb, "EOTFSupported", EOTFSupported);
             XmlAttrib(sb, "HdrStaticMetaDataType", HdrStaticMetaDataType);
             XmlAttrib(sb, "DesiredMaxCLL", DesiredMaxCLL);
             XmlAttrib(sb, "DesiredMaxFALL", DesiredMaxFALL);
             XmlAttrib(sb, "DesiredMinCLL", DesiredMinCLL);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HDRMetadataBlockFound", "EOTFSupported", "HdrStaticMetaDataType", "DesiredMaxCLL", "DesiredMaxFALL", "DesiredMinCLL", "Port", "SinkIndex", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HDRMetadataBlockFound;
                case 1:
                    return EOTFSupported;
                case 2:
                    return HdrStaticMetaDataType;
                case 3:
                    return DesiredMaxCLL;
                case 4:
                    return DesiredMaxFALL;
                case 5:
                    return DesiredMinCLL;
                case 6:
                    return Port;
                case 7:
                    return SinkIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HDRCaps_t> m_target;
        #endregion
    }
    public sealed class DpDeviceInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int IEEE_OUI(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }
        public int DevIdString(int arrayIndex) { return GetByteAt(7 + (arrayIndex * HostOffset(1, 0))); }
        public int HwRev { get { return GetByteAt(13); } }
        public int FwSwMajorRev { get { return GetByteAt(14); } }
        public int FwSwMinorRev { get { return GetByteAt(15); } }
        public int FwSwBuildId(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpDeviceInfo_t(Action<DpDeviceInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpDeviceInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HwRev", HwRev);
             XmlAttrib(sb, "FwSwMajorRev", FwSwMajorRev);
             XmlAttrib(sb, "FwSwMinorRev", FwSwMinorRev);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "IEEE_OUI", "DevIdString", "HwRev", "FwSwMajorRev", "FwSwMinorRev", "FwSwBuildId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 3:
                    return HwRev;
                case 4:
                    return FwSwMajorRev;
                case 5:
                    return FwSwMinorRev;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpDeviceInfo_t> m_target;
        #endregion
    }
    public sealed class DPRxCapsDPCDs_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public int SinkIndex { get { return GetByteAt(4); } }
        public uint Address { get { return (uint)GetInt32At(5); } }
        public int Size { get { return GetInt16At(9); } }
        public byte[] RawData { get { return GetByteArrayAt(11, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+11 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DPRxCapsDPCDs_t(Action<DPRxCapsDPCDs_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+15));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+15));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DPRxCapsDPCDs_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "SinkIndex", "Address", "Size", "RawData", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return SinkIndex;
                case 2:
                    return Address;
                case 3:
                    return Size;
                case 4:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DPRxCapsDPCDs_t> m_target;
        #endregion
    }
    public sealed class SinkEdid_t : TraceEvent
    {
        public DD_EDID_TYPE Type { get { return (DD_EDID_TYPE)GetInt32At(0); } }
        public int Size { get { return GetInt16At(4); } }
        public byte[] Data { get { return GetByteArrayAt(6, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+6 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SinkEdid_t(Action<SinkEdid_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+10));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SinkEdid_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Size", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Size;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SinkEdid_t> m_target;
        #endregion
    }
    public sealed class DPRxCaps_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public int Rev { get { return GetByteAt(4); } }
        public uint MaxLinkRate { get { return (uint)GetInt32At(5); } }
        public int MaxLanes { get { return GetByteAt(9); } }
        public int MaxRxPorts { get { return GetByteAt(10); } }
        public bool AudioSupport { get { return GetInt32At(11) != 0; } }
        public bool SscSupport { get { return GetInt32At(15) != 0; } }
        public bool FastLinkTraining { get { return GetInt32At(19) != 0; } }
        public bool MST { get { return GetInt32At(23) != 0; } }
        public bool DownStreamPresent { get { return GetInt32At(27) != 0; } }
        public int NumDownStreamPorts { get { return GetByteAt(31); } }
        public uint TrainingPattern { get { return (uint)GetInt32At(32); } }
        public int Size { get { return GetByteAt(36); } }
        public int RawData(int arrayIndex) { return GetByteAt(37 + (arrayIndex * HostOffset(1, 0))); }
        public bool VscSdpExtensionForColorimetrySupported { get { return GetInt32At(51) != 0; } }
        public bool VscExtVesaSdpSupported { get { return GetInt32At(55) != 0; } }
        public bool VscExtVesaSdpChainingSupported { get { return GetInt32At(59) != 0; } }
        public bool Yuv420PassthroughSupportedByDongle { get { return GetInt32At(63) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(67 + (arrayIndex * HostOffset(1, 0))); }
        public bool IsPconDpToHdmi21Present { get { return GetInt32At(71) != 0; } }

        #region Private
        internal DPRxCaps_t(Action<DPRxCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 75));
            Debug.Assert(!(Version > 2 && EventDataLength < 75));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DPRxCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Rev", Rev);
             XmlAttrib(sb, "MaxLinkRate", MaxLinkRate);
             XmlAttrib(sb, "MaxLanes", MaxLanes);
             XmlAttrib(sb, "MaxRxPorts", MaxRxPorts);
             XmlAttrib(sb, "AudioSupport", AudioSupport);
             XmlAttrib(sb, "SscSupport", SscSupport);
             XmlAttrib(sb, "FastLinkTraining", FastLinkTraining);
             XmlAttrib(sb, "MST", MST);
             XmlAttrib(sb, "DownStreamPresent", DownStreamPresent);
             XmlAttrib(sb, "NumDownStreamPorts", NumDownStreamPorts);
             XmlAttrib(sb, "TrainingPattern", TrainingPattern);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "VscSdpExtensionForColorimetrySupported", VscSdpExtensionForColorimetrySupported);
             XmlAttrib(sb, "VscExtVesaSdpSupported", VscExtVesaSdpSupported);
             XmlAttrib(sb, "VscExtVesaSdpChainingSupported", VscExtVesaSdpChainingSupported);
             XmlAttrib(sb, "Yuv420PassthroughSupportedByDongle", Yuv420PassthroughSupportedByDongle);
             XmlAttrib(sb, "IsPconDpToHdmi21Present", IsPconDpToHdmi21Present);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Rev", "MaxLinkRate", "MaxLanes", "MaxRxPorts", "AudioSupport", "SscSupport", "FastLinkTraining", "MST", "DownStreamPresent", "NumDownStreamPorts", "TrainingPattern", "Size", "RawData", "VscSdpExtensionForColorimetrySupported", "VscExtVesaSdpSupported", "VscExtVesaSdpChainingSupported", "Yuv420PassthroughSupportedByDongle", "BDF", "IsPconDpToHdmi21Present"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Rev;
                case 2:
                    return MaxLinkRate;
                case 3:
                    return MaxLanes;
                case 4:
                    return MaxRxPorts;
                case 5:
                    return AudioSupport;
                case 6:
                    return SscSupport;
                case 7:
                    return FastLinkTraining;
                case 8:
                    return MST;
                case 9:
                    return DownStreamPresent;
                case 10:
                    return NumDownStreamPorts;
                case 11:
                    return TrainingPattern;
                case 12:
                    return Size;
                case 14:
                    return VscSdpExtensionForColorimetrySupported;
                case 15:
                    return VscExtVesaSdpSupported;
                case 16:
                    return VscExtVesaSdpChainingSupported;
                case 17:
                    return Yuv420PassthroughSupportedByDongle;
                case 19:
                    return IsPconDpToHdmi21Present;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DPRxCaps_t> m_target;
        #endregion
    }
    public sealed class DiagnosticData_t : TraceEvent
    {
        public DD_DIAGNOSTIC_SOURCE Source { get { return (DD_DIAGNOSTIC_SOURCE)GetInt32At(0); } }
        public uint Param1 { get { return (uint)GetInt32At(4); } }
        public uint Param2 { get { return (uint)GetInt32At(8); } }
        public uint Param3 { get { return (uint)GetInt32At(12); } }
        public uint Param4 { get { return (uint)GetInt32At(16); } }
        public Address Context { get { return GetAddressAt(20); } }

        #region Private
        internal DiagnosticData_t(Action<DiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 1 && EventDataLength < HostOffset(24, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Source", Source);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             XmlAttribHex(sb, "Context", Context);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Source", "Param1", "Param2", "Param3", "Param4", "Context"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Source;
                case 1:
                    return Param1;
                case 2:
                    return Param2;
                case 3:
                    return Param3;
                case 4:
                    return Param4;
                case 5:
                    return Context;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DiagnosticData_t> m_target;
        #endregion
    }
    public sealed class GenlockEnableDisable_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool GenlockSupported { get { return GetInt32At(4) != 0; } }
        public bool GenlockEnabled { get { return GetInt32At(8) != 0; } }

        #region Private
        internal GenlockEnableDisable_t(Action<GenlockEnableDisable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GenlockEnableDisable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GenlockSupported", GenlockSupported);
             XmlAttrib(sb, "GenlockEnabled", GenlockEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "GenlockSupported", "GenlockEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return GenlockSupported;
                case 2:
                    return GenlockEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GenlockEnableDisable_t> m_target;
        #endregion
    }
    public sealed class GenlockCommonTiming_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool CommonTimingAvailable { get { return GetInt32At(4) != 0; } }
        public uint HActive { get { return (uint)GetInt32At(8); } }
        public uint VActive { get { return (uint)GetInt32At(12); } }
        public long DotClock { get { return GetInt64At(16); } }
        public float RefreshRate { get { return GetSingleAt(24); } }

        #region Private
        internal GenlockCommonTiming_t(Action<GenlockCommonTiming_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GenlockCommonTiming_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CommonTimingAvailable", CommonTimingAvailable);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "RefreshRate", RefreshRate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "CommonTimingAvailable", "HActive", "VActive", "DotClock", "RefreshRate"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return CommonTimingAvailable;
                case 2:
                    return HActive;
                case 3:
                    return VActive;
                case 4:
                    return DotClock;
                case 5:
                    return RefreshRate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GenlockCommonTiming_t> m_target;
        #endregion
    }
    public sealed class GenlockInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public bool IsPrimaryTarget { get { return GetInt32At(8) != 0; } }
        public DD_LANE_WIDTH WidthSelect { get { return (DD_LANE_WIDTH)GetByteAt(12); } }
        public uint LinkRateMbps { get { return (uint)GetInt32At(13); } }
        public bool EnablePath { get { return GetInt32At(17) != 0; } }

        #region Private
        internal GenlockInfo_t(Action<GenlockInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 21));
            Debug.Assert(!(Version > 0 && EventDataLength < 21));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GenlockInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsPrimaryTarget", IsPrimaryTarget);
             XmlAttrib(sb, "WidthSelect", WidthSelect);
             XmlAttrib(sb, "LinkRateMbps", LinkRateMbps);
             XmlAttrib(sb, "EnablePath", EnablePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "IsPrimaryTarget", "WidthSelect", "LinkRateMbps", "EnablePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return IsPrimaryTarget;
                case 3:
                    return WidthSelect;
                case 4:
                    return LinkRateMbps;
                case 5:
                    return EnablePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GenlockInfo_t> m_target;
        #endregion
    }
    public sealed class GenlockTranscoder_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint GenlockEnable { get { return (uint)GetInt32At(4); } }
        public GENLOCK_TRANSCODER_PROGRAM GenlockMode { get { return (GENLOCK_TRANSCODER_PROGRAM)GetInt32At(8); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(12); } }
        public PORT_CONNECTOR_TYPE Port { get { return (PORT_CONNECTOR_TYPE)GetInt32At(16); } }

        #region Private
        internal GenlockTranscoder_t(Action<GenlockTranscoder_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GenlockTranscoder_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GenlockEnable", GenlockEnable);
             XmlAttrib(sb, "GenlockMode", GenlockMode);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "GenlockEnable", "GenlockMode", "Pipe", "Port"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return GenlockEnable;
                case 2:
                    return GenlockMode;
                case 3:
                    return Pipe;
                case 4:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GenlockTranscoder_t> m_target;
        #endregion
    }
    public sealed class BlcDiagnosticData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetByteAt(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(5); } }
        public int MinBrightnessPercent { get { return GetInt16At(9); } }
        public bool IsNitsBrightness { get { return GetInt32At(11) != 0; } }
        public bool IsAuxModeOnly { get { return GetInt32At(15) != 0; } }
        public bool IsBrightnessOptimization { get { return GetInt32At(19) != 0; } }
        public int MaxFall { get { return GetInt16At(23); } }
        public int MinCll { get { return GetInt16At(25); } }
        public int MaxCll { get { return GetInt16At(27); } }
        public uint MaxPanelBrightness { get { return (uint)GetInt32At(29); } }
        public int PwmType { get { return GetInt16At(33); } }
        public DD_PWM_CTRL_NUM PwmCtrlNum { get { return (DD_PWM_CTRL_NUM)GetInt16At(35); } }
        public bool IsPwmPolarityInverted { get { return GetInt32At(37) != 0; } }
        public uint PWMInverterFrequency { get { return (uint)GetInt32At(41); } }
        public int BrightnessPrecisionInBits { get { return GetByteAt(45); } }
        public int HdrDpcdRefreshTimeout { get { return GetInt16At(46); } }
        public bool IsHdrModeActive { get { return GetInt32At(48) != 0; } }
        public int DpstAdjust { get { return GetInt16At(52); } }
        public uint DpstUpperThreshold { get { return (uint)GetInt32At(54); } }
        public uint DpstLowerThreshold { get { return (uint)GetInt32At(58); } }
        public bool IsIndependentBrightnessControl { get { return GetInt32At(62) != 0; } }
        public uint NormalRangeCount { get { return (uint)GetInt32At(66); } }
        public uint TotalRangeCount { get { return (uint)GetInt32At(70); } }
        public int RangeDetailsSize { get { return GetInt16At(74); } }
        public byte[] RangeDetails { get { return GetByteArrayAt(76, (int)RangeDetailsSize); } }
        public bool VesaBasedBrightnessControl { get { return GetInt32At(((int)RangeDetailsSize*1)+76) != 0; } }

        #region Private
        internal BlcDiagnosticData_t(Action<BlcDiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)RangeDetailsSize*1)+80));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)RangeDetailsSize*1)+80));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcDiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "MinBrightnessPercent", MinBrightnessPercent);
             XmlAttrib(sb, "IsNitsBrightness", IsNitsBrightness);
             XmlAttrib(sb, "IsAuxModeOnly", IsAuxModeOnly);
             XmlAttrib(sb, "IsBrightnessOptimization", IsBrightnessOptimization);
             XmlAttrib(sb, "MaxFall", MaxFall);
             XmlAttrib(sb, "MinCll", MinCll);
             XmlAttrib(sb, "MaxCll", MaxCll);
             XmlAttrib(sb, "MaxPanelBrightness", MaxPanelBrightness);
             XmlAttrib(sb, "PwmType", PwmType);
             XmlAttrib(sb, "PwmCtrlNum", PwmCtrlNum);
             XmlAttrib(sb, "IsPwmPolarityInverted", IsPwmPolarityInverted);
             XmlAttrib(sb, "PWMInverterFrequency", PWMInverterFrequency);
             XmlAttrib(sb, "BrightnessPrecisionInBits", BrightnessPrecisionInBits);
             XmlAttrib(sb, "HdrDpcdRefreshTimeout", HdrDpcdRefreshTimeout);
             XmlAttrib(sb, "IsHdrModeActive", IsHdrModeActive);
             XmlAttrib(sb, "DpstAdjust", DpstAdjust);
             XmlAttrib(sb, "DpstUpperThreshold", DpstUpperThreshold);
             XmlAttrib(sb, "DpstLowerThreshold", DpstLowerThreshold);
             XmlAttrib(sb, "IsIndependentBrightnessControl", IsIndependentBrightnessControl);
             XmlAttrib(sb, "NormalRangeCount", NormalRangeCount);
             XmlAttrib(sb, "TotalRangeCount", TotalRangeCount);
             XmlAttrib(sb, "RangeDetailsSize", RangeDetailsSize);
             XmlAttrib(sb, "RangeDetails", RangeDetails);
             XmlAttrib(sb, "VesaBasedBrightnessControl", VesaBasedBrightnessControl);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "Port", "MinBrightnessPercent", "IsNitsBrightness", "IsAuxModeOnly", "IsBrightnessOptimization", "MaxFall", "MinCll", "MaxCll", "MaxPanelBrightness", "PwmType", "PwmCtrlNum", "IsPwmPolarityInverted", "PWMInverterFrequency", "BrightnessPrecisionInBits", "HdrDpcdRefreshTimeout", "IsHdrModeActive", "DpstAdjust", "DpstUpperThreshold", "DpstLowerThreshold", "IsIndependentBrightnessControl", "NormalRangeCount", "TotalRangeCount", "RangeDetailsSize", "RangeDetails", "VesaBasedBrightnessControl"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return Port;
                case 3:
                    return MinBrightnessPercent;
                case 4:
                    return IsNitsBrightness;
                case 5:
                    return IsAuxModeOnly;
                case 6:
                    return IsBrightnessOptimization;
                case 7:
                    return MaxFall;
                case 8:
                    return MinCll;
                case 9:
                    return MaxCll;
                case 10:
                    return MaxPanelBrightness;
                case 11:
                    return PwmType;
                case 12:
                    return PwmCtrlNum;
                case 13:
                    return IsPwmPolarityInverted;
                case 14:
                    return PWMInverterFrequency;
                case 15:
                    return BrightnessPrecisionInBits;
                case 16:
                    return HdrDpcdRefreshTimeout;
                case 17:
                    return IsHdrModeActive;
                case 18:
                    return DpstAdjust;
                case 19:
                    return DpstUpperThreshold;
                case 20:
                    return DpstLowerThreshold;
                case 21:
                    return IsIndependentBrightnessControl;
                case 22:
                    return NormalRangeCount;
                case 23:
                    return TotalRangeCount;
                case 24:
                    return RangeDetailsSize;
                case 25:
                    return RangeDetails;
                case 26:
                    return VesaBasedBrightnessControl;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcDiagnosticData_t> m_target;
        #endregion
    }
    public sealed class DisplayPcBlcCapability_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public bool VesaBasedBrightnessControl { get { return GetInt32At(8) != 0; } }
        public bool AuxModeOnlySupportedForBrightnessControl { get { return GetInt32At(12) != 0; } }
        public bool BrightnessOptimizationSupported { get { return GetInt32At(16) != 0; } }

        #region Private
        internal DisplayPcBlcCapability_t(Action<DisplayPcBlcCapability_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcBlcCapability_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "VesaBasedBrightnessControl", VesaBasedBrightnessControl);
             XmlAttrib(sb, "AuxModeOnlySupportedForBrightnessControl", AuxModeOnlySupportedForBrightnessControl);
             XmlAttrib(sb, "BrightnessOptimizationSupported", BrightnessOptimizationSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "VesaBasedBrightnessControl", "AuxModeOnlySupportedForBrightnessControl", "BrightnessOptimizationSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return VesaBasedBrightnessControl;
                case 3:
                    return AuxModeOnlySupportedForBrightnessControl;
                case 4:
                    return BrightnessOptimizationSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcBlcCapability_t> m_target;
        #endregion
    }
    public sealed class BlcExternalEventHandler_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public DISPLAY_PC_EVENT_NOTIFICATION_OPERATION Operation { get { return (DISPLAY_PC_EVENT_NOTIFICATION_OPERATION)GetInt32At(12); } }
        public bool IsPreModeSet { get { return GetInt32At(16) != 0; } }
        public bool IsPipeActive { get { return GetInt32At(20) != 0; } }
        public bool IsHdrModeActive { get { return GetInt32At(24) != 0; } }

        #region Private
        internal BlcExternalEventHandler_t(Action<BlcExternalEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlcExternalEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "IsPreModeSet", IsPreModeSet);
             XmlAttrib(sb, "IsPipeActive", IsPipeActive);
             XmlAttrib(sb, "IsHdrModeActive", IsHdrModeActive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "PipeId", "Operation", "IsPreModeSet", "IsPipeActive", "IsHdrModeActive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return PipeId;
                case 3:
                    return Operation;
                case 4:
                    return IsPreModeSet;
                case 5:
                    return IsPipeActive;
                case 6:
                    return IsHdrModeActive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlcExternalEventHandler_t> m_target;
        #endregion
    }
    public sealed class DisplayPcBlcInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int MinLuminanceFull { get { return GetInt16At(8); } }
        public int MaxLuminanceFull { get { return GetInt16At(10); } }
        public int MaxLuminanceBoost { get { return GetInt16At(12); } }

        #region Private
        internal DisplayPcBlcInfo_t(Action<DisplayPcBlcInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 14));
            Debug.Assert(!(Version > 0 && EventDataLength < 14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcBlcInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "MinLuminanceFull", MinLuminanceFull);
             XmlAttrib(sb, "MaxLuminanceFull", MaxLuminanceFull);
             XmlAttrib(sb, "MaxLuminanceBoost", MaxLuminanceBoost);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "MinLuminanceFull", "MaxLuminanceFull", "MaxLuminanceBoost"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return MinLuminanceFull;
                case 3:
                    return MaxLuminanceFull;
                case 4:
                    return MaxLuminanceBoost;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcBlcInfo_t> m_target;
        #endregion
    }
    public sealed class BrtOptimizationDiagnosticData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetByteAt(4); } }
        public DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK OptimumFeaturesSupportedMask { get { return (DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK)GetInt32At(5); } }

        #region Private
        internal BrtOptimizationDiagnosticData_t(Action<BrtOptimizationDiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BrtOptimizationDiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "OptimumFeaturesSupportedMask", OptimumFeaturesSupportedMask);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "OptimumFeaturesSupportedMask"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return OptimumFeaturesSupportedMask;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BrtOptimizationDiagnosticData_t> m_target;
        #endregion
    }
    public sealed class BrtAggrLevelMappingData_t : TraceEvent
    {
        public uint OSOptimization { get { return (uint)GetInt32At(0); } }
        public uint MappedAggrLevel { get { return (uint)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PC_FTR_BRT_OPTIMIZATION_INDEX Feature { get { return (DD_PC_FTR_BRT_OPTIMIZATION_INDEX)GetInt32At(12); } }

        #region Private
        internal BrtAggrLevelMappingData_t(Action<BrtAggrLevelMappingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BrtAggrLevelMappingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OSOptimization", OSOptimization);
             XmlAttrib(sb, "MappedAggrLevel", MappedAggrLevel);
             XmlAttrib(sb, "Feature", Feature);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OSOptimization", "MappedAggrLevel", "BDF", "Feature"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OSOptimization;
                case 1:
                    return MappedAggrLevel;
                case 3:
                    return Feature;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BrtAggrLevelMappingData_t> m_target;
        #endregion
    }
    public sealed class BrtOptimizationCapability_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetByteAt(4); } }
        public int PlatformConcurrencyMaskListSize { get { return GetByteAt(5); } }
        public int PlatformPriorityListSize { get { return GetByteAt(6); } }
        public byte[] PlatformSupportedConcurrencyList { get { return GetByteArrayAt(7, (int)PlatformConcurrencyMaskListSize); } }
        public byte[] PlatformSupportedPriorityList { get { return GetByteArrayAt(((int)PlatformConcurrencyMaskListSize*1)+7, (int)PlatformPriorityListSize); } }
        public DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK FeaturesSupportedMaskBasedOnSkuFlag { get { return (DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK)GetInt32At(((int)PlatformPriorityListSize*1)+ ((int)PlatformConcurrencyMaskListSize*1)+7); } }
        public DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK FeaturesSupportedMaskBasedOnCurrentConfig { get { return (DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK)GetInt32At(((int)PlatformPriorityListSize*1)+ ((int)PlatformConcurrencyMaskListSize*1)+11); } }
        public DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK OptimumFeaturesSupportedMask { get { return (DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK)GetInt32At(((int)PlatformPriorityListSize*1)+ ((int)PlatformConcurrencyMaskListSize*1)+15); } }

        #region Private
        internal BrtOptimizationCapability_t(Action<BrtOptimizationCapability_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)PlatformPriorityListSize*1)+ ((int)PlatformConcurrencyMaskListSize*1)+19));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)PlatformPriorityListSize*1)+ ((int)PlatformConcurrencyMaskListSize*1)+19));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BrtOptimizationCapability_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlatformConcurrencyMaskListSize", PlatformConcurrencyMaskListSize);
             XmlAttrib(sb, "PlatformPriorityListSize", PlatformPriorityListSize);
             XmlAttrib(sb, "PlatformSupportedConcurrencyList", PlatformSupportedConcurrencyList);
             XmlAttrib(sb, "PlatformSupportedPriorityList", PlatformSupportedPriorityList);
             XmlAttrib(sb, "FeaturesSupportedMaskBasedOnSkuFlag", FeaturesSupportedMaskBasedOnSkuFlag);
             XmlAttrib(sb, "FeaturesSupportedMaskBasedOnCurrentConfig", FeaturesSupportedMaskBasedOnCurrentConfig);
             XmlAttrib(sb, "OptimumFeaturesSupportedMask", OptimumFeaturesSupportedMask);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "PlatformConcurrencyMaskListSize", "PlatformPriorityListSize", "PlatformSupportedConcurrencyList", "PlatformSupportedPriorityList", "FeaturesSupportedMaskBasedOnSkuFlag", "FeaturesSupportedMaskBasedOnCurrentConfig", "OptimumFeaturesSupportedMask"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return PlatformConcurrencyMaskListSize;
                case 3:
                    return PlatformPriorityListSize;
                case 4:
                    return PlatformSupportedConcurrencyList;
                case 5:
                    return PlatformSupportedPriorityList;
                case 6:
                    return FeaturesSupportedMaskBasedOnSkuFlag;
                case 7:
                    return FeaturesSupportedMaskBasedOnCurrentConfig;
                case 8:
                    return OptimumFeaturesSupportedMask;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BrtOptimizationCapability_t> m_target;
        #endregion
    }
    public sealed class BrtOptimizationInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        // Skipping reserved
        public bool Enable { get { return GetInt32At(8) != 0; } }
        public int AggressivenessLevel { get { return GetByteAt(12); } }
        public int MaxSupportedLevel { get { return GetByteAt(13); } }
        public DD_FTR_BRT_OPTIMIZATION_OPERATION Operation { get { return (DD_FTR_BRT_OPTIMIZATION_OPERATION)GetInt32At(14); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(18); } }

        #region Private
        internal BrtOptimizationInfo_t(Action<BrtOptimizationInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 22));
            Debug.Assert(!(Version > 2 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BrtOptimizationInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "AggressivenessLevel", AggressivenessLevel);
             XmlAttrib(sb, "MaxSupportedLevel", MaxSupportedLevel);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Enable", "AggressivenessLevel", "MaxSupportedLevel", "Operation", "PipeId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Enable;
                case 2:
                    return AggressivenessLevel;
                case 3:
                    return MaxSupportedLevel;
                case 4:
                    return Operation;
                case 5:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BrtOptimizationInfo_t> m_target;
        #endregion
    }
    public sealed class DpsEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint DpsRestrictionsSize { get { return (uint)GetInt32At(8); } }
        public byte[] DpsRestrictionsData { get { return GetByteArrayAt(12, (int)DpsRestrictionsSize); } }
        public uint FSFlipAccumulator { get { return (uint)GetInt32At(((int)DpsRestrictionsSize*1)+12); } }
        public uint CurrentState { get { return (uint)GetInt32At(((int)DpsRestrictionsSize*1)+16); } }
        public uint NewState { get { return (uint)GetInt32At(((int)DpsRestrictionsSize*1)+20); } }

        #region Private
        internal DpsEventHandlerData_t(Action<DpsEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DpsRestrictionsSize*1)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DpsRestrictionsSize*1)+24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DpsRestrictionsSize", DpsRestrictionsSize);
             XmlAttrib(sb, "DpsRestrictionsData", DpsRestrictionsData);
             XmlAttrib(sb, "FSFlipAccumulator", FSFlipAccumulator);
             XmlAttrib(sb, "CurrentState", CurrentState);
             XmlAttrib(sb, "NewState", NewState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DpsRestrictionsSize", "DpsRestrictionsData", "FSFlipAccumulator", "CurrentState", "NewState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DpsRestrictionsSize;
                case 2:
                    return DpsRestrictionsData;
                case 3:
                    return FSFlipAccumulator;
                case 4:
                    return CurrentState;
                case 5:
                    return NewState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class PcTimePoint_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PcTimePoint_t(Action<PcTimePoint_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcTimePoint_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcTimePoint_t> m_target;
        #endregion
    }
    public sealed class DpsStaticData_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public uint PanelType { get { return (uint)GetInt32At(8); } }
        public uint EnableCuiStaticDrrs { get { return (uint)GetInt32At(12); } }
        public uint NumActiveLfp { get { return (uint)GetInt32At(16); } }
        public uint NumSupportedRR { get { return (uint)GetInt32At(20); } }
        public uint ActivePathCount { get { return (uint)GetInt32At(24); } }
        public uint IsS3DMode { get { return (uint)GetInt32At(28); } }
        public uint RrSwitchMethod { get { return (uint)GetInt32At(32); } }
        public DD_PWR_SRC_EVENT_ARGS ActivePwrSrc { get { return (DD_PWR_SRC_EVENT_ARGS)GetInt32At(36); } }
        public uint IsRrSwitchPossibleWithPsr { get { return (uint)GetInt32At(40); } }
        public DD_LRR_VERSION LrrVersion { get { return (DD_LRR_VERSION)GetInt32At(44); } }
        public int BDF(int arrayIndex) { return GetByteAt(48 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpsStaticData_t(Action<DpsStaticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 52));
            Debug.Assert(!(Version > 3 && EventDataLength < 52));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsStaticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PanelType", PanelType);
             XmlAttrib(sb, "EnableCuiStaticDrrs", EnableCuiStaticDrrs);
             XmlAttrib(sb, "NumActiveLfp", NumActiveLfp);
             XmlAttrib(sb, "NumSupportedRR", NumSupportedRR);
             XmlAttrib(sb, "ActivePathCount", ActivePathCount);
             XmlAttrib(sb, "IsS3DMode", IsS3DMode);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "ActivePwrSrc", ActivePwrSrc);
             XmlAttrib(sb, "IsRrSwitchPossibleWithPsr", IsRrSwitchPossibleWithPsr);
             XmlAttrib(sb, "LrrVersion", LrrVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Port", "PanelType", "EnableCuiStaticDrrs", "NumActiveLfp", "NumSupportedRR", "ActivePathCount", "IsS3DMode", "RrSwitchMethod", "ActivePwrSrc", "IsRrSwitchPossibleWithPsr", "LrrVersion", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Port;
                case 2:
                    return PanelType;
                case 3:
                    return EnableCuiStaticDrrs;
                case 4:
                    return NumActiveLfp;
                case 5:
                    return NumSupportedRR;
                case 6:
                    return ActivePathCount;
                case 7:
                    return IsS3DMode;
                case 8:
                    return RrSwitchMethod;
                case 9:
                    return ActivePwrSrc;
                case 10:
                    return IsRrSwitchPossibleWithPsr;
                case 11:
                    return LrrVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsStaticData_t> m_target;
        #endregion
    }
    public sealed class DpsEvents_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DISPLAY_PC_EVENT_NOTIFICATION_OPERATION Operation { get { return (DISPLAY_PC_EVENT_NOTIFICATION_OPERATION)GetInt32At(4); } }
        public uint EventField { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpsEvents_t(Action<DpsEvents_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsEvents_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "EventField", EventField);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Operation", "EventField", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Operation;
                case 2:
                    return EventField;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsEvents_t> m_target;
        #endregion
    }
    public sealed class DpsStatus_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public uint IsBaseRR { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpsStatus_t(Action<DpsStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "IsBaseRR", IsBaseRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Port", "IsBaseRR", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Port;
                case 2:
                    return IsBaseRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsStatus_t> m_target;
        #endregion
    }
    public sealed class DpsGetUserDpsParamsData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint IsSupportForStaticDRRS { get { return (uint)GetInt32At(8); } }
        public uint BaseLowRefreshRate { get { return (uint)GetInt32At(12); } }
        public uint NumOfRefreshRates { get { return (uint)GetInt32At(16); } }
        public uint DpsRefreshRateSize { get { return (uint)GetInt32At(20); } }
        public byte[] DpsRefreshRate { get { return GetByteArrayAt(24, (int)DpsRefreshRateSize); } }
        public uint LastUserSelectedModeSetRR { get { return (uint)GetInt32At(((int)DpsRefreshRateSize*1)+24); } }

        #region Private
        internal DpsGetUserDpsParamsData_t(Action<DpsGetUserDpsParamsData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DpsRefreshRateSize*1)+28));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DpsRefreshRateSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsGetUserDpsParamsData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsSupportForStaticDRRS", IsSupportForStaticDRRS);
             XmlAttrib(sb, "BaseLowRefreshRate", BaseLowRefreshRate);
             XmlAttrib(sb, "NumOfRefreshRates", NumOfRefreshRates);
             XmlAttrib(sb, "DpsRefreshRateSize", DpsRefreshRateSize);
             XmlAttrib(sb, "DpsRefreshRate", DpsRefreshRate);
             XmlAttrib(sb, "LastUserSelectedModeSetRR", LastUserSelectedModeSetRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsSupportForStaticDRRS", "BaseLowRefreshRate", "NumOfRefreshRates", "DpsRefreshRateSize", "DpsRefreshRate", "LastUserSelectedModeSetRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsSupportForStaticDRRS;
                case 2:
                    return BaseLowRefreshRate;
                case 3:
                    return NumOfRefreshRates;
                case 4:
                    return DpsRefreshRateSize;
                case 5:
                    return DpsRefreshRate;
                case 6:
                    return LastUserSelectedModeSetRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsGetUserDpsParamsData_t> m_target;
        #endregion
    }
    public sealed class DpsInitSupportedPStatesData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint NumOfUserSelectableBaseLoRRs { get { return (uint)GetInt32At(8); } }
        public uint UserSelectableBaseLoRRListSize { get { return (uint)GetInt32At(12); } }
        public byte[] UserSelectableBaseLoRRList { get { return GetByteArrayAt(16, (int)UserSelectableBaseLoRRListSize); } }
        public uint UserSelectedBaseLoRR { get { return (uint)GetInt32At(((int)UserSelectableBaseLoRRListSize*1)+16); } }
        public uint LastUserSelectedModeSetRRSize { get { return (uint)GetInt32At(((int)UserSelectableBaseLoRRListSize*1)+20); } }
        public byte[] LastUserSelectedModeSetRR { get { return GetByteArrayAt(((int)UserSelectableBaseLoRRListSize*1)+24, (int)LastUserSelectedModeSetRRSize); } }
        public uint IsDpsInitialized { get { return (uint)GetInt32At(((int)LastUserSelectedModeSetRRSize*1)+ ((int)UserSelectableBaseLoRRListSize*1)+24); } }
        public uint IsLFPRefreshRateList { get { return (uint)GetInt32At(((int)LastUserSelectedModeSetRRSize*1)+ ((int)UserSelectableBaseLoRRListSize*1)+28); } }
        public uint CurrentDpsRrType { get { return (uint)GetInt32At(((int)LastUserSelectedModeSetRRSize*1)+ ((int)UserSelectableBaseLoRRListSize*1)+32); } }

        #region Private
        internal DpsInitSupportedPStatesData_t(Action<DpsInitSupportedPStatesData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)LastUserSelectedModeSetRRSize*1)+ ((int)UserSelectableBaseLoRRListSize*1)+36));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)LastUserSelectedModeSetRRSize*1)+ ((int)UserSelectableBaseLoRRListSize*1)+36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsInitSupportedPStatesData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "NumOfUserSelectableBaseLoRRs", NumOfUserSelectableBaseLoRRs);
             XmlAttrib(sb, "UserSelectableBaseLoRRListSize", UserSelectableBaseLoRRListSize);
             XmlAttrib(sb, "UserSelectableBaseLoRRList", UserSelectableBaseLoRRList);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             XmlAttrib(sb, "LastUserSelectedModeSetRRSize", LastUserSelectedModeSetRRSize);
             XmlAttrib(sb, "LastUserSelectedModeSetRR", LastUserSelectedModeSetRR);
             XmlAttrib(sb, "IsDpsInitialized", IsDpsInitialized);
             XmlAttrib(sb, "IsLFPRefreshRateList", IsLFPRefreshRateList);
             XmlAttrib(sb, "CurrentDpsRrType", CurrentDpsRrType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "NumOfUserSelectableBaseLoRRs", "UserSelectableBaseLoRRListSize", "UserSelectableBaseLoRRList", "UserSelectedBaseLoRR", "LastUserSelectedModeSetRRSize", "LastUserSelectedModeSetRR", "IsDpsInitialized", "IsLFPRefreshRateList", "CurrentDpsRrType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return NumOfUserSelectableBaseLoRRs;
                case 2:
                    return UserSelectableBaseLoRRListSize;
                case 3:
                    return UserSelectableBaseLoRRList;
                case 4:
                    return UserSelectedBaseLoRR;
                case 5:
                    return LastUserSelectedModeSetRRSize;
                case 6:
                    return LastUserSelectedModeSetRR;
                case 7:
                    return IsDpsInitialized;
                case 8:
                    return IsLFPRefreshRateList;
                case 9:
                    return CurrentDpsRrType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsInitSupportedPStatesData_t> m_target;
        #endregion
    }
    public sealed class DpstDiagData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public bool SupportedByPanel { get { return GetInt32At(8) != 0; } }
        public bool EnableComplete { get { return GetInt32At(12) != 0; } }
        public bool SwDpst { get { return GetInt32At(16) != 0; } }
        public DD_DPST_ALGORITHM_VERSION AlgoVersion { get { return (DD_DPST_ALGORITHM_VERSION)GetInt32At(20); } }
        public uint CurrAggressivenessLevel { get { return (uint)GetInt32At(24); } }
        public uint BacklightPresent { get { return (uint)GetInt32At(28); } }
        public uint BacklightAdjust { get { return (uint)GetInt32At(32); } }
        public bool PhaseOutInProgress { get { return GetInt32At(36) != 0; } }
        public OPST_ALGORITHM_VERSION OpstVersion { get { return (OPST_ALGORITHM_VERSION)GetInt32At(40); } }

        #region Private
        internal DpstDiagData_t(Action<DpstDiagData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 44));
            Debug.Assert(!(Version > 1 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstDiagData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "SupportedByPanel", SupportedByPanel);
             XmlAttrib(sb, "EnableComplete", EnableComplete);
             XmlAttrib(sb, "SwDpst", SwDpst);
             XmlAttrib(sb, "AlgoVersion", AlgoVersion);
             XmlAttrib(sb, "CurrAggressivenessLevel", CurrAggressivenessLevel);
             XmlAttrib(sb, "BacklightPresent", BacklightPresent);
             XmlAttrib(sb, "BacklightAdjust", BacklightAdjust);
             XmlAttrib(sb, "PhaseOutInProgress", PhaseOutInProgress);
             XmlAttrib(sb, "OpstVersion", OpstVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "SupportedByPanel", "EnableComplete", "SwDpst", "AlgoVersion", "CurrAggressivenessLevel", "BacklightPresent", "BacklightAdjust", "PhaseOutInProgress", "OpstVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return SupportedByPanel;
                case 3:
                    return EnableComplete;
                case 4:
                    return SwDpst;
                case 5:
                    return AlgoVersion;
                case 6:
                    return CurrAggressivenessLevel;
                case 7:
                    return BacklightPresent;
                case 8:
                    return BacklightAdjust;
                case 9:
                    return PhaseOutInProgress;
                case 10:
                    return OpstVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstDiagData_t> m_target;
        #endregion
    }
    public sealed class DpstEventHandlerData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint PipeId { get { return (uint)GetInt32At(8); } }
        public uint Deprecated { get { return (uint)GetInt32At(12); } }
        public uint GenericRestrictionsSatisfied { get { return (uint)GetInt32At(16); } }
        public uint Level { get { return (uint)GetInt32At(20); } }
        public uint NewState { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstEventHandlerData_t(Action<DpstEventHandlerData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstEventHandlerData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Deprecated", Deprecated);
             XmlAttrib(sb, "GenericRestrictionsSatisfied", GenericRestrictionsSatisfied);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "NewState", NewState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "Deprecated", "GenericRestrictionsSatisfied", "Level", "NewState", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return Deprecated;
                case 3:
                    return GenericRestrictionsSatisfied;
                case 4:
                    return Level;
                case 5:
                    return NewState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstEventHandlerData_t> m_target;
        #endregion
    }
    public sealed class DpstAlgoVersionData_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DD_DPST_ALGORITHM_VERSION DpstAlgoVersion { get { return (DD_DPST_ALGORITHM_VERSION)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }
        public OPST_ALGORITHM_VERSION OpstVersion { get { return (OPST_ALGORITHM_VERSION)GetInt32At(12); } }

        #region Private
        internal DpstAlgoVersionData_t(Action<DpstAlgoVersionData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstAlgoVersionData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "DpstAlgoVersion", DpstAlgoVersion);
             XmlAttrib(sb, "OpstVersion", OpstVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "DpstAlgoVersion", "BDF", "OpstVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return DpstAlgoVersion;
                case 3:
                    return OpstVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstAlgoVersionData_t> m_target;
        #endregion
    }
    public sealed class DpstStaticData_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint GuardbandInterruptDelay { get { return (uint)GetInt32At(4); } }
        public uint GuardbandIntrDelay_PSR2 { get { return (uint)GetInt32At(8); } }
        public uint MaxImageSize { get { return (uint)GetInt32At(12); } }
        public uint ThresholdGuardband { get { return (uint)GetInt32At(16); } }
        public uint DpstHightlightBin { get { return (uint)GetInt32At(20); } }
        public uint DpstHightlightTh { get { return (uint)GetInt32At(24); } }
        public double PanelGamma { get { return GetDoubleAt(28); } }
        public uint LevelDetailsSize { get { return (uint)GetInt32At(36); } }
        public byte[] LevelDetails { get { return GetByteArrayAt(40, (int)LevelDetailsSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)LevelDetailsSize*1)+40 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstStaticData_t(Action<DpstStaticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)LevelDetailsSize*1)+44));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)LevelDetailsSize*1)+44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstStaticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "GuardbandInterruptDelay", GuardbandInterruptDelay);
             XmlAttrib(sb, "GuardbandIntrDelay_PSR2", GuardbandIntrDelay_PSR2);
             XmlAttrib(sb, "MaxImageSize", MaxImageSize);
             XmlAttrib(sb, "ThresholdGuardband", ThresholdGuardband);
             XmlAttrib(sb, "DpstHightlightBin", DpstHightlightBin);
             XmlAttrib(sb, "DpstHightlightTh", DpstHightlightTh);
             XmlAttrib(sb, "PanelGamma", PanelGamma);
             XmlAttrib(sb, "LevelDetailsSize", LevelDetailsSize);
             XmlAttrib(sb, "LevelDetails", LevelDetails);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "GuardbandInterruptDelay", "GuardbandIntrDelay_PSR2", "MaxImageSize", "ThresholdGuardband", "DpstHightlightBin", "DpstHightlightTh", "PanelGamma", "LevelDetailsSize", "LevelDetails", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return GuardbandInterruptDelay;
                case 2:
                    return GuardbandIntrDelay_PSR2;
                case 3:
                    return MaxImageSize;
                case 4:
                    return ThresholdGuardband;
                case 5:
                    return DpstHightlightBin;
                case 6:
                    return DpstHightlightTh;
                case 7:
                    return PanelGamma;
                case 8:
                    return LevelDetailsSize;
                case 9:
                    return LevelDetails;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstStaticData_t> m_target;
        #endregion
    }
    public sealed class DpstAlgorithm_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint AggrLevel { get { return (uint)GetInt32At(4); } }
        public uint IsEPSMEnabled { get { return (uint)GetInt32At(8); } }
        public uint BacklightAdjust { get { return (uint)GetInt32At(12); } }
        public uint BlackThresholdBinIndex { get { return (uint)GetInt32At(16); } }
        public uint ImageSize { get { return (uint)GetInt32At(20); } }
        public long NumOfHighlightPixels { get { return GetInt64At(24); } }
        public uint LUTSize { get { return (uint)GetInt32At(32); } }
        public byte[] LUT { get { return GetByteArrayAt(36, (int)LUTSize); } }
        public double HistogramChangePercentage { get { return GetDoubleAt(((int)LUTSize*1)+36); } }
        public double BaselineLowerSlope { get { return GetDoubleAt(((int)LUTSize*1)+44); } }
        public double BaselineDistortion { get { return GetDoubleAt(((int)LUTSize*1)+52); } }
        public int OptimalKneePointBinIndex { get { return GetByteAt(((int)LUTSize*1)+60); } }
        public double OptimalLowerSlope { get { return GetDoubleAt(((int)LUTSize*1)+61); } }
        public double OptimalUpperSlope { get { return GetDoubleAt(((int)LUTSize*1)+69); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)LUTSize*1)+77 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstAlgorithm_t(Action<DpstAlgorithm_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)LUTSize*1)+81));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)LUTSize*1)+81));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstAlgorithm_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "AggrLevel", AggrLevel);
             XmlAttrib(sb, "IsEPSMEnabled", IsEPSMEnabled);
             XmlAttrib(sb, "BacklightAdjust", BacklightAdjust);
             XmlAttrib(sb, "BlackThresholdBinIndex", BlackThresholdBinIndex);
             XmlAttrib(sb, "ImageSize", ImageSize);
             XmlAttrib(sb, "NumOfHighlightPixels", NumOfHighlightPixels);
             XmlAttrib(sb, "LUTSize", LUTSize);
             XmlAttrib(sb, "LUT", LUT);
             XmlAttrib(sb, "HistogramChangePercentage", HistogramChangePercentage);
             XmlAttrib(sb, "BaselineLowerSlope", BaselineLowerSlope);
             XmlAttrib(sb, "BaselineDistortion", BaselineDistortion);
             XmlAttrib(sb, "OptimalKneePointBinIndex", OptimalKneePointBinIndex);
             XmlAttrib(sb, "OptimalLowerSlope", OptimalLowerSlope);
             XmlAttrib(sb, "OptimalUpperSlope", OptimalUpperSlope);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "AggrLevel", "IsEPSMEnabled", "BacklightAdjust", "BlackThresholdBinIndex", "ImageSize", "NumOfHighlightPixels", "LUTSize", "LUT", "HistogramChangePercentage", "BaselineLowerSlope", "BaselineDistortion", "OptimalKneePointBinIndex", "OptimalLowerSlope", "OptimalUpperSlope", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return AggrLevel;
                case 2:
                    return IsEPSMEnabled;
                case 3:
                    return BacklightAdjust;
                case 4:
                    return BlackThresholdBinIndex;
                case 5:
                    return ImageSize;
                case 6:
                    return NumOfHighlightPixels;
                case 7:
                    return LUTSize;
                case 8:
                    return LUT;
                case 9:
                    return HistogramChangePercentage;
                case 10:
                    return BaselineLowerSlope;
                case 11:
                    return BaselineDistortion;
                case 12:
                    return OptimalKneePointBinIndex;
                case 13:
                    return OptimalLowerSlope;
                case 14:
                    return OptimalUpperSlope;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstAlgorithm_t> m_target;
        #endregion
    }
    public sealed class DpstPolicyParams_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint NumOfAvailableAggrLevel { get { return (uint)GetInt32At(4); } }
        public uint UserMaximumAggrLevel { get { return (uint)GetInt32At(8); } }
        public bool EPSMSupported { get { return GetInt32At(12) != 0; } }
        public bool EPSMEnabled { get { return GetInt32At(16) != 0; } }

        #region Private
        internal DpstPolicyParams_t(Action<DpstPolicyParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstPolicyParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumOfAvailableAggrLevel", NumOfAvailableAggrLevel);
             XmlAttrib(sb, "UserMaximumAggrLevel", UserMaximumAggrLevel);
             XmlAttrib(sb, "EPSMSupported", EPSMSupported);
             XmlAttrib(sb, "EPSMEnabled", EPSMEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "NumOfAvailableAggrLevel", "UserMaximumAggrLevel", "EPSMSupported", "EPSMEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return NumOfAvailableAggrLevel;
                case 2:
                    return UserMaximumAggrLevel;
                case 3:
                    return EPSMSupported;
                case 4:
                    return EPSMEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstPolicyParams_t> m_target;
        #endregion
    }
    public sealed class DpsSetUserDpsParamsData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint UserSelectedBaseLoRR { get { return (uint)GetInt32At(8); } }

        #region Private
        internal DpsSetUserDpsParamsData_t(Action<DpsSetUserDpsParamsData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpsSetUserDpsParamsData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "UserSelectedBaseLoRR", UserSelectedBaseLoRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "UserSelectedBaseLoRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return UserSelectedBaseLoRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpsSetUserDpsParamsData_t> m_target;
        #endregion
    }
    public sealed class PwrConsEscapeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint Operation { get { return (uint)GetInt32At(8); } }
        public uint DataSize { get { return (uint)GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, (int)DataSize); } }

        #region Private
        internal PwrConsEscapeData_t(Action<PwrConsEscapeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DataSize*1)+16));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PwrConsEscapeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                case 3:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PwrConsEscapeData_t> m_target;
        #endregion
    }
    public sealed class PipeConfChangePipePortMappingData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint PipeId { get { return (uint)GetInt32At(8); } }
        public uint PanelId { get { return (uint)GetInt32At(12); } }
        public uint PortId { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PipeConfChangePipePortMappingData_t(Action<PipeConfChangePipePortMappingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PipeConfChangePipePortMappingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PanelId", PanelId);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "PanelId", "PortId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return PanelId;
                case 3:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PipeConfChangePipePortMappingData_t> m_target;
        #endregion
    }
    public sealed class PowerSourceState_t : TraceEvent
    {
        public DD_PWR_SRC_EVENT_ARGS ActivePwrSrc { get { return (DD_PWR_SRC_EVENT_ARGS)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PowerSourceState_t(Action<PowerSourceState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PowerSourceState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ActivePwrSrc", ActivePwrSrc);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ActivePwrSrc", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ActivePwrSrc;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PowerSourceState_t> m_target;
        #endregion
    }
    public sealed class PcEventNotificationData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint Operation { get { return (uint)GetInt32At(8); } }
        public uint DataSize { get { return (uint)GetInt32At(12); } }
        public byte[] Data { get { return GetByteArrayAt(16, (int)DataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DataSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PcEventNotificationData_t(Action<PcEventNotificationData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)DataSize*1)+20));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcEventNotificationData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Operation", "DataSize", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Operation;
                case 2:
                    return DataSize;
                case 3:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcEventNotificationData_t> m_target;
        #endregion
    }
    public sealed class FbcCfbInit_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public uint CfbSizeRequired { get { return (uint)GetInt32At(12); } }
        public uint CfbSizeAvailable { get { return (uint)GetInt32At(16); } }
        public uint CompressionRatio { get { return (uint)GetInt32At(20); } }
        public long DsmAllocatedByGmm { get { return GetInt64At(24); } }

        #region Private
        internal FbcCfbInit_t(Action<FbcCfbInit_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FbcCfbInit_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "CfbSizeRequired", CfbSizeRequired);
             XmlAttrib(sb, "CfbSizeAvailable", CfbSizeAvailable);
             XmlAttrib(sb, "CompressionRatio", CompressionRatio);
             XmlAttrib(sb, "DsmAllocatedByGmm", DsmAllocatedByGmm);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "TargetId", "CfbSizeRequired", "CfbSizeAvailable", "CompressionRatio", "DsmAllocatedByGmm"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return TargetId;
                case 3:
                    return CfbSizeRequired;
                case 4:
                    return CfbSizeAvailable;
                case 5:
                    return CompressionRatio;
                case 6:
                    return DsmAllocatedByGmm;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FbcCfbInit_t> m_target;
        #endregion
    }
    public sealed class FbcPlaneConfig_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint PlaneBinding { get { return (uint)GetInt32At(8); } }

        #region Private
        internal FbcPlaneConfig_t(Action<FbcPlaneConfig_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FbcPlaneConfig_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PlaneBinding", PlaneBinding);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "PlaneBinding"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return PlaneBinding;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FbcPlaneConfig_t> m_target;
        #endregion
    }
    public sealed class GheTriggerParams_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint Lux { get { return (uint)GetInt32At(4); } }
        public uint TriggerLuxThreshold { get { return (uint)GetInt32At(8); } }
        public double AggressivenessFactor { get { return GetDoubleAt(12); } }
        public GHE_TRIGGER TriggerMode { get { return (GHE_TRIGGER)GetInt32At(20); } }
        public uint NumOfEntries { get { return (uint)GetInt32At(24); } }
        public uint LuxToAggrMappingTableSize { get { return (uint)GetInt32At(28); } }
        public byte[] LuxToAggrMappingTable { get { return GetByteArrayAt(32, (int)LuxToAggrMappingTableSize); } }
        public int FixedAggressivenessPercent { get { return GetByteAt(((int)LuxToAggrMappingTableSize*1)+32); } }

        #region Private
        internal GheTriggerParams_t(Action<GheTriggerParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)LuxToAggrMappingTableSize*1)+33));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)LuxToAggrMappingTableSize*1)+33));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GheTriggerParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Lux", Lux);
             XmlAttrib(sb, "TriggerLuxThreshold", TriggerLuxThreshold);
             XmlAttrib(sb, "AggressivenessFactor", AggressivenessFactor);
             XmlAttrib(sb, "TriggerMode", TriggerMode);
             XmlAttrib(sb, "NumOfEntries", NumOfEntries);
             XmlAttrib(sb, "LuxToAggrMappingTableSize", LuxToAggrMappingTableSize);
             XmlAttrib(sb, "LuxToAggrMappingTable", LuxToAggrMappingTable);
             XmlAttrib(sb, "FixedAggressivenessPercent", FixedAggressivenessPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Lux", "TriggerLuxThreshold", "AggressivenessFactor", "TriggerMode", "NumOfEntries", "LuxToAggrMappingTableSize", "LuxToAggrMappingTable", "FixedAggressivenessPercent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Lux;
                case 2:
                    return TriggerLuxThreshold;
                case 3:
                    return AggressivenessFactor;
                case 4:
                    return TriggerMode;
                case 5:
                    return NumOfEntries;
                case 6:
                    return LuxToAggrMappingTableSize;
                case 7:
                    return LuxToAggrMappingTable;
                case 8:
                    return FixedAggressivenessPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GheTriggerParams_t> m_target;
        #endregion
    }
    public sealed class GheRestrictions_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool XpstAddRestrictionSatisfied { get { return GetInt32At(4) != 0; } }
        public bool XpstDynamicRestricionsSatisfied { get { return GetInt32At(8) != 0; } }
        public bool GenericRestrictionsSatisfied { get { return GetInt32At(12) != 0; } }
        public int GheRestriction { get { return GetByteAt(16); } }

        #region Private
        internal GheRestrictions_t(Action<GheRestrictions_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GheRestrictions_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "XpstAddRestrictionSatisfied", XpstAddRestrictionSatisfied);
             XmlAttrib(sb, "XpstDynamicRestricionsSatisfied", XpstDynamicRestricionsSatisfied);
             XmlAttrib(sb, "GenericRestrictionsSatisfied", GenericRestrictionsSatisfied);
             XmlAttrib(sb, "GheRestriction", GheRestriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "XpstAddRestrictionSatisfied", "XpstDynamicRestricionsSatisfied", "GenericRestrictionsSatisfied", "GheRestriction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return XpstAddRestrictionSatisfied;
                case 2:
                    return XpstDynamicRestricionsSatisfied;
                case 3:
                    return GenericRestrictionsSatisfied;
                case 4:
                    return GheRestriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GheRestrictions_t> m_target;
        #endregion
    }
    public sealed class GheEventHandler_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetByteAt(4); } }
        public bool IsPrimaryDisplay { get { return GetInt32At(5) != 0; } }
        public PC_FEATURE_STATE CurrentState { get { return (PC_FEATURE_STATE)GetInt32At(9); } }
        public PC_FEATURE_STATE NewState { get { return (PC_FEATURE_STATE)GetInt32At(13); } }

        #region Private
        internal GheEventHandler_t(Action<GheEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GheEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IsPrimaryDisplay", IsPrimaryDisplay);
             XmlAttrib(sb, "CurrentState", CurrentState);
             XmlAttrib(sb, "NewState", NewState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "IsPrimaryDisplay", "CurrentState", "NewState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return IsPrimaryDisplay;
                case 3:
                    return CurrentState;
                case 4:
                    return NewState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GheEventHandler_t> m_target;
        #endregion
    }
    public sealed class GheInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public bool IsPrimaryDisplay { get { return GetInt32At(8) != 0; } }
        public bool IsSupportedByPanel { get { return GetInt32At(12) != 0; } }
        public bool PhaseOutInProgress { get { return GetInt32At(16) != 0; } }
        public bool PipePhaseOutGhe { get { return GetInt32At(20) != 0; } }
        public bool IsGheSupported { get { return GetInt32At(24) != 0; } }

        #region Private
        internal GheInfo_t(Action<GheInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GheInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IsPrimaryDisplay", IsPrimaryDisplay);
             XmlAttrib(sb, "IsSupportedByPanel", IsSupportedByPanel);
             XmlAttrib(sb, "PhaseOutInProgress", PhaseOutInProgress);
             XmlAttrib(sb, "PipePhaseOutGhe", PipePhaseOutGhe);
             XmlAttrib(sb, "IsGheSupported", IsGheSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "IsPrimaryDisplay", "IsSupportedByPanel", "PhaseOutInProgress", "PipePhaseOutGhe", "IsGheSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return IsPrimaryDisplay;
                case 3:
                    return IsSupportedByPanel;
                case 4:
                    return PhaseOutInProgress;
                case 5:
                    return PipePhaseOutGhe;
                case 6:
                    return IsGheSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GheInfo_t> m_target;
        #endregion
    }
    public sealed class GheAlgorithm_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint ImageSize { get { return (uint)GetInt32At(8); } }
        public double HistogramChangePercentage { get { return GetDoubleAt(12); } }
        public uint Lux { get { return (uint)GetInt32At(20); } }
        public double AggressivenessFactor { get { return GetDoubleAt(24); } }
        public uint LutSize { get { return (uint)GetInt32At(32); } }
        public byte[] LUT { get { return GetByteArrayAt(36, (int)LutSize); } }

        #region Private
        internal GheAlgorithm_t(Action<GheAlgorithm_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)LutSize*1)+36));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)LutSize*1)+36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GheAlgorithm_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "ImageSize", ImageSize);
             XmlAttrib(sb, "HistogramChangePercentage", HistogramChangePercentage);
             XmlAttrib(sb, "Lux", Lux);
             XmlAttrib(sb, "AggressivenessFactor", AggressivenessFactor);
             XmlAttrib(sb, "LutSize", LutSize);
             XmlAttrib(sb, "LUT", LUT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "ImageSize", "HistogramChangePercentage", "Lux", "AggressivenessFactor", "LutSize", "LUT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return ImageSize;
                case 3:
                    return HistogramChangePercentage;
                case 4:
                    return Lux;
                case 5:
                    return AggressivenessFactor;
                case 6:
                    return LutSize;
                case 7:
                    return LUT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GheAlgorithm_t> m_target;
        #endregion
    }
    public sealed class DisplayPcFeaturePolicy_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint FeaturePolicyInDC { get { return (uint)GetInt32At(4); } }
        public uint FeaturePolicyInAC { get { return (uint)GetInt32At(8); } }

        #region Private
        internal DisplayPcFeaturePolicy_t(Action<DisplayPcFeaturePolicy_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcFeaturePolicy_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FeaturePolicyInDC", FeaturePolicyInDC);
             XmlAttrib(sb, "FeaturePolicyInAC", FeaturePolicyInAC);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "FeaturePolicyInDC", "FeaturePolicyInAC"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return FeaturePolicyInDC;
                case 2:
                    return FeaturePolicyInAC;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcFeaturePolicy_t> m_target;
        #endregion
    }
    public sealed class DisplayPcPolicyTable_t : TraceEvent
    {
        public uint IsCsSupported { get { return (uint)GetInt32At(0); } }
        public uint ActivePwrConsPolicy { get { return (uint)GetInt32At(4); } }
        public uint PwrPolicyVersion { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayPcPolicyTable_t(Action<DisplayPcPolicyTable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcPolicyTable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsCsSupported", IsCsSupported);
             XmlAttrib(sb, "ActivePwrConsPolicy", ActivePwrConsPolicy);
             XmlAttrib(sb, "PwrPolicyVersion", PwrPolicyVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsCsSupported", "ActivePwrConsPolicy", "PwrPolicyVersion", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsCsSupported;
                case 1:
                    return ActivePwrConsPolicy;
                case 2:
                    return PwrPolicyVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcPolicyTable_t> m_target;
        #endregion
    }
    public sealed class DisplayPcLfpDetails_t : TraceEvent
    {
        public uint LfpId { get { return (uint)GetInt32At(0); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint NumEnumeratedLfps { get { return (uint)GetInt32At(12); } }
        public double PanelGamma { get { return GetDoubleAt(16); } }
        public uint IsPortSyncSupported { get { return (uint)GetInt32At(24); } }
        public uint NoOfMsoPanelsPresent { get { return (uint)GetInt32At(28); } }
        public uint IsCommandModeSupported { get { return (uint)GetInt32At(32); } }
        public int BDF(int arrayIndex) { return GetByteAt(36 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayPcLfpDetails_t(Action<DisplayPcLfpDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 40));
            Debug.Assert(!(Version > 1 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcLfpDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LfpId", LfpId);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "NumEnumeratedLfps", NumEnumeratedLfps);
             XmlAttrib(sb, "PanelGamma", PanelGamma);
             XmlAttrib(sb, "IsPortSyncSupported", IsPortSyncSupported);
             XmlAttrib(sb, "NoOfMsoPanelsPresent", NoOfMsoPanelsPresent);
             XmlAttrib(sb, "IsCommandModeSupported", IsCommandModeSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LfpId", "SinkType", "Port", "NumEnumeratedLfps", "PanelGamma", "IsPortSyncSupported", "NoOfMsoPanelsPresent", "IsCommandModeSupported", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LfpId;
                case 1:
                    return SinkType;
                case 2:
                    return Port;
                case 3:
                    return NumEnumeratedLfps;
                case 4:
                    return PanelGamma;
                case 5:
                    return IsPortSyncSupported;
                case 6:
                    return NoOfMsoPanelsPresent;
                case 7:
                    return IsCommandModeSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcLfpDetails_t> m_target;
        #endregion
    }
    public sealed class LaceApplyIeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint Row { get { return (uint)GetInt32At(8); } }
        public uint Column { get { return (uint)GetInt32At(12); } }
        public uint DataSize { get { return (uint)GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, (int)DataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DataSize*1)+20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal LaceApplyIeData_t(Action<LaceApplyIeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)DataSize*1)+24));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)DataSize*1)+24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceApplyIeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                case 4:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceApplyIeData_t> m_target;
        #endregion
    }
    public sealed class LaceClientEventHandler_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint DataSize { get { return (uint)GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, (int)DataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DataSize*1)+12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal LaceClientEventHandler_t(Action<LaceClientEventHandler_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)DataSize*1)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)DataSize*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceClientEventHandler_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceClientEventHandler_t> m_target;
        #endregion
    }
    public sealed class LaceControlData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint ControlData { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal LaceControlData_t(Action<LaceControlData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceControlData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "ControlData", ControlData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "ControlData", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return ControlData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceControlData_t> m_target;
        #endregion
    }
    public sealed class Lace_Restriction_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public bool Lace_Support { get { return GetInt32At(8) != 0; } }
        public DD_LACE_RESTRICTION Restriction { get { return (DD_LACE_RESTRICTION)GetInt32At(12); } }

        #region Private
        internal Lace_Restriction_t(Action<Lace_Restriction_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Lace_Restriction_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "Lace_Support", Lace_Support);
             XmlAttrib(sb, "Restriction", Restriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeID", "Lace_Support", "Restriction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeID;
                case 2:
                    return Lace_Support;
                case 3:
                    return Restriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Lace_Restriction_t> m_target;
        #endregion
    }
    public sealed class LaceHistogramReadData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint Row { get { return (uint)GetInt32At(8); } }
        public uint Column { get { return (uint)GetInt32At(12); } }
        public uint DataSize { get { return (uint)GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, (int)DataSize); } }

        #region Private
        internal LaceHistogramReadData_t(Action<LaceHistogramReadData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DataSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DataSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LaceHistogramReadData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Row", Row);
             XmlAttrib(sb, "Column", Column);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Row", "Column", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Row;
                case 2:
                    return Column;
                case 3:
                    return DataSize;
                case 4:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LaceHistogramReadData_t> m_target;
        #endregion
    }
    public sealed class Lace_Operations_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_LACE_OPS Operation { get { return (DD_LACE_OPS)GetInt32At(8); } }
        public bool Pipe_Supported { get { return GetInt32At(12) != 0; } }

        #region Private
        internal Lace_Operations_t(Action<Lace_Operations_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Lace_Operations_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Pipe_Supported", Pipe_Supported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeID", "Operation", "Pipe_Supported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeID;
                case 2:
                    return Operation;
                case 3:
                    return Pipe_Supported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Lace_Operations_t> m_target;
        #endregion
    }
    public sealed class PcRegValueFullPathDword_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public string Path { get { return GetUnicodeStringAt(8); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public uint Data { get { return (uint)GetInt32At(SkipUnicodeString(SkipUnicodeString(8))); } }
        public uint ReturnStatus { get { return (uint)GetInt32At(SkipUnicodeString(SkipUnicodeString(8))+4); } }
        public int BDF(int arrayIndex) { return GetByteAt(SkipUnicodeString(SkipUnicodeString(8))+8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PcRegValueFullPathDword_t(Action<PcRegValueFullPathDword_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcRegValueFullPathDword_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "Path", "Name", "Data", "ReturnStatus", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return Path;
                case 2:
                    return Name;
                case 3:
                    return Data;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcRegValueFullPathDword_t> m_target;
        #endregion
    }
    public sealed class PsrPrEvents_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DISPLAY_PC_EVENT_NOTIFICATION_OPERATION Operation { get { return (DISPLAY_PC_EVENT_NOTIFICATION_OPERATION)GetInt32At(4); } }
        public uint Field1 { get { return (uint)GetInt32At(8); } }
        public uint Field2 { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PsrPrEvents_t(Action<PsrPrEvents_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrPrEvents_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Field1", Field1);
             XmlAttrib(sb, "Field2", Field2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Operation", "Field1", "Field2", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Operation;
                case 2:
                    return Field1;
                case 3:
                    return Field2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrPrEvents_t> m_target;
        #endregion
    }
    public sealed class LobfRestrictionInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_DISPLAY_PC_LOBF_RESTRICTION Restriction { get { return (DD_DISPLAY_PC_LOBF_RESTRICTION)GetInt32At(8); } }
        public bool IsLobfEnabled { get { return GetInt32At(12) != 0; } }

        #region Private
        internal LobfRestrictionInfo_t(Action<LobfRestrictionInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LobfRestrictionInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Restriction", Restriction);
             XmlAttrib(sb, "IsLobfEnabled", IsLobfEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Restriction", "IsLobfEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Restriction;
                case 3:
                    return IsLobfEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LobfRestrictionInfo_t> m_target;
        #endregion
    }
    public sealed class DisplayPcLRR_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public uint IsINFPnPIdBasedLRRVersion { get { return (uint)GetInt32At(8); } }
        public DD_LRR_VERSION LrrVersion { get { return (DD_LRR_VERSION)GetInt32At(12); } }

        #region Private
        internal DisplayPcLRR_t(Action<DisplayPcLRR_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPcLRR_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "IsINFPnPIdBasedLRRVersion", IsINFPnPIdBasedLRRVersion);
             XmlAttrib(sb, "LrrVersion", LrrVersion);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "IsINFPnPIdBasedLRRVersion", "LrrVersion"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return IsINFPnPIdBasedLRRVersion;
                case 3:
                    return LrrVersion;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPcLRR_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorContextData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint PipeId { get { return (uint)GetInt32At(8); } }
        public uint DataSize { get { return (uint)GetInt32At(12); } }
        public byte[] DpstPhaseAdjustInfo { get { return GetByteArrayAt(16, (int)DataSize); } }
        public byte[] BlcUserAdjustInfo { get { return GetByteArrayAt(((int)DataSize*1)+16, (int)DataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DataSize*1)+ ((int)DataSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(((int)DataSize*1)+ ((int)DataSize*1)+20); } }
        public uint BlcPhaseAdjustDataSize { get { return (uint)GetInt32At(((int)DataSize*1)+ ((int)DataSize*1)+24); } }
        public byte[] BlcAdjustInfo { get { return GetByteArrayAt(((int)DataSize*1)+ ((int)DataSize*1)+28, (int)BlcPhaseAdjustDataSize); } }

        #region Private
        internal PhaseCoordinatorContextData_t(Action<PhaseCoordinatorContextData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)BlcPhaseAdjustDataSize*1)+ ((int)DataSize*1)+ ((int)DataSize*1)+28));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)BlcPhaseAdjustDataSize*1)+ ((int)DataSize*1)+ ((int)DataSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorContextData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "DpstPhaseAdjustInfo", DpstPhaseAdjustInfo);
             XmlAttrib(sb, "BlcUserAdjustInfo", BlcUserAdjustInfo);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "BlcPhaseAdjustDataSize", BlcPhaseAdjustDataSize);
             XmlAttrib(sb, "BlcAdjustInfo", BlcAdjustInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "DataSize", "DpstPhaseAdjustInfo", "BlcUserAdjustInfo", "BDF", "Port", "BlcPhaseAdjustDataSize", "BlcAdjustInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return DataSize;
                case 3:
                    return DpstPhaseAdjustInfo;
                case 4:
                    return BlcUserAdjustInfo;
                case 6:
                    return Port;
                case 7:
                    return BlcPhaseAdjustDataSize;
                case 8:
                    return BlcAdjustInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorContextData_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorProgramAdjustData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint PipeId { get { return (uint)GetInt32At(8); } }
        public uint Adjust { get { return (uint)GetInt32At(12); } }
        public uint Feature { get { return (uint)GetInt32At(16); } }
        public uint Immediate { get { return (uint)GetInt32At(20); } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(28); } }

        #region Private
        internal PhaseCoordinatorProgramAdjustData_t(Action<PhaseCoordinatorProgramAdjustData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 32));
            Debug.Assert(!(Version > 2 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorProgramAdjustData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Adjust", Adjust);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "Immediate", Immediate);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "Adjust", "Feature", "Immediate", "BDF", "Port"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return Adjust;
                case 3:
                    return Feature;
                case 4:
                    return Immediate;
                case 6:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorProgramAdjustData_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorSetupDpstPhasing_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint PipeId { get { return (uint)GetInt32At(8); } }
        public uint IncrementPerMil { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PhaseCoordinatorSetupDpstPhasing_t(Action<PhaseCoordinatorSetupDpstPhasing_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorSetupDpstPhasing_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IncrementPerMil", IncrementPerMil);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "IncrementPerMil", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return IncrementPerMil;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorSetupDpstPhasing_t> m_target;
        #endregion
    }
    public sealed class SmoothenDpstTemporalLutData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public uint IETEntry { get { return (uint)GetInt32At(12); } }
        public uint MultiplierLutCurrent { get { return (uint)GetInt32At(16); } }
        public uint MultiplierLutTarget { get { return (uint)GetInt32At(20); } }
        public double IETHistory0 { get { return GetDoubleAt(24); } }
        public double IETHistory1 { get { return GetDoubleAt(32); } }
        public double IETHistory2 { get { return GetDoubleAt(40); } }
        public int BDF(int arrayIndex) { return GetByteAt(48 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SmoothenDpstTemporalLutData_t(Action<SmoothenDpstTemporalLutData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 52));
            Debug.Assert(!(Version > 0 && EventDataLength < 52));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SmoothenDpstTemporalLutData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IETEntry", IETEntry);
             XmlAttrib(sb, "MultiplierLutCurrent", MultiplierLutCurrent);
             XmlAttrib(sb, "MultiplierLutTarget", MultiplierLutTarget);
             XmlAttrib(sb, "IETHistory0", IETHistory0);
             XmlAttrib(sb, "IETHistory1", IETHistory1);
             XmlAttrib(sb, "IETHistory2", IETHistory2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "IETEntry", "MultiplierLutCurrent", "MultiplierLutTarget", "IETHistory0", "IETHistory1", "IETHistory2", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return IETEntry;
                case 3:
                    return MultiplierLutCurrent;
                case 4:
                    return MultiplierLutTarget;
                case 5:
                    return IETHistory0;
                case 6:
                    return IETHistory1;
                case 7:
                    return IETHistory2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SmoothenDpstTemporalLutData_t> m_target;
        #endregion
    }
    public sealed class SmoothenBlcTemporalData_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint BrightnessAdjustCurrent { get { return (uint)GetInt32At(4); } }
        public uint BrightnessAdjustTarget { get { return (uint)GetInt32At(8); } }
        public double BrightnessHistory0 { get { return GetDoubleAt(12); } }
        public double BrightnessHistory1 { get { return GetDoubleAt(20); } }
        public double BrightnessHistory2 { get { return GetDoubleAt(28); } }
        public int BDF(int arrayIndex) { return GetByteAt(36 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SmoothenBlcTemporalData_t(Action<SmoothenBlcTemporalData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SmoothenBlcTemporalData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "BrightnessAdjustCurrent", BrightnessAdjustCurrent);
             XmlAttrib(sb, "BrightnessAdjustTarget", BrightnessAdjustTarget);
             XmlAttrib(sb, "BrightnessHistory0", BrightnessHistory0);
             XmlAttrib(sb, "BrightnessHistory1", BrightnessHistory1);
             XmlAttrib(sb, "BrightnessHistory2", BrightnessHistory2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "BrightnessAdjustCurrent", "BrightnessAdjustTarget", "BrightnessHistory0", "BrightnessHistory1", "BrightnessHistory2", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return BrightnessAdjustCurrent;
                case 2:
                    return BrightnessAdjustTarget;
                case 3:
                    return BrightnessHistory0;
                case 4:
                    return BrightnessHistory1;
                case 5:
                    return BrightnessHistory2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SmoothenBlcTemporalData_t> m_target;
        #endregion
    }
    public sealed class DpstIirFilterCoefficientData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public double MinCutoffFreq { get { return GetDoubleAt(12); } }
        public double MaxCutoffFreq { get { return GetDoubleAt(20); } }
        public double AdaptiveCutOffFreq { get { return GetDoubleAt(28); } }
        public double AngularFreq { get { return GetDoubleAt(36); } }
        public double MinDpstSmootheningPeriod { get { return GetDoubleAt(44); } }
        public double TemporalFilterCoefficient { get { return GetDoubleAt(52); } }
        public int BDF(int arrayIndex) { return GetByteAt(60 + (arrayIndex * HostOffset(1, 0))); }
        public DISPLAY_PWRCON_FEATURE Feature { get { return (DISPLAY_PWRCON_FEATURE)GetInt32At(64); } }

        #region Private
        internal DpstIirFilterCoefficientData_t(Action<DpstIirFilterCoefficientData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 68));
            Debug.Assert(!(Version > 1 && EventDataLength < 68));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstIirFilterCoefficientData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "MinCutoffFreq", MinCutoffFreq);
             XmlAttrib(sb, "MaxCutoffFreq", MaxCutoffFreq);
             XmlAttrib(sb, "AdaptiveCutOffFreq", AdaptiveCutOffFreq);
             XmlAttrib(sb, "AngularFreq", AngularFreq);
             XmlAttrib(sb, "MinDpstSmootheningPeriod", MinDpstSmootheningPeriod);
             XmlAttrib(sb, "TemporalFilterCoefficient", TemporalFilterCoefficient);
             XmlAttrib(sb, "Feature", Feature);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PipeId", "MinCutoffFreq", "MaxCutoffFreq", "AdaptiveCutOffFreq", "AngularFreq", "MinDpstSmootheningPeriod", "TemporalFilterCoefficient", "BDF", "Feature"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PipeId;
                case 2:
                    return MinCutoffFreq;
                case 3:
                    return MaxCutoffFreq;
                case 4:
                    return AdaptiveCutOffFreq;
                case 5:
                    return AngularFreq;
                case 6:
                    return MinDpstSmootheningPeriod;
                case 7:
                    return TemporalFilterCoefficient;
                case 9:
                    return Feature;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstIirFilterCoefficientData_t> m_target;
        #endregion
    }
    public sealed class SmoothenDpstTemporalData_t : TraceEvent
    {
        public long Timestamp { get { return GetInt64At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public double CurrentAppliedBoost { get { return GetDoubleAt(12); } }
        public double TargetBoost { get { return GetDoubleAt(20); } }
        public double MinimumStepPercent { get { return GetDoubleAt(28); } }
        public int BDF(int arrayIndex) { return GetByteAt(36 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SmoothenDpstTemporalData_t(Action<SmoothenDpstTemporalData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SmoothenDpstTemporalData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Timestamp", Timestamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "CurrentAppliedBoost", CurrentAppliedBoost);
             XmlAttrib(sb, "TargetBoost", TargetBoost);
             XmlAttrib(sb, "MinimumStepPercent", MinimumStepPercent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Timestamp", "PipeId", "CurrentAppliedBoost", "TargetBoost", "MinimumStepPercent", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Timestamp;
                case 1:
                    return PipeId;
                case 2:
                    return CurrentAppliedBoost;
                case 3:
                    return TargetBoost;
                case 4:
                    return MinimumStepPercent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SmoothenDpstTemporalData_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorContextData_7_x_t : TraceEvent
    {
        public long Timestamp { get { return GetInt64At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public double CurrentAppliedBoost1 { get { return GetDoubleAt(12); } }
        public double TargetBoost { get { return GetDoubleAt(20); } }
        public double MinimumStepThreshold { get { return GetDoubleAt(28); } }
        public uint CurrentMinCutOffFreqInMilliHz { get { return (uint)GetInt32At(36); } }
        public int BDF(int arrayIndex) { return GetByteAt(40 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PhaseCoordinatorContextData_7_x_t(Action<PhaseCoordinatorContextData_7_x_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 44));
            Debug.Assert(!(Version > 0 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorContextData_7_x_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Timestamp", Timestamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "CurrentAppliedBoost1", CurrentAppliedBoost1);
             XmlAttrib(sb, "TargetBoost", TargetBoost);
             XmlAttrib(sb, "MinimumStepThreshold", MinimumStepThreshold);
             XmlAttrib(sb, "CurrentMinCutOffFreqInMilliHz", CurrentMinCutOffFreqInMilliHz);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Timestamp", "PipeId", "CurrentAppliedBoost1", "TargetBoost", "MinimumStepThreshold", "CurrentMinCutOffFreqInMilliHz", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Timestamp;
                case 1:
                    return PipeId;
                case 2:
                    return CurrentAppliedBoost1;
                case 3:
                    return TargetBoost;
                case 4:
                    return MinimumStepThreshold;
                case 5:
                    return CurrentMinCutOffFreqInMilliHz;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorContextData_7_x_t> m_target;
        #endregion
    }
    public sealed class PhaseCoordinatorProgramAdjustData_7_x_t : TraceEvent
    {
        public long Timestamp { get { return GetInt64At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public double CurrentAppliedBoost { get { return GetDoubleAt(12); } }
        public double TargetBoost { get { return GetDoubleAt(20); } }
        public double MinimumStepThreshold { get { return GetDoubleAt(28); } }
        public uint CurrentMinCutOffFreqInMilliHz { get { return (uint)GetInt32At(36); } }
        public DISPLAY_PWRCON_FEATURE Feature { get { return (DISPLAY_PWRCON_FEATURE)GetInt32At(40); } }
        public uint Immediate { get { return (uint)GetInt32At(44); } }
        public int BDF(int arrayIndex) { return GetByteAt(48 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PhaseCoordinatorProgramAdjustData_7_x_t(Action<PhaseCoordinatorProgramAdjustData_7_x_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 52));
            Debug.Assert(!(Version > 0 && EventDataLength < 52));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PhaseCoordinatorProgramAdjustData_7_x_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Timestamp", Timestamp);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "CurrentAppliedBoost", CurrentAppliedBoost);
             XmlAttrib(sb, "TargetBoost", TargetBoost);
             XmlAttrib(sb, "MinimumStepThreshold", MinimumStepThreshold);
             XmlAttrib(sb, "CurrentMinCutOffFreqInMilliHz", CurrentMinCutOffFreqInMilliHz);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "Immediate", Immediate);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Timestamp", "PipeId", "CurrentAppliedBoost", "TargetBoost", "MinimumStepThreshold", "CurrentMinCutOffFreqInMilliHz", "Feature", "Immediate", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Timestamp;
                case 1:
                    return PipeId;
                case 2:
                    return CurrentAppliedBoost;
                case 3:
                    return TargetBoost;
                case 4:
                    return MinimumStepThreshold;
                case 5:
                    return CurrentMinCutOffFreqInMilliHz;
                case 6:
                    return Feature;
                case 7:
                    return Immediate;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PhaseCoordinatorProgramAdjustData_7_x_t> m_target;
        #endregion
    }
    public sealed class PcPhaseCoordinatorDpsMamStartTimer_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public long PhaseTimeOut { get { return GetInt64At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PcPhaseCoordinatorDpsMamStartTimer_t(Action<PcPhaseCoordinatorDpsMamStartTimer_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcPhaseCoordinatorDpsMamStartTimer_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "PhaseTimeOut", PhaseTimeOut);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "PhaseTimeOut", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return PhaseTimeOut;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcPhaseCoordinatorDpsMamStartTimer_t> m_target;
        #endregion
    }
    public sealed class PsrPrClientEvent_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public PSR_EVENT_TYPE Operation { get { return (PSR_EVENT_TYPE)GetInt32At(4); } }
        public int Field1 { get { return GetInt32At(8); } }
        public int Field2 { get { return GetInt32At(12); } }

        #region Private
        internal PsrPrClientEvent_t(Action<PsrPrClientEvent_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrPrClientEvent_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Field1", Field1);
             XmlAttrib(sb, "Field2", Field2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Operation", "Field1", "Field2"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Operation;
                case 2:
                    return Field1;
                case 3:
                    return Field2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrPrClientEvent_t> m_target;
        #endregion
    }
    public sealed class PsrPrStatus_t : TraceEvent
    {
        public uint PipeId { get { return (uint)GetInt32At(0); } }
        public uint Port { get { return (uint)GetInt32At(4); } }
        public DD_PSR_PR_COMMAND Command { get { return (DD_PSR_PR_COMMAND)GetInt32At(8); } }
        public uint ContinuousFullFrameFetchEnable { get { return (uint)GetInt32At(12); } }
        public uint SingleFullFrameFetchEnable { get { return (uint)GetInt32At(16); } }
        public uint Psr2SuManTrackSupported { get { return (uint)GetInt32At(20); } }
        public uint Psr2SelectiveFetchSupport { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PsrPrStatus_t(Action<PsrPrStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrPrStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Command", Command);
             XmlAttrib(sb, "ContinuousFullFrameFetchEnable", ContinuousFullFrameFetchEnable);
             XmlAttrib(sb, "SingleFullFrameFetchEnable", SingleFullFrameFetchEnable);
             XmlAttrib(sb, "Psr2SuManTrackSupported", Psr2SuManTrackSupported);
             XmlAttrib(sb, "Psr2SelectiveFetchSupport", Psr2SelectiveFetchSupport);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Port", "Command", "ContinuousFullFrameFetchEnable", "SingleFullFrameFetchEnable", "Psr2SuManTrackSupported", "Psr2SelectiveFetchSupport", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Port;
                case 2:
                    return Command;
                case 3:
                    return ContinuousFullFrameFetchEnable;
                case 4:
                    return SingleFullFrameFetchEnable;
                case 5:
                    return Psr2SuManTrackSupported;
                case 6:
                    return Psr2SelectiveFetchSupport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrPrStatus_t> m_target;
        #endregion
    }
    public sealed class Sfsu_Dpst_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public bool IsSwTriggeredDpst { get { return GetInt32At(4) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Sfsu_Dpst_t(Action<Sfsu_Dpst_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Sfsu_Dpst_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IsSwTriggeredDpst", IsSwTriggeredDpst);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "IsSwTriggeredDpst", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return IsSwTriggeredDpst;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Sfsu_Dpst_t> m_target;
        #endregion
    }
    public sealed class PsrRestrictionsInfo_t : TraceEvent
    {
        public long PsrSetupTimeInNs { get { return GetInt64At(0); } }
        public long VblankTimeInNs { get { return GetInt64At(8); } }
        public long LineTimeInNs { get { return GetInt64At(16); } }
        public bool IsSuSupported { get { return GetInt32At(24) != 0; } }
        public int Bpc { get { return GetByteAt(28); } }
        public uint SrcSizeX { get { return (uint)GetInt32At(29); } }
        public uint SrcSizeY { get { return (uint)GetInt32At(33); } }
        public uint VblankInLines { get { return (uint)GetInt32At(37); } }
        public int BlockCountLines { get { return GetByteAt(41); } }
        public int BDF(int arrayIndex) { return GetByteAt(42 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(46); } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(50); } }

        #region Private
        internal PsrRestrictionsInfo_t(Action<PsrRestrictionsInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 54));
            Debug.Assert(!(Version > 1 && EventDataLength < 54));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrRestrictionsInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PsrSetupTimeInNs", PsrSetupTimeInNs);
             XmlAttrib(sb, "VblankTimeInNs", VblankTimeInNs);
             XmlAttrib(sb, "LineTimeInNs", LineTimeInNs);
             XmlAttrib(sb, "IsSuSupported", IsSuSupported);
             XmlAttrib(sb, "Bpc", Bpc);
             XmlAttrib(sb, "SrcSizeX", SrcSizeX);
             XmlAttrib(sb, "SrcSizeY", SrcSizeY);
             XmlAttrib(sb, "VblankInLines", VblankInLines);
             XmlAttrib(sb, "BlockCountLines", BlockCountLines);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PsrSetupTimeInNs", "VblankTimeInNs", "LineTimeInNs", "IsSuSupported", "Bpc", "SrcSizeX", "SrcSizeY", "VblankInLines", "BlockCountLines", "BDF", "PipeId", "PortId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PsrSetupTimeInNs;
                case 1:
                    return VblankTimeInNs;
                case 2:
                    return LineTimeInNs;
                case 3:
                    return IsSuSupported;
                case 4:
                    return Bpc;
                case 5:
                    return SrcSizeX;
                case 6:
                    return SrcSizeY;
                case 7:
                    return VblankInLines;
                case 8:
                    return BlockCountLines;
                case 10:
                    return PipeId;
                case 11:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrRestrictionsInfo_t> m_target;
        #endregion
    }
    public sealed class PsrSwEventRestrictions_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetByteAt(4); } }
        public uint PsrSwRestrictions { get { return (uint)GetInt32At(5); } }
        public int AuxClientCounter { get { return GetInt32At(9); } }

        #region Private
        internal PsrSwEventRestrictions_t(Action<PsrSwEventRestrictions_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 13));
            Debug.Assert(!(Version > 0 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrSwEventRestrictions_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PsrSwRestrictions", PsrSwRestrictions);
             XmlAttrib(sb, "AuxClientCounter", AuxClientCounter);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "PsrSwRestrictions", "AuxClientCounter"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return PsrSwRestrictions;
                case 3:
                    return AuxClientCounter;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrSwEventRestrictions_t> m_target;
        #endregion
    }
    public sealed class Psr2SdpTransTimeData_t : TraceEvent
    {
        public uint HBlankTimeInNsInOneDecPrecision { get { return (uint)GetInt32At(0); } }
        public uint Psr2SdpTransTimeInNsInOneDecPrecision { get { return (uint)GetInt32At(4); } }
        public uint LinkRateInMbps { get { return (uint)GetInt32At(8); } }
        public DD_LANE_WIDTH NumOfLanesInUse { get { return (DD_LANE_WIDTH)GetByteAt(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(13 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(17); } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(21); } }

        #region Private
        internal Psr2SdpTransTimeData_t(Action<Psr2SdpTransTimeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 25));
            Debug.Assert(!(Version > 1 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Psr2SdpTransTimeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HBlankTimeInNsInOneDecPrecision", HBlankTimeInNsInOneDecPrecision);
             XmlAttrib(sb, "Psr2SdpTransTimeInNsInOneDecPrecision", Psr2SdpTransTimeInNsInOneDecPrecision);
             XmlAttrib(sb, "LinkRateInMbps", LinkRateInMbps);
             XmlAttrib(sb, "NumOfLanesInUse", NumOfLanesInUse);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HBlankTimeInNsInOneDecPrecision", "Psr2SdpTransTimeInNsInOneDecPrecision", "LinkRateInMbps", "NumOfLanesInUse", "BDF", "PipeId", "PortId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HBlankTimeInNsInOneDecPrecision;
                case 1:
                    return Psr2SdpTransTimeInNsInOneDecPrecision;
                case 2:
                    return LinkRateInMbps;
                case 3:
                    return NumOfLanesInUse;
                case 5:
                    return PipeId;
                case 6:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Psr2SdpTransTimeData_t> m_target;
        #endregion
    }
    public sealed class PsrPrStaticData_t : TraceEvent
    {
        public uint PipeId { get { return (uint)GetInt32At(0); } }
        public uint Port { get { return (uint)GetInt32At(4); } }
        public uint NumActiveLfp { get { return (uint)GetInt32At(8); } }
        public uint ResolutionX { get { return (uint)GetInt32At(12); } }
        public uint ResolutionY { get { return (uint)GetInt32At(16); } }
        public uint Bpc { get { return (uint)GetInt32At(20); } }
        public uint IsInterlaced { get { return (uint)GetInt32At(24); } }
        public uint IsS3DMode { get { return (uint)GetInt32At(28); } }
        public uint IsActive { get { return (uint)GetInt32At(32); } }
        public uint RrSwitchMethod { get { return (uint)GetInt32At(36); } }
        public uint PipeScalarMode { get { return (uint)GetInt32At(40); } }
        public DD_PSR_PR_VERSION PsrVersion { get { return (DD_PSR_PR_VERSION)GetInt32At(44); } }
        public uint IsLrrSupported { get { return (uint)GetInt32At(48); } }
        public int BDF(int arrayIndex) { return GetByteAt(52 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PSR2_MODE CurrentPsr2Mode { get { return (DD_PSR2_MODE)GetByteAt(56); } }
        public bool IsPsrEnabled { get { return GetInt32At(57) != 0; } }
        public bool IsPsrSdpEarlyFrameCaptureRequired { get { return GetInt32At(61) != 0; } }
        public bool IsPsr2EarlyScanLineSdpRequired { get { return GetInt32At(65) != 0; } }

        #region Private
        internal PsrPrStaticData_t(Action<PsrPrStaticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 4 && EventDataLength != 69));
            Debug.Assert(!(Version > 4 && EventDataLength < 69));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PsrPrStaticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "NumActiveLfp", NumActiveLfp);
             XmlAttrib(sb, "ResolutionX", ResolutionX);
             XmlAttrib(sb, "ResolutionY", ResolutionY);
             XmlAttrib(sb, "Bpc", Bpc);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsS3DMode", IsS3DMode);
             XmlAttrib(sb, "IsActive", IsActive);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "PipeScalarMode", PipeScalarMode);
             XmlAttrib(sb, "PsrVersion", PsrVersion);
             XmlAttrib(sb, "IsLrrSupported", IsLrrSupported);
             XmlAttrib(sb, "CurrentPsr2Mode", CurrentPsr2Mode);
             XmlAttrib(sb, "IsPsrEnabled", IsPsrEnabled);
             XmlAttrib(sb, "IsPsrSdpEarlyFrameCaptureRequired", IsPsrSdpEarlyFrameCaptureRequired);
             XmlAttrib(sb, "IsPsr2EarlyScanLineSdpRequired", IsPsr2EarlyScanLineSdpRequired);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Port", "NumActiveLfp", "ResolutionX", "ResolutionY", "Bpc", "IsInterlaced", "IsS3DMode", "IsActive", "RrSwitchMethod", "PipeScalarMode", "PsrVersion", "IsLrrSupported", "BDF", "CurrentPsr2Mode", "IsPsrEnabled", "IsPsrSdpEarlyFrameCaptureRequired", "IsPsr2EarlyScanLineSdpRequired"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Port;
                case 2:
                    return NumActiveLfp;
                case 3:
                    return ResolutionX;
                case 4:
                    return ResolutionY;
                case 5:
                    return Bpc;
                case 6:
                    return IsInterlaced;
                case 7:
                    return IsS3DMode;
                case 8:
                    return IsActive;
                case 9:
                    return RrSwitchMethod;
                case 10:
                    return PipeScalarMode;
                case 11:
                    return PsrVersion;
                case 12:
                    return IsLrrSupported;
                case 14:
                    return CurrentPsr2Mode;
                case 15:
                    return IsPsrEnabled;
                case 16:
                    return IsPsrSdpEarlyFrameCaptureRequired;
                case 17:
                    return IsPsr2EarlyScanLineSdpRequired;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PsrPrStaticData_t> m_target;
        #endregion
    }
    public sealed class PwrConsUserPolicyData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint DataSize { get { return (uint)GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, (int)DataSize); } }

        #region Private
        internal PwrConsUserPolicyData_t(Action<PwrConsUserPolicyData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DataSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PwrConsUserPolicyData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return DataSize;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PwrConsUserPolicyData_t> m_target;
        #endregion
    }
    public sealed class DisplayPwrConsD0D3StateChangeData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint IsD0 { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayPwrConsD0D3StateChangeData_t(Action<DisplayPwrConsD0D3StateChangeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayPwrConsD0D3StateChangeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "IsD0", IsD0);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "IsD0", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return IsD0;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayPwrConsD0D3StateChangeData_t> m_target;
        #endregion
    }
    public sealed class PcPowerPlanRegValueData_t : TraceEvent
    {
        public long TimeStamp { get { return GetInt64At(0); } }
        public uint OsPowerPlan { get { return (uint)GetInt32At(8); } }
        public uint PowerSource { get { return (uint)GetInt32At(12); } }
        public uint GraphicsPowerPlan { get { return (uint)GetInt32At(16); } }
        public uint ReturnStatus { get { return (uint)GetInt32At(20); } }

        #region Private
        internal PcPowerPlanRegValueData_t(Action<PcPowerPlanRegValueData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcPowerPlanRegValueData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "OsPowerPlan", OsPowerPlan);
             XmlAttrib(sb, "PowerSource", PowerSource);
             XmlAttrib(sb, "GraphicsPowerPlan", GraphicsPowerPlan);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TimeStamp", "OsPowerPlan", "PowerSource", "GraphicsPowerPlan", "ReturnStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TimeStamp;
                case 1:
                    return OsPowerPlan;
                case 2:
                    return PowerSource;
                case 3:
                    return GraphicsPowerPlan;
                case 4:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcPowerPlanRegValueData_t> m_target;
        #endregion
    }
    public sealed class DpstPipeHistogram_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint DpstGuardband { get { return (uint)GetInt32At(4); } }
        public uint DpstControl { get { return (uint)GetInt32At(8); } }
        public uint PipeMisc { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }
        public uint DpstGuardband2 { get { return (uint)GetInt32At(20); } }

        #region Private
        internal DpstPipeHistogram_t(Action<DpstPipeHistogram_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 24));
            Debug.Assert(!(Version > 3 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstPipeHistogram_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "DpstGuardband", DpstGuardband);
             XmlAttrib(sb, "DpstControl", DpstControl);
             XmlAttrib(sb, "PipeMisc", PipeMisc);
             XmlAttrib(sb, "DpstGuardband2", DpstGuardband2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "DpstGuardband", "DpstControl", "PipeMisc", "BDF", "DpstGuardband2"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return DpstGuardband;
                case 2:
                    return DpstControl;
                case 3:
                    return PipeMisc;
                case 5:
                    return DpstGuardband2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstPipeHistogram_t> m_target;
        #endregion
    }
    public sealed class DpstProbabilityOfFullScreenSolidColorData_t : TraceEvent
    {
        public double Probability { get { return GetDoubleAt(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstProbabilityOfFullScreenSolidColorData_t(Action<DpstProbabilityOfFullScreenSolidColorData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstProbabilityOfFullScreenSolidColorData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Probability", Probability);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Probability", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Probability;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstProbabilityOfFullScreenSolidColorData_t> m_target;
        #endregion
    }
    public sealed class DpstGuardBandThreshold_t : TraceEvent
    {
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(0); } }
        public uint LowThresholdGuardBand { get { return (uint)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }
        public uint HighThresholdGuardBand { get { return (uint)GetInt32At(12); } }

        #region Private
        internal DpstGuardBandThreshold_t(Action<DpstGuardBandThreshold_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstGuardBandThreshold_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "LowThresholdGuardBand", LowThresholdGuardBand);
             XmlAttrib(sb, "HighThresholdGuardBand", HighThresholdGuardBand);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "LowThresholdGuardBand", "BDF", "HighThresholdGuardBand"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return LowThresholdGuardBand;
                case 3:
                    return HighThresholdGuardBand;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstGuardBandThreshold_t> m_target;
        #endregion
    }
    public sealed class DpstClientEvents_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public XPST_OPERATION Operation { get { return (XPST_OPERATION)GetInt32At(4); } }
        public uint Param { get { return (uint)GetInt32At(8); } }

        #region Private
        internal DpstClientEvents_t(Action<DpstClientEvents_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstClientEvents_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Param", Param);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Operation", "Param"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Operation;
                case 2:
                    return Param;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstClientEvents_t> m_target;
        #endregion
    }
    public sealed class DpstExternalEvents_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public DISPLAY_PC_EVENT_NOTIFICATION_OPERATION Operation { get { return (DISPLAY_PC_EVENT_NOTIFICATION_OPERATION)GetInt32At(4); } }
        public uint Param { get { return (uint)GetInt32At(8); } }

        #region Private
        internal DpstExternalEvents_t(Action<DpstExternalEvents_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstExternalEvents_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Param", Param);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "Operation", "Param"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return Operation;
                case 2:
                    return Param;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstExternalEvents_t> m_target;
        #endregion
    }
    public sealed class DpstPipeState_t : TraceEvent
    {
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(0); } }
        public XPST_EVENT DpstState { get { return (XPST_EVENT)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstPipeState_t(Action<DpstPipeState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstPipeState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "DpstState", DpstState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "DpstState", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return DpstState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstPipeState_t> m_target;
        #endregion
    }
    public sealed class DpstProgramDIET_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint DIETDataSize { get { return (uint)GetInt32At(4); } }
        public byte[] DIETData { get { return GetByteArrayAt(8, (int)DIETDataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DIETDataSize*1)+8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstProgramDIET_t(Action<DpstProgramDIET_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)DIETDataSize*1)+12));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)DIETDataSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstProgramDIET_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "DIETDataSize", DIETDataSize);
             XmlAttrib(sb, "DIETData", DIETData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "DIETDataSize", "DIETData", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return DIETDataSize;
                case 2:
                    return DIETData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstProgramDIET_t> m_target;
        #endregion
    }
    public sealed class DpstHistogram_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint HistogramSize { get { return (uint)GetInt32At(4); } }
        public byte[] Histogram { get { return GetByteArrayAt(8, (int)HistogramSize); } }

        #region Private
        internal DpstHistogram_t(Action<DpstHistogram_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)HistogramSize*1)+8));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)HistogramSize*1)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstHistogram_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "HistogramSize", HistogramSize);
             XmlAttrib(sb, "Histogram", Histogram);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "HistogramSize", "Histogram"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return HistogramSize;
                case 2:
                    return Histogram;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstHistogram_t> m_target;
        #endregion
    }
    public sealed class DpstWarningData_t : TraceEvent
    {
        public XPST_WARNING Type { get { return (XPST_WARNING)GetInt32At(0); } }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public uint ImageSize { get { return (uint)GetInt32At(8); } }
        public uint TotalPixelsCount { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DpstWarningData_t(Action<DpstWarningData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpstWarningData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "ImageSize", ImageSize);
             XmlAttrib(sb, "TotalPixelsCount", TotalPixelsCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "PipeID", "ImageSize", "TotalPixelsCount", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return PipeID;
                case 2:
                    return ImageSize;
                case 3:
                    return TotalPixelsCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpstWarningData_t> m_target;
        #endregion
    }
    public sealed class XpstWorkItemCallback_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public bool IsPrimaryDisplay { get { return GetInt32At(4) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal XpstWorkItemCallback_t(Action<XpstWorkItemCallback_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<XpstWorkItemCallback_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "IsPrimaryDisplay", IsPrimaryDisplay);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "IsPrimaryDisplay", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return IsPrimaryDisplay;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<XpstWorkItemCallback_t> m_target;
        #endregion
    }
    public sealed class XpstGuardband_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint DpstGuardband { get { return (uint)GetInt32At(8); } }
        public uint DpstGuardband2 { get { return (uint)GetInt32At(12); } }
        public DD_DPST_OPERATION Operation { get { return (DD_DPST_OPERATION)GetInt32At(16); } }

        #region Private
        internal XpstGuardband_t(Action<XpstGuardband_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<XpstGuardband_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "DpstGuardband", DpstGuardband);
             XmlAttrib(sb, "DpstGuardband2", DpstGuardband2);
             XmlAttrib(sb, "Operation", Operation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "DpstGuardband", "DpstGuardband2", "Operation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return DpstGuardband;
                case 3:
                    return DpstGuardband2;
                case 4:
                    return Operation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<XpstGuardband_t> m_target;
        #endregion
    }
    public sealed class DisplayShiftEscapeInfo_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DD_IGCL_DISPLAY_SHIFT_OPERATION Operation { get { return (DD_IGCL_DISPLAY_SHIFT_OPERATION)GetInt32At(4); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayShiftEscapeInfo_t(Action<DisplayShiftEscapeInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayShiftEscapeInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Operation", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Operation;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayShiftEscapeInfo_t> m_target;
        #endregion
    }
    public sealed class DisplayShiftGetStatus_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public bool IsDisplayShiftSupported { get { return GetInt32At(4) != 0; } }
        public bool IsMuxOwned { get { return GetInt32At(8) != 0; } }
        public bool IsPanelDataUpdateNeeded { get { return GetInt32At(12) != 0; } }
        public bool IsPanelDataPresent { get { return GetInt32At(16) != 0; } }
        public bool IsPanelReadyForSwitch { get { return GetInt32At(20) != 0; } }
        public bool IsSwitchInProgress { get { return GetInt32At(24) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayShiftGetStatus_t(Action<DisplayShiftGetStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayShiftGetStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsDisplayShiftSupported", IsDisplayShiftSupported);
             XmlAttrib(sb, "IsMuxOwned", IsMuxOwned);
             XmlAttrib(sb, "IsPanelDataUpdateNeeded", IsPanelDataUpdateNeeded);
             XmlAttrib(sb, "IsPanelDataPresent", IsPanelDataPresent);
             XmlAttrib(sb, "IsPanelReadyForSwitch", IsPanelReadyForSwitch);
             XmlAttrib(sb, "IsSwitchInProgress", IsSwitchInProgress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "IsDisplayShiftSupported", "IsMuxOwned", "IsPanelDataUpdateNeeded", "IsPanelDataPresent", "IsPanelReadyForSwitch", "IsSwitchInProgress", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return IsDisplayShiftSupported;
                case 2:
                    return IsMuxOwned;
                case 3:
                    return IsPanelDataUpdateNeeded;
                case 4:
                    return IsPanelDataPresent;
                case 5:
                    return IsPanelReadyForSwitch;
                case 6:
                    return IsSwitchInProgress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayShiftGetStatus_t> m_target;
        #endregion
    }
    public sealed class DisplayShiftSupportInfo_t : TraceEvent
    {
        public bool FeatureSupport { get { return GetInt32At(0) != 0; } }
        public bool VBTSupport { get { return GetInt32At(4) != 0; } }
        public int NumEdpEncodersInVbt { get { return GetInt32At(8); } }
        public bool IsDsmSupported { get { return GetInt32At(12) != 0; } }
        public bool IsMuxOnIgfx { get { return GetInt32At(16) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayShiftSupportInfo_t(Action<DisplayShiftSupportInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayShiftSupportInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FeatureSupport", FeatureSupport);
             XmlAttrib(sb, "VBTSupport", VBTSupport);
             XmlAttrib(sb, "NumEdpEncodersInVbt", NumEdpEncodersInVbt);
             XmlAttrib(sb, "IsDsmSupported", IsDsmSupported);
             XmlAttrib(sb, "IsMuxOnIgfx", IsMuxOnIgfx);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FeatureSupport", "VBTSupport", "NumEdpEncodersInVbt", "IsDsmSupported", "IsMuxOnIgfx", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FeatureSupport;
                case 1:
                    return VBTSupport;
                case 2:
                    return NumEdpEncodersInVbt;
                case 3:
                    return IsDsmSupported;
                case 4:
                    return IsMuxOnIgfx;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayShiftSupportInfo_t> m_target;
        #endregion
    }
    public sealed class DisplayShiftSwitchStatusInfo_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public bool IsIntegratedAdapter { get { return GetInt32At(4) != 0; } }
        public bool IsPanelDataPresent { get { return GetInt32At(8) != 0; } }
        public bool IsPanelReadyForSwitch { get { return GetInt32At(12) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayShiftSwitchStatusInfo_t(Action<DisplayShiftSwitchStatusInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayShiftSwitchStatusInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsIntegratedAdapter", IsIntegratedAdapter);
             XmlAttrib(sb, "IsPanelDataPresent", IsPanelDataPresent);
             XmlAttrib(sb, "IsPanelReadyForSwitch", IsPanelReadyForSwitch);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "IsIntegratedAdapter", "IsPanelDataPresent", "IsPanelReadyForSwitch", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return IsIntegratedAdapter;
                case 2:
                    return IsPanelDataPresent;
                case 3:
                    return IsPanelReadyForSwitch;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayShiftSwitchStatusInfo_t> m_target;
        #endregion
    }
    public sealed class DisplayShiftSwPsrInfo_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public bool IsEnable { get { return GetInt32At(4) != 0; } }
        public bool ProgramSink { get { return GetInt32At(8) != 0; } }
        public bool IsSwPsrEnabled { get { return GetInt32At(12) != 0; } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DisplayShiftSwPsrInfo_t(Action<DisplayShiftSwPsrInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DisplayShiftSwPsrInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsEnable", IsEnable);
             XmlAttrib(sb, "ProgramSink", ProgramSink);
             XmlAttrib(sb, "IsSwPsrEnabled", IsSwPsrEnabled);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "IsEnable", "ProgramSink", "IsSwPsrEnabled", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return IsEnable;
                case 2:
                    return ProgramSink;
                case 3:
                    return IsSwPsrEnabled;
                case 4:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DisplayShiftSwPsrInfo_t> m_target;
        #endregion
    }
    public sealed class Dsb_Idle_t : TraceEvent
    {
        public uint PipeID { get { return (uint)GetInt32At(0); } }
        public uint SelectedDsb { get { return (uint)GetInt32At(4); } }
        public uint DsbCtrlValue { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Dsb_Idle_t(Action<Dsb_Idle_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Dsb_Idle_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "SelectedDsb", SelectedDsb);
             XmlAttrib(sb, "DsbCtrlValue", DsbCtrlValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "SelectedDsb", "DsbCtrlValue", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return SelectedDsb;
                case 2:
                    return DsbCtrlValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Dsb_Idle_t> m_target;
        #endregion
    }
    public sealed class Dsb_Prepare_t : TraceEvent
    {
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(0); } }
        public uint SelectedDsb { get { return (uint)GetInt32At(4); } }
        public uint DsbCtrlValue { get { return (uint)GetInt32At(8); } }
        public uint HeadPtr { get { return (uint)GetInt32At(12); } }
        public uint TailPtr { get { return (uint)GetInt32At(16); } }
        public uint BufferDataSize { get { return (uint)GetInt32At(20); } }
        public byte[] BufferData { get { return GetByteArrayAt(24, (int)BufferDataSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)BufferDataSize*1)+24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Dsb_Prepare_t(Action<Dsb_Prepare_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)BufferDataSize*1)+28));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)BufferDataSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Dsb_Prepare_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "SelectedDsb", SelectedDsb);
             XmlAttrib(sb, "DsbCtrlValue", DsbCtrlValue);
             XmlAttrib(sb, "HeadPtr", HeadPtr);
             XmlAttrib(sb, "TailPtr", TailPtr);
             XmlAttrib(sb, "BufferDataSize", BufferDataSize);
             XmlAttrib(sb, "BufferData", BufferData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "SelectedDsb", "DsbCtrlValue", "HeadPtr", "TailPtr", "BufferDataSize", "BufferData", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return SelectedDsb;
                case 2:
                    return DsbCtrlValue;
                case 3:
                    return HeadPtr;
                case 4:
                    return TailPtr;
                case 5:
                    return BufferDataSize;
                case 6:
                    return BufferData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Dsb_Prepare_t> m_target;
        #endregion
    }
    public sealed class Dsb_Execute_t : TraceEvent
    {
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(0); } }
        public uint SelectedDsb { get { return (uint)GetInt32At(4); } }
        public uint DsbCtrlValue { get { return (uint)GetInt32At(8); } }
        public uint HeadPtr { get { return (uint)GetInt32At(12); } }
        public uint TailPtr { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Dsb_Execute_t(Action<Dsb_Execute_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 24));
            Debug.Assert(!(Version > 2 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Dsb_Execute_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "SelectedDsb", SelectedDsb);
             XmlAttrib(sb, "DsbCtrlValue", DsbCtrlValue);
             XmlAttrib(sb, "HeadPtr", HeadPtr);
             XmlAttrib(sb, "TailPtr", TailPtr);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeID", "SelectedDsb", "DsbCtrlValue", "HeadPtr", "TailPtr", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeID;
                case 1:
                    return SelectedDsb;
                case 2:
                    return DsbCtrlValue;
                case 3:
                    return HeadPtr;
                case 4:
                    return TailPtr;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Dsb_Execute_t> m_target;
        #endregion
    }
    public sealed class TestData_t : TraceEvent
    {
        public long Param1 { get { return GetInt64At(0); } }
        public long Param2 { get { return GetInt64At(8); } }
        public string Function { get { return GetUTF8StringAt(16); } }
        public string Message { get { return GetUnicodeStringAt(SkipUTF8String(16)); } }
        public int BDF(int arrayIndex) { return GetByteAt(SkipUnicodeString(SkipUTF8String(16)) + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TestData_t(Action<TestData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TestData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Param1", "Param2", "Function", "Message", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Param1;
                case 1:
                    return Param2;
                case 2:
                    return Function;
                case 3:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TestData_t> m_target;
        #endregion
    }
    public sealed class UR_Info_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }
        public DD_UNDERRUN_TYPE UnderrunType { get { return (DD_UNDERRUN_TYPE)GetInt32At(8); } }

        #region Private
        internal UR_Info_t(Action<UR_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "UnderrunType", UnderrunType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "BDF", "UnderrunType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 2:
                    return UnderrunType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Info_t> m_target;
        #endregion
    }
    public sealed class UR_Dbuf_Data_t : TraceEvent
    {
        public int Slice { get { return GetByteAt(0); } }
        public uint CTL { get { return (uint)GetInt32At(1); } }
        public uint STATUS { get { return (uint)GetInt32At(5); } }
        public uint ECC_STAT { get { return (uint)GetInt32At(9); } }
        public int BDF(int arrayIndex) { return GetByteAt(13 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal UR_Dbuf_Data_t(Action<UR_Dbuf_Data_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 17));
            Debug.Assert(!(Version > 1 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Dbuf_Data_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Slice", Slice);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "STATUS", STATUS);
             XmlAttrib(sb, "ECC_STAT", ECC_STAT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Slice", "CTL", "STATUS", "ECC_STAT", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Slice;
                case 1:
                    return CTL;
                case 2:
                    return STATUS;
                case 3:
                    return ECC_STAT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Dbuf_Data_t> m_target;
        #endregion
    }
    public sealed class UR_PlaneData_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public uint CTL { get { return (uint)GetInt32At(4); } }
        public uint DbufStartEnd { get { return (uint)GetInt32At(8); } }
        public uint Stride { get { return (uint)GetInt32At(12); } }
        public uint Size { get { return (uint)GetInt32At(16); } }
        public uint Offset { get { return (uint)GetInt32At(20); } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal UR_PlaneData_t(Action<UR_PlaneData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_PlaneData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "CTL", CTL);
             XmlAttrib(sb, "DbufStartEnd", DbufStartEnd);
             XmlAttrib(sb, "Stride", Stride);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Offset", Offset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "CTL", "DbufStartEnd", "Stride", "Size", "Offset", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return CTL;
                case 2:
                    return DbufStartEnd;
                case 3:
                    return Stride;
                case 4:
                    return Size;
                case 5:
                    return Offset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_PlaneData_t> m_target;
        #endregion
    }
    public sealed class UR_Watermark_Data : TraceEvent
    {
        public uint LP_WM(int arrayIndex) { return (uint)GetInt32At(0 + (arrayIndex * HostOffset(4, 0))); }
        public uint TransWM { get { return (uint)GetInt32At(32); } }
        public uint LineTime { get { return (uint)GetInt32At(36); } }
        public int BDF(int arrayIndex) { return GetByteAt(40 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal UR_Watermark_Data(Action<UR_Watermark_Data> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 44));
            Debug.Assert(!(Version > 1 && EventDataLength < 44));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UR_Watermark_Data>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TransWM", TransWM);
             XmlAttrib(sb, "LineTime", LineTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LP_WM", "TransWM", "LineTime", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TransWM;
                case 2:
                    return LineTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UR_Watermark_Data> m_target;
        #endregion
    }
    public sealed class Pipe_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }

        #region Private
        internal Pipe_t(Action<Pipe_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Pipe_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Pipe_t> m_target;
        #endregion
    }
    public sealed class DmcErrorInterrupt_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_DMC_ERROR_CODE ErrorCode { get { return (DD_DMC_ERROR_CODE)GetInt32At(8); } }

        #region Private
        internal DmcErrorInterrupt_t(Action<DmcErrorInterrupt_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DmcErrorInterrupt_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DmcErrorInterrupt_t> m_target;
        #endregion
    }
    public sealed class DpVscSdp_Info_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int ColorimetryFormat { get { return GetByteAt(4); } }
        public int PixelEncoding { get { return GetByteAt(5); } }
        public int DynamicRange { get { return GetByteAt(6); } }
        public int BitDepth { get { return GetByteAt(7); } }

        #region Private
        internal DpVscSdp_Info_t(Action<DpVscSdp_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpVscSdp_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ColorimetryFormat", ColorimetryFormat);
             XmlAttrib(sb, "PixelEncoding", PixelEncoding);
             XmlAttrib(sb, "DynamicRange", DynamicRange);
             XmlAttrib(sb, "BitDepth", BitDepth);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "ColorimetryFormat", "PixelEncoding", "DynamicRange", "BitDepth"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return ColorimetryFormat;
                case 2:
                    return PixelEncoding;
                case 3:
                    return DynamicRange;
                case 4:
                    return BitDepth;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpVscSdp_Info_t> m_target;
        #endregion
    }
    public sealed class DPCurrentMstState_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID MasterTranscoder { get { return (PIPE_ID)GetByteAt(4); } }
        public uint TotalAllocatedPbn { get { return (uint)GetInt32At(5); } }
        public int StreamId { get { return GetByteAt(9); } }
        public int StartSlot { get { return GetByteAt(10); } }
        public int NumOfSlots { get { return GetByteAt(11); } }
        public uint AllocatedPbn { get { return (uint)GetInt32At(12); } }
        public int TotalLinkCount { get { return GetByteAt(16); } }
        public int Size { get { return GetInt16At(17); } }
        public byte[] RadAddress { get { return GetByteArrayAt(19, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+19 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DPCurrentMstState_t(Action<DPCurrentMstState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+23));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+23));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DPCurrentMstState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "MasterTranscoder", MasterTranscoder);
             XmlAttrib(sb, "TotalAllocatedPbn", TotalAllocatedPbn);
             XmlAttrib(sb, "StreamId", StreamId);
             XmlAttrib(sb, "StartSlot", StartSlot);
             XmlAttrib(sb, "NumOfSlots", NumOfSlots);
             XmlAttrib(sb, "AllocatedPbn", AllocatedPbn);
             XmlAttrib(sb, "TotalLinkCount", TotalLinkCount);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "RadAddress", RadAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "MasterTranscoder", "TotalAllocatedPbn", "StreamId", "StartSlot", "NumOfSlots", "AllocatedPbn", "TotalLinkCount", "Size", "RadAddress", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return MasterTranscoder;
                case 2:
                    return TotalAllocatedPbn;
                case 3:
                    return StreamId;
                case 4:
                    return StartSlot;
                case 5:
                    return NumOfSlots;
                case 6:
                    return AllocatedPbn;
                case 7:
                    return TotalLinkCount;
                case 8:
                    return Size;
                case 9:
                    return RadAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DPCurrentMstState_t> m_target;
        #endregion
    }
    public sealed class DPDiagnosticData_t : TraceEvent
    {
        public DD_DP_DIAGNOSTIC_SOURCE DiagCode { get { return (DD_DP_DIAGNOSTIC_SOURCE)GetInt32At(0); } }
        public uint Param1 { get { return (uint)GetInt32At(4); } }
        public uint Param2 { get { return (uint)GetInt32At(8); } }
        public uint Param3 { get { return (uint)GetInt32At(12); } }
        public uint Param4 { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DPDiagnosticData_t(Action<DPDiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DPDiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DiagCode", DiagCode);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DiagCode", "Param1", "Param2", "Param3", "Param4", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DiagCode;
                case 1:
                    return Param1;
                case 2:
                    return Param2;
                case 3:
                    return Param3;
                case 4:
                    return Param4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DPDiagnosticData_t> m_target;
        #endregion
    }
    public sealed class DpMst_DPRXCaps_pipe_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeInUse { get { return (PIPE_ID)GetInt32At(4); } }
        public bool VscSdpExtensionForColorimetrySupported { get { return GetInt32At(8) != 0; } }
        public bool VscExtVesaSdpSupported { get { return GetInt32At(12) != 0; } }
        public bool VscExtVesaSdpChainingSupported { get { return GetInt32At(16) != 0; } }

        #region Private
        internal DpMst_DPRXCaps_pipe_t(Action<DpMst_DPRXCaps_pipe_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpMst_DPRXCaps_pipe_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeInUse", PipeInUse);
             XmlAttrib(sb, "VscSdpExtensionForColorimetrySupported", VscSdpExtensionForColorimetrySupported);
             XmlAttrib(sb, "VscExtVesaSdpSupported", VscExtVesaSdpSupported);
             XmlAttrib(sb, "VscExtVesaSdpChainingSupported", VscExtVesaSdpChainingSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeInUse", "VscSdpExtensionForColorimetrySupported", "VscExtVesaSdpSupported", "VscExtVesaSdpChainingSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeInUse;
                case 2:
                    return VscSdpExtensionForColorimetrySupported;
                case 3:
                    return VscExtVesaSdpSupported;
                case 4:
                    return VscExtVesaSdpChainingSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpMst_DPRXCaps_pipe_t> m_target;
        #endregion
    }
    public sealed class MstPathDscInfo_t : TraceEvent
    {
        public DP_MST_PATH_DSC_INFO PathDscInfo { get { return (DP_MST_PATH_DSC_INFO)GetInt32At(0); } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal MstPathDscInfo_t(Action<MstPathDscInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MstPathDscInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PathDscInfo", PathDscInfo);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PathDscInfo", "PortId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PathDscInfo;
                case 1:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MstPathDscInfo_t> m_target;
        #endregion
    }
    public sealed class SidebandMsg_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public SIDEBAND_MSG_ID MsgId { get { return (SIDEBAND_MSG_ID)GetInt32At(8); } }
        public SIDEBAND_MSG_TYPE MsgType { get { return (SIDEBAND_MSG_TYPE)GetInt32At(12); } }
        public uint Size { get { return (uint)GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, (int)Size); } }

        #region Private
        internal SidebandMsg_t(Action<SidebandMsg_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)Size*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)Size*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SidebandMsg_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "MsgId", MsgId);
             XmlAttrib(sb, "MsgType", MsgType);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Status", "MsgId", "MsgType", "Size", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Status;
                case 2:
                    return MsgId;
                case 3:
                    return MsgType;
                case 4:
                    return Size;
                case 5:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SidebandMsg_t> m_target;
        #endregion
    }
    public sealed class DramBwDetails_t : TraceEvent
    {
        public int GroupIndex { get { return GetByteAt(0); } }
        public int SagvPoints { get { return GetByteAt(1); } }
        public uint NumPlanesSupported { get { return (uint)GetInt32At(2); } }
        public uint AvailableDramBW { get { return (uint)GetInt32At(6); } }
        public int BDF(int arrayIndex) { return GetByteAt(10 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DramBwDetails_t(Action<DramBwDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 14));
            Debug.Assert(!(Version > 1 && EventDataLength < 14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DramBwDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GroupIndex", GroupIndex);
             XmlAttrib(sb, "SagvPoints", SagvPoints);
             XmlAttrib(sb, "NumPlanesSupported", NumPlanesSupported);
             XmlAttrib(sb, "AvailableDramBW", AvailableDramBW);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GroupIndex", "SagvPoints", "NumPlanesSupported", "AvailableDramBW", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GroupIndex;
                case 1:
                    return SagvPoints;
                case 2:
                    return NumPlanesSupported;
                case 3:
                    return AvailableDramBW;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DramBwDetails_t> m_target;
        #endregion
    }
    public sealed class DramMemDetail_t : TraceEvent
    {
        public uint DdrType { get { return (uint)GetInt32At(0); } }
        public uint NumPopulatedChannels { get { return (uint)GetInt32At(4); } }
        public uint GVPoint { get { return (uint)GetInt32At(8); } }
        public uint Clk { get { return (uint)GetInt32At(12); } }
        public uint TRP { get { return (uint)GetInt32At(16); } }
        public uint TrdCAS2Pre { get { return (uint)GetInt32At(20); } }
        public uint Trc { get { return (uint)GetInt32At(24); } }
        public uint Trcd { get { return (uint)GetInt32At(28); } }
        public int BDF(int arrayIndex) { return GetByteAt(32 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DramMemDetail_t(Action<DramMemDetail_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 36));
            Debug.Assert(!(Version > 1 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DramMemDetail_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DdrType", DdrType);
             XmlAttrib(sb, "NumPopulatedChannels", NumPopulatedChannels);
             XmlAttrib(sb, "GVPoint", GVPoint);
             XmlAttrib(sb, "Clk", Clk);
             XmlAttrib(sb, "TRP", TRP);
             XmlAttrib(sb, "TrdCAS2Pre", TrdCAS2Pre);
             XmlAttrib(sb, "Trc", Trc);
             XmlAttrib(sb, "Trcd", Trcd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DdrType", "NumPopulatedChannels", "GVPoint", "Clk", "TRP", "TrdCAS2Pre", "Trc", "Trcd", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DdrType;
                case 1:
                    return NumPopulatedChannels;
                case 2:
                    return GVPoint;
                case 3:
                    return Clk;
                case 4:
                    return TRP;
                case 5:
                    return TrdCAS2Pre;
                case 6:
                    return Trc;
                case 7:
                    return Trcd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DramMemDetail_t> m_target;
        #endregion
    }
    public sealed class DriverBuild_t : TraceEvent
    {
        public string Version { get { return GetUnicodeStringAt(0); } }
        public string BuildString { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int BDF(int arrayIndex) { return GetByteAt(SkipUnicodeString(SkipUnicodeString(0)) + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DriverBuild_t(Action<DriverBuild_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(base.Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(base.Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DriverBuild_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "BuildString", BuildString);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "BuildString", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return BuildString;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DriverBuild_t> m_target;
        #endregion
    }
    public sealed class DscSuDetails_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint PipeId { get { return (uint)GetInt32At(4); } }
        public int Vdsc_Instance { get { return GetByteAt(8); } }
        public uint SuSliceRow_Per_Frame { get { return (uint)GetInt32At(9); } }
        public uint SuPicHeight { get { return (uint)GetInt32At(13); } }

        #region Private
        internal DscSuDetails_t(Action<DscSuDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DscSuDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Vdsc_Instance", Vdsc_Instance);
             XmlAttrib(sb, "SuSliceRow_Per_Frame", SuSliceRow_Per_Frame);
             XmlAttrib(sb, "SuPicHeight", SuPicHeight);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Vdsc_Instance", "SuSliceRow_Per_Frame", "SuPicHeight"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Vdsc_Instance;
                case 3:
                    return SuSliceRow_Per_Frame;
                case 4:
                    return SuPicHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DscSuDetails_t> m_target;
        #endregion
    }
    public sealed class DsmInfo_t : TraceEvent
    {
        public DD_DSM_FUNCTION_CODE FunctionCode { get { return (DD_DSM_FUNCTION_CODE)GetInt32At(0); } }
        public uint InArgSize { get { return (uint)GetInt32At(4); } }
        public byte[] InArgData { get { return GetByteArrayAt(8, (int)InArgSize); } }
        public uint OutArgSize { get { return (uint)GetInt32At(((int)InArgSize*1)+8); } }
        public byte[] OutArgData { get { return GetByteArrayAt(((int)InArgSize*1)+12, (int)OutArgSize); } }
        public uint Status { get { return (uint)GetInt32At(((int)OutArgSize*1)+ ((int)InArgSize*1)+12); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)OutArgSize*1)+ ((int)InArgSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DsmInfo_t(Action<DsmInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)OutArgSize*1)+ ((int)InArgSize*1)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)OutArgSize*1)+ ((int)InArgSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DsmInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FunctionCode", FunctionCode);
             XmlAttrib(sb, "InArgSize", InArgSize);
             XmlAttrib(sb, "InArgData", InArgData);
             XmlAttrib(sb, "OutArgSize", OutArgSize);
             XmlAttrib(sb, "OutArgData", OutArgData);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FunctionCode", "InArgSize", "InArgData", "OutArgSize", "OutArgData", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FunctionCode;
                case 1:
                    return InArgSize;
                case 2:
                    return InArgData;
                case 3:
                    return OutArgSize;
                case 4:
                    return OutArgData;
                case 5:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DsmInfo_t> m_target;
        #endregion
    }
    public sealed class DumpSetTimingData_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DD_SET_TIMING_ACTION SetTimingAction { get { return (DD_SET_TIMING_ACTION)GetInt32At(4); } }
        public uint SourceId { get { return (uint)GetInt32At(8); } }
        public uint InputFlags { get { return (uint)GetInt32At(12); } }
        public bool PreviouslyActive { get { return GetInt32At(16) != 0; } }
        public uint NumPipes { get { return (uint)GetInt32At(20); } }
        public PIPE_ID Pipe(int arrayIndex) { return (PIPE_ID)GetInt32At(24 + (arrayIndex * HostOffset(4, 0))); }
        public int BDF(int arrayIndex) { return GetByteAt(((int)NumPipes*4)+24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal DumpSetTimingData_t(Action<DumpSetTimingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)NumPipes*4)+28));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)NumPipes*4)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DumpSetTimingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SetTimingAction", SetTimingAction);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "InputFlags", InputFlags);
             XmlAttrib(sb, "PreviouslyActive", PreviouslyActive);
             XmlAttrib(sb, "NumPipes", NumPipes);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "SetTimingAction", "SourceId", "InputFlags", "PreviouslyActive", "NumPipes", "Pipe", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return SetTimingAction;
                case 2:
                    return SourceId;
                case 3:
                    return InputFlags;
                case 4:
                    return PreviouslyActive;
                case 5:
                    return NumPipes;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DumpSetTimingData_t> m_target;
        #endregion
    }
    public sealed class DynamicCdClockDvfs_t : TraceEvent
    {
        public bool PreFreqChange { get { return GetInt32At(0) != 0; } }
        public uint LinkRateInMhz { get { return (uint)GetInt32At(4); } }
        public uint VoltageLevel { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }
        public bool IsNewVoltageLevelRequested { get { return GetInt32At(16) != 0; } }

        #region Private
        internal DynamicCdClockDvfs_t(Action<DynamicCdClockDvfs_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 20));
            Debug.Assert(!(Version > 2 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DynamicCdClockDvfs_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PreFreqChange", PreFreqChange);
             XmlAttrib(sb, "LinkRateInMhz", LinkRateInMhz);
             XmlAttrib(sb, "VoltageLevel", VoltageLevel);
             XmlAttrib(sb, "IsNewVoltageLevelRequested", IsNewVoltageLevelRequested);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PreFreqChange", "LinkRateInMhz", "VoltageLevel", "BDF", "IsNewVoltageLevelRequested"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PreFreqChange;
                case 1:
                    return LinkRateInMhz;
                case 2:
                    return VoltageLevel;
                case 4:
                    return IsNewVoltageLevelRequested;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DynamicCdClockDvfs_t> m_target;
        #endregion
    }
    public sealed class PowerHandlerGetOptimalCdClock_t : TraceEvent
    {
        public uint OptimalCDClockInMhz { get { return (uint)GetInt32At(0); } }
        public uint PlatformMaxCdClockInMhz { get { return (uint)GetInt32At(4); } }
        public uint NumPaths { get { return (uint)GetInt32At(8); } }
        public int NumOfFrequenciesSupported { get { return GetByteAt(12); } }
        public uint DeprecatedCalculatedPixelClockInKhz { get { return (uint)GetInt32At(13); } }
        public uint TwoPpcMultiplier { get { return (uint)GetInt32At(17); } }
        public int BDF(int arrayIndex) { return GetByteAt(21 + (arrayIndex * HostOffset(1, 0))); }
        public CDCLK_CHANGE_TYPE CDClockChangeType { get { return (CDCLK_CHANGE_TYPE)GetInt32At(25); } }
        public long CalculatedPixelClockInKhz { get { return GetInt64At(29); } }

        #region Private
        internal PowerHandlerGetOptimalCdClock_t(Action<PowerHandlerGetOptimalCdClock_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 37));
            Debug.Assert(!(Version > 3 && EventDataLength < 37));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PowerHandlerGetOptimalCdClock_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OptimalCDClockInMhz", OptimalCDClockInMhz);
             XmlAttrib(sb, "PlatformMaxCdClockInMhz", PlatformMaxCdClockInMhz);
             XmlAttrib(sb, "NumPaths", NumPaths);
             XmlAttrib(sb, "NumOfFrequenciesSupported", NumOfFrequenciesSupported);
             XmlAttrib(sb, "DeprecatedCalculatedPixelClockInKhz", DeprecatedCalculatedPixelClockInKhz);
             XmlAttrib(sb, "TwoPpcMultiplier", TwoPpcMultiplier);
             XmlAttrib(sb, "CDClockChangeType", CDClockChangeType);
             XmlAttrib(sb, "CalculatedPixelClockInKhz", CalculatedPixelClockInKhz);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OptimalCDClockInMhz", "PlatformMaxCdClockInMhz", "NumPaths", "NumOfFrequenciesSupported", "DeprecatedCalculatedPixelClockInKhz", "TwoPpcMultiplier", "BDF", "CDClockChangeType", "CalculatedPixelClockInKhz"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OptimalCDClockInMhz;
                case 1:
                    return PlatformMaxCdClockInMhz;
                case 2:
                    return NumPaths;
                case 3:
                    return NumOfFrequenciesSupported;
                case 4:
                    return DeprecatedCalculatedPixelClockInKhz;
                case 5:
                    return TwoPpcMultiplier;
                case 7:
                    return CDClockChangeType;
                case 8:
                    return CalculatedPixelClockInKhz;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PowerHandlerGetOptimalCdClock_t> m_target;
        #endregion
    }
    public sealed class PowerHandlerChangeCdClock_t : TraceEvent
    {
        public uint CDClockFreq { get { return (uint)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PowerHandlerChangeCdClock_t(Action<PowerHandlerChangeCdClock_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PowerHandlerChangeCdClock_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CDClockFreq", CDClockFreq);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CDClockFreq", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CDClockFreq;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PowerHandlerChangeCdClock_t> m_target;
        #endregion
    }
    public sealed class EdidData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int NumEdidExtensionBlock { get { return GetByteAt(4); } }
        public DD_EDID_TYPE EdidType { get { return (DD_EDID_TYPE)GetByteAt(5); } }
        public int ComputedEdidChecksum { get { return GetByteAt(6); } }

        #region Private
        internal EdidData_t(Action<EdidData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 7));
            Debug.Assert(!(Version > 0 && EventDataLength < 7));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EdidData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumEdidExtensionBlock", NumEdidExtensionBlock);
             XmlAttrib(sb, "EdidType", EdidType);
             XmlAttrib(sb, "ComputedEdidChecksum", ComputedEdidChecksum);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "NumEdidExtensionBlock", "EdidType", "ComputedEdidChecksum"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return NumEdidExtensionBlock;
                case 2:
                    return EdidType;
                case 3:
                    return ComputedEdidChecksum;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EdidData_t> m_target;
        #endregion
    }
    public sealed class EdidMgmtEsc_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DD_IGCL_EDID_MGMT_OP OpCode { get { return (DD_IGCL_EDID_MGMT_OP)GetInt32At(4); } }
        public DD_IGCL_EDID_TYPE EdidType { get { return (DD_IGCL_EDID_TYPE)GetInt32At(8); } }
        public uint EdidSizeIn { get { return (uint)GetInt32At(12); } }
        public int EDID(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }
        public DD_IGCL_EDID_MGMT_ERROR_CODE ErrorStatus { get { return (DD_IGCL_EDID_MGMT_ERROR_CODE)GetInt32At(((int)EdidSizeIn*1)+16); } }
        public EDID_MGMT_OUT_FLAGS OutFlags { get { return (EDID_MGMT_OUT_FLAGS)GetInt16At(((int)EdidSizeIn*1)+20); } }
        public uint EdidSizeOut { get { return (uint)GetInt32At(((int)EdidSizeIn*1)+22); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(((int)EdidSizeIn*1)+26); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)EdidSizeIn*1)+30 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal EdidMgmtEsc_t(Action<EdidMgmtEsc_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)EdidSizeIn*1)+34));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)EdidSizeIn*1)+34));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EdidMgmtEsc_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "OpCode", OpCode);
             XmlAttrib(sb, "EdidType", EdidType);
             XmlAttrib(sb, "EdidSizeIn", EdidSizeIn);
             XmlAttrib(sb, "ErrorStatus", ErrorStatus);
             XmlAttrib(sb, "OutFlags", OutFlags);
             XmlAttrib(sb, "EdidSizeOut", EdidSizeOut);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "OpCode", "EdidType", "EdidSizeIn", "EDID", "ErrorStatus", "OutFlags", "EdidSizeOut", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return OpCode;
                case 2:
                    return EdidType;
                case 3:
                    return EdidSizeIn;
                case 5:
                    return ErrorStatus;
                case 6:
                    return OutFlags;
                case 7:
                    return EdidSizeOut;
                case 8:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EdidMgmtEsc_t> m_target;
        #endregion
    }
    public sealed class TConCaps_t : TraceEvent
    {
        public bool Supports2084Decode { get { return GetInt32At(0) != 0; } }
        public bool Supports2020Gamut { get { return GetInt32At(4) != 0; } }
        public bool PanelToneMappingSupported { get { return GetInt32At(8) != 0; } }
        public bool SegmentedBkltSupported { get { return GetInt32At(12) != 0; } }
        public bool NitsBrightnessControlSupported { get { return GetInt32At(16) != 0; } }
        public bool BrightnessOptimizationSupported { get { return GetInt32At(20) != 0; } }
        public bool SDPForColorimteryAndMetadataSupported { get { return GetInt32At(24) != 0; } }
        public bool SRGBToPanelGamutConversionSupported { get { return GetInt32At(28) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(32 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TConCaps_t(Action<TConCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 36));
            Debug.Assert(!(Version > 1 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TConCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Supports2084Decode", Supports2084Decode);
             XmlAttrib(sb, "Supports2020Gamut", Supports2020Gamut);
             XmlAttrib(sb, "PanelToneMappingSupported", PanelToneMappingSupported);
             XmlAttrib(sb, "SegmentedBkltSupported", SegmentedBkltSupported);
             XmlAttrib(sb, "NitsBrightnessControlSupported", NitsBrightnessControlSupported);
             XmlAttrib(sb, "BrightnessOptimizationSupported", BrightnessOptimizationSupported);
             XmlAttrib(sb, "SDPForColorimteryAndMetadataSupported", SDPForColorimteryAndMetadataSupported);
             XmlAttrib(sb, "SRGBToPanelGamutConversionSupported", SRGBToPanelGamutConversionSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Supports2084Decode", "Supports2020Gamut", "PanelToneMappingSupported", "SegmentedBkltSupported", "NitsBrightnessControlSupported", "BrightnessOptimizationSupported", "SDPForColorimteryAndMetadataSupported", "SRGBToPanelGamutConversionSupported", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Supports2084Decode;
                case 1:
                    return Supports2020Gamut;
                case 2:
                    return PanelToneMappingSupported;
                case 3:
                    return SegmentedBkltSupported;
                case 4:
                    return NitsBrightnessControlSupported;
                case 5:
                    return BrightnessOptimizationSupported;
                case 6:
                    return SDPForColorimteryAndMetadataSupported;
                case 7:
                    return SRGBToPanelGamutConversionSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TConCaps_t> m_target;
        #endregion
    }
    public sealed class EscapeData_t : TraceEvent
    {
        public uint OpCode { get { return (uint)GetInt32At(0); } }
        public uint Status { get { return (uint)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal EscapeData_t(Action<EscapeData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EscapeData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OpCode", OpCode);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OpCode", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OpCode;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EscapeData_t> m_target;
        #endregion
    }
    public sealed class EscapeStructDump_t : TraceEvent
    {
        public string Message { get { return GetUTF8StringAt(0); } }
        public uint OpCode { get { return (uint)GetInt32At(SkipUTF8String(0)); } }
        public uint Size { get { return (uint)GetInt32At(SkipUTF8String(0)+4); } }
        public byte[] Data { get { return GetByteArrayAt(SkipUTF8String(0)+8, (int)Size); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(SkipUTF8String(0)+((int)Size*1)+8); } }

        #region Private
        internal EscapeStructDump_t(Action<EscapeStructDump_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(0)+((int)Size*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(0)+((int)Size*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EscapeStructDump_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "OpCode", OpCode);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message", "OpCode", "Size", "Data", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                case 1:
                    return OpCode;
                case 2:
                    return Size;
                case 3:
                    return Data;
                case 4:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EscapeStructDump_t> m_target;
        #endregion
    }
    public sealed class EvalAcpiMethod_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint ReturnStatus { get { return (uint)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal EvalAcpiMethod_t(Action<EvalAcpiMethod_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EvalAcpiMethod_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "ReturnStatus", ReturnStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "ReturnStatus", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return ReturnStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EvalAcpiMethod_t> m_target;
        #endregion
    }
    public sealed class EcvmPivot_t : TraceEvent
    {
        public EVCM_PIVOT_TYPE EnumPivotType { get { return (EVCM_PIVOT_TYPE)GetInt32At(0); } }
        public uint SourceId { get { return (uint)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }

        #region Private
        internal EcvmPivot_t(Action<EcvmPivot_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EcvmPivot_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EnumPivotType", EnumPivotType);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "TargetId", TargetId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EnumPivotType", "SourceId", "TargetId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EnumPivotType;
                case 1:
                    return SourceId;
                case 2:
                    return TargetId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EcvmPivot_t> m_target;
        #endregion
    }
    public sealed class FBCChangeOnVBI_t : TraceEvent
    {
        public bool FBCEnabledState { get { return GetInt32At(0) != 0; } }
        public bool FlipPendingOnLayer { get { return GetInt32At(4) != 0; } }
        public bool FbcUpdatePending { get { return GetInt32At(8) != 0; } }
        public bool FbcNukeOnVbiPending { get { return GetInt32At(12) != 0; } }

        #region Private
        internal FBCChangeOnVBI_t(Action<FBCChangeOnVBI_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FBCChangeOnVBI_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FBCEnabledState", FBCEnabledState);
             XmlAttrib(sb, "FlipPendingOnLayer", FlipPendingOnLayer);
             XmlAttrib(sb, "FbcUpdatePending", FbcUpdatePending);
             XmlAttrib(sb, "FbcNukeOnVbiPending", FbcNukeOnVbiPending);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FBCEnabledState", "FlipPendingOnLayer", "FbcUpdatePending", "FbcNukeOnVbiPending"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FBCEnabledState;
                case 1:
                    return FlipPendingOnLayer;
                case 2:
                    return FbcUpdatePending;
                case 3:
                    return FbcNukeOnVbiPending;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FBCChangeOnVBI_t> m_target;
        #endregion
    }
    public sealed class FBCPlaneRestriction_t : TraceEvent
    {
        public uint PlaneResX { get { return (uint)GetInt32At(0); } }
        public uint PlaneResY { get { return (uint)GetInt32At(4); } }
        public uint Bpp { get { return (uint)GetInt32At(8); } }
        public long FbcPipeSize { get { return GetInt64At(12); } }
        public uint DisplayStrideInBytes { get { return (uint)GetInt32At(20); } }
        public PLANE_ORIENTATION PlaneOrientation { get { return (PLANE_ORIENTATION)GetByteAt(24); } }
        public PIXEL_FMT PixelFormat { get { return (PIXEL_FMT)GetInt32At(25); } }
        public DD_FBC_RESTRICTION_TYPE RestrictionType { get { return (DD_FBC_RESTRICTION_TYPE)GetInt32At(29); } }
        public int BDF(int arrayIndex) { return GetByteAt(33 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(37); } }

        #region Private
        internal FBCPlaneRestriction_t(Action<FBCPlaneRestriction_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 41));
            Debug.Assert(!(Version > 1 && EventDataLength < 41));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FBCPlaneRestriction_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PlaneResX", PlaneResX);
             XmlAttrib(sb, "PlaneResY", PlaneResY);
             XmlAttrib(sb, "Bpp", Bpp);
             XmlAttrib(sb, "FbcPipeSize", FbcPipeSize);
             XmlAttrib(sb, "DisplayStrideInBytes", DisplayStrideInBytes);
             XmlAttrib(sb, "PlaneOrientation", PlaneOrientation);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "RestrictionType", RestrictionType);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PlaneResX", "PlaneResY", "Bpp", "FbcPipeSize", "DisplayStrideInBytes", "PlaneOrientation", "PixelFormat", "RestrictionType", "BDF", "PipeId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PlaneResX;
                case 1:
                    return PlaneResY;
                case 2:
                    return Bpp;
                case 3:
                    return FbcPipeSize;
                case 4:
                    return DisplayStrideInBytes;
                case 5:
                    return PlaneOrientation;
                case 6:
                    return PixelFormat;
                case 7:
                    return RestrictionType;
                case 9:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FBCPlaneRestriction_t> m_target;
        #endregion
    }
    public sealed class FBCStateChange_t : TraceEvent
    {
        public DD_FBC_STATE_CHANGE State { get { return (DD_FBC_STATE_CHANGE)GetInt32At(0); } }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal FBCStateChange_t(Action<FBCStateChange_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FBCStateChange_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "State", State);
             XmlAttrib(sb, "PipeID", PipeID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "State", "PipeID", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return State;
                case 1:
                    return PipeID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FBCStateChange_t> m_target;
        #endregion
    }
    public sealed class FeatureControl_t : TraceEvent
    {
        public uint Display { get { return (uint)GetInt32At(0); } }
        public uint PowerConservation { get { return (uint)GetInt32At(4); } }
        // Skipping Reserved1
        // Skipping Reserved2
        public uint SkuTableSize { get { return (uint)GetInt32At(16); } }
        public byte[] SkuData { get { return GetByteArrayAt(20, (int)SkuTableSize); } }
        public uint WaTableSize { get { return (uint)GetInt32At(((int)SkuTableSize*1)+20); } }
        public byte[] WaData { get { return GetByteArrayAt(((int)SkuTableSize*1)+24, (int)WaTableSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)WaTableSize*1)+ ((int)SkuTableSize*1)+24 + (arrayIndex * HostOffset(1, 0))); }
        public uint OsFtrTableSize { get { return (uint)GetInt32At(((int)WaTableSize*1)+ ((int)SkuTableSize*1)+28); } }
        public byte[] OsFtrTable { get { return GetByteArrayAt(((int)WaTableSize*1)+ ((int)SkuTableSize*1)+32, (int)OsFtrTableSize); } }

        #region Private
        internal FeatureControl_t(Action<FeatureControl_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)OsFtrTableSize*1)+ ((int)WaTableSize*1)+ ((int)SkuTableSize*1)+32));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)OsFtrTableSize*1)+ ((int)WaTableSize*1)+ ((int)SkuTableSize*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FeatureControl_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Display", Display);
             XmlAttrib(sb, "PowerConservation", PowerConservation);
             XmlAttrib(sb, "SkuTableSize", SkuTableSize);
             XmlAttrib(sb, "SkuData", SkuData);
             XmlAttrib(sb, "WaTableSize", WaTableSize);
             XmlAttrib(sb, "WaData", WaData);
             XmlAttrib(sb, "OsFtrTableSize", OsFtrTableSize);
             XmlAttrib(sb, "OsFtrTable", OsFtrTable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Display", "PowerConservation", "SkuTableSize", "SkuData", "WaTableSize", "WaData", "BDF", "OsFtrTableSize", "OsFtrTable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Display;
                case 1:
                    return PowerConservation;
                case 2:
                    return SkuTableSize;
                case 3:
                    return SkuData;
                case 4:
                    return WaTableSize;
                case 5:
                    return WaData;
                case 7:
                    return OsFtrTableSize;
                case 8:
                    return OsFtrTable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FeatureControl_t> m_target;
        #endregion
    }
    public sealed class FeatureStatus_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_DIAG_FEATURE_STATE_INFO Feature { get { return (DD_DIAG_FEATURE_STATE_INFO)GetInt32At(4); } }
        public bool Enable { get { return GetInt32At(8) != 0; } }
        public uint Param1 { get { return (uint)GetInt32At(12); } }
        public uint Param2 { get { return (uint)GetInt32At(16); } }
        public uint Param3 { get { return (uint)GetInt32At(20); } }
        public uint Param4 { get { return (uint)GetInt32At(24); } }

        #region Private
        internal FeatureStatus_t(Action<FeatureStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FeatureStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Feature", "Enable", "Param1", "Param2", "Param3", "Param4"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Feature;
                case 2:
                    return Enable;
                case 3:
                    return Param1;
                case 4:
                    return Param2;
                case 5:
                    return Param3;
                case 6:
                    return Param4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FeatureStatus_t> m_target;
        #endregion
    }
    public sealed class FecEnable_t : TraceEvent
    {
        public bool Enable { get { return GetInt32At(0) != 0; } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal FecEnable_t(Action<FecEnable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FecEnable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Enable", "PortId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Enable;
                case 1:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FecEnable_t> m_target;
        #endregion
    }
    public sealed class FlipAllParam_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int Enabled { get { return GetByteAt(5); } }
        public PIXEL_FMT PixelFmt { get { return (PIXEL_FMT)GetInt32At(6); } }
        public uint SurfMemType { get { return (uint)GetInt32At(10); } }
        public uint ScanX { get { return (uint)GetInt32At(14); } }
        public uint ScanY { get { return (uint)GetInt32At(18); } }
        public uint Orientation { get { return (uint)GetInt32At(22); } }
        public uint PosX { get { return (uint)GetInt32At(26); } }
        public uint PosY { get { return (uint)GetInt32At(30); } }
        public uint Address { get { return (uint)GetInt32At(34); } }
        public int Rsvd { get { return GetByteAt(38); } }
        public PLANE_IN_FLAGS FeatureFlags { get { return (PLANE_IN_FLAGS)GetInt32At(39); } }
        public uint ScanLineCount { get { return (uint)GetInt32At(43); } }
        public uint FrameCount { get { return (uint)GetInt32At(47); } }
        public int BDF(int arrayIndex) { return GetByteAt(51 + (arrayIndex * HostOffset(1, 0))); }
        public uint AddressUv { get { return (uint)GetInt32At(55); } }
        public uint DisplayTime { get { return (uint)GetInt32At(59); } }
        public uint PresentationDelay { get { return (uint)GetInt32At(63); } }
        public PLANE_OUT_FLAGS OutFlags { get { return (PLANE_OUT_FLAGS)GetInt32At(67); } }
        public long ClearColor { get { return GetInt64At(71); } }
        public uint PresentationTimeStamp { get { return (uint)GetInt32At(79); } }
        public long PresentID { get { return GetInt64At(83); } }

        #region Private
        internal FlipAllParam_t(Action<FlipAllParam_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 7 && EventDataLength != 91));
            Debug.Assert(!(Version > 7 && EventDataLength < 91));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipAllParam_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Enabled", Enabled);
             XmlAttrib(sb, "PixelFmt", PixelFmt);
             XmlAttrib(sb, "SurfMemType", SurfMemType);
             XmlAttrib(sb, "ScanX", ScanX);
             XmlAttrib(sb, "ScanY", ScanY);
             XmlAttrib(sb, "Orientation", Orientation);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Rsvd", Rsvd);
             XmlAttrib(sb, "FeatureFlags", FeatureFlags);
             XmlAttrib(sb, "ScanLineCount", ScanLineCount);
             XmlAttrib(sb, "FrameCount", FrameCount);
             XmlAttrib(sb, "AddressUv", AddressUv);
             XmlAttrib(sb, "DisplayTime", DisplayTime);
             XmlAttrib(sb, "PresentationDelay", PresentationDelay);
             XmlAttrib(sb, "OutFlags", OutFlags);
             XmlAttrib(sb, "ClearColor", ClearColor);
             XmlAttrib(sb, "PresentationTimeStamp", PresentationTimeStamp);
             XmlAttrib(sb, "PresentID", PresentID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "Enabled", "PixelFmt", "SurfMemType", "ScanX", "ScanY", "Orientation", "PosX", "PosY", "Address", "Rsvd", "FeatureFlags", "ScanLineCount", "FrameCount", "BDF", "AddressUv", "DisplayTime", "PresentationDelay", "OutFlags", "ClearColor", "PresentationTimeStamp", "PresentID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return Enabled;
                case 3:
                    return PixelFmt;
                case 4:
                    return SurfMemType;
                case 5:
                    return ScanX;
                case 6:
                    return ScanY;
                case 7:
                    return Orientation;
                case 8:
                    return PosX;
                case 9:
                    return PosY;
                case 10:
                    return Address;
                case 11:
                    return Rsvd;
                case 12:
                    return FeatureFlags;
                case 13:
                    return ScanLineCount;
                case 14:
                    return FrameCount;
                case 16:
                    return AddressUv;
                case 17:
                    return DisplayTime;
                case 18:
                    return PresentationDelay;
                case 19:
                    return OutFlags;
                case 20:
                    return ClearColor;
                case 21:
                    return PresentationTimeStamp;
                case 22:
                    return PresentID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipAllParam_t> m_target;
        #endregion
    }
    public sealed class FlipAddress_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(5 + (arrayIndex * HostOffset(1, 0))); }
        public uint Address { get { return (uint)GetInt32At(9); } }
        public uint ScanLineCount { get { return (uint)GetInt32At(13); } }
        public uint FrameCount { get { return (uint)GetInt32At(17); } }
        public PLANE_IN_FLAGS FeatureFlags { get { return (PLANE_IN_FLAGS)GetInt32At(21); } }
        public uint DisplayTime { get { return (uint)GetInt32At(25); } }
        public uint PresentationDelay { get { return (uint)GetInt32At(29); } }
        public uint AddressUv { get { return (uint)GetInt32At(33); } }
        public PLANE_OUT_FLAGS OutFlags { get { return (PLANE_OUT_FLAGS)GetInt32At(37); } }
        public uint PresentationTimeStamp { get { return (uint)GetInt32At(41); } }
        public long PresentID { get { return GetInt64At(45); } }

        #region Private
        internal FlipAddress_t(Action<FlipAddress_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 8 && EventDataLength != 53));
            Debug.Assert(!(Version > 8 && EventDataLength < 53));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipAddress_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "ScanLineCount", ScanLineCount);
             XmlAttrib(sb, "FrameCount", FrameCount);
             XmlAttrib(sb, "FeatureFlags", FeatureFlags);
             XmlAttrib(sb, "DisplayTime", DisplayTime);
             XmlAttrib(sb, "PresentationDelay", PresentationDelay);
             XmlAttrib(sb, "AddressUv", AddressUv);
             XmlAttrib(sb, "OutFlags", OutFlags);
             XmlAttrib(sb, "PresentationTimeStamp", PresentationTimeStamp);
             XmlAttrib(sb, "PresentID", PresentID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "BDF", "Address", "ScanLineCount", "FrameCount", "FeatureFlags", "DisplayTime", "PresentationDelay", "AddressUv", "OutFlags", "PresentationTimeStamp", "PresentID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 3:
                    return Address;
                case 4:
                    return ScanLineCount;
                case 5:
                    return FrameCount;
                case 6:
                    return FeatureFlags;
                case 7:
                    return DisplayTime;
                case 8:
                    return PresentationDelay;
                case 9:
                    return AddressUv;
                case 10:
                    return OutFlags;
                case 11:
                    return PresentationTimeStamp;
                case 12:
                    return PresentID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipAddress_t> m_target;
        #endregion
    }
    public sealed class ColorPixelDescPlane_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int Enable { get { return GetByteAt(5); } }
        public DD_COLOR_MODEL Model { get { return (DD_COLOR_MODEL)GetInt32At(6); } }
        public DD_COLOR_RANGE_TYPE RangeType { get { return (DD_COLOR_RANGE_TYPE)GetInt32At(10); } }
        public DD_COLOR_ENCODING Encoding { get { return (DD_COLOR_ENCODING)GetInt32At(14); } }
        public DD_COLOR_GAMUT Gamut { get { return (DD_COLOR_GAMUT)GetInt32At(18); } }
        public int BPC { get { return GetByteAt(22); } }
        public DD_COLOR_YCBCR_SUBSAMPLING YCBCR_Subsampling { get { return (DD_COLOR_YCBCR_SUBSAMPLING)GetInt32At(23); } }
        public uint MinDisplayLuminance { get { return (uint)GetInt32At(27); } }
        public uint MaxDisplayLuminance { get { return (uint)GetInt32At(31); } }
        public uint MaxFALL { get { return (uint)GetInt32At(35); } }
        public uint MaxCLL { get { return (uint)GetInt32At(39); } }
        public uint HdrMetadataType { get { return (uint)GetInt32At(43); } }
        public uint SdrContentLuminance { get { return (uint)GetInt32At(47); } }
        public DD_CONTENT_TYPE ContentType { get { return (DD_CONTENT_TYPE)GetInt32At(51); } }
        public uint CIE_xWhite { get { return (uint)GetInt32At(55); } }
        public uint CIE_yWhite { get { return (uint)GetInt32At(59); } }
        public uint CIE_xRed { get { return (uint)GetInt32At(63); } }
        public uint CIE_yRed { get { return (uint)GetInt32At(67); } }
        public uint CIE_xGreen { get { return (uint)GetInt32At(71); } }
        public uint CIE_yGreen { get { return (uint)GetInt32At(75); } }
        public uint CIE_xBlue { get { return (uint)GetInt32At(79); } }
        public uint CIE_yBlue { get { return (uint)GetInt32At(83); } }
        public int BDF(int arrayIndex) { return GetByteAt(87 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal ColorPixelDescPlane_t(Action<ColorPixelDescPlane_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 91));
            Debug.Assert(!(Version > 1 && EventDataLength < 91));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ColorPixelDescPlane_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "Model", Model);
             XmlAttrib(sb, "RangeType", RangeType);
             XmlAttrib(sb, "Encoding", Encoding);
             XmlAttrib(sb, "Gamut", Gamut);
             XmlAttrib(sb, "BPC", BPC);
             XmlAttrib(sb, "YCBCR_Subsampling", YCBCR_Subsampling);
             XmlAttrib(sb, "MinDisplayLuminance", MinDisplayLuminance);
             XmlAttrib(sb, "MaxDisplayLuminance", MaxDisplayLuminance);
             XmlAttrib(sb, "MaxFALL", MaxFALL);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "HdrMetadataType", HdrMetadataType);
             XmlAttrib(sb, "SdrContentLuminance", SdrContentLuminance);
             XmlAttrib(sb, "ContentType", ContentType);
             XmlAttrib(sb, "CIE_xWhite", CIE_xWhite);
             XmlAttrib(sb, "CIE_yWhite", CIE_yWhite);
             XmlAttrib(sb, "CIE_xRed", CIE_xRed);
             XmlAttrib(sb, "CIE_yRed", CIE_yRed);
             XmlAttrib(sb, "CIE_xGreen", CIE_xGreen);
             XmlAttrib(sb, "CIE_yGreen", CIE_yGreen);
             XmlAttrib(sb, "CIE_xBlue", CIE_xBlue);
             XmlAttrib(sb, "CIE_yBlue", CIE_yBlue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "Enable", "Model", "RangeType", "Encoding", "Gamut", "BPC", "YCBCR_Subsampling", "MinDisplayLuminance", "MaxDisplayLuminance", "MaxFALL", "MaxCLL", "HdrMetadataType", "SdrContentLuminance", "ContentType", "CIE_xWhite", "CIE_yWhite", "CIE_xRed", "CIE_yRed", "CIE_xGreen", "CIE_yGreen", "CIE_xBlue", "CIE_yBlue", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return Enable;
                case 3:
                    return Model;
                case 4:
                    return RangeType;
                case 5:
                    return Encoding;
                case 6:
                    return Gamut;
                case 7:
                    return BPC;
                case 8:
                    return YCBCR_Subsampling;
                case 9:
                    return MinDisplayLuminance;
                case 10:
                    return MaxDisplayLuminance;
                case 11:
                    return MaxFALL;
                case 12:
                    return MaxCLL;
                case 13:
                    return HdrMetadataType;
                case 14:
                    return SdrContentLuminance;
                case 15:
                    return ContentType;
                case 16:
                    return CIE_xWhite;
                case 17:
                    return CIE_yWhite;
                case 18:
                    return CIE_xRed;
                case 19:
                    return CIE_yRed;
                case 20:
                    return CIE_xGreen;
                case 21:
                    return CIE_yGreen;
                case 22:
                    return CIE_xBlue;
                case 23:
                    return CIE_yBlue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ColorPixelDescPlane_t> m_target;
        #endregion
    }
    public sealed class FlipDoneInterrupt_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PLANE_TYPE PlaneId { get { return (PLANE_TYPE)GetInt32At(4); } }
        public uint Resvd { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal FlipDoneInterrupt_t(Action<FlipDoneInterrupt_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipDoneInterrupt_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneId", PlaneId);
             XmlAttrib(sb, "Resvd", Resvd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneId", "Resvd", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneId;
                case 2:
                    return Resvd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipDoneInterrupt_t> m_target;
        #endregion
    }
    public sealed class FlipProcessDetails_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public string ProcessName { get { return GetUnicodeStringAt(4); } }
        public uint ProcessId { get { return (uint)GetInt32At(SkipUnicodeString(4)); } }
        public DD_PROCESS_FLAGS ProcessFlags { get { return (DD_PROCESS_FLAGS)GetInt32At(SkipUnicodeString(4)+4); } }
        public uint LayerIndex { get { return (uint)GetInt32At(SkipUnicodeString(4)+8); } }
        public Address hAllocation { get { return GetAddressAt(SkipUnicodeString(4)+12); } }

        #region Private
        internal FlipProcessDetails_t(Action<FlipProcessDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != HostOffset(SkipUnicodeString(4)+16, 1)));
            Debug.Assert(!(Version > 1 && EventDataLength < HostOffset(SkipUnicodeString(4)+16, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipProcessDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProcessName", ProcessName);
             XmlAttrib(sb, "ProcessId", ProcessId);
             XmlAttrib(sb, "ProcessFlags", ProcessFlags);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttribHex(sb, "hAllocation", hAllocation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "ProcessName", "ProcessId", "ProcessFlags", "LayerIndex", "hAllocation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return ProcessName;
                case 2:
                    return ProcessId;
                case 3:
                    return ProcessFlags;
                case 4:
                    return LayerIndex;
                case 5:
                    return hAllocation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipProcessDetails_t> m_target;
        #endregion
    }
    public sealed class FlipQExecuted_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeID { get { return (PIPE_ID)GetInt32At(4); } }
        public int FlipQueueId { get { return GetByteAt(8); } }
        public int FlipQIndex { get { return GetByteAt(9); } }
        public uint DsbCtrlValue1 { get { return (uint)GetInt32At(10); } }
        public uint DsbHeadPtr1 { get { return (uint)GetInt32At(14); } }
        public uint DsbTailPtr1 { get { return (uint)GetInt32At(18); } }
        public uint DsbCtrlValue2 { get { return (uint)GetInt32At(22); } }
        public uint DsbHeadPtr2 { get { return (uint)GetInt32At(26); } }
        public uint DsbTailPtr2 { get { return (uint)GetInt32At(30); } }
        public uint BufferSubmissionPts { get { return (uint)GetInt32At(34); } }
        public uint DmcExecutedPts { get { return (uint)GetInt32At(38); } }
        public uint CurrTimeStamp { get { return (uint)GetInt32At(42); } }
        public DD_FLIP_QUEUE_EXEC_TYPE ExecType { get { return (DD_FLIP_QUEUE_EXEC_TYPE)GetInt32At(46); } }
        public uint DsbSelected { get { return (uint)GetInt32At(50); } }

        #region Private
        internal FlipQExecuted_t(Action<FlipQExecuted_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 54));
            Debug.Assert(!(Version > 3 && EventDataLength < 54));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQExecuted_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeID", PipeID);
             XmlAttrib(sb, "FlipQueueId", FlipQueueId);
             XmlAttrib(sb, "FlipQIndex", FlipQIndex);
             XmlAttrib(sb, "DsbCtrlValue1", DsbCtrlValue1);
             XmlAttrib(sb, "DsbHeadPtr1", DsbHeadPtr1);
             XmlAttrib(sb, "DsbTailPtr1", DsbTailPtr1);
             XmlAttrib(sb, "DsbCtrlValue2", DsbCtrlValue2);
             XmlAttrib(sb, "DsbHeadPtr2", DsbHeadPtr2);
             XmlAttrib(sb, "DsbTailPtr2", DsbTailPtr2);
             XmlAttrib(sb, "BufferSubmissionPts", BufferSubmissionPts);
             XmlAttrib(sb, "DmcExecutedPts", DmcExecutedPts);
             XmlAttrib(sb, "CurrTimeStamp", CurrTimeStamp);
             XmlAttrib(sb, "ExecType", ExecType);
             XmlAttrib(sb, "DsbSelected", DsbSelected);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeID", "FlipQueueId", "FlipQIndex", "DsbCtrlValue1", "DsbHeadPtr1", "DsbTailPtr1", "DsbCtrlValue2", "DsbHeadPtr2", "DsbTailPtr2", "BufferSubmissionPts", "DmcExecutedPts", "CurrTimeStamp", "ExecType", "DsbSelected"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeID;
                case 2:
                    return FlipQueueId;
                case 3:
                    return FlipQIndex;
                case 4:
                    return DsbCtrlValue1;
                case 5:
                    return DsbHeadPtr1;
                case 6:
                    return DsbTailPtr1;
                case 7:
                    return DsbCtrlValue2;
                case 8:
                    return DsbHeadPtr2;
                case 9:
                    return DsbTailPtr2;
                case 10:
                    return BufferSubmissionPts;
                case 11:
                    return DmcExecutedPts;
                case 12:
                    return CurrTimeStamp;
                case 13:
                    return ExecType;
                case 14:
                    return DsbSelected;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQExecuted_t> m_target;
        #endregion
    }
    public sealed class FlipQInsertStart_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint CurrentTimeStamp { get { return (uint)GetInt32At(8); } }
        public DD_FLIP_DONE_STATUS HwPlaneIdMask { get { return (DD_FLIP_DONE_STATUS)GetInt32At(12); } }
        public GENERAL_QUEUE_INSERT_FLAG GenQUpdateFlag { get { return (GENERAL_QUEUE_INSERT_FLAG)GetInt32At(16); } }

        #region Private
        internal FlipQInsertStart_t(Action<FlipQInsertStart_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQInsertStart_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "CurrentTimeStamp", CurrentTimeStamp);
             XmlAttrib(sb, "HwPlaneIdMask", HwPlaneIdMask);
             XmlAttrib(sb, "GenQUpdateFlag", GenQUpdateFlag);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "CurrentTimeStamp", "HwPlaneIdMask", "GenQUpdateFlag"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return CurrentTimeStamp;
                case 3:
                    return HwPlaneIdMask;
                case 4:
                    return GenQUpdateFlag;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQInsertStart_t> m_target;
        #endregion
    }
    public sealed class FlipQInsertStop_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint Q1Head { get { return (uint)GetInt32At(8); } }
        public uint Q1Tail { get { return (uint)GetInt32At(12); } }
        public uint Q2Head { get { return (uint)GetInt32At(16); } }
        public uint Q2Tail { get { return (uint)GetInt32At(20); } }
        public uint Q3Head { get { return (uint)GetInt32At(24); } }
        public uint Q3Tail { get { return (uint)GetInt32At(28); } }
        public uint GenQHead { get { return (uint)GetInt32At(32); } }
        public uint GenQTail { get { return (uint)GetInt32At(36); } }

        #region Private
        internal FlipQInsertStop_t(Action<FlipQInsertStop_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQInsertStop_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Q1Head", Q1Head);
             XmlAttrib(sb, "Q1Tail", Q1Tail);
             XmlAttrib(sb, "Q2Head", Q2Head);
             XmlAttrib(sb, "Q2Tail", Q2Tail);
             XmlAttrib(sb, "Q3Head", Q3Head);
             XmlAttrib(sb, "Q3Tail", Q3Tail);
             XmlAttrib(sb, "GenQHead", GenQHead);
             XmlAttrib(sb, "GenQTail", GenQTail);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Q1Head", "Q1Tail", "Q2Head", "Q2Tail", "Q3Head", "Q3Tail", "GenQHead", "GenQTail"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Q1Head;
                case 3:
                    return Q1Tail;
                case 4:
                    return Q2Head;
                case 5:
                    return Q2Tail;
                case 6:
                    return Q3Head;
                case 7:
                    return Q3Tail;
                case 8:
                    return GenQHead;
                case 9:
                    return GenQTail;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQInsertStop_t> m_target;
        #endregion
    }
    public sealed class FlipQMode_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public DD_HW_FLIPQ_MODE FlipQMode { get { return (DD_HW_FLIPQ_MODE)GetInt32At(8); } }
        public bool SkipSwQueueReset { get { return GetInt32At(12) != 0; } }

        #region Private
        internal FlipQMode_t(Action<FlipQMode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQMode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "FlipQMode", FlipQMode);
             XmlAttrib(sb, "SkipSwQueueReset", SkipSwQueueReset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "FlipQMode", "SkipSwQueueReset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return FlipQMode;
                case 3:
                    return SkipSwQueueReset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQMode_t> m_target;
        #endregion
    }
    public sealed class FlipQueueSwitch_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public int PlaneID { get { return GetByteAt(8); } }
        public uint Address { get { return (uint)GetInt32At(9); } }
        public uint PresentationTimeStamp { get { return (uint)GetInt32At(13); } }

        #region Private
        internal FlipQueueSwitch_t(Action<FlipQueueSwitch_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQueueSwitch_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "PresentationTimeStamp", PresentationTimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "PlaneID", "Address", "PresentationTimeStamp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return PlaneID;
                case 3:
                    return Address;
                case 4:
                    return PresentationTimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQueueSwitch_t> m_target;
        #endregion
    }
    public sealed class FmsModesetStatus_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public DD_FMS_STATUS_REASONS Status { get { return (DD_FMS_STATUS_REASONS)GetInt32At(12); } }

        #region Private
        internal FmsModesetStatus_t(Action<FmsModesetStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FmsModesetStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "PipeId", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return PipeId;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FmsModesetStatus_t> m_target;
        #endregion
    }
    public sealed class FunctionTrack_t : TraceEvent
    {
        public string Function { get { return GetUTF8StringAt(0); } }
        public FUNCTION_STAGE Stage { get { return (FUNCTION_STAGE)GetInt32At(SkipUTF8String(0)); } }
        public DDSTATUS ErrorCode { get { return (DDSTATUS)GetInt32At(SkipUTF8String(0)+4); } }
        public long Address { get { return GetInt64At(SkipUTF8String(0)+8); } }
        public uint LineNumber { get { return (uint)GetInt32At(SkipUTF8String(0)+16); } }

        #region Private
        internal FunctionTrack_t(Action<FunctionTrack_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(0)+20));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(0)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FunctionTrack_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Stage", Stage);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "LineNumber", LineNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Stage", "ErrorCode", "Address", "LineNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Stage;
                case 2:
                    return ErrorCode;
                case 3:
                    return Address;
                case 4:
                    return LineNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FunctionTrack_t> m_target;
        #endregion
    }
    public sealed class Gmbus_t : TraceEvent
    {
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(0); } }
        public int RequestedGMBusSpeed { get { return GetInt32At(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint Command { get { return (uint)GetInt32At(12); } }
        public uint Size { get { return (uint)GetInt32At(16); } }
        public uint TargetAddress { get { return (uint)GetInt32At(20); } }
        public uint Index { get { return (uint)GetInt32At(24); } }
        public byte[] Data { get { return GetByteArrayAt(28, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Gmbus_t(Action<Gmbus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)Size*1)+32));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)Size*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Gmbus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "RequestedGMBusSpeed", RequestedGMBusSpeed);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Command", Command);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "TargetAddress", TargetAddress);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status", "RequestedGMBusSpeed", "Port", "Command", "Size", "TargetAddress", "Index", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                case 1:
                    return RequestedGMBusSpeed;
                case 2:
                    return Port;
                case 3:
                    return Command;
                case 4:
                    return Size;
                case 5:
                    return TargetAddress;
                case 6:
                    return Index;
                case 7:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Gmbus_t> m_target;
        #endregion
    }
    public sealed class GTT_Fault_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public PLANE_TYPE Plane { get { return (PLANE_TYPE)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal GTT_Fault_t(Action<GTT_Fault_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GTT_Fault_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Plane", Plane);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "Plane", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return Plane;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GTT_Fault_t> m_target;
        #endregion
    }
    public sealed class PortEncryption_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public HDCP_TYPE Status { get { return (HDCP_TYPE)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PortEncryption_t(Action<PortEncryption_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PortEncryption_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PortEncryption_t> m_target;
        #endregion
    }
    public sealed class GscInterfaceInfo_t : TraceEvent
    {
        public uint CommandId { get { return (uint)GetInt32At(0); } }
        public uint InSize { get { return (uint)GetInt32At(4); } }
        public byte[] InBuffer { get { return GetByteArrayAt(8, (int)InSize); } }
        public uint OutSize { get { return (uint)GetInt32At(((int)InSize*1)+8); } }
        public byte[] OutBuffer { get { return GetByteArrayAt(((int)InSize*1)+12, (int)OutSize); } }
        public uint MEStatus { get { return (uint)GetInt32At(((int)OutSize*1)+ ((int)InSize*1)+12); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)OutSize*1)+ ((int)InSize*1)+16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal GscInterfaceInfo_t(Action<GscInterfaceInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)OutSize*1)+ ((int)InSize*1)+20));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)OutSize*1)+ ((int)InSize*1)+20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GscInterfaceInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CommandId", CommandId);
             XmlAttrib(sb, "InSize", InSize);
             XmlAttrib(sb, "InBuffer", InBuffer);
             XmlAttrib(sb, "OutSize", OutSize);
             XmlAttrib(sb, "OutBuffer", OutBuffer);
             XmlAttrib(sb, "MEStatus", MEStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CommandId", "InSize", "InBuffer", "OutSize", "OutBuffer", "MEStatus", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CommandId;
                case 1:
                    return InSize;
                case 2:
                    return InBuffer;
                case 3:
                    return OutSize;
                case 4:
                    return OutBuffer;
                case 5:
                    return MEStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GscInterfaceInfo_t> m_target;
        #endregion
    }
    public sealed class HdcpPortAccess_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DD_HDCP_PORT_ACCESS ReqType { get { return (DD_HDCP_PORT_ACCESS)GetInt32At(4); } }
        public uint Size { get { return (uint)GetInt32At(8); } }
        public byte[] Data { get { return GetByteArrayAt(12, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal HdcpPortAccess_t(Action<HdcpPortAccess_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdcpPortAccess_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "ReqType", ReqType);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "ReqType", "Size", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return ReqType;
                case 2:
                    return Size;
                case 3:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdcpPortAccess_t> m_target;
        #endregion
    }
    public sealed class HdcpStateInfo_t : TraceEvent
    {
        public DD_HDCP_PROTOCOL_STATE NewProtocolState { get { return (DD_HDCP_PROTOCOL_STATE)GetInt32At(0); } }
        public DD_HDCP_AUTH_STATUS HdcpAuthStatus { get { return (DD_HDCP_AUTH_STATUS)GetInt32At(4); } }
        public bool HdcpAuthPass { get { return GetInt32At(8) != 0; } }
        public long StartTimeStamp { get { return GetInt64At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal HdcpStateInfo_t(Action<HdcpStateInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdcpStateInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NewProtocolState", NewProtocolState);
             XmlAttrib(sb, "HdcpAuthStatus", HdcpAuthStatus);
             XmlAttrib(sb, "HdcpAuthPass", HdcpAuthPass);
             XmlAttrib(sb, "StartTimeStamp", StartTimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NewProtocolState", "HdcpAuthStatus", "HdcpAuthPass", "StartTimeStamp", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NewProtocolState;
                case 1:
                    return HdcpAuthStatus;
                case 2:
                    return HdcpAuthPass;
                case 3:
                    return StartTimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdcpStateInfo_t> m_target;
        #endregion
    }
    public sealed class TranscoderEncryption_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public bool HdmiSignalling { get { return GetInt32At(8) != 0; } }
        public bool Mst_Hdcp { get { return GetInt32At(12) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TranscoderEncryption_t(Action<TranscoderEncryption_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TranscoderEncryption_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "HdmiSignalling", HdmiSignalling);
             XmlAttrib(sb, "Mst_Hdcp", Mst_Hdcp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "HdmiSignalling", "Mst_Hdcp", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return HdmiSignalling;
                case 3:
                    return Mst_Hdcp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TranscoderEncryption_t> m_target;
        #endregion
    }
    public sealed class HDMIDiagnosticData_t : TraceEvent
    {
        public DD_HDMI_DIAGNOSTIC_SOURCE DiagCode { get { return (DD_HDMI_DIAGNOSTIC_SOURCE)GetInt32At(0); } }
        public uint Param1 { get { return (uint)GetInt32At(4); } }
        public uint Param2 { get { return (uint)GetInt32At(8); } }
        public uint Param3 { get { return (uint)GetInt32At(12); } }
        public uint Param4 { get { return (uint)GetInt32At(16); } }
        public uint Param5 { get { return (uint)GetInt32At(20); } }
        public uint Param6 { get { return (uint)GetInt32At(24); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal HDMIDiagnosticData_t(Action<HDMIDiagnosticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HDMIDiagnosticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DiagCode", DiagCode);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             XmlAttrib(sb, "Param5", Param5);
             XmlAttrib(sb, "Param6", Param6);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DiagCode", "Param1", "Param2", "Param3", "Param4", "Param5", "Param6", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DiagCode;
                case 1:
                    return Param1;
                case 2:
                    return Param2;
                case 3:
                    return Param3;
                case 4:
                    return Param4;
                case 5:
                    return Param5;
                case 6:
                    return Param6;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HDMIDiagnosticData_t> m_target;
        #endregion
    }
    public sealed class HdmiModeInfo_t : TraceEvent
    {
        public bool IsModeSupported { get { return GetInt32At(0) != 0; } }
        public bool IsDscRequired { get { return GetInt32At(4) != 0; } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint MaxSupportedAudioFreqInHz { get { return (uint)GetInt32At(12); } }

        #region Private
        internal HdmiModeInfo_t(Action<HdmiModeInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdmiModeInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsModeSupported", IsModeSupported);
             XmlAttrib(sb, "IsDscRequired", IsDscRequired);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "MaxSupportedAudioFreqInHz", MaxSupportedAudioFreqInHz);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsModeSupported", "IsDscRequired", "Port", "MaxSupportedAudioFreqInHz"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsModeSupported;
                case 1:
                    return IsDscRequired;
                case 2:
                    return Port;
                case 3:
                    return MaxSupportedAudioFreqInHz;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdmiModeInfo_t> m_target;
        #endregion
    }
    public sealed class HdmiRx_Caps_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DD_HDMI_VERSION Version { get { return (DD_HDMI_VERSION)GetInt32At(4); } }
        public long MaxDotClockSupported { get { return GetInt64At(8); } }
        public uint MaxFrlBandwidthInMpbs { get { return (uint)GetInt32At(16); } }
        public HDMI_ADAPTER_TYPE HdmiAdapterType { get { return (HDMI_ADAPTER_TYPE)GetInt32At(20); } }

        #region Private
        internal HdmiRx_Caps_t(Action<HdmiRx_Caps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(base.Version == 0 && EventDataLength != 24));
            Debug.Assert(!(base.Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdmiRx_Caps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "MaxDotClockSupported", MaxDotClockSupported);
             XmlAttrib(sb, "MaxFrlBandwidthInMpbs", MaxFrlBandwidthInMpbs);
             XmlAttrib(sb, "HdmiAdapterType", HdmiAdapterType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Version", "MaxDotClockSupported", "MaxFrlBandwidthInMpbs", "HdmiAdapterType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Version;
                case 2:
                    return MaxDotClockSupported;
                case 3:
                    return MaxFrlBandwidthInMpbs;
                case 4:
                    return HdmiAdapterType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdmiRx_Caps_t> m_target;
        #endregion
    }
    public sealed class HdrStaticMetadata_t : TraceEvent
    {
        public DD_MPO_HDR_METADATA_TYPE HDRType { get { return (DD_MPO_HDR_METADATA_TYPE)GetInt32At(0); } }
        public int EOTF { get { return GetInt16At(4); } }
        public int DisplayPrimariesX0 { get { return GetInt16At(6); } }
        public int DisplayPrimariesX1 { get { return GetInt16At(8); } }
        public int DisplayPrimariesX2 { get { return GetInt16At(10); } }
        public int DisplayPrimariesY0 { get { return GetInt16At(12); } }
        public int DisplayPrimariesY1 { get { return GetInt16At(14); } }
        public int DisplayPrimariesY2 { get { return GetInt16At(16); } }
        public int WhitePointX { get { return GetInt16At(18); } }
        public int WhitePointY { get { return GetInt16At(20); } }
        public uint MaxMasteringLuminance { get { return (uint)GetInt32At(22); } }
        public uint MinMasteringluminance { get { return (uint)GetInt32At(26); } }
        public uint MaxCLL { get { return (uint)GetInt32At(30); } }
        public uint MaxFALL { get { return (uint)GetInt32At(34); } }
        public uint TargetId { get { return (uint)GetInt32At(38); } }

        #region Private
        internal HdrStaticMetadata_t(Action<HdrStaticMetadata_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 42));
            Debug.Assert(!(Version > 1 && EventDataLength < 42));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HdrStaticMetadata_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HDRType", HDRType);
             XmlAttrib(sb, "EOTF", EOTF);
             XmlAttrib(sb, "DisplayPrimariesX0", DisplayPrimariesX0);
             XmlAttrib(sb, "DisplayPrimariesX1", DisplayPrimariesX1);
             XmlAttrib(sb, "DisplayPrimariesX2", DisplayPrimariesX2);
             XmlAttrib(sb, "DisplayPrimariesY0", DisplayPrimariesY0);
             XmlAttrib(sb, "DisplayPrimariesY1", DisplayPrimariesY1);
             XmlAttrib(sb, "DisplayPrimariesY2", DisplayPrimariesY2);
             XmlAttrib(sb, "WhitePointX", WhitePointX);
             XmlAttrib(sb, "WhitePointY", WhitePointY);
             XmlAttrib(sb, "MaxMasteringLuminance", MaxMasteringLuminance);
             XmlAttrib(sb, "MinMasteringluminance", MinMasteringluminance);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "MaxFALL", MaxFALL);
             XmlAttrib(sb, "TargetId", TargetId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HDRType", "EOTF", "DisplayPrimariesX0", "DisplayPrimariesX1", "DisplayPrimariesX2", "DisplayPrimariesY0", "DisplayPrimariesY1", "DisplayPrimariesY2", "WhitePointX", "WhitePointY", "MaxMasteringLuminance", "MinMasteringluminance", "MaxCLL", "MaxFALL", "TargetId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HDRType;
                case 1:
                    return EOTF;
                case 2:
                    return DisplayPrimariesX0;
                case 3:
                    return DisplayPrimariesX1;
                case 4:
                    return DisplayPrimariesX2;
                case 5:
                    return DisplayPrimariesY0;
                case 6:
                    return DisplayPrimariesY1;
                case 7:
                    return DisplayPrimariesY2;
                case 8:
                    return WhitePointX;
                case 9:
                    return WhitePointY;
                case 10:
                    return MaxMasteringLuminance;
                case 11:
                    return MinMasteringluminance;
                case 12:
                    return MaxCLL;
                case 13:
                    return MaxFALL;
                case 14:
                    return TargetId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HdrStaticMetadata_t> m_target;
        #endregion
    }
    public sealed class DpHdrMetadata_v2_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int EOTF { get { return GetInt16At(4); } }
        public int DisplayPrimariesX0 { get { return GetInt16At(6); } }
        public int DisplayPrimariesX1 { get { return GetInt16At(8); } }
        public int DisplayPrimariesX2 { get { return GetInt16At(10); } }
        public int DisplayPrimariesY0 { get { return GetInt16At(12); } }
        public int DisplayPrimariesY1 { get { return GetInt16At(14); } }
        public int DisplayPrimariesY2 { get { return GetInt16At(16); } }
        public int WhitePointX { get { return GetInt16At(18); } }
        public int WhitePointY { get { return GetInt16At(20); } }
        public int MaxDisplayMasteringLuminance { get { return GetInt16At(22); } }
        public int MinDisplayMasteringLuminance { get { return GetInt16At(24); } }
        public int MaxCLL { get { return GetInt16At(26); } }
        public int MaxFALL { get { return GetInt16At(28); } }

        #region Private
        internal DpHdrMetadata_v2_t(Action<DpHdrMetadata_v2_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 30));
            Debug.Assert(!(Version > 0 && EventDataLength < 30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DpHdrMetadata_v2_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EOTF", EOTF);
             XmlAttrib(sb, "DisplayPrimariesX0", DisplayPrimariesX0);
             XmlAttrib(sb, "DisplayPrimariesX1", DisplayPrimariesX1);
             XmlAttrib(sb, "DisplayPrimariesX2", DisplayPrimariesX2);
             XmlAttrib(sb, "DisplayPrimariesY0", DisplayPrimariesY0);
             XmlAttrib(sb, "DisplayPrimariesY1", DisplayPrimariesY1);
             XmlAttrib(sb, "DisplayPrimariesY2", DisplayPrimariesY2);
             XmlAttrib(sb, "WhitePointX", WhitePointX);
             XmlAttrib(sb, "WhitePointY", WhitePointY);
             XmlAttrib(sb, "MaxDisplayMasteringLuminance", MaxDisplayMasteringLuminance);
             XmlAttrib(sb, "MinDisplayMasteringLuminance", MinDisplayMasteringLuminance);
             XmlAttrib(sb, "MaxCLL", MaxCLL);
             XmlAttrib(sb, "MaxFALL", MaxFALL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "EOTF", "DisplayPrimariesX0", "DisplayPrimariesX1", "DisplayPrimariesX2", "DisplayPrimariesY0", "DisplayPrimariesY1", "DisplayPrimariesY2", "WhitePointX", "WhitePointY", "MaxDisplayMasteringLuminance", "MinDisplayMasteringLuminance", "MaxCLL", "MaxFALL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return EOTF;
                case 2:
                    return DisplayPrimariesX0;
                case 3:
                    return DisplayPrimariesX1;
                case 4:
                    return DisplayPrimariesX2;
                case 5:
                    return DisplayPrimariesY0;
                case 6:
                    return DisplayPrimariesY1;
                case 7:
                    return DisplayPrimariesY2;
                case 8:
                    return WhitePointX;
                case 9:
                    return WhitePointY;
                case 10:
                    return MaxDisplayMasteringLuminance;
                case 11:
                    return MinDisplayMasteringLuminance;
                case 12:
                    return MaxCLL;
                case 13:
                    return MaxFALL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DpHdrMetadata_v2_t> m_target;
        #endregion
    }
    public sealed class HPD_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public HPD_EVENT Event { get { return (HPD_EVENT)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal HPD_t(Action<HPD_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HPD_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Event", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HPD_t> m_target;
        #endregion
    }
    public sealed class HPDLiveState_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public bool Attached { get { return GetInt32At(4) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }
        public PORT_CONNECTOR_TYPE PortConnectorType { get { return (PORT_CONNECTOR_TYPE)GetInt32At(12); } }

        #region Private
        internal HPDLiveState_t(Action<HPDLiveState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HPDLiveState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Attached", Attached);
             XmlAttrib(sb, "PortConnectorType", PortConnectorType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Attached", "BDF", "PortConnectorType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Attached;
                case 3:
                    return PortConnectorType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HPDLiveState_t> m_target;
        #endregion
    }
    public sealed class SPI_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DP_SPI_REASON SPIIRQReasons { get { return (DP_SPI_REASON)GetInt32At(4); } }
        public DD_SPI_EVENTS SPIReasons { get { return (DD_SPI_EVENTS)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SPI_t(Action<SPI_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SPI_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SPIIRQReasons", SPIIRQReasons);
             XmlAttrib(sb, "SPIReasons", SPIReasons);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "SPIIRQReasons", "SPIReasons", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return SPIIRQReasons;
                case 2:
                    return SPIReasons;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SPI_t> m_target;
        #endregion
    }
    public sealed class HotplugTypeC_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public bool HPDLiveState { get { return GetInt32At(4) != 0; } }
        public bool DPPMS { get { return GetInt32At(8) != 0; } }
        public bool DPCSS { get { return GetInt32At(12) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }
        public PORT_CONNECTOR_TYPE PortConnectorType { get { return (PORT_CONNECTOR_TYPE)GetInt32At(20); } }

        #region Private
        internal HotplugTypeC_t(Action<HotplugTypeC_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 24));
            Debug.Assert(!(Version > 2 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HotplugTypeC_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "HPDLiveState", HPDLiveState);
             XmlAttrib(sb, "DPPMS", DPPMS);
             XmlAttrib(sb, "DPCSS", DPCSS);
             XmlAttrib(sb, "PortConnectorType", PortConnectorType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "HPDLiveState", "DPPMS", "DPCSS", "BDF", "PortConnectorType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return HPDLiveState;
                case 2:
                    return DPPMS;
                case 3:
                    return DPCSS;
                case 5:
                    return PortConnectorType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HotplugTypeC_t> m_target;
        #endregion
    }
    public sealed class HPDScdc_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public int StatusFlags { get { return GetByteAt(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(5 + (arrayIndex * HostOffset(1, 0))); }
        public int UpdateFlags { get { return GetByteAt(9); } }

        #region Private
        internal HPDScdc_t(Action<HPDScdc_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HPDScdc_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "StatusFlags", StatusFlags);
             XmlAttrib(sb, "UpdateFlags", UpdateFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "StatusFlags", "BDF", "UpdateFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return StatusFlags;
                case 3:
                    return UpdateFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HPDScdc_t> m_target;
        #endregion
    }
    public sealed class LayerToPlaneMap_t : TraceEvent
    {
        public int HwPlaneIndexMap { get { return GetInt16At(0); } }
        public int LayerIndexMap { get { return GetInt16At(2); } }
        public int PipeId { get { return GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal LayerToPlaneMap_t(Action<LayerToPlaneMap_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LayerToPlaneMap_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HwPlaneIndexMap", HwPlaneIndexMap);
             XmlAttrib(sb, "LayerIndexMap", LayerIndexMap);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HwPlaneIndexMap", "LayerIndexMap", "PipeId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HwPlaneIndexMap;
                case 1:
                    return LayerIndexMap;
                case 2:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LayerToPlaneMap_t> m_target;
        #endregion
    }
    public sealed class I2C_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint Slave { get { return (uint)GetInt32At(4); } }
        public uint Index { get { return (uint)GetInt32At(8); } }
        public uint Flags { get { return (uint)GetInt32At(12); } }
        public uint DataSize { get { return (uint)GetInt32At(16); } }
        public byte[] Data { get { return GetByteArrayAt(20, (int)DataSize); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(((int)DataSize*1)+20); } }
        public uint ActualTxnSize { get { return (uint)GetInt32At(((int)DataSize*1)+24); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DataSize*1)+28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal I2C_t(Action<I2C_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)DataSize*1)+32));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)DataSize*1)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<I2C_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Slave", Slave);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "ActualTxnSize", ActualTxnSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Slave", "Index", "Flags", "DataSize", "Data", "Status", "ActualTxnSize", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Slave;
                case 2:
                    return Index;
                case 3:
                    return Flags;
                case 4:
                    return DataSize;
                case 5:
                    return Data;
                case 6:
                    return Status;
                case 7:
                    return ActualTxnSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<I2C_t> m_target;
        #endregion
    }
    public sealed class RrSwitch_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DD_RR_SWITCH_METHOD RrSwitchMethod { get { return (DD_RR_SWITCH_METHOD)GetByteAt(4); } }
        public uint RrValueInMilliHz { get { return (uint)GetInt32At(5); } }
        public bool IsDmrrsPath { get { return GetInt32At(9) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(13 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal RrSwitch_t(Action<RrSwitch_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitch_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "RrValueInMilliHz", RrValueInMilliHz);
             XmlAttrib(sb, "IsDmrrsPath", IsDmrrsPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "RrSwitchMethod", "RrValueInMilliHz", "IsDmrrsPath", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return RrSwitchMethod;
                case 2:
                    return RrValueInMilliHz;
                case 3:
                    return IsDmrrsPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitch_t> m_target;
        #endregion
    }
    public sealed class Intel_ArcSync_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint MinRR { get { return (uint)GetInt32At(8); } }
        public uint MaxRR { get { return (uint)GetInt32At(12); } }
        public uint MaxFrameTimeIncreaseInUs { get { return (uint)GetInt32At(16); } }
        public uint MaxFrameTimeDecreaseInUs { get { return (uint)GetInt32At(20); } }

        #region Private
        internal Intel_ArcSync_t(Action<Intel_ArcSync_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Intel_ArcSync_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "MinRR", MinRR);
             XmlAttrib(sb, "MaxRR", MaxRR);
             XmlAttrib(sb, "MaxFrameTimeIncreaseInUs", MaxFrameTimeIncreaseInUs);
             XmlAttrib(sb, "MaxFrameTimeDecreaseInUs", MaxFrameTimeDecreaseInUs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "MinRR", "MaxRR", "MaxFrameTimeIncreaseInUs", "MaxFrameTimeDecreaseInUs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return MinRR;
                case 3:
                    return MaxRR;
                case 4:
                    return MaxFrameTimeIncreaseInUs;
                case 5:
                    return MaxFrameTimeDecreaseInUs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Intel_ArcSync_t> m_target;
        #endregion
    }
    public sealed class IntelArcSyncOverride_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(8); } }
        public int SinkIndex { get { return GetByteAt(12); } }
        public DD_FLICKER_PROFILE Profile { get { return (DD_FLICKER_PROFILE)GetInt32At(13); } }
        public uint ProfileMinRr1000 { get { return (uint)GetInt32At(17); } }
        public uint ProfileMaxRr1000 { get { return (uint)GetInt32At(21); } }
        public uint ProfileSfditInUs { get { return (uint)GetInt32At(25); } }
        public uint ProfileSfddtInUs { get { return (uint)GetInt32At(29); } }
        public bool ProfileVrrSupport { get { return GetInt32At(33) != 0; } }
        public uint PanelMinRr1000 { get { return (uint)GetInt32At(37); } }
        public uint PanelMaxRr1000 { get { return (uint)GetInt32At(41); } }

        #region Private
        internal IntelArcSyncOverride_t(Action<IntelArcSyncOverride_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 45));
            Debug.Assert(!(Version > 0 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IntelArcSyncOverride_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "Profile", Profile);
             XmlAttrib(sb, "ProfileMinRr1000", ProfileMinRr1000);
             XmlAttrib(sb, "ProfileMaxRr1000", ProfileMaxRr1000);
             XmlAttrib(sb, "ProfileSfditInUs", ProfileSfditInUs);
             XmlAttrib(sb, "ProfileSfddtInUs", ProfileSfddtInUs);
             XmlAttrib(sb, "ProfileVrrSupport", ProfileVrrSupport);
             XmlAttrib(sb, "PanelMinRr1000", PanelMinRr1000);
             XmlAttrib(sb, "PanelMaxRr1000", PanelMaxRr1000);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "Profile", "ProfileMinRr1000", "ProfileMaxRr1000", "ProfileSfditInUs", "ProfileSfddtInUs", "ProfileVrrSupport", "PanelMinRr1000", "PanelMaxRr1000"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return Profile;
                case 5:
                    return ProfileMinRr1000;
                case 6:
                    return ProfileMaxRr1000;
                case 7:
                    return ProfileSfditInUs;
                case 8:
                    return ProfileSfddtInUs;
                case 9:
                    return ProfileVrrSupport;
                case 10:
                    return PanelMinRr1000;
                case 11:
                    return PanelMaxRr1000;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IntelArcSyncOverride_t> m_target;
        #endregion
    }
    public sealed class InterruptRepart_t : TraceEvent
    {
        public uint Event { get { return (uint)GetInt32At(0); } }
        public INTERRUPT_EVENT_MESSAGE Message { get { return (INTERRUPT_EVENT_MESSAGE)GetInt32At(4); } }
        public uint TileId { get { return (uint)GetInt32At(8); } }
        public Address AdapterHandle { get { return GetAddressAt(12); } }
        public uint BusDeviceFunc { get { return (uint)GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal InterruptRepart_t(Action<InterruptRepart_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<InterruptRepart_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Event", Event);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "TileId", TileId);
             XmlAttribHex(sb, "AdapterHandle", AdapterHandle);
             XmlAttrib(sb, "BusDeviceFunc", BusDeviceFunc);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Event", "Message", "TileId", "AdapterHandle", "BusDeviceFunc"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Event;
                case 1:
                    return Message;
                case 2:
                    return TileId;
                case 3:
                    return AdapterHandle;
                case 4:
                    return BusDeviceFunc;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<InterruptRepart_t> m_target;
        #endregion
    }
    public sealed class IsDramBwSupported_t : TraceEvent
    {
        public uint DeprecatedInComingBwReq { get { return (uint)GetInt32At(0); } }
        public int NumEnabledPlanes { get { return GetByteAt(4); } }
        public uint AvailBwForGivenPlane { get { return (uint)GetInt32At(5); } }
        public uint BWSupported { get { return (uint)GetInt32At(9); } }
        public int BDF(int arrayIndex) { return GetByteAt(13 + (arrayIndex * HostOffset(1, 0))); }
        public long InComingBwReq { get { return GetInt64At(17); } }

        #region Private
        internal IsDramBwSupported_t(Action<IsDramBwSupported_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 25));
            Debug.Assert(!(Version > 2 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IsDramBwSupported_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DeprecatedInComingBwReq", DeprecatedInComingBwReq);
             XmlAttrib(sb, "NumEnabledPlanes", NumEnabledPlanes);
             XmlAttrib(sb, "AvailBwForGivenPlane", AvailBwForGivenPlane);
             XmlAttrib(sb, "BWSupported", BWSupported);
             XmlAttrib(sb, "InComingBwReq", InComingBwReq);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeprecatedInComingBwReq", "NumEnabledPlanes", "AvailBwForGivenPlane", "BWSupported", "BDF", "InComingBwReq"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeprecatedInComingBwReq;
                case 1:
                    return NumEnabledPlanes;
                case 2:
                    return AvailBwForGivenPlane;
                case 3:
                    return BWSupported;
                case 5:
                    return InComingBwReq;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IsDramBwSupported_t> m_target;
        #endregion
    }
    public sealed class LastConnectionEvent_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetByteAt(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetByteAt(5); } }
        public int SinkIndex { get { return GetByteAt(6); } }
        public DD_DISPLAY_CONNECTION_EVENTS ConnectionEvent { get { return (DD_DISPLAY_CONNECTION_EVENTS)GetByteAt(7); } }
        public bool LinkRecoveryRequired { get { return GetInt32At(8) != 0; } }
        public int Status { get { return GetInt32At(12); } }

        #region Private
        internal LastConnectionEvent_t(Action<LastConnectionEvent_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LastConnectionEvent_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "ConnectionEvent", ConnectionEvent);
             XmlAttrib(sb, "LinkRecoveryRequired", LinkRecoveryRequired);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "ConnectionEvent", "LinkRecoveryRequired", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return ConnectionEvent;
                case 5:
                    return LinkRecoveryRequired;
                case 6:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LastConnectionEvent_t> m_target;
        #endregion
    }
    public sealed class LPFPanelIndex_t : TraceEvent
    {
        public int PanelIndex { get { return GetInt16At(0); } }
        public uint DataSize { get { return (uint)GetInt32At(2); } }
        public byte[] Data { get { return GetByteArrayAt(6, (int)DataSize); } }

        #region Private
        internal LPFPanelIndex_t(Action<LPFPanelIndex_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)DataSize*1)+6));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)DataSize*1)+6));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LPFPanelIndex_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PanelIndex", PanelIndex);
             XmlAttrib(sb, "DataSize", DataSize);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PanelIndex", "DataSize", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PanelIndex;
                case 1:
                    return DataSize;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LPFPanelIndex_t> m_target;
        #endregion
    }
    public sealed class LidStateNotification_t : TraceEvent
    {
        public DD_LID_STATE LidState { get { return (DD_LID_STATE)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal LidStateNotification_t(Action<LidStateNotification_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LidStateNotification_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LidState", LidState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LidState", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LidState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LidStateNotification_t> m_target;
        #endregion
    }
    public sealed class LinkTrainingInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public bool IsOptimalLTRequired { get { return GetInt32At(8) != 0; } }
        public DD_LANE_WIDTH DpLaneWidth { get { return (DD_LANE_WIDTH)GetByteAt(12); } }
        public uint LinkRateMbps { get { return (uint)GetInt32At(13); } }

        #region Private
        internal LinkTrainingInfo_t(Action<LinkTrainingInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LinkTrainingInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "IsOptimalLTRequired", IsOptimalLTRequired);
             XmlAttrib(sb, "DpLaneWidth", DpLaneWidth);
             XmlAttrib(sb, "LinkRateMbps", LinkRateMbps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Status", "IsOptimalLTRequired", "DpLaneWidth", "LinkRateMbps"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Status;
                case 2:
                    return IsOptimalLTRequired;
                case 3:
                    return DpLaneWidth;
                case 4:
                    return LinkRateMbps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LinkTrainingInfo_t> m_target;
        #endregion
    }
    public sealed class LiveAddress_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public bool FlipDoneEvent { get { return GetInt32At(8) != 0; } }
        public DD_FLIP_DONE_STATUS FlipDoneStatus { get { return (DD_FLIP_DONE_STATUS)GetInt32At(12); } }
        public uint LiveAddressPlane1 { get { return (uint)GetInt32At(16); } }
        public uint LiveAddressPlane2 { get { return (uint)GetInt32At(20); } }
        public uint LiveAddressPlane3 { get { return (uint)GetInt32At(24); } }
        public uint ScanLineCount { get { return (uint)GetInt32At(28); } }
        public uint FrameCount { get { return (uint)GetInt32At(32); } }

        #region Private
        internal LiveAddress_t(Action<LiveAddress_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LiveAddress_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "FlipDoneEvent", FlipDoneEvent);
             XmlAttrib(sb, "FlipDoneStatus", FlipDoneStatus);
             XmlAttrib(sb, "LiveAddressPlane1", LiveAddressPlane1);
             XmlAttrib(sb, "LiveAddressPlane2", LiveAddressPlane2);
             XmlAttrib(sb, "LiveAddressPlane3", LiveAddressPlane3);
             XmlAttrib(sb, "ScanLineCount", ScanLineCount);
             XmlAttrib(sb, "FrameCount", FrameCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "FlipDoneEvent", "FlipDoneStatus", "LiveAddressPlane1", "LiveAddressPlane2", "LiveAddressPlane3", "ScanLineCount", "FrameCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return FlipDoneEvent;
                case 3:
                    return FlipDoneStatus;
                case 4:
                    return LiveAddressPlane1;
                case 5:
                    return LiveAddressPlane2;
                case 6:
                    return LiveAddressPlane3;
                case 7:
                    return ScanLineCount;
                case 8:
                    return FrameCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LiveAddress_t> m_target;
        #endregion
    }
    public sealed class MdmEvent_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_MDM_INFO_POSITION Enum { get { return (DD_MDM_INFO_POSITION)GetInt32At(4); } }
        public uint Data1 { get { return (uint)GetInt32At(8); } }
        public uint Data2 { get { return (uint)GetInt32At(12); } }
        public uint Data3 { get { return (uint)GetInt32At(16); } }
        public uint Data4 { get { return (uint)GetInt32At(20); } }

        #region Private
        internal MdmEvent_t(Action<MdmEvent_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MdmEvent_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enum", Enum);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "Data3", Data3);
             XmlAttrib(sb, "Data4", Data4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Enum", "Data1", "Data2", "Data3", "Data4"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Enum;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return Data3;
                case 5:
                    return Data4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MdmEvent_t> m_target;
        #endregion
    }
    public sealed class MipiDsiLinkReadyStatus_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DDSTATUS LinkReadyStatus { get { return (DDSTATUS)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal MipiDsiLinkReadyStatus_t(Action<MipiDsiLinkReadyStatus_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiLinkReadyStatus_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "LinkReadyStatus", LinkReadyStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "LinkReadyStatus", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return LinkReadyStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiLinkReadyStatus_t> m_target;
        #endregion
    }
    public sealed class MipiDsiPacketTransaction_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DD_DSI_PACKET_DATA_TYPE PacketType { get { return (DD_DSI_PACKET_DATA_TYPE)GetInt32At(4); } }
        public MIPI_PACKET_TRANSMISSION_MODE PktTransMode { get { return (MIPI_PACKET_TRANSMISSION_MODE)GetInt32At(8); } }
        public int VirtualChannel { get { return GetByteAt(12); } }
        public int WordCount { get { return GetInt16At(13); } }
        public int BDF(int arrayIndex) { return GetByteAt(15 + (arrayIndex * HostOffset(1, 0))); }
        public byte[] Data { get { return GetByteArrayAt(19, (int)WordCount); } }

        #region Private
        internal MipiDsiPacketTransaction_t(Action<MipiDsiPacketTransaction_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)WordCount*1)+19));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)WordCount*1)+19));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiPacketTransaction_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "PacketType", PacketType);
             XmlAttrib(sb, "PktTransMode", PktTransMode);
             XmlAttrib(sb, "VirtualChannel", VirtualChannel);
             XmlAttrib(sb, "WordCount", WordCount);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "PacketType", "PktTransMode", "VirtualChannel", "WordCount", "BDF", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return PacketType;
                case 2:
                    return PktTransMode;
                case 3:
                    return VirtualChannel;
                case 4:
                    return WordCount;
                case 6:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiPacketTransaction_t> m_target;
        #endregion
    }
    public sealed class MipiDsiDataRateInHz_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public long DsiDataRateHz { get { return GetInt64At(4); } }

        #region Private
        internal MipiDsiDataRateInHz_t(Action<MipiDsiDataRateInHz_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiDataRateInHz_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DsiDataRateHz", DsiDataRateHz);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "DsiDataRateHz"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return DsiDataRateHz;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiDataRateInHz_t> m_target;
        #endregion
    }
    public sealed class MipiDsiHorizontalTimingInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint HTotal { get { return (uint)GetInt32At(4); } }
        public uint HActive { get { return (uint)GetInt32At(8); } }
        public uint ModifiedHActive { get { return (uint)GetInt32At(12); } }
        public uint HSyncStart { get { return (uint)GetInt32At(16); } }
        public uint HSyncEnd { get { return (uint)GetInt32At(20); } }
        public uint HorizontalFrontPorch { get { return (uint)GetInt32At(24); } }
        public uint HorizontalBackPorch { get { return (uint)GetInt32At(28); } }
        public int Bpp { get { return GetByteAt(32); } }
        public DD_MIPI_DSI_MODE MipiDsiMode { get { return (DD_MIPI_DSI_MODE)GetInt32At(33); } }
        public bool DscSupport { get { return GetInt32At(37) != 0; } }
        public bool TimingInfoCalculationStatus { get { return GetInt32At(41) != 0; } }

        #region Private
        internal MipiDsiHorizontalTimingInfo_t(Action<MipiDsiHorizontalTimingInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 45));
            Debug.Assert(!(Version > 0 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiHorizontalTimingInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "ModifiedHActive", ModifiedHActive);
             XmlAttrib(sb, "HSyncStart", HSyncStart);
             XmlAttrib(sb, "HSyncEnd", HSyncEnd);
             XmlAttrib(sb, "HorizontalFrontPorch", HorizontalFrontPorch);
             XmlAttrib(sb, "HorizontalBackPorch", HorizontalBackPorch);
             XmlAttrib(sb, "Bpp", Bpp);
             XmlAttrib(sb, "MipiDsiMode", MipiDsiMode);
             XmlAttrib(sb, "DscSupport", DscSupport);
             XmlAttrib(sb, "TimingInfoCalculationStatus", TimingInfoCalculationStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "HTotal", "HActive", "ModifiedHActive", "HSyncStart", "HSyncEnd", "HorizontalFrontPorch", "HorizontalBackPorch", "Bpp", "MipiDsiMode", "DscSupport", "TimingInfoCalculationStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return HTotal;
                case 2:
                    return HActive;
                case 3:
                    return ModifiedHActive;
                case 4:
                    return HSyncStart;
                case 5:
                    return HSyncEnd;
                case 6:
                    return HorizontalFrontPorch;
                case 7:
                    return HorizontalBackPorch;
                case 8:
                    return Bpp;
                case 9:
                    return MipiDsiMode;
                case 10:
                    return DscSupport;
                case 11:
                    return TimingInfoCalculationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiHorizontalTimingInfo_t> m_target;
        #endregion
    }
    public sealed class MipiDsiPacketInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_DSI_PACKET_DATA_TYPE Datatype { get { return (DD_DSI_PACKET_DATA_TYPE)GetInt32At(4); } }
        public int WordCount { get { return GetInt16At(8); } }

        #region Private
        internal MipiDsiPacketInfo_t(Action<MipiDsiPacketInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiPacketInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Datatype", Datatype);
             XmlAttrib(sb, "WordCount", WordCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Datatype", "WordCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Datatype;
                case 2:
                    return WordCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiPacketInfo_t> m_target;
        #endregion
    }
    public sealed class MipiDsiPanelInfo_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public DD_MIPI_DSI_MODE Mode { get { return (DD_MIPI_DSI_MODE)GetInt32At(4); } }
        public DD_MIPI_DSI_LINK_CONFIG LinkConfig { get { return (DD_MIPI_DSI_LINK_CONFIG)GetInt32At(8); } }
        public DD_LANE_WIDTH LaneCount { get { return (DD_LANE_WIDTH)GetInt32At(12); } }
        public uint RequiredBurstModeFreqInHz { get { return (uint)GetInt32At(16); } }
        public bool ClockStopEnable { get { return GetInt32At(20) != 0; } }
        public bool PortSyncFeatureSupport { get { return GetInt32At(24) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES PwmOnOffPort0 { get { return (DD_PORT_TYPES)GetInt32At(32); } }
        public uint PwmOnOffPort1 { get { return (uint)GetInt32At(36); } }

        #region Private
        internal MipiDsiPanelInfo_t(Action<MipiDsiPanelInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 40));
            Debug.Assert(!(Version > 2 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiPanelInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Mode", Mode);
             XmlAttrib(sb, "LinkConfig", LinkConfig);
             XmlAttrib(sb, "LaneCount", LaneCount);
             XmlAttrib(sb, "RequiredBurstModeFreqInHz", RequiredBurstModeFreqInHz);
             XmlAttrib(sb, "ClockStopEnable", ClockStopEnable);
             XmlAttrib(sb, "PortSyncFeatureSupport", PortSyncFeatureSupport);
             XmlAttrib(sb, "PwmOnOffPort0", PwmOnOffPort0);
             XmlAttrib(sb, "PwmOnOffPort1", PwmOnOffPort1);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Mode", "LinkConfig", "LaneCount", "RequiredBurstModeFreqInHz", "ClockStopEnable", "PortSyncFeatureSupport", "BDF", "PwmOnOffPort0", "PwmOnOffPort1"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Mode;
                case 2:
                    return LinkConfig;
                case 3:
                    return LaneCount;
                case 4:
                    return RequiredBurstModeFreqInHz;
                case 5:
                    return ClockStopEnable;
                case 6:
                    return PortSyncFeatureSupport;
                case 8:
                    return PwmOnOffPort0;
                case 9:
                    return PwmOnOffPort1;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiPanelInfo_t> m_target;
        #endregion
    }
    public sealed class MipiDsiPayloadCreditsSentInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint ByteCount { get { return (uint)GetInt32At(4); } }
        public int Wordcount { get { return GetInt16At(8); } }

        #region Private
        internal MipiDsiPayloadCreditsSentInfo_t(Action<MipiDsiPayloadCreditsSentInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MipiDsiPayloadCreditsSentInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ByteCount", ByteCount);
             XmlAttrib(sb, "Wordcount", Wordcount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "ByteCount", "Wordcount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return ByteCount;
                case 2:
                    return Wordcount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MipiDsiPayloadCreditsSentInfo_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipPlaneDetails_t : TraceEvent
    {
        public uint MaxImmFlipLine { get { return (uint)GetInt32At(0); } }
        public uint PlaneAttribFlag { get { return (uint)GetInt32At(4); } }
        public uint Blend { get { return (uint)GetInt32At(8); } }
        public uint ClrSpace { get { return (uint)GetInt32At(12); } }
        public uint Rotation { get { return (uint)GetInt32At(16); } }
        public uint StretchQuality { get { return (uint)GetInt32At(20); } }
        public uint SDRWhiteLevel { get { return (uint)GetInt32At(24); } }
        public long SrcLeft { get { return GetInt64At(28); } }
        public long SrcTop { get { return GetInt64At(36); } }
        public long SrcRight { get { return GetInt64At(44); } }
        public long SrcBottom { get { return GetInt64At(52); } }
        public long DestLeft { get { return GetInt64At(60); } }
        public long DestTop { get { return GetInt64At(68); } }
        public long DestRight { get { return GetInt64At(76); } }
        public long DestBottom { get { return GetInt64At(84); } }
        public long ClipLeft { get { return GetInt64At(92); } }
        public long ClipTop { get { return GetInt64At(100); } }
        public long ClipRight { get { return GetInt64At(108); } }
        public long ClipBottom { get { return GetInt64At(116); } }
        public long DirtyRectLeft { get { return GetInt64At(124); } }
        public long DirtyRectTop { get { return GetInt64At(132); } }
        public long DirtyRectRight { get { return GetInt64At(140); } }
        public long DirtyRectBottom { get { return GetInt64At(148); } }
        public Address hAllocation { get { return GetAddressAt(156); } }

        #region Private
        internal Mpo3FlipPlaneDetails_t(Action<Mpo3FlipPlaneDetails_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != HostOffset(160, 1)));
            Debug.Assert(!(Version > 1 && EventDataLength < HostOffset(160, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipPlaneDetails_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MaxImmFlipLine", MaxImmFlipLine);
             XmlAttrib(sb, "PlaneAttribFlag", PlaneAttribFlag);
             XmlAttrib(sb, "Blend", Blend);
             XmlAttrib(sb, "ClrSpace", ClrSpace);
             XmlAttrib(sb, "Rotation", Rotation);
             XmlAttrib(sb, "StretchQuality", StretchQuality);
             XmlAttrib(sb, "SDRWhiteLevel", SDRWhiteLevel);
             XmlAttrib(sb, "SrcLeft", SrcLeft);
             XmlAttrib(sb, "SrcTop", SrcTop);
             XmlAttrib(sb, "SrcRight", SrcRight);
             XmlAttrib(sb, "SrcBottom", SrcBottom);
             XmlAttrib(sb, "DestLeft", DestLeft);
             XmlAttrib(sb, "DestTop", DestTop);
             XmlAttrib(sb, "DestRight", DestRight);
             XmlAttrib(sb, "DestBottom", DestBottom);
             XmlAttrib(sb, "ClipLeft", ClipLeft);
             XmlAttrib(sb, "ClipTop", ClipTop);
             XmlAttrib(sb, "ClipRight", ClipRight);
             XmlAttrib(sb, "ClipBottom", ClipBottom);
             XmlAttrib(sb, "DirtyRectLeft", DirtyRectLeft);
             XmlAttrib(sb, "DirtyRectTop", DirtyRectTop);
             XmlAttrib(sb, "DirtyRectRight", DirtyRectRight);
             XmlAttrib(sb, "DirtyRectBottom", DirtyRectBottom);
             XmlAttribHex(sb, "hAllocation", hAllocation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MaxImmFlipLine", "PlaneAttribFlag", "Blend", "ClrSpace", "Rotation", "StretchQuality", "SDRWhiteLevel", "SrcLeft", "SrcTop", "SrcRight", "SrcBottom", "DestLeft", "DestTop", "DestRight", "DestBottom", "ClipLeft", "ClipTop", "ClipRight", "ClipBottom", "DirtyRectLeft", "DirtyRectTop", "DirtyRectRight", "DirtyRectBottom", "hAllocation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MaxImmFlipLine;
                case 1:
                    return PlaneAttribFlag;
                case 2:
                    return Blend;
                case 3:
                    return ClrSpace;
                case 4:
                    return Rotation;
                case 5:
                    return StretchQuality;
                case 6:
                    return SDRWhiteLevel;
                case 7:
                    return SrcLeft;
                case 8:
                    return SrcTop;
                case 9:
                    return SrcRight;
                case 10:
                    return SrcBottom;
                case 11:
                    return DestLeft;
                case 12:
                    return DestTop;
                case 13:
                    return DestRight;
                case 14:
                    return DestBottom;
                case 15:
                    return ClipLeft;
                case 16:
                    return ClipTop;
                case 17:
                    return ClipRight;
                case 18:
                    return ClipBottom;
                case 19:
                    return DirtyRectLeft;
                case 20:
                    return DirtyRectTop;
                case 21:
                    return DirtyRectRight;
                case 22:
                    return DirtyRectBottom;
                case 23:
                    return hAllocation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipPlaneDetails_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipPlaneIn_t : TraceEvent
    {
        public uint LayerIndex { get { return (uint)GetInt32At(0); } }
        public DXGK_PLANE_SPECIFIC_INPUT_FLAGS Flags { get { return (DXGK_PLANE_SPECIFIC_INPUT_FLAGS)GetInt32At(4); } }
        public long PresentID { get { return GetInt64At(8); } }
        public uint Rsvd { get { return (uint)GetInt32At(16); } }

        #region Private
        internal Mpo3FlipPlaneIn_t(Action<Mpo3FlipPlaneIn_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipPlaneIn_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "Rsvd", Rsvd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LayerIndex", "Flags", "PresentID", "Rsvd"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LayerIndex;
                case 1:
                    return Flags;
                case 2:
                    return PresentID;
                case 3:
                    return Rsvd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipPlaneIn_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipIn_t : TraceEvent
    {
        public uint SourcceID { get { return (uint)GetInt32At(0); } }
        public DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS Flags { get { return (DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS)GetInt32At(4); } }
        public uint PlaneCount { get { return (uint)GetInt32At(8); } }
        public uint Duration { get { return (uint)GetInt32At(12); } }
        public long TargetFlipTime { get { return GetInt64At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Mpo3FlipIn_t(Action<Mpo3FlipIn_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 28));
            Debug.Assert(!(Version > 2 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipIn_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourcceID", SourcceID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PlaneCount", PlaneCount);
             XmlAttrib(sb, "Duration", Duration);
             XmlAttrib(sb, "TargetFlipTime", TargetFlipTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SourcceID", "Flags", "PlaneCount", "Duration", "TargetFlipTime", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SourcceID;
                case 1:
                    return Flags;
                case 2:
                    return PlaneCount;
                case 3:
                    return Duration;
                case 4:
                    return TargetFlipTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipIn_t> m_target;
        #endregion
    }
    public sealed class Mpo3FlipOut_t : TraceEvent
    {
        public DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS Flags { get { return (DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Mpo3FlipOut_t(Action<Mpo3FlipOut_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Mpo3FlipOut_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Flags", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Mpo3FlipOut_t> m_target;
        #endregion
    }
    public sealed class MsgBusTransaction_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public MSG_BUS_CONTEX_TYPE Context { get { return (MSG_BUS_CONTEX_TYPE)GetInt32At(4); } }
        public int Address { get { return GetInt16At(8); } }
        public int Data { get { return GetInt16At(10); } }
        public MSG_BUS_LANE_TYPE MsgBusLane { get { return (MSG_BUS_LANE_TYPE)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal MsgBusTransaction_t(Action<MsgBusTransaction_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MsgBusTransaction_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Context", Context);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "MsgBusLane", MsgBusLane);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Context", "Address", "Data", "MsgBusLane", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Context;
                case 2:
                    return Address;
                case 3:
                    return Data;
                case 4:
                    return MsgBusLane;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MsgBusTransaction_t> m_target;
        #endregion
    }
    public sealed class MstPathPanelReplayInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public bool PanelReplaySupported { get { return GetInt32At(8) != 0; } }
        public bool SelectiveUpdateSupport { get { return GetInt32At(12) != 0; } }
        public DP_MST_PATH_PANEL_REPLAY_INFO PanelReplayPathInfo { get { return (DP_MST_PATH_PANEL_REPLAY_INFO)GetInt32At(16); } }

        #region Private
        internal MstPathPanelReplayInfo_t(Action<MstPathPanelReplayInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MstPathPanelReplayInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PanelReplaySupported", PanelReplaySupported);
             XmlAttrib(sb, "SelectiveUpdateSupport", SelectiveUpdateSupport);
             XmlAttrib(sb, "PanelReplayPathInfo", PanelReplayPathInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "PanelReplaySupported", "SelectiveUpdateSupport", "PanelReplayPathInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return PanelReplaySupported;
                case 3:
                    return SelectiveUpdateSupport;
                case 4:
                    return PanelReplayPathInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MstPathPanelReplayInfo_t> m_target;
        #endregion
    }
    public sealed class MstPeerDeviceInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int SinkIndex { get { return GetByteAt(8); } }
        public DP_DEVICE_TYPE PeerDeviceType { get { return (DP_DEVICE_TYPE)GetInt32At(9); } }
        public DD_VOT DownStreamSinkTypeFromDFP { get { return (DD_VOT)GetInt32At(13); } }
        public DD_VOT DownStreamSinkTypeFromEDID { get { return (DD_VOT)GetInt32At(17); } }

        #region Private
        internal MstPeerDeviceInfo_t(Action<MstPeerDeviceInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 21));
            Debug.Assert(!(Version > 0 && EventDataLength < 21));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MstPeerDeviceInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "PeerDeviceType", PeerDeviceType);
             XmlAttrib(sb, "DownStreamSinkTypeFromDFP", DownStreamSinkTypeFromDFP);
             XmlAttrib(sb, "DownStreamSinkTypeFromEDID", DownStreamSinkTypeFromEDID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkIndex", "PeerDeviceType", "DownStreamSinkTypeFromDFP", "DownStreamSinkTypeFromEDID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkIndex;
                case 3:
                    return PeerDeviceType;
                case 4:
                    return DownStreamSinkTypeFromDFP;
                case 5:
                    return DownStreamSinkTypeFromEDID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MstPeerDeviceInfo_t> m_target;
        #endregion
    }
    public sealed class MstPathVrrInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool VrrSupport { get { return GetInt32At(4) != 0; } }
        public bool AsSdpSupport { get { return GetInt32At(8) != 0; } }
        public DP_MST_PATH_VRR_INFO MstPathVrrInfo { get { return (DP_MST_PATH_VRR_INFO)GetInt32At(12); } }

        #region Private
        internal MstPathVrrInfo_t(Action<MstPathVrrInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MstPathVrrInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VrrSupport", VrrSupport);
             XmlAttrib(sb, "AsSdpSupport", AsSdpSupport);
             XmlAttrib(sb, "MstPathVrrInfo", MstPathVrrInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "VrrSupport", "AsSdpSupport", "MstPathVrrInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return VrrSupport;
                case 2:
                    return AsSdpSupport;
                case 3:
                    return MstPathVrrInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MstPathVrrInfo_t> m_target;
        #endregion
    }
    public sealed class NotifyPeriodicFrame_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint NotificationID { get { return (uint)GetInt32At(8); } }

        #region Private
        internal NotifyPeriodicFrame_t(Action<NotifyPeriodicFrame_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyPeriodicFrame_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "NotificationID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return NotificationID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyPeriodicFrame_t> m_target;
        #endregion
    }
    public sealed class NotifyVSyncMpo2_Info_t : TraceEvent
    {
        public DD_DXGK_INTERRUPT_TYPE Type { get { return (DD_DXGK_INTERRUPT_TYPE)GetInt32At(0); } }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS Flags { get { return (DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS)GetInt32At(8); } }
        public uint DataCount { get { return (uint)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal NotifyVSyncMpo2_Info_t(Action<NotifyVSyncMpo2_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVSyncMpo2_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "DataCount", DataCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "TargetID", "Flags", "DataCount", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return TargetID;
                case 2:
                    return Flags;
                case 3:
                    return DataCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVSyncMpo2_Info_t> m_target;
        #endregion
    }
    public sealed class NotifyVsyncLogBuffer_Plane_Ext_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint LayerIndex { get { return (uint)GetInt32At(8); } }
        public uint LogBufferIndex { get { return (uint)GetInt32At(12); } }
        public long PresentID { get { return GetInt64At(16); } }
        public long TimeStamp { get { return GetInt64At(24); } }

        #region Private
        internal NotifyVsyncLogBuffer_Plane_Ext_t(Action<NotifyVsyncLogBuffer_Plane_Ext_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVsyncLogBuffer_Plane_Ext_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "LogBufferIndex", LogBufferIndex);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "LayerIndex", "LogBufferIndex", "PresentID", "TimeStamp"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return LayerIndex;
                case 3:
                    return LogBufferIndex;
                case 4:
                    return PresentID;
                case 5:
                    return TimeStamp;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVsyncLogBuffer_Plane_Ext_t> m_target;
        #endregion
    }
    public sealed class NotifyVsyncLogBuffer_Plane_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint LayerIndex { get { return (uint)GetInt32At(8); } }
        public uint FirstFreeIndex { get { return (uint)GetInt32At(12); } }
        public bool IsNotifyVsync { get { return GetInt32At(16) != 0; } }

        #region Private
        internal NotifyVsyncLogBuffer_Plane_t(Action<NotifyVsyncLogBuffer_Plane_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVsyncLogBuffer_Plane_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "FirstFreeIndex", FirstFreeIndex);
             XmlAttrib(sb, "IsNotifyVsync", IsNotifyVsync);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "LayerIndex", "FirstFreeIndex", "IsNotifyVsync"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return LayerIndex;
                case 3:
                    return FirstFreeIndex;
                case 4:
                    return IsNotifyVsync;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVsyncLogBuffer_Plane_t> m_target;
        #endregion
    }
    public sealed class NotifyVSyncMpo2_Layer_t : TraceEvent
    {
        public uint LayerIndex { get { return (uint)GetInt32At(0); } }
        public long PresentID { get { return GetInt64At(4); } }
        public DXGKCB_NOTIFY_MPO_VSYNC_FLAGS Flags { get { return (DXGKCB_NOTIFY_MPO_VSYNC_FLAGS)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal NotifyVSyncMpo2_Layer_t(Action<NotifyVSyncMpo2_Layer_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NotifyVSyncMpo2_Layer_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LayerIndex", "PresentID", "Flags", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LayerIndex;
                case 1:
                    return PresentID;
                case 2:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotifyVSyncMpo2_Layer_t> m_target;
        #endregion
    }
    public sealed class OsGiven1dLut_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public D3DDDI_GAMMA_TYPE GammaRampType { get { return (D3DDDI_GAMMA_TYPE)GetInt32At(4); } }
        public uint GammaLUTSize { get { return (uint)GetInt32At(8); } }
        public byte[] GammaLUTData { get { return GetByteArrayAt(12, (int)GammaLUTSize); } }

        #region Private
        internal OsGiven1dLut_t(Action<OsGiven1dLut_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)GammaLUTSize*1)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)GammaLUTSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OsGiven1dLut_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "GammaRampType", GammaRampType);
             XmlAttrib(sb, "GammaLUTSize", GammaLUTSize);
             XmlAttrib(sb, "GammaLUTData", GammaLUTData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "GammaRampType", "GammaLUTSize", "GammaLUTData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return GammaRampType;
                case 2:
                    return GammaLUTSize;
                case 3:
                    return GammaLUTData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OsGiven1dLut_t> m_target;
        #endregion
    }
    public sealed class Opregion_t : TraceEvent
    {
        public uint Version { get { return (uint)GetInt32At(0); } }
        public uint Size { get { return (uint)GetInt32At(4); } }
        public byte[] Data { get { return GetByteArrayAt(8, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Opregion_t(Action<Opregion_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(base.Version == 1 && EventDataLength != ((int)Size*1)+12));
            Debug.Assert(!(base.Version > 1 && EventDataLength < ((int)Size*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Opregion_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "Size", "Data", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return Size;
                case 2:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Opregion_t> m_target;
        #endregion
    }
    public sealed class VbtData_t : TraceEvent
    {
        public int Version { get { return GetInt16At(0); } }

        #region Private
        internal VbtData_t(Action<VbtData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(base.Version == 0 && EventDataLength != 2));
            Debug.Assert(!(base.Version > 0 && EventDataLength < 2));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VbtData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VbtData_t> m_target;
        #endregion
    }
    public sealed class OSOutputColorInfo_t : TraceEvent
    {
        public int OutputColorSpace { get { return GetByteAt(0); } }
        public D3DDDI_WIREFORMAT_MASK WireFormat { get { return (D3DDDI_WIREFORMAT_MASK)GetInt32At(1); } }
        public uint TargetID { get { return (uint)GetInt32At(5); } }
        public int BDF(int arrayIndex) { return GetByteAt(9 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal OSOutputColorInfo_t(Action<OSOutputColorInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 13));
            Debug.Assert(!(Version > 1 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OSOutputColorInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OutputColorSpace", OutputColorSpace);
             XmlAttrib(sb, "WireFormat", WireFormat);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OutputColorSpace", "WireFormat", "TargetID", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OutputColorSpace;
                case 1:
                    return WireFormat;
                case 2:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OSOutputColorInfo_t> m_target;
        #endregion
    }
    public sealed class Pps_t : TraceEvent
    {
        public DD_PPS_SIGNAL Pps_Signal { get { return (DD_PPS_SIGNAL)GetInt32At(0); } }
        public OFF_ON Pps_State { get { return (OFF_ON)GetInt32At(4); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Pps_t(Action<Pps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Pps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pps_Signal", Pps_Signal);
             XmlAttrib(sb, "Pps_State", Pps_State);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pps_Signal", "Pps_State", "Port", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pps_Signal;
                case 1:
                    return Pps_State;
                case 2:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Pps_t> m_target;
        #endregion
    }
    public sealed class PcFeatureSpecificGenericRestrictions_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint Feature { get { return (uint)GetInt32At(4); } }
        public bool FeatureDisableRequest { get { return GetInt32At(8) != 0; } }
        public bool PowerSourceandPlanRestriction { get { return GetInt32At(12) != 0; } }
        public uint PolicyDataFeaturesPolicy { get { return (uint)GetInt32At(16); } }
        public uint PolicyMappingFeaturesPolicy { get { return (uint)GetInt32At(20); } }

        #region Private
        internal PcFeatureSpecificGenericRestrictions_t(Action<PcFeatureSpecificGenericRestrictions_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PcFeatureSpecificGenericRestrictions_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Feature", Feature);
             XmlAttrib(sb, "FeatureDisableRequest", FeatureDisableRequest);
             XmlAttrib(sb, "PowerSourceandPlanRestriction", PowerSourceandPlanRestriction);
             XmlAttrib(sb, "PolicyDataFeaturesPolicy", PolicyDataFeaturesPolicy);
             XmlAttrib(sb, "PolicyMappingFeaturesPolicy", PolicyMappingFeaturesPolicy);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Feature", "FeatureDisableRequest", "PowerSourceandPlanRestriction", "PolicyDataFeaturesPolicy", "PolicyMappingFeaturesPolicy"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Feature;
                case 2:
                    return FeatureDisableRequest;
                case 3:
                    return PowerSourceandPlanRestriction;
                case 4:
                    return PolicyDataFeaturesPolicy;
                case 5:
                    return PolicyMappingFeaturesPolicy;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PcFeatureSpecificGenericRestrictions_t> m_target;
        #endregion
    }
    public sealed class PconDiagnsticData_t : TraceEvent
    {
        public DD_PCON_DIAG_NAME DiagCode { get { return (DD_PCON_DIAG_NAME)GetInt32At(0); } }
        public uint Param1 { get { return (uint)GetInt32At(4); } }
        public uint Param2 { get { return (uint)GetInt32At(8); } }
        public uint Param3 { get { return (uint)GetInt32At(12); } }
        public uint Param4 { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PconDiagnsticData_t(Action<PconDiagnsticData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PconDiagnsticData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DiagCode", DiagCode);
             XmlAttrib(sb, "Param1", Param1);
             XmlAttrib(sb, "Param2", Param2);
             XmlAttrib(sb, "Param3", Param3);
             XmlAttrib(sb, "Param4", Param4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DiagCode", "Param1", "Param2", "Param3", "Param4", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DiagCode;
                case 1:
                    return Param1;
                case 2:
                    return Param2;
                case 3:
                    return Param3;
                case 4:
                    return Param4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PconDiagnsticData_t> m_target;
        #endregion
    }
    public sealed class ProfilingData_t : TraceEvent
    {
        public uint Session { get { return (uint)GetInt32At(0); } }
        public uint SubState { get { return (uint)GetInt32At(4); } }
        public string Function { get { return GetUTF8StringAt(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(SkipUTF8String(8) + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal ProfilingData_t(Action<ProfilingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(8)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(8)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ProfilingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Session", Session);
             XmlAttrib(sb, "SubState", SubState);
             XmlAttrib(sb, "Function", Function);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Session", "SubState", "Function", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Session;
                case 1:
                    return SubState;
                case 2:
                    return Function;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ProfilingData_t> m_target;
        #endregion
    }
    public sealed class PeriodicFrame_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint NotificationID { get { return (uint)GetInt32At(8); } }
        public long TimeIn100ns { get { return GetInt64At(12); } }

        #region Private
        internal PeriodicFrame_t(Action<PeriodicFrame_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PeriodicFrame_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             XmlAttrib(sb, "TimeIn100ns", TimeIn100ns);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "NotificationID", "TimeIn100ns"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return NotificationID;
                case 3:
                    return TimeIn100ns;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PeriodicFrame_t> m_target;
        #endregion
    }
    public sealed class CSC_Params_t : TraceEvent
    {
        public int Color_Config_Flag { get { return GetByteAt(0); } }
        public bool Enable { get { return GetInt32At(1) != 0; } }
        public int Coefficients(int arrayIndex) { return GetInt32At(5 + (arrayIndex * HostOffset(4, 0))); }
        public int PreOffsets(int arrayIndex) { return GetInt32At(41 + (arrayIndex * HostOffset(4, 0))); }
        public int PostOffset(int arrayIndex) { return GetInt32At(53 + (arrayIndex * HostOffset(4, 0))); }
        public int Client { get { return GetByteAt(65); } }
        public uint TargetID { get { return (uint)GetInt32At(66); } }

        #region Private
        internal CSC_Params_t(Action<CSC_Params_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 70));
            Debug.Assert(!(Version > 0 && EventDataLength < 70));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CSC_Params_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Color_Config_Flag", Color_Config_Flag);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "Client", Client);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Color_Config_Flag", "Enable", "Coefficients", "PreOffsets", "PostOffset", "Client", "TargetID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Color_Config_Flag;
                case 1:
                    return Enable;
                case 5:
                    return Client;
                case 6:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CSC_Params_t> m_target;
        #endregion
    }
    public sealed class PMDemandRequest_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PM_DMD_REQ_TYPE RequestType { get { return (DD_PM_DMD_REQ_TYPE)GetInt32At(4); } }
        public uint Value1 { get { return (uint)GetInt32At(8); } }
        public uint Value2 { get { return (uint)GetInt32At(12); } }

        #region Private
        internal PMDemandRequest_t(Action<PMDemandRequest_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PMDemandRequest_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RequestType", RequestType);
             XmlAttrib(sb, "Value1", Value1);
             XmlAttrib(sb, "Value2", Value2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "RequestType", "Value1", "Value2"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return RequestType;
                case 2:
                    return Value1;
                case 3:
                    return Value2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PMDemandRequest_t> m_target;
        #endregion
    }
    public sealed class PortAdjDriveSetting_t : TraceEvent
    {
        public DD_DP_VOLTAGE_SWING_LEVEL VSwingLevel { get { return (DD_DP_VOLTAGE_SWING_LEVEL)GetInt32At(0); } }
        public DD_DP_PREEMPHASIS_LEVEL PreEmpLevel { get { return (DD_DP_PREEMPHASIS_LEVEL)GetInt32At(4); } }
        public uint PresetValue { get { return (uint)GetInt32At(8); } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PortAdjDriveSetting_t(Action<PortAdjDriveSetting_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PortAdjDriveSetting_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VSwingLevel", VSwingLevel);
             XmlAttrib(sb, "PreEmpLevel", PreEmpLevel);
             XmlAttrib(sb, "PresetValue", PresetValue);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VSwingLevel", "PreEmpLevel", "PresetValue", "Port", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VSwingLevel;
                case 1:
                    return PreEmpLevel;
                case 2:
                    return PresetValue;
                case 3:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PortAdjDriveSetting_t> m_target;
        #endregion
    }
    public sealed class PowerWellRequest_t : TraceEvent
    {
        public uint PowerWellMask { get { return (uint)GetInt32At(0); } }
        public POWERWELL_TYPE PowerWellType { get { return (POWERWELL_TYPE)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PowerWellRequest_t(Action<PowerWellRequest_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PowerWellRequest_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PowerWellMask", PowerWellMask);
             XmlAttrib(sb, "PowerWellType", PowerWellType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PowerWellMask", "PowerWellType", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PowerWellMask;
                case 1:
                    return PowerWellType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PowerWellRequest_t> m_target;
        #endregion
    }
    public sealed class PowerWellFail_t : TraceEvent
    {
        public POWERWELL_STATES_FUSE PowerWellFail_Mask { get { return (POWERWELL_STATES_FUSE)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PowerWellFail_t(Action<PowerWellFail_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PowerWellFail_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PowerWellFail_Mask", PowerWellFail_Mask);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PowerWellFail_Mask", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PowerWellFail_Mask;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PowerWellFail_t> m_target;
        #endregion
    }
    public sealed class ProcessConfigTableEntry_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public string ProcessName { get { return GetUnicodeStringAt(4); } }
        public uint ProcessId { get { return (uint)GetInt32At(SkipUnicodeString(4)); } }
        public DD_GAMING_SYNC_MODE GamingSyncMode { get { return (DD_GAMING_SYNC_MODE)GetInt32At(SkipUnicodeString(4)+4); } }
        public uint HeadIndex { get { return (uint)GetInt32At(SkipUnicodeString(4)+8); } }
        public int VRRBltEnabledProcessCount { get { return GetByteAt(SkipUnicodeString(4)+12); } }
        public bool FlipSubmissionDone { get { return GetInt32At(SkipUnicodeString(4)+13) != 0; } }
        public int NumValidEntries { get { return GetByteAt(SkipUnicodeString(4)+17); } }
        public DD_PROCESS_CONFIG_TABLE_ENTRY_ACTION Action { get { return (DD_PROCESS_CONFIG_TABLE_ENTRY_ACTION)GetInt32At(SkipUnicodeString(4)+18); } }
        public bool VrrBltEnabled { get { return GetInt32At(SkipUnicodeString(4)+22) != 0; } }
        public bool GlobalVrrBltEnabled { get { return GetInt32At(SkipUnicodeString(4)+26) != 0; } }

        #region Private
        internal ProcessConfigTableEntry_t(Action<ProcessConfigTableEntry_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(4)+30));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(4)+30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ProcessConfigTableEntry_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProcessName", ProcessName);
             XmlAttrib(sb, "ProcessId", ProcessId);
             XmlAttrib(sb, "GamingSyncMode", GamingSyncMode);
             XmlAttrib(sb, "HeadIndex", HeadIndex);
             XmlAttrib(sb, "VRRBltEnabledProcessCount", VRRBltEnabledProcessCount);
             XmlAttrib(sb, "FlipSubmissionDone", FlipSubmissionDone);
             XmlAttrib(sb, "NumValidEntries", NumValidEntries);
             XmlAttrib(sb, "Action", Action);
             XmlAttrib(sb, "VrrBltEnabled", VrrBltEnabled);
             XmlAttrib(sb, "GlobalVrrBltEnabled", GlobalVrrBltEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "ProcessName", "ProcessId", "GamingSyncMode", "HeadIndex", "VRRBltEnabledProcessCount", "FlipSubmissionDone", "NumValidEntries", "Action", "VrrBltEnabled", "GlobalVrrBltEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return ProcessName;
                case 2:
                    return ProcessId;
                case 3:
                    return GamingSyncMode;
                case 4:
                    return HeadIndex;
                case 5:
                    return VRRBltEnabledProcessCount;
                case 6:
                    return FlipSubmissionDone;
                case 7:
                    return NumValidEntries;
                case 8:
                    return Action;
                case 9:
                    return VrrBltEnabled;
                case 10:
                    return GlobalVrrBltEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ProcessConfigTableEntry_t> m_target;
        #endregion
    }
    public sealed class ProgramLegacyOverlay_t : TraceEvent
    {
        public bool Enable { get { return GetInt32At(0) != 0; } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public uint SurfSizeX { get { return (uint)GetInt32At(8); } }
        public uint SurfSizeY { get { return (uint)GetInt32At(12); } }
        public PIXEL_FMT PixelFormat { get { return (PIXEL_FMT)GetInt32At(16); } }
        public uint DestKeyValue { get { return (uint)GetInt32At(20); } }
        public uint DestKeyMask { get { return (uint)GetInt32At(24); } }
        public bool ProgramDestKey { get { return GetInt32At(28) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(32 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal ProgramLegacyOverlay_t(Action<ProgramLegacyOverlay_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 36));
            Debug.Assert(!(Version > 1 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ProgramLegacyOverlay_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "SurfSizeX", SurfSizeX);
             XmlAttrib(sb, "SurfSizeY", SurfSizeY);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "DestKeyValue", DestKeyValue);
             XmlAttrib(sb, "DestKeyMask", DestKeyMask);
             XmlAttrib(sb, "ProgramDestKey", ProgramDestKey);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Enable", "PipeId", "SurfSizeX", "SurfSizeY", "PixelFormat", "DestKeyValue", "DestKeyMask", "ProgramDestKey", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Enable;
                case 1:
                    return PipeId;
                case 2:
                    return SurfSizeX;
                case 3:
                    return SurfSizeY;
                case 4:
                    return PixelFormat;
                case 5:
                    return DestKeyValue;
                case 6:
                    return DestKeyMask;
                case 7:
                    return ProgramDestKey;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ProgramLegacyOverlay_t> m_target;
        #endregion
    }
    public sealed class QueryInterface_t : TraceEvent
    {
        public Guid InterfaceType { get { return GetGuidAt(0); } }
        public int Version { get { return GetInt16At(16); } }
        public uint Status { get { return (uint)GetInt32At(18); } }

        #region Private
        internal QueryInterface_t(Action<QueryInterface_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(base.Version == 0 && EventDataLength != 22));
            Debug.Assert(!(base.Version > 0 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<QueryInterface_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterfaceType", InterfaceType);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterfaceType", "Version", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterfaceType;
                case 1:
                    return Version;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<QueryInterface_t> m_target;
        #endregion
    }
    public sealed class MonitorMode_t : TraceEvent
    {
        public Address AdapterCtxt { get { return GetAddressAt(0); } }
        public uint TargetId { get { return (uint)GetInt32At(HostOffset(4, 1)); } }
        public uint ModeId { get { return (uint)GetInt32At(HostOffset(8, 1)); } }
        public uint HActive { get { return (uint)GetInt32At(HostOffset(12, 1)); } }
        public uint VActive { get { return (uint)GetInt32At(HostOffset(16, 1)); } }
        public uint HTotal { get { return (uint)GetInt32At(HostOffset(20, 1)); } }
        public uint VTotal { get { return (uint)GetInt32At(HostOffset(24, 1)); } }
        public long DotClock { get { return GetInt64At(HostOffset(28, 1)); } }
        public VIDEO_SIGNAL_SCANLINE_ORDERING ScanLineOrdering { get { return (VIDEO_SIGNAL_SCANLINE_ORDERING)GetInt32At(HostOffset(36, 1)); } }
        public MODE_PREFERENCE Preference { get { return (MODE_PREFERENCE)GetInt32At(HostOffset(40, 1)); } }
        public DD_MONITOR_CAPABILITIES_ORIGIN Origin { get { return (DD_MONITOR_CAPABILITIES_ORIGIN)GetInt32At(HostOffset(44, 1)); } }
        public VIDEO_SIGNAL_STANDARD VideoStandard { get { return (VIDEO_SIGNAL_STANDARD)GetInt32At(HostOffset(48, 1)); } }
        public uint ColorBasis { get { return (uint)GetInt32At(HostOffset(52, 1)); } }

        #region Private
        internal MonitorMode_t(Action<MonitorMode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(56, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(56, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MonitorMode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "AdapterCtxt", AdapterCtxt);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "ModeId", ModeId);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "ScanLineOrdering", ScanLineOrdering);
             XmlAttrib(sb, "Preference", Preference);
             XmlAttrib(sb, "Origin", Origin);
             XmlAttrib(sb, "VideoStandard", VideoStandard);
             XmlAttrib(sb, "ColorBasis", ColorBasis);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AdapterCtxt", "TargetId", "ModeId", "HActive", "VActive", "HTotal", "VTotal", "DotClock", "ScanLineOrdering", "Preference", "Origin", "VideoStandard", "ColorBasis"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AdapterCtxt;
                case 1:
                    return TargetId;
                case 2:
                    return ModeId;
                case 3:
                    return HActive;
                case 4:
                    return VActive;
                case 5:
                    return HTotal;
                case 6:
                    return VTotal;
                case 7:
                    return DotClock;
                case 8:
                    return ScanLineOrdering;
                case 9:
                    return Preference;
                case 10:
                    return Origin;
                case 11:
                    return VideoStandard;
                case 12:
                    return ColorBasis;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MonitorMode_t> m_target;
        #endregion
    }
    public sealed class RmCaps_t : TraceEvent
    {
        public uint MaxPipes { get { return (uint)GetInt32At(0); } }
        public uint MaxPlanes { get { return (uint)GetInt32At(4); } }
        public uint MaxDbuf { get { return (uint)GetInt32At(8); } }
        public int Latency(int arrayIndex) { return GetInt16At(12 + (arrayIndex * HostOffset(2, 0))); }
        public int MaxLevel { get { return GetInt16At(28); } }
        public uint MaxRgbPlanes { get { return (uint)GetInt32At(30); } }
        public uint MaxYuvPlanes { get { return (uint)GetInt32At(34); } }
        public uint NumScalars { get { return (uint)GetInt32At(38); } }
        public uint PixelFormatMask { get { return (uint)GetInt32At(42); } }
        public uint StretchFactor { get { return (uint)GetInt32At(46); } }
        public uint ShrinkFactor { get { return (uint)GetInt32At(50); } }
        public PLANE_CAPS Caps { get { return (PLANE_CAPS)GetInt32At(54); } }
        public int BDF(int arrayIndex) { return GetByteAt(58 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal RmCaps_t(Action<RmCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 62));
            Debug.Assert(!(Version > 1 && EventDataLength < 62));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RmCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MaxPipes", MaxPipes);
             XmlAttrib(sb, "MaxPlanes", MaxPlanes);
             XmlAttrib(sb, "MaxDbuf", MaxDbuf);
             XmlAttrib(sb, "MaxLevel", MaxLevel);
             XmlAttrib(sb, "MaxRgbPlanes", MaxRgbPlanes);
             XmlAttrib(sb, "MaxYuvPlanes", MaxYuvPlanes);
             XmlAttrib(sb, "NumScalars", NumScalars);
             XmlAttrib(sb, "PixelFormatMask", PixelFormatMask);
             XmlAttrib(sb, "StretchFactor", StretchFactor);
             XmlAttrib(sb, "ShrinkFactor", ShrinkFactor);
             XmlAttrib(sb, "Caps", Caps);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MaxPipes", "MaxPlanes", "MaxDbuf", "Latency", "MaxLevel", "MaxRgbPlanes", "MaxYuvPlanes", "NumScalars", "PixelFormatMask", "StretchFactor", "ShrinkFactor", "Caps", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MaxPipes;
                case 1:
                    return MaxPlanes;
                case 2:
                    return MaxDbuf;
                case 4:
                    return MaxLevel;
                case 5:
                    return MaxRgbPlanes;
                case 6:
                    return MaxYuvPlanes;
                case 7:
                    return NumScalars;
                case 8:
                    return PixelFormatMask;
                case 9:
                    return StretchFactor;
                case 10:
                    return ShrinkFactor;
                case 11:
                    return Caps;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RmCaps_t> m_target;
        #endregion
    }
    public sealed class RestrictSagv_t : TraceEvent
    {
        public uint CurrentRestrictedSagvPoints { get { return (uint)GetInt32At(0); } }
        public uint NewSagvPointsToBeRestricted { get { return (uint)GetInt32At(4); } }
        public uint AvailableSagvPoints { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal RestrictSagv_t(Action<RestrictSagv_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RestrictSagv_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CurrentRestrictedSagvPoints", CurrentRestrictedSagvPoints);
             XmlAttrib(sb, "NewSagvPointsToBeRestricted", NewSagvPointsToBeRestricted);
             XmlAttrib(sb, "AvailableSagvPoints", AvailableSagvPoints);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CurrentRestrictedSagvPoints", "NewSagvPointsToBeRestricted", "AvailableSagvPoints", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CurrentRestrictedSagvPoints;
                case 1:
                    return NewSagvPointsToBeRestricted;
                case 2:
                    return AvailableSagvPoints;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RestrictSagv_t> m_target;
        #endregion
    }
    public sealed class RRCappedMode_t : TraceEvent
    {
        public int CappedModeType { get { return GetByteAt(0); } }
        public int FlipCount { get { return GetByteAt(1); } }
        public uint PlaneID { get { return (uint)GetInt32At(2); } }
        public uint TargetID { get { return (uint)GetInt32At(6); } }
        public int BDF(int arrayIndex) { return GetByteAt(10 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal RRCappedMode_t(Action<RRCappedMode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 14));
            Debug.Assert(!(Version > 2 && EventDataLength < 14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RRCappedMode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CappedModeType", CappedModeType);
             XmlAttrib(sb, "FlipCount", FlipCount);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "TargetID", TargetID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CappedModeType", "FlipCount", "PlaneID", "TargetID", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CappedModeType;
                case 1:
                    return FlipCount;
                case 2:
                    return PlaneID;
                case 3:
                    return TargetID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RRCappedMode_t> m_target;
        #endregion
    }
    public sealed class RrSwitchState_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public bool IsCurrent { get { return GetInt32At(8) != 0; } }
        public DD_REFRESH_RATE_MODE RrMode { get { return (DD_REFRESH_RATE_MODE)GetInt32At(12); } }
        public DD_RR_SWITCH_METHOD RrSwitchMethod { get { return (DD_RR_SWITCH_METHOD)GetInt32At(16); } }
        public uint FixedRr1000 { get { return (uint)GetInt32At(20); } }
        public bool VbiMasking { get { return GetInt32At(24) != 0; } }
        public int VbiMaskingFactor { get { return GetByteAt(28); } }
        public uint VariableMinRr1000 { get { return (uint)GetInt32At(29); } }
        public uint VariableMaxRr1000 { get { return (uint)GetInt32At(33); } }

        #region Private
        internal RrSwitchState_t(Action<RrSwitchState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 37));
            Debug.Assert(!(Version > 0 && EventDataLength < 37));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitchState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsCurrent", IsCurrent);
             XmlAttrib(sb, "RrMode", RrMode);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "FixedRr1000", FixedRr1000);
             XmlAttrib(sb, "VbiMasking", VbiMasking);
             XmlAttrib(sb, "VbiMaskingFactor", VbiMaskingFactor);
             XmlAttrib(sb, "VariableMinRr1000", VariableMinRr1000);
             XmlAttrib(sb, "VariableMaxRr1000", VariableMaxRr1000);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "IsCurrent", "RrMode", "RrSwitchMethod", "FixedRr1000", "VbiMasking", "VbiMaskingFactor", "VariableMinRr1000", "VariableMaxRr1000"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return IsCurrent;
                case 3:
                    return RrMode;
                case 4:
                    return RrSwitchMethod;
                case 5:
                    return FixedRr1000;
                case 6:
                    return VbiMasking;
                case 7:
                    return VbiMaskingFactor;
                case 8:
                    return VariableMinRr1000;
                case 9:
                    return VariableMaxRr1000;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitchState_t> m_target;
        #endregion
    }
    public sealed class RrSwitchCapsCommon_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(8); } }
        public int SinkIndex { get { return GetByteAt(12); } }
        public bool ActiveCaps { get { return GetInt32At(13) != 0; } }
        public bool Vrr { get { return GetInt32At(17) != 0; } }
        public bool VrrSdp { get { return GetInt32At(21) != 0; } }
        public bool AlwaysInVrrMode { get { return GetInt32At(25) != 0; } }
        public bool FractionalRr { get { return GetInt32At(29) != 0; } }
        public bool VrrSdpOneLineEarlier { get { return GetInt32At(33) != 0; } }
        public uint SfditInUs { get { return (uint)GetInt32At(37); } }
        public uint SfddtInUs { get { return (uint)GetInt32At(41); } }

        #region Private
        internal RrSwitchCapsCommon_t(Action<RrSwitchCapsCommon_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 45));
            Debug.Assert(!(Version > 0 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitchCapsCommon_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "ActiveCaps", ActiveCaps);
             XmlAttrib(sb, "Vrr", Vrr);
             XmlAttrib(sb, "VrrSdp", VrrSdp);
             XmlAttrib(sb, "AlwaysInVrrMode", AlwaysInVrrMode);
             XmlAttrib(sb, "FractionalRr", FractionalRr);
             XmlAttrib(sb, "VrrSdpOneLineEarlier", VrrSdpOneLineEarlier);
             XmlAttrib(sb, "SfditInUs", SfditInUs);
             XmlAttrib(sb, "SfddtInUs", SfddtInUs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "ActiveCaps", "Vrr", "VrrSdp", "AlwaysInVrrMode", "FractionalRr", "VrrSdpOneLineEarlier", "SfditInUs", "SfddtInUs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return ActiveCaps;
                case 5:
                    return Vrr;
                case 6:
                    return VrrSdp;
                case 7:
                    return AlwaysInVrrMode;
                case 8:
                    return FractionalRr;
                case 9:
                    return VrrSdpOneLineEarlier;
                case 10:
                    return SfditInUs;
                case 11:
                    return SfddtInUs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitchCapsCommon_t> m_target;
        #endregion
    }
    public sealed class RrSwitchCapsFixed_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(8); } }
        public int SinkIndex { get { return GetByteAt(12); } }
        public bool ActiveCaps { get { return GetInt32At(13) != 0; } }
        public bool FixedRrSwitching { get { return GetInt32At(17) != 0; } }
        public bool FullRrRange { get { return GetInt32At(21) != 0; } }
        public uint MinRr { get { return (uint)GetInt32At(25); } }
        public uint MaxRr { get { return (uint)GetInt32At(29); } }
        public bool VbiMasking { get { return GetInt32At(33) != 0; } }
        public int VbiMaskingFactor { get { return GetByteAt(37); } }
        public int NumSupportedRr { get { return GetByteAt(38); } }
        public uint SupportedRr(int arrayIndex) { return (uint)GetInt32At(39 + (arrayIndex * HostOffset(4, 0))); }
        public DD_RR_SWITCH_METHOD RrSwitchMethod { get { return (DD_RR_SWITCH_METHOD)GetInt32At(((int)NumSupportedRr*4)+39); } }
        public DD_DPS_PANEL_TYPE DrrsPanelType { get { return (DD_DPS_PANEL_TYPE)GetInt32At(((int)NumSupportedRr*4)+43); } }
        public bool VirtualRr { get { return GetInt32At(((int)NumSupportedRr*4)+47) != 0; } }
        public uint VSyncMinRr1000 { get { return (uint)GetInt32At(((int)NumSupportedRr*4)+51); } }
        public bool CMRR { get { return GetInt32At(((int)NumSupportedRr*4)+55) != 0; } }

        #region Private
        internal RrSwitchCapsFixed_t(Action<RrSwitchCapsFixed_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)NumSupportedRr*4)+59));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)NumSupportedRr*4)+59));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitchCapsFixed_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "ActiveCaps", ActiveCaps);
             XmlAttrib(sb, "FixedRrSwitching", FixedRrSwitching);
             XmlAttrib(sb, "FullRrRange", FullRrRange);
             XmlAttrib(sb, "MinRr", MinRr);
             XmlAttrib(sb, "MaxRr", MaxRr);
             XmlAttrib(sb, "VbiMasking", VbiMasking);
             XmlAttrib(sb, "VbiMaskingFactor", VbiMaskingFactor);
             XmlAttrib(sb, "NumSupportedRr", NumSupportedRr);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "DrrsPanelType", DrrsPanelType);
             XmlAttrib(sb, "VirtualRr", VirtualRr);
             XmlAttrib(sb, "VSyncMinRr1000", VSyncMinRr1000);
             XmlAttrib(sb, "CMRR", CMRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "ActiveCaps", "FixedRrSwitching", "FullRrRange", "MinRr", "MaxRr", "VbiMasking", "VbiMaskingFactor", "NumSupportedRr", "SupportedRr", "RrSwitchMethod", "DrrsPanelType", "VirtualRr", "VSyncMinRr1000", "CMRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return ActiveCaps;
                case 5:
                    return FixedRrSwitching;
                case 6:
                    return FullRrRange;
                case 7:
                    return MinRr;
                case 8:
                    return MaxRr;
                case 9:
                    return VbiMasking;
                case 10:
                    return VbiMaskingFactor;
                case 11:
                    return NumSupportedRr;
                case 13:
                    return RrSwitchMethod;
                case 14:
                    return DrrsPanelType;
                case 15:
                    return VirtualRr;
                case 16:
                    return VSyncMinRr1000;
                case 17:
                    return CMRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitchCapsFixed_t> m_target;
        #endregion
    }
    public sealed class RrSwitchCapsVariable_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(8); } }
        public int SinkIndex { get { return GetByteAt(12); } }
        public bool ActiveCaps { get { return GetInt32At(13) != 0; } }
        public bool GamingVrr { get { return GetInt32At(17) != 0; } }
        public bool HighFps { get { return GetInt32At(21) != 0; } }
        public bool LowFps { get { return GetInt32At(25) != 0; } }
        public bool VrrPcode { get { return GetInt32At(29) != 0; } }
        public uint MinRr { get { return (uint)GetInt32At(33); } }
        public uint MaxRr { get { return (uint)GetInt32At(37); } }
        public bool HwDcb { get { return GetInt32At(41) != 0; } }

        #region Private
        internal RrSwitchCapsVariable_t(Action<RrSwitchCapsVariable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 45));
            Debug.Assert(!(Version > 1 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitchCapsVariable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "ActiveCaps", ActiveCaps);
             XmlAttrib(sb, "GamingVrr", GamingVrr);
             XmlAttrib(sb, "HighFps", HighFps);
             XmlAttrib(sb, "LowFps", LowFps);
             XmlAttrib(sb, "VrrPcode", VrrPcode);
             XmlAttrib(sb, "MinRr", MinRr);
             XmlAttrib(sb, "MaxRr", MaxRr);
             XmlAttrib(sb, "HwDcb", HwDcb);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "ActiveCaps", "GamingVrr", "HighFps", "LowFps", "VrrPcode", "MinRr", "MaxRr", "HwDcb"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return ActiveCaps;
                case 5:
                    return GamingVrr;
                case 6:
                    return HighFps;
                case 7:
                    return LowFps;
                case 8:
                    return VrrPcode;
                case 9:
                    return MinRr;
                case 10:
                    return MaxRr;
                case 11:
                    return HwDcb;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitchCapsVariable_t> m_target;
        #endregion
    }
    public sealed class RrSwitchProgram_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public DD_VOT SinkType { get { return (DD_VOT)GetInt32At(8); } }
        public int SinkIndex { get { return GetByteAt(12); } }
        public DD_RR_SWITCH_METHOD RrSwitchMethod { get { return (DD_RR_SWITCH_METHOD)GetInt32At(13); } }
        public uint LinkM { get { return (uint)GetInt32At(17); } }
        public uint VTotal { get { return (uint)GetInt32At(21); } }
        public uint VSyncStart { get { return (uint)GetInt32At(25); } }
        public uint VSyncEnd { get { return (uint)GetInt32At(29); } }
        public bool VrrEnable { get { return GetInt32At(33) != 0; } }
        public uint VrrVmin { get { return (uint)GetInt32At(37); } }
        public uint VrrVmax { get { return (uint)GetInt32At(41); } }
        public uint VrrFlipLine { get { return (uint)GetInt32At(45); } }
        public uint FrameFillTime { get { return (uint)GetInt32At(49); } }
        public uint GuardBand { get { return (uint)GetInt32At(53); } }
        public bool DcbEnabled { get { return GetInt32At(57) != 0; } }
        public uint TempFlipLine { get { return (uint)GetInt32At(61); } }
        public int TempFlipLineFrames { get { return GetByteAt(65); } }
        public uint TempVmax { get { return (uint)GetInt32At(66); } }
        public int TempVmaxFrames { get { return GetByteAt(70); } }
        public bool CmrrEnable { get { return GetInt32At(71) != 0; } }
        public long CmrrM { get { return GetInt64At(75); } }
        public long CmrrN { get { return GetInt64At(83); } }
        public bool IsModeSetPath { get { return GetInt32At(91) != 0; } }
        public bool IsVrrUpdateOnly { get { return GetInt32At(95) != 0; } }
        public bool WaitForRrSwitch { get { return GetInt32At(99) != 0; } }

        #region Private
        internal RrSwitchProgram_t(Action<RrSwitchProgram_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 103));
            Debug.Assert(!(Version > 2 && EventDataLength < 103));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RrSwitchProgram_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "RrSwitchMethod", RrSwitchMethod);
             XmlAttrib(sb, "LinkM", LinkM);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "VSyncStart", VSyncStart);
             XmlAttrib(sb, "VSyncEnd", VSyncEnd);
             XmlAttrib(sb, "VrrEnable", VrrEnable);
             XmlAttrib(sb, "VrrVmin", VrrVmin);
             XmlAttrib(sb, "VrrVmax", VrrVmax);
             XmlAttrib(sb, "VrrFlipLine", VrrFlipLine);
             XmlAttrib(sb, "FrameFillTime", FrameFillTime);
             XmlAttrib(sb, "GuardBand", GuardBand);
             XmlAttrib(sb, "DcbEnabled", DcbEnabled);
             XmlAttrib(sb, "TempFlipLine", TempFlipLine);
             XmlAttrib(sb, "TempFlipLineFrames", TempFlipLineFrames);
             XmlAttrib(sb, "TempVmax", TempVmax);
             XmlAttrib(sb, "TempVmaxFrames", TempVmaxFrames);
             XmlAttrib(sb, "CmrrEnable", CmrrEnable);
             XmlAttrib(sb, "CmrrM", CmrrM);
             XmlAttrib(sb, "CmrrN", CmrrN);
             XmlAttrib(sb, "IsModeSetPath", IsModeSetPath);
             XmlAttrib(sb, "IsVrrUpdateOnly", IsVrrUpdateOnly);
             XmlAttrib(sb, "WaitForRrSwitch", WaitForRrSwitch);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "SinkType", "SinkIndex", "RrSwitchMethod", "LinkM", "VTotal", "VSyncStart", "VSyncEnd", "VrrEnable", "VrrVmin", "VrrVmax", "VrrFlipLine", "FrameFillTime", "GuardBand", "DcbEnabled", "TempFlipLine", "TempFlipLineFrames", "TempVmax", "TempVmaxFrames", "CmrrEnable", "CmrrM", "CmrrN", "IsModeSetPath", "IsVrrUpdateOnly", "WaitForRrSwitch"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return SinkType;
                case 3:
                    return SinkIndex;
                case 4:
                    return RrSwitchMethod;
                case 5:
                    return LinkM;
                case 6:
                    return VTotal;
                case 7:
                    return VSyncStart;
                case 8:
                    return VSyncEnd;
                case 9:
                    return VrrEnable;
                case 10:
                    return VrrVmin;
                case 11:
                    return VrrVmax;
                case 12:
                    return VrrFlipLine;
                case 13:
                    return FrameFillTime;
                case 14:
                    return GuardBand;
                case 15:
                    return DcbEnabled;
                case 16:
                    return TempFlipLine;
                case 17:
                    return TempFlipLineFrames;
                case 18:
                    return TempVmax;
                case 19:
                    return TempVmaxFrames;
                case 20:
                    return CmrrEnable;
                case 21:
                    return CmrrM;
                case 22:
                    return CmrrN;
                case 23:
                    return IsModeSetPath;
                case 24:
                    return IsVrrUpdateOnly;
                case 25:
                    return WaitForRrSwitch;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RrSwitchProgram_t> m_target;
        #endregion
    }
    public sealed class SagvState_t : TraceEvent
    {
        public bool SagvState { get { return GetInt32At(0) != 0; } }
        public uint NumOfPipes { get { return (uint)GetInt32At(4); } }
        public int SagvLatency { get { return GetInt16At(8); } }
        public uint MaxPlanesConsidered { get { return (uint)GetInt32At(10); } }
        public uint NumOfSagvPoints { get { return (uint)GetInt32At(14); } }
        public uint RestrictSagvPoints { get { return (uint)GetInt32At(18); } }
        public int BDF(int arrayIndex) { return GetByteAt(22 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SagvState_t(Action<SagvState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 26));
            Debug.Assert(!(Version > 1 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SagvState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SagvState", SagvState);
             XmlAttrib(sb, "NumOfPipes", NumOfPipes);
             XmlAttrib(sb, "SagvLatency", SagvLatency);
             XmlAttrib(sb, "MaxPlanesConsidered", MaxPlanesConsidered);
             XmlAttrib(sb, "NumOfSagvPoints", NumOfSagvPoints);
             XmlAttrib(sb, "RestrictSagvPoints", RestrictSagvPoints);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SagvState", "NumOfPipes", "SagvLatency", "MaxPlanesConsidered", "NumOfSagvPoints", "RestrictSagvPoints", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SagvState;
                case 1:
                    return NumOfPipes;
                case 2:
                    return SagvLatency;
                case 3:
                    return MaxPlanesConsidered;
                case 4:
                    return NumOfSagvPoints;
                case 5:
                    return RestrictSagvPoints;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SagvState_t> m_target;
        #endregion
    }
    public sealed class ScalerForFlip_t : TraceEvent
    {
        public uint Index { get { return (uint)GetInt32At(0); } }
        public int Plane { get { return GetByteAt(4); } }
        public uint Pipe { get { return (uint)GetInt32At(5); } }
        public bool EnableFlag { get { return GetInt32At(9) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(13 + (arrayIndex * HostOffset(1, 0))); }
        public uint PosX { get { return (uint)GetInt32At(17); } }
        public uint PosY { get { return (uint)GetInt32At(21); } }
        public uint ScaledX { get { return (uint)GetInt32At(25); } }
        public uint ScaledY { get { return (uint)GetInt32At(29); } }

        #region Private
        internal ScalerForFlip_t(Action<ScalerForFlip_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 33));
            Debug.Assert(!(Version > 1 && EventDataLength < 33));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ScalerForFlip_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Plane", Plane);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "EnableFlag", EnableFlag);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "ScaledX", ScaledX);
             XmlAttrib(sb, "ScaledY", ScaledY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Index", "Plane", "Pipe", "EnableFlag", "BDF", "PosX", "PosY", "ScaledX", "ScaledY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Index;
                case 1:
                    return Plane;
                case 2:
                    return Pipe;
                case 3:
                    return EnableFlag;
                case 5:
                    return PosX;
                case 6:
                    return PosY;
                case 7:
                    return ScaledX;
                case 8:
                    return ScaledY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ScalerForFlip_t> m_target;
        #endregion
    }
    public sealed class ScalerEnableDisable_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public bool EnableFlag { get { return GetInt32At(4) != 0; } }
        public DD_SCALING ScalingType { get { return (DD_SCALING)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }
        public uint PosX { get { return (uint)GetInt32At(16); } }
        public uint PosY { get { return (uint)GetInt32At(20); } }
        public uint ScaledX { get { return (uint)GetInt32At(24); } }
        public uint ScaledY { get { return (uint)GetInt32At(28); } }

        #region Private
        internal ScalerEnableDisable_t(Action<ScalerEnableDisable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ScalerEnableDisable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "EnableFlag", EnableFlag);
             XmlAttrib(sb, "ScalingType", ScalingType);
             XmlAttrib(sb, "PosX", PosX);
             XmlAttrib(sb, "PosY", PosY);
             XmlAttrib(sb, "ScaledX", ScaledX);
             XmlAttrib(sb, "ScaledY", ScaledY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "EnableFlag", "ScalingType", "BDF", "PosX", "PosY", "ScaledX", "ScaledY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return EnableFlag;
                case 2:
                    return ScalingType;
                case 4:
                    return PosX;
                case 5:
                    return PosY;
                case 6:
                    return ScaledX;
                case 7:
                    return ScaledY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ScalerEnableDisable_t> m_target;
        #endregion
    }
    public sealed class SelectiveFetchInfo_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public int PlaneId { get { return GetByteAt(4); } }
        public uint SFScanX { get { return (uint)GetInt32At(5); } }
        public uint SFScanY { get { return (uint)GetInt32At(9); } }
        public uint SFPosX { get { return (uint)GetInt32At(13); } }
        public uint SFPosY { get { return (uint)GetInt32At(17); } }
        public int BDF(int arrayIndex) { return GetByteAt(21 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SelectiveFetchInfo_t(Action<SelectiveFetchInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 25));
            Debug.Assert(!(Version > 1 && EventDataLength < 25));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SelectiveFetchInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PlaneId", PlaneId);
             XmlAttrib(sb, "SFScanX", SFScanX);
             XmlAttrib(sb, "SFScanY", SFScanY);
             XmlAttrib(sb, "SFPosX", SFPosX);
             XmlAttrib(sb, "SFPosY", SFPosY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "PlaneId", "SFScanX", "SFScanY", "SFPosX", "SFPosY", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return PlaneId;
                case 2:
                    return SFScanX;
                case 3:
                    return SFScanY;
                case 4:
                    return SFPosX;
                case 5:
                    return SFPosY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SelectiveFetchInfo_t> m_target;
        #endregion
    }
    public sealed class SFSUSelectiveFetchProgram_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public int SFPlaneID { get { return GetByteAt(8); } }
        public int Enabled { get { return GetByteAt(9); } }
        public PIXEL_FMT PixelFormat { get { return (PIXEL_FMT)GetInt32At(10); } }
        public uint SFPosX { get { return (uint)GetInt32At(14); } }
        public uint SFPosY { get { return (uint)GetInt32At(18); } }
        public uint SFScanX { get { return (uint)GetInt32At(22); } }
        public uint SFScanY { get { return (uint)GetInt32At(26); } }
        public uint SFPanPosX { get { return (uint)GetInt32At(30); } }
        public uint SFPanPosY { get { return (uint)GetInt32At(34); } }
        public uint SFUvPanPosX { get { return (uint)GetInt32At(38); } }
        public uint SFUvPanPosY { get { return (uint)GetInt32At(42); } }

        #region Private
        internal SFSUSelectiveFetchProgram_t(Action<SFSUSelectiveFetchProgram_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 46));
            Debug.Assert(!(Version > 0 && EventDataLength < 46));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SFSUSelectiveFetchProgram_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "SFPlaneID", SFPlaneID);
             XmlAttrib(sb, "Enabled", Enabled);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             XmlAttrib(sb, "SFPosX", SFPosX);
             XmlAttrib(sb, "SFPosY", SFPosY);
             XmlAttrib(sb, "SFScanX", SFScanX);
             XmlAttrib(sb, "SFScanY", SFScanY);
             XmlAttrib(sb, "SFPanPosX", SFPanPosX);
             XmlAttrib(sb, "SFPanPosY", SFPanPosY);
             XmlAttrib(sb, "SFUvPanPosX", SFUvPanPosX);
             XmlAttrib(sb, "SFUvPanPosY", SFUvPanPosY);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "SFPlaneID", "Enabled", "PixelFormat", "SFPosX", "SFPosY", "SFScanX", "SFScanY", "SFPanPosX", "SFPanPosY", "SFUvPanPosX", "SFUvPanPosY"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return SFPlaneID;
                case 3:
                    return Enabled;
                case 4:
                    return PixelFormat;
                case 5:
                    return SFPosX;
                case 6:
                    return SFPosY;
                case 7:
                    return SFScanX;
                case 8:
                    return SFScanY;
                case 9:
                    return SFPanPosX;
                case 10:
                    return SFPanPosY;
                case 11:
                    return SFUvPanPosX;
                case 12:
                    return SFUvPanPosY;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SFSUSelectiveFetchProgram_t> m_target;
        #endregion
    }
    public sealed class SelectiveFetchRestrictionInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool IsFbcSf { get { return GetInt32At(4) != 0; } }
        public bool IsPsrSf { get { return GetInt32At(8) != 0; } }
        public DD_SELECTIVE_FETCH_RESTRICTION Restriction { get { return (DD_SELECTIVE_FETCH_RESTRICTION)GetByteAt(12); } }
        public uint TargetId { get { return (uint)GetInt32At(13); } }

        #region Private
        internal SelectiveFetchRestrictionInfo_t(Action<SelectiveFetchRestrictionInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 17));
            Debug.Assert(!(Version > 0 && EventDataLength < 17));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SelectiveFetchRestrictionInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsFbcSf", IsFbcSf);
             XmlAttrib(sb, "IsPsrSf", IsPsrSf);
             XmlAttrib(sb, "Restriction", Restriction);
             XmlAttrib(sb, "TargetId", TargetId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "IsFbcSf", "IsPsrSf", "Restriction", "TargetId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return IsFbcSf;
                case 2:
                    return IsPsrSf;
                case 3:
                    return Restriction;
                case 4:
                    return TargetId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SelectiveFetchRestrictionInfo_t> m_target;
        #endregion
    }
    public sealed class SFSUSelectiveUpdateProgram_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public uint SUStartOffset { get { return (uint)GetInt32At(8); } }
        public uint SUEndOffset { get { return (uint)GetInt32At(12); } }
        public int CFFState { get { return GetByteAt(16); } }
        public int SFFState { get { return GetByteAt(17); } }

        #region Private
        internal SFSUSelectiveUpdateProgram_t(Action<SFSUSelectiveUpdateProgram_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 18));
            Debug.Assert(!(Version > 0 && EventDataLength < 18));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SFSUSelectiveUpdateProgram_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "SUStartOffset", SUStartOffset);
             XmlAttrib(sb, "SUEndOffset", SUEndOffset);
             XmlAttrib(sb, "CFFState", CFFState);
             XmlAttrib(sb, "SFFState", SFFState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Pipe", "SUStartOffset", "SUEndOffset", "CFFState", "SFFState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Pipe;
                case 2:
                    return SUStartOffset;
                case 3:
                    return SUEndOffset;
                case 4:
                    return CFFState;
                case 5:
                    return SFFState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SFSUSelectiveUpdateProgram_t> m_target;
        #endregion
    }
    public sealed class AVI_InfoFrameData : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public DD_PROTOCOL_TYPE Protocol { get { return (DD_PROTOCOL_TYPE)GetInt32At(8); } }
        public DD_DIP_TYPE DipType { get { return (DD_DIP_TYPE)GetInt32At(12); } }
        public uint DipSize { get { return (uint)GetInt32At(16); } }
        public byte[] DipData { get { return GetByteArrayAt(20, (int)DipSize); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)DipSize*1)+20 + (arrayIndex * HostOffset(1, 0))); }
        public bool Enable { get { return GetInt32At(((int)DipSize*1)+24) != 0; } }

        #region Private
        internal AVI_InfoFrameData(Action<AVI_InfoFrameData> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != ((int)DipSize*1)+28));
            Debug.Assert(!(Version > 2 && EventDataLength < ((int)DipSize*1)+28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AVI_InfoFrameData>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "DipType", DipType);
             XmlAttrib(sb, "DipSize", DipSize);
             XmlAttrib(sb, "DipData", DipData);
             XmlAttrib(sb, "Enable", Enable);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "Protocol", "DipType", "DipSize", "DipData", "BDF", "Enable"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return Protocol;
                case 3:
                    return DipType;
                case 4:
                    return DipSize;
                case 5:
                    return DipData;
                case 7:
                    return Enable;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AVI_InfoFrameData> m_target;
        #endregion
    }
    public sealed class FlipQLogBuffer : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint SourceId { get { return (uint)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public uint LayerIndex { get { return (uint)GetInt32At(12); } }
        public uint NoOfEntries { get { return (uint)GetInt32At(16); } }
        public Address pLogBuffer { get { return GetAddressAt(20); } }

        #region Private
        internal FlipQLogBuffer(Action<FlipQLogBuffer> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FlipQLogBuffer>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "NoOfEntries", NoOfEntries);
             XmlAttribHex(sb, "pLogBuffer", pLogBuffer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "SourceId", "TargetId", "LayerIndex", "NoOfEntries", "pLogBuffer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return SourceId;
                case 2:
                    return TargetId;
                case 3:
                    return LayerIndex;
                case 4:
                    return NoOfEntries;
                case 5:
                    return pLogBuffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlipQLogBuffer> m_target;
        #endregion
    }
    public sealed class SetInterruptTargetPresentId_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public long EntryTimeStamp { get { return GetInt64At(4); } }
        public int SourceId { get { return GetByteAt(12); } }
        public int LayerIndex { get { return GetByteAt(13); } }
        public long InterruptTargetPresentId { get { return GetInt64At(14); } }

        #region Private
        internal SetInterruptTargetPresentId_t(Action<SetInterruptTargetPresentId_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 22));
            Debug.Assert(!(Version > 0 && EventDataLength < 22));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SetInterruptTargetPresentId_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryTimeStamp", EntryTimeStamp);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "InterruptTargetPresentId", InterruptTargetPresentId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "EntryTimeStamp", "SourceId", "LayerIndex", "InterruptTargetPresentId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return EntryTimeStamp;
                case 2:
                    return SourceId;
                case 3:
                    return LayerIndex;
                case 4:
                    return InterruptTargetPresentId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SetInterruptTargetPresentId_t> m_target;
        #endregion
    }
    public sealed class ProtocolSetTimingData_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public uint SinkIndex { get { return (uint)GetInt32At(8); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(12); } }
        public bool Enable { get { return GetInt32At(16) != 0; } }
        public uint SrcX { get { return (uint)GetInt32At(20); } }
        public uint ScrY { get { return (uint)GetInt32At(24); } }
        public PIXEL_FMT PixelFmt { get { return (PIXEL_FMT)GetInt32At(28); } }
        public uint HActive { get { return (uint)GetInt32At(32); } }
        public uint VActive { get { return (uint)GetInt32At(36); } }
        public uint HTotal { get { return (uint)GetInt32At(40); } }
        public uint VTotal { get { return (uint)GetInt32At(44); } }
        public uint RR { get { return (uint)GetInt32At(48); } }
        public uint DeprecatedDotClock { get { return (uint)GetInt32At(52); } }
        public DD_SCALING Scaling { get { return (DD_SCALING)GetInt32At(56); } }
        public bool FMS { get { return GetInt32At(60) != 0; } }
        public bool IsInterlaced { get { return GetInt32At(64) != 0; } }
        public bool IsS3DMode { get { return GetInt32At(68) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(72 + (arrayIndex * HostOffset(1, 0))); }
        public long DotClock { get { return GetInt64At(76); } }
        public bool IsFakeTarget { get { return GetInt32At(84) != 0; } }
        public uint Window2 { get { return (uint)GetInt32At(88); } }
        public TIMING_FEATURE_SUPPORT VBlankFeatureSupport { get { return (TIMING_FEATURE_SUPPORT)GetInt32At(92); } }

        #region Private
        internal ProtocolSetTimingData_t(Action<ProtocolSetTimingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 5 && EventDataLength != 96));
            Debug.Assert(!(Version > 5 && EventDataLength < 96));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ProtocolSetTimingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "SrcX", SrcX);
             XmlAttrib(sb, "ScrY", ScrY);
             XmlAttrib(sb, "PixelFmt", PixelFmt);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DeprecatedDotClock", DeprecatedDotClock);
             XmlAttrib(sb, "Scaling", Scaling);
             XmlAttrib(sb, "FMS", FMS);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsS3DMode", IsS3DMode);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "IsFakeTarget", IsFakeTarget);
             XmlAttrib(sb, "Window2", Window2);
             XmlAttrib(sb, "VBlankFeatureSupport", VBlankFeatureSupport);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "SinkIndex", "VOT", "Enable", "SrcX", "ScrY", "PixelFmt", "HActive", "VActive", "HTotal", "VTotal", "RR", "DeprecatedDotClock", "Scaling", "FMS", "IsInterlaced", "IsS3DMode", "BDF", "DotClock", "IsFakeTarget", "Window2", "VBlankFeatureSupport"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return SinkIndex;
                case 3:
                    return VOT;
                case 4:
                    return Enable;
                case 5:
                    return SrcX;
                case 6:
                    return ScrY;
                case 7:
                    return PixelFmt;
                case 8:
                    return HActive;
                case 9:
                    return VActive;
                case 10:
                    return HTotal;
                case 11:
                    return VTotal;
                case 12:
                    return RR;
                case 13:
                    return DeprecatedDotClock;
                case 14:
                    return Scaling;
                case 15:
                    return FMS;
                case 16:
                    return IsInterlaced;
                case 17:
                    return IsS3DMode;
                case 19:
                    return DotClock;
                case 20:
                    return IsFakeTarget;
                case 21:
                    return Window2;
                case 22:
                    return VBlankFeatureSupport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ProtocolSetTimingData_t> m_target;
        #endregion
    }
    public sealed class ColorPixelDescPipe_t : TraceEvent
    {
        public DD_COLOR_MODEL Model { get { return (DD_COLOR_MODEL)GetInt32At(0); } }
        public DD_COLOR_RANGE_TYPE RangeType { get { return (DD_COLOR_RANGE_TYPE)GetInt32At(4); } }
        public DD_COLOR_ENCODING Encoding { get { return (DD_COLOR_ENCODING)GetInt32At(8); } }
        public DD_COLOR_GAMUT Gamut { get { return (DD_COLOR_GAMUT)GetInt32At(12); } }
        public int BPC { get { return GetByteAt(16); } }
        public DD_COLOR_YCBCR_SUBSAMPLING YCBCR_Subsampling { get { return (DD_COLOR_YCBCR_SUBSAMPLING)GetInt32At(17); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(21); } }
        public DD_CONTENT_TYPE ContentType { get { return (DD_CONTENT_TYPE)GetInt32At(25); } }
        public int BDF(int arrayIndex) { return GetByteAt(29 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal ColorPixelDescPipe_t(Action<ColorPixelDescPipe_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 33));
            Debug.Assert(!(Version > 3 && EventDataLength < 33));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ColorPixelDescPipe_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Model", Model);
             XmlAttrib(sb, "RangeType", RangeType);
             XmlAttrib(sb, "Encoding", Encoding);
             XmlAttrib(sb, "Gamut", Gamut);
             XmlAttrib(sb, "BPC", BPC);
             XmlAttrib(sb, "YCBCR_Subsampling", YCBCR_Subsampling);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "ContentType", ContentType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Model", "RangeType", "Encoding", "Gamut", "BPC", "YCBCR_Subsampling", "Pipe", "ContentType", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Model;
                case 1:
                    return RangeType;
                case 2:
                    return Encoding;
                case 3:
                    return Gamut;
                case 4:
                    return BPC;
                case 5:
                    return YCBCR_Subsampling;
                case 6:
                    return Pipe;
                case 7:
                    return ContentType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ColorPixelDescPipe_t> m_target;
        #endregion
    }
    public sealed class OsSetTiming_t : TraceEvent
    {
        public uint SrcId { get { return (uint)GetInt32At(0); } }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public DD_SET_TIMING_PATH_FLAGS PathStatus { get { return (DD_SET_TIMING_PATH_FLAGS)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal OsSetTiming_t(Action<OsSetTiming_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OsSetTiming_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SrcId", SrcId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "PathStatus", PathStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SrcId", "TargetId", "PathStatus", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SrcId;
                case 1:
                    return TargetId;
                case 2:
                    return PathStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OsSetTiming_t> m_target;
        #endregion
    }
    public sealed class SfSuConfigParams_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool SfSuPossible { get { return GetInt32At(4) != 0; } }
        public bool EarlyTptPossible { get { return GetInt32At(8) != 0; } }
        public uint ScanlineAlignment { get { return (uint)GetInt32At(12); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(16); } }

        #region Private
        internal SfSuConfigParams_t(Action<SfSuConfigParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SfSuConfigParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SfSuPossible", SfSuPossible);
             XmlAttrib(sb, "EarlyTptPossible", EarlyTptPossible);
             XmlAttrib(sb, "ScanlineAlignment", ScanlineAlignment);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "SfSuPossible", "EarlyTptPossible", "ScanlineAlignment", "PipeId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return SfSuPossible;
                case 2:
                    return EarlyTptPossible;
                case 3:
                    return ScanlineAlignment;
                case 4:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SfSuConfigParams_t> m_target;
        #endregion
    }
    public sealed class SharedGfxPowerComponentFxState_t : TraceEvent
    {
        public long ComponentIndex { get { return GetInt64At(0); } }
        public SHARED_GFX_POWER_COMPONENT_FSTATE RequestedFState { get { return (SHARED_GFX_POWER_COMPONENT_FSTATE)GetInt32At(8); } }
        public SHARED_GFX_POWER_COMPONENT_FSTATE LastFState { get { return (SHARED_GFX_POWER_COMPONENT_FSTATE)GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal SharedGfxPowerComponentFxState_t(Action<SharedGfxPowerComponentFxState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SharedGfxPowerComponentFxState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ComponentIndex", ComponentIndex);
             XmlAttrib(sb, "RequestedFState", RequestedFState);
             XmlAttrib(sb, "LastFState", LastFState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ComponentIndex", "RequestedFState", "LastFState", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ComponentIndex;
                case 1:
                    return RequestedFState;
                case 2:
                    return LastFState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharedGfxPowerComponentFxState_t> m_target;
        #endregion
    }
    public sealed class SharpnessCoefficients_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int TapIndex { get { return GetByteAt(4); } }
        public int Sign { get { return GetInt16At(5); } }
        public int Exponent { get { return GetInt16At(7); } }
        public int Mantissa { get { return GetInt16At(9); } }
        public long RegisterFormat { get { return GetInt64At(11); } }

        #region Private
        internal SharpnessCoefficients_t(Action<SharpnessCoefficients_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 19));
            Debug.Assert(!(Version > 0 && EventDataLength < 19));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SharpnessCoefficients_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TapIndex", TapIndex);
             XmlAttrib(sb, "Sign", Sign);
             XmlAttrib(sb, "Exponent", Exponent);
             XmlAttrib(sb, "Mantissa", Mantissa);
             XmlAttrib(sb, "RegisterFormat", RegisterFormat);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TapIndex", "Sign", "Exponent", "Mantissa", "RegisterFormat"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TapIndex;
                case 2:
                    return Sign;
                case 3:
                    return Exponent;
                case 4:
                    return Mantissa;
                case 5:
                    return RegisterFormat;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharpnessCoefficients_t> m_target;
        #endregion
    }
    public sealed class SharpnessData_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int NumTaps { get { return GetByteAt(4); } }
        public uint SharpnessIntensity { get { return (uint)GetInt32At(5); } }

        #region Private
        internal SharpnessData_t(Action<SharpnessData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 9));
            Debug.Assert(!(Version > 0 && EventDataLength < 9));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SharpnessData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumTaps", NumTaps);
             XmlAttrib(sb, "SharpnessIntensity", SharpnessIntensity);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "NumTaps", "SharpnessIntensity"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return NumTaps;
                case 2:
                    return SharpnessIntensity;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharpnessData_t> m_target;
        #endregion
    }
    public sealed class SpeedframeBuffer_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint Event { get { return (uint)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public Address hAllocation { get { return GetAddressAt(12); } }
        public uint GfxBaseAddress { get { return (uint)GetInt32At(HostOffset(16, 1)); } }
        public uint Status { get { return (uint)GetInt32At(HostOffset(20, 1)); } }

        #region Private
        internal SpeedframeBuffer_t(Action<SpeedframeBuffer_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SpeedframeBuffer_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Event", Event);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttribHex(sb, "hAllocation", hAllocation);
             XmlAttrib(sb, "GfxBaseAddress", GfxBaseAddress);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Event", "TargetId", "hAllocation", "GfxBaseAddress", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Event;
                case 2:
                    return TargetId;
                case 3:
                    return hAllocation;
                case 4:
                    return GfxBaseAddress;
                case 5:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SpeedframeBuffer_t> m_target;
        #endregion
    }
    public sealed class StructureDump_t : TraceEvent
    {
        public string StructureName { get { return GetUTF8StringAt(0); } }
        public uint Size { get { return (uint)GetInt32At(SkipUTF8String(0)); } }
        public byte[] Data { get { return GetByteArrayAt(SkipUTF8String(0)+4, (int)Size); } }
        public string Message { get { return GetUTF8StringAt(SkipUTF8String(0)+((int)Size*1)+4); } }
        public string Function { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(0)+((int)Size*1)+4)); } }
        public uint Line { get { return (uint)GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+((int)Size*1)+4))); } }

        #region Private
        internal StructureDump_t(Action<StructureDump_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+((int)Size*1)+4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(0)+((int)Size*1)+4))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<StructureDump_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "StructureName", StructureName);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "Message", Message);
             XmlAttrib(sb, "Function", Function);
             XmlAttrib(sb, "Line", Line);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "StructureName", "Size", "Data", "Message", "Function", "Line"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return StructureName;
                case 1:
                    return Size;
                case 2:
                    return Data;
                case 3:
                    return Message;
                case 4:
                    return Function;
                case 5:
                    return Line;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<StructureDump_t> m_target;
        #endregion
    }
    public sealed class SystemInfo_t : TraceEvent
    {
        public PRODUCT_FAMILY ProductFamily { get { return (PRODUCT_FAMILY)GetInt32At(0); } }
        public DD_PLATFORM_TYPE PlatformType { get { return (DD_PLATFORM_TYPE)GetInt32At(4); } }
        public DD_CPUTYPE CpuType { get { return (DD_CPUTYPE)GetInt32At(8); } }
        public uint DiD { get { return (uint)GetInt32At(12); } }
        public uint RevID { get { return (uint)GetInt32At(16); } }
        public uint PCHDiD { get { return (uint)GetInt32At(20); } }
        public uint PchRevID { get { return (uint)GetInt32At(24); } }
        public uint GtType { get { return (uint)GetInt32At(28); } }
        public uint HyperVisorType { get { return (uint)GetInt32At(32); } }
        public uint VirtualEnvType { get { return (uint)GetInt32At(36); } }
        public uint OsVerion { get { return (uint)GetInt32At(40); } }
        public uint WddmVer { get { return (uint)GetInt32At(44); } }
        public BUILD_TYPE BuildType { get { return (BUILD_TYPE)GetInt32At(48); } }
        public string BuildDate { get { return GetUTF8StringAt(52); } }
        public string BuildTime { get { return GetUTF8StringAt(SkipUTF8String(52)); } }
        public string AdapterString { get { return GetUnicodeStringAt(SkipUTF8String(SkipUTF8String(52))); } }
        public string ChipTypeString { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52)))); } }
        public int BDF(int arrayIndex) { return GetByteAt(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52)))) + (arrayIndex * HostOffset(1, 0))); }
        public string CpuBrandString { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4); } }
        public int DisplayGMDiD(int arrayIndex) { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4) + (arrayIndex * HostOffset(2, 0))); }
        public int DisplayPicaGMDiD(int arrayIndex) { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+8 + (arrayIndex * HostOffset(2, 0))); }
        public int RenderGMDiD(int arrayIndex) { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+16 + (arrayIndex * HostOffset(2, 0))); }
        public int MediaGMDiD(int arrayIndex) { return GetInt16At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+24 + (arrayIndex * HostOffset(2, 0))); }
        public uint SubsystemVendorID { get { return (uint)GetInt32At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+32); } }
        public uint SubsystemDeviceID { get { return (uint)GetInt32At(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+36); } }

        #region Private
        internal SystemInfo_t(Action<SystemInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+40));
            Debug.Assert(!(Version > 3 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(SkipUTF8String(SkipUTF8String(52))))+4)+40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SystemInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ProductFamily", ProductFamily);
             XmlAttrib(sb, "PlatformType", PlatformType);
             XmlAttrib(sb, "CpuType", CpuType);
             XmlAttrib(sb, "DiD", DiD);
             XmlAttrib(sb, "RevID", RevID);
             XmlAttrib(sb, "PCHDiD", PCHDiD);
             XmlAttrib(sb, "PchRevID", PchRevID);
             XmlAttrib(sb, "GtType", GtType);
             XmlAttrib(sb, "HyperVisorType", HyperVisorType);
             XmlAttrib(sb, "VirtualEnvType", VirtualEnvType);
             XmlAttrib(sb, "OsVerion", OsVerion);
             XmlAttrib(sb, "WddmVer", WddmVer);
             XmlAttrib(sb, "BuildType", BuildType);
             XmlAttrib(sb, "BuildDate", BuildDate);
             XmlAttrib(sb, "BuildTime", BuildTime);
             XmlAttrib(sb, "AdapterString", AdapterString);
             XmlAttrib(sb, "ChipTypeString", ChipTypeString);
             XmlAttrib(sb, "CpuBrandString", CpuBrandString);
             XmlAttrib(sb, "SubsystemVendorID", SubsystemVendorID);
             XmlAttrib(sb, "SubsystemDeviceID", SubsystemDeviceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProductFamily", "PlatformType", "CpuType", "DiD", "RevID", "PCHDiD", "PchRevID", "GtType", "HyperVisorType", "VirtualEnvType", "OsVerion", "WddmVer", "BuildType", "BuildDate", "BuildTime", "AdapterString", "ChipTypeString", "BDF", "CpuBrandString", "DisplayGMDiD", "DisplayPicaGMDiD", "RenderGMDiD", "MediaGMDiD", "SubsystemVendorID", "SubsystemDeviceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProductFamily;
                case 1:
                    return PlatformType;
                case 2:
                    return CpuType;
                case 3:
                    return DiD;
                case 4:
                    return RevID;
                case 5:
                    return PCHDiD;
                case 6:
                    return PchRevID;
                case 7:
                    return GtType;
                case 8:
                    return HyperVisorType;
                case 9:
                    return VirtualEnvType;
                case 10:
                    return OsVerion;
                case 11:
                    return WddmVer;
                case 12:
                    return BuildType;
                case 13:
                    return BuildDate;
                case 14:
                    return BuildTime;
                case 15:
                    return AdapterString;
                case 16:
                    return ChipTypeString;
                case 18:
                    return CpuBrandString;
                case 23:
                    return SubsystemVendorID;
                case 24:
                    return SubsystemDeviceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SystemInfo_t> m_target;
        #endregion
    }
    public sealed class JointTargetProp_t : TraceEvent
    {
        public bool IsMaster { get { return GetInt32At(0) != 0; } }
        public DD_TILED_SCALING ScalingCap { get { return (DD_TILED_SCALING)GetInt32At(4); } }
        public int NumOfHTiles { get { return GetByteAt(8); } }
        public int NumOfVTiles { get { return GetByteAt(9); } }
        public int HLocation { get { return GetByteAt(10); } }
        public int VLocation { get { return GetByteAt(11); } }
        public uint HorTileSize { get { return (uint)GetInt32At(12); } }
        public uint VerTileSize { get { return (uint)GetInt32At(16); } }
        public int PixelMul { get { return GetByteAt(20); } }
        public int TopBezelSize { get { return GetByteAt(21); } }
        public int BottomBezelSize { get { return GetByteAt(22); } }
        public int LeftBezelSize { get { return GetByteAt(23); } }
        public int RoghtBezelSize { get { return GetByteAt(24); } }
        public uint JointTargetId { get { return (uint)GetInt32At(25); } }
        public uint ChildTargetId { get { return (uint)GetInt32At(29); } }
        public int BDF(int arrayIndex) { return GetByteAt(33 + (arrayIndex * HostOffset(1, 0))); }
        public bool IsMaskedTarget { get { return GetInt32At(37) != 0; } }
        public bool IsDirty { get { return GetInt32At(41) != 0; } }

        #region Private
        internal JointTargetProp_t(Action<JointTargetProp_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 45));
            Debug.Assert(!(Version > 2 && EventDataLength < 45));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<JointTargetProp_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsMaster", IsMaster);
             XmlAttrib(sb, "ScalingCap", ScalingCap);
             XmlAttrib(sb, "NumOfHTiles", NumOfHTiles);
             XmlAttrib(sb, "NumOfVTiles", NumOfVTiles);
             XmlAttrib(sb, "HLocation", HLocation);
             XmlAttrib(sb, "VLocation", VLocation);
             XmlAttrib(sb, "HorTileSize", HorTileSize);
             XmlAttrib(sb, "VerTileSize", VerTileSize);
             XmlAttrib(sb, "PixelMul", PixelMul);
             XmlAttrib(sb, "TopBezelSize", TopBezelSize);
             XmlAttrib(sb, "BottomBezelSize", BottomBezelSize);
             XmlAttrib(sb, "LeftBezelSize", LeftBezelSize);
             XmlAttrib(sb, "RoghtBezelSize", RoghtBezelSize);
             XmlAttrib(sb, "JointTargetId", JointTargetId);
             XmlAttrib(sb, "ChildTargetId", ChildTargetId);
             XmlAttrib(sb, "IsMaskedTarget", IsMaskedTarget);
             XmlAttrib(sb, "IsDirty", IsDirty);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsMaster", "ScalingCap", "NumOfHTiles", "NumOfVTiles", "HLocation", "VLocation", "HorTileSize", "VerTileSize", "PixelMul", "TopBezelSize", "BottomBezelSize", "LeftBezelSize", "RoghtBezelSize", "JointTargetId", "ChildTargetId", "BDF", "IsMaskedTarget", "IsDirty"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsMaster;
                case 1:
                    return ScalingCap;
                case 2:
                    return NumOfHTiles;
                case 3:
                    return NumOfVTiles;
                case 4:
                    return HLocation;
                case 5:
                    return VLocation;
                case 6:
                    return HorTileSize;
                case 7:
                    return VerTileSize;
                case 8:
                    return PixelMul;
                case 9:
                    return TopBezelSize;
                case 10:
                    return BottomBezelSize;
                case 11:
                    return LeftBezelSize;
                case 12:
                    return RoghtBezelSize;
                case 13:
                    return JointTargetId;
                case 14:
                    return ChildTargetId;
                case 16:
                    return IsMaskedTarget;
                case 17:
                    return IsDirty;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<JointTargetProp_t> m_target;
        #endregion
    }
    public sealed class Target_Mode_t : TraceEvent
    {
        public uint TargetID { get { return (uint)GetInt32At(0); } }
        public uint H_Active { get { return (uint)GetInt32At(4); } }
        public uint V_Active { get { return (uint)GetInt32At(8); } }
        public uint H_Total { get { return (uint)GetInt32At(12); } }
        public uint V_Total { get { return (uint)GetInt32At(16); } }
        public uint RR { get { return (uint)GetInt32At(20); } }
        public uint DeprecatedDotClock { get { return (uint)GetInt32At(24); } }
        public bool IsInterlaced { get { return GetInt32At(28) != 0; } }
        public bool IsPreferred { get { return GetInt32At(32) != 0; } }
        public DD_MODE_TYPE Origin { get { return (DD_MODE_TYPE)GetInt32At(36); } }
        public SAMPLING_MODE_BIT_MASK SamplingMode { get { return (SAMPLING_MODE_BIT_MASK)GetInt32At(40); } }
        public SUPPORTED_BPC_BIT_MASK BpcSupported { get { return (SUPPORTED_BPC_BIT_MASK)GetInt32At(44); } }
        public int BDF(int arrayIndex) { return GetByteAt(48 + (arrayIndex * HostOffset(1, 0))); }
        public long DotClock { get { return GetInt64At(52); } }
        public int VIC(int arrayIndex) { return GetByteAt(60 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Target_Mode_t(Action<Target_Mode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 5 && EventDataLength != 62));
            Debug.Assert(!(Version > 5 && EventDataLength < 62));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Mode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "H_Active", H_Active);
             XmlAttrib(sb, "V_Active", V_Active);
             XmlAttrib(sb, "H_Total", H_Total);
             XmlAttrib(sb, "V_Total", V_Total);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DeprecatedDotClock", DeprecatedDotClock);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsPreferred", IsPreferred);
             XmlAttrib(sb, "Origin", Origin);
             XmlAttrib(sb, "SamplingMode", SamplingMode);
             XmlAttrib(sb, "BpcSupported", BpcSupported);
             XmlAttrib(sb, "DotClock", DotClock);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "H_Active", "V_Active", "H_Total", "V_Total", "RR", "DeprecatedDotClock", "IsInterlaced", "IsPreferred", "Origin", "SamplingMode", "BpcSupported", "BDF", "DotClock", "VIC"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return H_Active;
                case 2:
                    return V_Active;
                case 3:
                    return H_Total;
                case 4:
                    return V_Total;
                case 5:
                    return RR;
                case 6:
                    return DeprecatedDotClock;
                case 7:
                    return IsInterlaced;
                case 8:
                    return IsPreferred;
                case 9:
                    return Origin;
                case 10:
                    return SamplingMode;
                case 11:
                    return BpcSupported;
                case 13:
                    return DotClock;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Mode_t> m_target;
        #endregion
    }
    public sealed class Target_Info_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(8); } }
        public CON_STATE ConnectionState { get { return (CON_STATE)GetInt32At(12); } }
        public bool IsTiled { get { return GetInt32At(16) != 0; } }
        public uint NumSrcModes { get { return (uint)GetInt32At(20); } }
        public uint NumTgtModes { get { return (uint)GetInt32At(24); } }
        public CON_STATE ConnStateOverride { get { return (CON_STATE)GetInt32At(28); } }
        public uint Rsvd2 { get { return (uint)GetInt32At(32); } }
        public uint Rsvd3 { get { return (uint)GetInt32At(36); } }
        public uint Rsvd4 { get { return (uint)GetInt32At(40); } }
        public int BDF(int arrayIndex) { return GetByteAt(44 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Target_Info_t(Action<Target_Info_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 48));
            Debug.Assert(!(Version > 2 && EventDataLength < 48));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Info_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "ConnectionState", ConnectionState);
             XmlAttrib(sb, "IsTiled", IsTiled);
             XmlAttrib(sb, "NumSrcModes", NumSrcModes);
             XmlAttrib(sb, "NumTgtModes", NumTgtModes);
             XmlAttrib(sb, "ConnStateOverride", ConnStateOverride);
             XmlAttrib(sb, "Rsvd2", Rsvd2);
             XmlAttrib(sb, "Rsvd3", Rsvd3);
             XmlAttrib(sb, "Rsvd4", Rsvd4);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "TargetID", "VOT", "ConnectionState", "IsTiled", "NumSrcModes", "NumTgtModes", "ConnStateOverride", "Rsvd2", "Rsvd3", "Rsvd4", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return TargetID;
                case 2:
                    return VOT;
                case 3:
                    return ConnectionState;
                case 4:
                    return IsTiled;
                case 5:
                    return NumSrcModes;
                case 6:
                    return NumTgtModes;
                case 7:
                    return ConnStateOverride;
                case 8:
                    return Rsvd2;
                case 9:
                    return Rsvd3;
                case 10:
                    return Rsvd4;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Info_t> m_target;
        #endregion
    }
    public sealed class PlatformCaps_t : TraceEvent
    {
        public Address DisplayContext { get { return GetAddressAt(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(HostOffset(4, 1) + (arrayIndex * HostOffset(1, 0))); }
        public bool CDClkChangeSupport { get { return GetInt32At(HostOffset(8, 1)) != 0; } }
        public bool HeadlessKVMRSupport { get { return GetInt32At(HostOffset(12, 1)) != 0; } }
        public bool DgpuPresent { get { return GetInt32At(HostOffset(16, 1)) != 0; } }
        public long QpcFrequency { get { return GetInt64At(HostOffset(20, 1)); } }
        public long QpcCurrentTicks { get { return GetInt64At(HostOffset(28, 1)); } }
        public bool DgpuMbDownConfig { get { return GetInt32At(HostOffset(36, 1)) != 0; } }

        #region Private
        internal PlatformCaps_t(Action<PlatformCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != HostOffset(40, 1)));
            Debug.Assert(!(Version > 1 && EventDataLength < HostOffset(40, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PlatformCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DisplayContext", DisplayContext);
             XmlAttrib(sb, "CDClkChangeSupport", CDClkChangeSupport);
             XmlAttrib(sb, "HeadlessKVMRSupport", HeadlessKVMRSupport);
             XmlAttrib(sb, "DgpuPresent", DgpuPresent);
             XmlAttrib(sb, "QpcFrequency", QpcFrequency);
             XmlAttrib(sb, "QpcCurrentTicks", QpcCurrentTicks);
             XmlAttrib(sb, "DgpuMbDownConfig", DgpuMbDownConfig);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayContext", "BDF", "CDClkChangeSupport", "HeadlessKVMRSupport", "DgpuPresent", "QpcFrequency", "QpcCurrentTicks", "DgpuMbDownConfig"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayContext;
                case 2:
                    return CDClkChangeSupport;
                case 3:
                    return HeadlessKVMRSupport;
                case 4:
                    return DgpuPresent;
                case 5:
                    return QpcFrequency;
                case 6:
                    return QpcCurrentTicks;
                case 7:
                    return DgpuMbDownConfig;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlatformCaps_t> m_target;
        #endregion
    }
    public sealed class CcdSetTimingData_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(4); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public DD_VOT VOT { get { return (DD_VOT)GetInt32At(12); } }
        public bool Enable { get { return GetInt32At(16) != 0; } }
        public uint SrcX { get { return (uint)GetInt32At(20); } }
        public uint ScrY { get { return (uint)GetInt32At(24); } }
        public PIXEL_FMT PixelFmt { get { return (PIXEL_FMT)GetInt32At(28); } }
        public uint HActive { get { return (uint)GetInt32At(32); } }
        public uint VActive { get { return (uint)GetInt32At(36); } }
        public uint HTotal { get { return (uint)GetInt32At(40); } }
        public uint VTotal { get { return (uint)GetInt32At(44); } }
        public uint RR { get { return (uint)GetInt32At(48); } }
        public uint DeprecatedDotClock { get { return (uint)GetInt32At(52); } }
        public DD_SCALING Scaling { get { return (DD_SCALING)GetInt32At(56); } }
        public bool FMS { get { return GetInt32At(60) != 0; } }
        public bool IsInterlaced { get { return GetInt32At(64) != 0; } }
        public bool IsS3DMode { get { return GetInt32At(68) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(72 + (arrayIndex * HostOffset(1, 0))); }
        public long DotClock { get { return GetInt64At(76); } }
        public uint Window2 { get { return (uint)GetInt32At(84); } }
        public TIMING_FEATURE_SUPPORT VBlankFeatureSupport { get { return (TIMING_FEATURE_SUPPORT)GetInt32At(88); } }

        #region Private
        internal CcdSetTimingData_t(Action<CcdSetTimingData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 4 && EventDataLength != 92));
            Debug.Assert(!(Version > 4 && EventDataLength < 92));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CcdSetTimingData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "VOT", VOT);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "SrcX", SrcX);
             XmlAttrib(sb, "ScrY", ScrY);
             XmlAttrib(sb, "PixelFmt", PixelFmt);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DeprecatedDotClock", DeprecatedDotClock);
             XmlAttrib(sb, "Scaling", Scaling);
             XmlAttrib(sb, "FMS", FMS);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsS3DMode", IsS3DMode);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "Window2", Window2);
             XmlAttrib(sb, "VBlankFeatureSupport", VBlankFeatureSupport);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "Pipe", "TargetId", "VOT", "Enable", "SrcX", "ScrY", "PixelFmt", "HActive", "VActive", "HTotal", "VTotal", "RR", "DeprecatedDotClock", "Scaling", "FMS", "IsInterlaced", "IsS3DMode", "BDF", "DotClock", "Window2", "VBlankFeatureSupport"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return Pipe;
                case 2:
                    return TargetId;
                case 3:
                    return VOT;
                case 4:
                    return Enable;
                case 5:
                    return SrcX;
                case 6:
                    return ScrY;
                case 7:
                    return PixelFmt;
                case 8:
                    return HActive;
                case 9:
                    return VActive;
                case 10:
                    return HTotal;
                case 11:
                    return VTotal;
                case 12:
                    return RR;
                case 13:
                    return DeprecatedDotClock;
                case 14:
                    return Scaling;
                case 15:
                    return FMS;
                case 16:
                    return IsInterlaced;
                case 17:
                    return IsS3DMode;
                case 19:
                    return DotClock;
                case 20:
                    return Window2;
                case 21:
                    return VBlankFeatureSupport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CcdSetTimingData_t> m_target;
        #endregion
    }
    public sealed class MonitorLinkInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public MONITOR_LINK_INFO_CAPS LinkInfoCaps { get { return (MONITOR_LINK_INFO_CAPS)GetInt32At(4); } }
        public uint DitheringSupport { get { return (uint)GetInt32At(8); } }
        public uint TargetId { get { return (uint)GetInt32At(12); } }

        #region Private
        internal MonitorLinkInfo_t(Action<MonitorLinkInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MonitorLinkInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LinkInfoCaps", LinkInfoCaps);
             XmlAttrib(sb, "DitheringSupport", DitheringSupport);
             XmlAttrib(sb, "TargetId", TargetId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "LinkInfoCaps", "DitheringSupport", "TargetId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return LinkInfoCaps;
                case 2:
                    return DitheringSupport;
                case 3:
                    return TargetId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MonitorLinkInfo_t> m_target;
        #endregion
    }
    public sealed class TargetConnectionState_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public CON_STATE PhyConState { get { return (CON_STATE)GetInt32At(4); } }
        public CON_STATE LogConState { get { return (CON_STATE)GetInt32At(8); } }
        public bool ConStateDirty { get { return GetInt32At(12) != 0; } }
        public DD_DISPLAY_LINK_EVENTS LinkState { get { return (DD_DISPLAY_LINK_EVENTS)GetInt32At(16); } }
        public bool LinkStateDirty { get { return GetInt32At(20) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }
        public bool IsOverrideUpdate { get { return GetInt32At(28) != 0; } }
        public CON_STATE OverrideConnState { get { return (CON_STATE)GetInt32At(32); } }

        #region Private
        internal TargetConnectionState_t(Action<TargetConnectionState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 36));
            Debug.Assert(!(Version > 2 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TargetConnectionState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "PhyConState", PhyConState);
             XmlAttrib(sb, "LogConState", LogConState);
             XmlAttrib(sb, "ConStateDirty", ConStateDirty);
             XmlAttrib(sb, "LinkState", LinkState);
             XmlAttrib(sb, "LinkStateDirty", LinkStateDirty);
             XmlAttrib(sb, "IsOverrideUpdate", IsOverrideUpdate);
             XmlAttrib(sb, "OverrideConnState", OverrideConnState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "PhyConState", "LogConState", "ConStateDirty", "LinkState", "LinkStateDirty", "BDF", "IsOverrideUpdate", "OverrideConnState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return PhyConState;
                case 2:
                    return LogConState;
                case 3:
                    return ConStateDirty;
                case 4:
                    return LinkState;
                case 5:
                    return LinkStateDirty;
                case 7:
                    return IsOverrideUpdate;
                case 8:
                    return OverrideConnState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TargetConnectionState_t> m_target;
        #endregion
    }
    public sealed class TargetConnectionChange_t : TraceEvent
    {
        public long ConChangeId { get { return GetInt64At(0); } }
        public uint TargetId { get { return (uint)GetInt32At(8); } }
        public CON_STATE ConStatus { get { return (CON_STATE)GetInt32At(12); } }
        public DD_DISPLAY_LINK_EVENTS LinkState { get { return (DD_DISPLAY_LINK_EVENTS)GetInt32At(16); } }
        public DD_VOT LinkTargetType { get { return (DD_VOT)GetInt32At(20); } }
        public bool ConChangePending { get { return GetInt32At(24) != 0; } }
        public bool LinkStatePending { get { return GetInt32At(28) != 0; } }
        public uint Port { get { return (uint)GetInt32At(32); } }
        public int BDF(int arrayIndex) { return GetByteAt(36 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TargetConnectionChange_t(Action<TargetConnectionChange_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 40));
            Debug.Assert(!(Version > 2 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TargetConnectionChange_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ConChangeId", ConChangeId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "ConStatus", ConStatus);
             XmlAttrib(sb, "LinkState", LinkState);
             XmlAttrib(sb, "LinkTargetType", LinkTargetType);
             XmlAttrib(sb, "ConChangePending", ConChangePending);
             XmlAttrib(sb, "LinkStatePending", LinkStatePending);
             XmlAttrib(sb, "Port", Port);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConChangeId", "TargetId", "ConStatus", "LinkState", "LinkTargetType", "ConChangePending", "LinkStatePending", "Port", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConChangeId;
                case 1:
                    return TargetId;
                case 2:
                    return ConStatus;
                case 3:
                    return LinkState;
                case 4:
                    return LinkTargetType;
                case 5:
                    return ConChangePending;
                case 6:
                    return LinkStatePending;
                case 7:
                    return Port;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TargetConnectionChange_t> m_target;
        #endregion
    }
    public sealed class TargetDetect_t : TraceEvent
    {
        public DD_TARGET_DETECT_TYPE DetectType { get { return (DD_TARGET_DETECT_TYPE)GetInt32At(0); } }
        public bool IsHPD { get { return GetInt32At(4) != 0; } }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(8); } }
        public uint TargetId { get { return (uint)GetInt32At(12); } }
        public bool IsPartialDetect { get { return GetInt32At(16) != 0; } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TargetDetect_t(Action<TargetDetect_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TargetDetect_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DetectType", DetectType);
             XmlAttrib(sb, "IsHPD", IsHPD);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "IsPartialDetect", IsPartialDetect);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DetectType", "IsHPD", "Port", "TargetId", "IsPartialDetect", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DetectType;
                case 1:
                    return IsHPD;
                case 2:
                    return Port;
                case 3:
                    return TargetId;
                case 4:
                    return IsPartialDetect;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TargetDetect_t> m_target;
        #endregion
    }
    public sealed class Target_Edid : TraceEvent
    {
        public uint TargetID { get { return (uint)GetInt32At(0); } }
        public int Block { get { return GetByteAt(4); } }
        public int Size { get { return GetInt16At(5); } }
        public byte[] Edid { get { return GetByteArrayAt(7, (int)Size); } }
        public int BDF(int arrayIndex) { return GetByteAt(((int)Size*1)+7 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal Target_Edid(Action<Target_Edid> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != ((int)Size*1)+11));
            Debug.Assert(!(Version > 1 && EventDataLength < ((int)Size*1)+11));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Target_Edid>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "Block", Block);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "Edid", Edid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "Block", "Size", "Edid", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return Block;
                case 2:
                    return Size;
                case 3:
                    return Edid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Target_Edid> m_target;
        #endregion
    }
    public sealed class TargetModePrunedInfo_t : TraceEvent
    {
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public int SinkIndex { get { return GetByteAt(4); } }
        public uint SinkType { get { return (uint)GetInt32At(5); } }
        public uint H_Active { get { return (uint)GetInt32At(9); } }
        public uint V_Active { get { return (uint)GetInt32At(13); } }
        public uint H_Total { get { return (uint)GetInt32At(17); } }
        public uint V_Total { get { return (uint)GetInt32At(21); } }
        public uint RR { get { return (uint)GetInt32At(25); } }
        public uint DeprecatedDotClock { get { return (uint)GetInt32At(29); } }
        public bool IsInterlaced { get { return GetInt32At(33) != 0; } }
        public bool IsPreferred { get { return GetInt32At(37) != 0; } }
        public DD_MODE_TYPE Origin { get { return (DD_MODE_TYPE)GetInt32At(41); } }
        public DDSTATUS Reason { get { return (DDSTATUS)GetInt32At(45); } }
        public SAMPLING_MODE_BIT_MASK SamplingMode { get { return (SAMPLING_MODE_BIT_MASK)GetInt32At(49); } }
        public int BDF(int arrayIndex) { return GetByteAt(53 + (arrayIndex * HostOffset(1, 0))); }
        public long DotClock { get { return GetInt64At(57); } }
        public DD_MODE_ENUM_RESTRICTIONS Restrictions { get { return (DD_MODE_ENUM_RESTRICTIONS)GetInt32At(65); } }
        public int VIC(int arrayIndex) { return GetByteAt(69 + (arrayIndex * HostOffset(1, 0))); }
        public SUPPORTED_BPC_BIT_MASK PruneBpc { get { return (SUPPORTED_BPC_BIT_MASK)GetInt32At(71); } }

        #region Private
        internal TargetModePrunedInfo_t(Action<TargetModePrunedInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 6 && EventDataLength != 75));
            Debug.Assert(!(Version > 6 && EventDataLength < 75));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TargetModePrunedInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "SinkIndex", SinkIndex);
             XmlAttrib(sb, "SinkType", SinkType);
             XmlAttrib(sb, "H_Active", H_Active);
             XmlAttrib(sb, "V_Active", V_Active);
             XmlAttrib(sb, "H_Total", H_Total);
             XmlAttrib(sb, "V_Total", V_Total);
             XmlAttrib(sb, "RR", RR);
             XmlAttrib(sb, "DeprecatedDotClock", DeprecatedDotClock);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsPreferred", IsPreferred);
             XmlAttrib(sb, "Origin", Origin);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "SamplingMode", SamplingMode);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "Restrictions", Restrictions);
             XmlAttrib(sb, "PruneBpc", PruneBpc);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Port", "SinkIndex", "SinkType", "H_Active", "V_Active", "H_Total", "V_Total", "RR", "DeprecatedDotClock", "IsInterlaced", "IsPreferred", "Origin", "Reason", "SamplingMode", "BDF", "DotClock", "Restrictions", "VIC", "PruneBpc"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Port;
                case 1:
                    return SinkIndex;
                case 2:
                    return SinkType;
                case 3:
                    return H_Active;
                case 4:
                    return V_Active;
                case 5:
                    return H_Total;
                case 6:
                    return V_Total;
                case 7:
                    return RR;
                case 8:
                    return DeprecatedDotClock;
                case 9:
                    return IsInterlaced;
                case 10:
                    return IsPreferred;
                case 11:
                    return Origin;
                case 12:
                    return Reason;
                case 13:
                    return SamplingMode;
                case 15:
                    return DotClock;
                case 16:
                    return Restrictions;
                case 18:
                    return PruneBpc;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TargetModePrunedInfo_t> m_target;
        #endregion
    }
    public sealed class ElpCaps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int LFP_ID { get { return GetByteAt(4); } }
        public bool PanelSupport { get { return GetInt32At(5) != 0; } }
        public bool VbtSupport { get { return GetInt32At(9) != 0; } }

        #region Private
        internal ElpCaps_t(Action<ElpCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 13));
            Debug.Assert(!(Version > 1 && EventDataLength < 13));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ElpCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LFP_ID", LFP_ID);
             XmlAttrib(sb, "PanelSupport", PanelSupport);
             XmlAttrib(sb, "VbtSupport", VbtSupport);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "LFP_ID", "PanelSupport", "VbtSupport"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return LFP_ID;
                case 2:
                    return PanelSupport;
                case 3:
                    return VbtSupport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ElpCaps_t> m_target;
        #endregion
    }
    public sealed class ThreeDLUT_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public bool Enable { get { return GetInt32At(8) != 0; } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(12); } }

        #region Private
        internal ThreeDLUT_t(Action<ThreeDLUT_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreeDLUT_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "PipeId", "Enable", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return PipeId;
                case 2:
                    return Enable;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreeDLUT_t> m_target;
        #endregion
    }
    public sealed class AuxlessAlpm_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint CalculatedDesiredVTotal { get { return (uint)GetInt32At(4); } }
        public uint DesiredRr { get { return (uint)GetInt32At(8); } }
        public uint FirstSdpPosition { get { return (uint)GetInt32At(12); } }
        public uint WakeTimeInLines { get { return (uint)GetInt32At(16); } }
        public uint MinSleepTimeInLines { get { return (uint)GetInt32At(20); } }
        public uint CurrentVblankSize { get { return (uint)GetInt32At(24); } }
        public bool LobfPanelReplayEnabledStatus { get { return GetInt32At(28) != 0; } }
        public DISPLAY_PWRCON_FEATURE Feature { get { return (DISPLAY_PWRCON_FEATURE)GetInt32At(32); } }

        #region Private
        internal AuxlessAlpm_t(Action<AuxlessAlpm_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AuxlessAlpm_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CalculatedDesiredVTotal", CalculatedDesiredVTotal);
             XmlAttrib(sb, "DesiredRr", DesiredRr);
             XmlAttrib(sb, "FirstSdpPosition", FirstSdpPosition);
             XmlAttrib(sb, "WakeTimeInLines", WakeTimeInLines);
             XmlAttrib(sb, "MinSleepTimeInLines", MinSleepTimeInLines);
             XmlAttrib(sb, "CurrentVblankSize", CurrentVblankSize);
             XmlAttrib(sb, "LobfPanelReplayEnabledStatus", LobfPanelReplayEnabledStatus);
             XmlAttrib(sb, "Feature", Feature);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "CalculatedDesiredVTotal", "DesiredRr", "FirstSdpPosition", "WakeTimeInLines", "MinSleepTimeInLines", "CurrentVblankSize", "LobfPanelReplayEnabledStatus", "Feature"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return CalculatedDesiredVTotal;
                case 2:
                    return DesiredRr;
                case 3:
                    return FirstSdpPosition;
                case 4:
                    return WakeTimeInLines;
                case 5:
                    return MinSleepTimeInLines;
                case 6:
                    return CurrentVblankSize;
                case 7:
                    return LobfPanelReplayEnabledStatus;
                case 8:
                    return Feature;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AuxlessAlpm_t> m_target;
        #endregion
    }
    public sealed class OsSourceMode_t : TraceEvent
    {
        public uint TargetID { get { return (uint)GetInt32At(0); } }
        public uint ModeId { get { return (uint)GetInt32At(4); } }
        public uint ScreenX { get { return (uint)GetInt32At(8); } }
        public uint ScreenY { get { return (uint)GetInt32At(12); } }
        public uint Stride { get { return (uint)GetInt32At(16); } }
        public D3DDDIFORMAT PixelFormat { get { return (D3DDDIFORMAT)GetInt32At(20); } }

        #region Private
        internal OsSourceMode_t(Action<OsSourceMode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OsSourceMode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "ModeId", ModeId);
             XmlAttrib(sb, "ScreenX", ScreenX);
             XmlAttrib(sb, "ScreenY", ScreenY);
             XmlAttrib(sb, "Stride", Stride);
             XmlAttrib(sb, "PixelFormat", PixelFormat);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetID", "ModeId", "ScreenX", "ScreenY", "Stride", "PixelFormat"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetID;
                case 1:
                    return ModeId;
                case 2:
                    return ScreenX;
                case 3:
                    return ScreenY;
                case 4:
                    return Stride;
                case 5:
                    return PixelFormat;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OsSourceMode_t> m_target;
        #endregion
    }
    public sealed class OsTargetMode_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint ModeId { get { return (uint)GetInt32At(4); } }
        public uint HActive { get { return (uint)GetInt32At(8); } }
        public uint VActive { get { return (uint)GetInt32At(12); } }
        public uint HTotal { get { return (uint)GetInt32At(16); } }
        public uint VTotal { get { return (uint)GetInt32At(20); } }
        public long DotClock { get { return GetInt64At(24); } }
        public bool IsInterlaced { get { return GetInt32At(32) != 0; } }
        public bool IsPreferred { get { return GetInt32At(36) != 0; } }
        public uint WireFormatPref { get { return (uint)GetInt32At(40); } }
        public bool IsVirtualRRSupported { get { return GetInt32At(44) != 0; } }
        public uint VSyncMinRR { get { return (uint)GetInt32At(48); } }

        #region Private
        internal OsTargetMode_t(Action<OsTargetMode_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 52));
            Debug.Assert(!(Version > 1 && EventDataLength < 52));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OsTargetMode_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "ModeId", ModeId);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "IsPreferred", IsPreferred);
             XmlAttrib(sb, "WireFormatPref", WireFormatPref);
             XmlAttrib(sb, "IsVirtualRRSupported", IsVirtualRRSupported);
             XmlAttrib(sb, "VSyncMinRR", VSyncMinRR);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "ModeId", "HActive", "VActive", "HTotal", "VTotal", "DotClock", "IsInterlaced", "IsPreferred", "WireFormatPref", "IsVirtualRRSupported", "VSyncMinRR"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return ModeId;
                case 2:
                    return HActive;
                case 3:
                    return VActive;
                case 4:
                    return HTotal;
                case 5:
                    return VTotal;
                case 6:
                    return DotClock;
                case 7:
                    return IsInterlaced;
                case 8:
                    return IsPreferred;
                case 9:
                    return WireFormatPref;
                case 10:
                    return IsVirtualRRSupported;
                case 11:
                    return VSyncMinRR;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OsTargetMode_t> m_target;
        #endregion
    }
    public sealed class TranslatedOsPath_t : TraceEvent
    {
        public Address AdapterCtxt { get { return GetAddressAt(0); } }
        public uint PathIndex { get { return (uint)GetInt32At(HostOffset(4, 1)); } }
        public uint SourceID { get { return (uint)GetInt32At(HostOffset(8, 1)); } }
        public uint TargetID { get { return (uint)GetInt32At(HostOffset(12, 1)); } }
        public uint ImportanceOrdinal { get { return (uint)GetInt32At(HostOffset(16, 1)); } }
        public DD_OS_FLAGS OsFlags { get { return (DD_OS_FLAGS)GetInt32At(HostOffset(20, 1)); } }
        public uint SrcModeId { get { return (uint)GetInt32At(HostOffset(24, 1)); } }
        public uint ScreenX { get { return (uint)GetInt32At(HostOffset(28, 1)); } }
        public uint ScreenY { get { return (uint)GetInt32At(HostOffset(32, 1)); } }
        public uint PixelFormatMask { get { return (uint)GetInt32At(HostOffset(36, 1)); } }
        public uint TgtModeId { get { return (uint)GetInt32At(HostOffset(40, 1)); } }
        public uint HActive { get { return (uint)GetInt32At(HostOffset(44, 1)); } }
        public uint VActive { get { return (uint)GetInt32At(HostOffset(48, 1)); } }
        public uint HTotal { get { return (uint)GetInt32At(HostOffset(52, 1)); } }
        public uint VTotal { get { return (uint)GetInt32At(HostOffset(56, 1)); } }
        public long DotClock { get { return GetInt64At(HostOffset(60, 1)); } }
        public bool IsInterlaced { get { return GetInt32At(HostOffset(68, 1)) != 0; } }
        public bool PreferredMode { get { return GetInt32At(HostOffset(72, 1)) != 0; } }
        public DD_SCALING Scaling { get { return (DD_SCALING)GetInt32At(HostOffset(76, 1)); } }
        public uint Rotation { get { return (uint)GetInt32At(HostOffset(80, 1)); } }

        #region Private
        internal TranslatedOsPath_t(Action<TranslatedOsPath_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(84, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(84, 1)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TranslatedOsPath_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "AdapterCtxt", AdapterCtxt);
             XmlAttrib(sb, "PathIndex", PathIndex);
             XmlAttrib(sb, "SourceID", SourceID);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "ImportanceOrdinal", ImportanceOrdinal);
             XmlAttrib(sb, "OsFlags", OsFlags);
             XmlAttrib(sb, "SrcModeId", SrcModeId);
             XmlAttrib(sb, "ScreenX", ScreenX);
             XmlAttrib(sb, "ScreenY", ScreenY);
             XmlAttrib(sb, "PixelFormatMask", PixelFormatMask);
             XmlAttrib(sb, "TgtModeId", TgtModeId);
             XmlAttrib(sb, "HActive", HActive);
             XmlAttrib(sb, "VActive", VActive);
             XmlAttrib(sb, "HTotal", HTotal);
             XmlAttrib(sb, "VTotal", VTotal);
             XmlAttrib(sb, "DotClock", DotClock);
             XmlAttrib(sb, "IsInterlaced", IsInterlaced);
             XmlAttrib(sb, "PreferredMode", PreferredMode);
             XmlAttrib(sb, "Scaling", Scaling);
             XmlAttrib(sb, "Rotation", Rotation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AdapterCtxt", "PathIndex", "SourceID", "TargetID", "ImportanceOrdinal", "OsFlags", "SrcModeId", "ScreenX", "ScreenY", "PixelFormatMask", "TgtModeId", "HActive", "VActive", "HTotal", "VTotal", "DotClock", "IsInterlaced", "PreferredMode", "Scaling", "Rotation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AdapterCtxt;
                case 1:
                    return PathIndex;
                case 2:
                    return SourceID;
                case 3:
                    return TargetID;
                case 4:
                    return ImportanceOrdinal;
                case 5:
                    return OsFlags;
                case 6:
                    return SrcModeId;
                case 7:
                    return ScreenX;
                case 8:
                    return ScreenY;
                case 9:
                    return PixelFormatMask;
                case 10:
                    return TgtModeId;
                case 11:
                    return HActive;
                case 12:
                    return VActive;
                case 13:
                    return HTotal;
                case 14:
                    return VTotal;
                case 15:
                    return DotClock;
                case 16:
                    return IsInterlaced;
                case 17:
                    return PreferredMode;
                case 18:
                    return Scaling;
                case 19:
                    return Rotation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TranslatedOsPath_t> m_target;
        #endregion
    }
    public sealed class UncoreInitStart_t : TraceEvent
    {
        public UNCORE_INIT_EVENT_TYPE EventType { get { return (UNCORE_INIT_EVENT_TYPE)GetInt32At(0); } }
        public int MaxTimeoutinmillisec { get { return GetInt32At(4); } }

        #region Private
        internal UncoreInitStart_t(Action<UncoreInitStart_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UncoreInitStart_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "MaxTimeoutinmillisec", MaxTimeoutinmillisec);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "MaxTimeoutinmillisec"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return MaxTimeoutinmillisec;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UncoreInitStart_t> m_target;
        #endregion
    }
    public sealed class UncoreInitStop_t : TraceEvent
    {
        public UNCORE_INIT_EVENT_TYPE EventType { get { return (UNCORE_INIT_EVENT_TYPE)GetInt32At(0); } }
        public uint GscData { get { return (uint)GetInt32At(4); } }
        public bool IsSuccess { get { return GetInt32At(8) != 0; } }

        #region Private
        internal UncoreInitStop_t(Action<UncoreInitStop_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<UncoreInitStop_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EventType", EventType);
             XmlAttrib(sb, "GscData", GscData);
             XmlAttrib(sb, "IsSuccess", IsSuccess);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EventType", "GscData", "IsSuccess"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EventType;
                case 1:
                    return GscData;
                case 2:
                    return IsSuccess;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UncoreInitStop_t> m_target;
        #endregion
    }
    public sealed class Usb4DynamicBWMgmtDetectionCaps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public bool DynamicBWMgmtMode { get { return GetInt32At(8) != 0; } }
        public long EstimatedAvailableBW { get { return GetInt64At(12); } }
        public int CMID { get { return GetByteAt(20); } }
        public int GroupID { get { return GetByteAt(21); } }
        public long TotalTunnelBW { get { return GetInt64At(22); } }

        #region Private
        internal Usb4DynamicBWMgmtDetectionCaps_t(Action<Usb4DynamicBWMgmtDetectionCaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 30));
            Debug.Assert(!(Version > 0 && EventDataLength < 30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Usb4DynamicBWMgmtDetectionCaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "DynamicBWMgmtMode", DynamicBWMgmtMode);
             XmlAttrib(sb, "EstimatedAvailableBW", EstimatedAvailableBW);
             XmlAttrib(sb, "CMID", CMID);
             XmlAttrib(sb, "GroupID", GroupID);
             XmlAttrib(sb, "TotalTunnelBW", TotalTunnelBW);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "DynamicBWMgmtMode", "EstimatedAvailableBW", "CMID", "GroupID", "TotalTunnelBW"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return DynamicBWMgmtMode;
                case 3:
                    return EstimatedAvailableBW;
                case 4:
                    return CMID;
                case 5:
                    return GroupID;
                case 6:
                    return TotalTunnelBW;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Usb4DynamicBWMgmtDetectionCaps_t> m_target;
        #endregion
    }
    public sealed class Usb4DynamicBWMgmtSPICaps_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_PORT_TYPES Port { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public bool DynamicBWMgmtMode { get { return GetInt32At(8) != 0; } }
        public long EstimatedAvailableBW { get { return GetInt64At(12); } }
        public int CMID { get { return GetByteAt(20); } }
        public int GroupID { get { return GetByteAt(21); } }
        public long TotalTunnelBW { get { return GetInt64At(22); } }
        public long PeakModePixeloBWWoTunnelingRestriction { get { return GetInt64At(30); } }

        #region Private
        internal Usb4DynamicBWMgmtSPICaps_t(Action<Usb4DynamicBWMgmtSPICaps_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 38));
            Debug.Assert(!(Version > 0 && EventDataLength < 38));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Usb4DynamicBWMgmtSPICaps_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Port", Port);
             XmlAttrib(sb, "DynamicBWMgmtMode", DynamicBWMgmtMode);
             XmlAttrib(sb, "EstimatedAvailableBW", EstimatedAvailableBW);
             XmlAttrib(sb, "CMID", CMID);
             XmlAttrib(sb, "GroupID", GroupID);
             XmlAttrib(sb, "TotalTunnelBW", TotalTunnelBW);
             XmlAttrib(sb, "PeakModePixeloBWWoTunnelingRestriction", PeakModePixeloBWWoTunnelingRestriction);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Port", "DynamicBWMgmtMode", "EstimatedAvailableBW", "CMID", "GroupID", "TotalTunnelBW", "PeakModePixeloBWWoTunnelingRestriction"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Port;
                case 2:
                    return DynamicBWMgmtMode;
                case 3:
                    return EstimatedAvailableBW;
                case 4:
                    return CMID;
                case 5:
                    return GroupID;
                case 6:
                    return TotalTunnelBW;
                case 7:
                    return PeakModePixeloBWWoTunnelingRestriction;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Usb4DynamicBWMgmtSPICaps_t> m_target;
        #endregion
    }
    public sealed class VbiOptimizationState_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetId { get { return (uint)GetInt32At(4); } }
        public uint SourceId { get { return (uint)GetInt32At(8); } }
        public bool IsVbiOptimized { get { return GetInt32At(12) != 0; } }

        #region Private
        internal VbiOptimizationState_t(Action<VbiOptimizationState_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VbiOptimizationState_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "IsVbiOptimized", IsVbiOptimized);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetId", "SourceId", "IsVbiOptimized"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetId;
                case 2:
                    return SourceId;
                case 3:
                    return IsVbiOptimized;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VbiOptimizationState_t> m_target;
        #endregion
    }
    public sealed class PipeVBI_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public uint CRC_CTL { get { return (uint)GetInt32At(4); } }
        public uint CRC_Result { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal PipeVBI_t(Action<PipeVBI_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PipeVBI_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "CRC_CTL", CRC_CTL);
             XmlAttrib(sb, "CRC_Result", CRC_Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "CRC_CTL", "CRC_Result", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return CRC_CTL;
                case 2:
                    return CRC_Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PipeVBI_t> m_target;
        #endregion
    }
    public sealed class VbtBlkParse_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public int BlockId { get { return GetByteAt(4); } }

        #region Private
        internal VbtBlkParse_t(Action<VbtBlkParse_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 5));
            Debug.Assert(!(Version > 0 && EventDataLength < 5));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VbtBlkParse_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BlockId", BlockId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "BlockId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return BlockId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VbtBlkParse_t> m_target;
        #endregion
    }
    public sealed class VdscPPSParams_t : TraceEvent
    {
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(0); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(4); } }
        public int Size { get { return GetInt16At(8); } }
        public byte[] RawData { get { return GetByteArrayAt(10, (int)Size); } }

        #region Private
        internal VdscPPSParams_t(Action<VdscPPSParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != ((int)Size*1)+10));
            Debug.Assert(!(Version > 0 && EventDataLength < ((int)Size*1)+10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VdscPPSParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PortId", PortId);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "Size", Size);
             XmlAttrib(sb, "RawData", RawData);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PortId", "PipeId", "Size", "RawData"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PortId;
                case 1:
                    return PipeId;
                case 2:
                    return Size;
                case 3:
                    return RawData;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VdscPPSParams_t> m_target;
        #endregion
    }
    public sealed class VdscSinkEnable_t : TraceEvent
    {
        public bool Enable { get { return GetInt32At(0) != 0; } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VdscSinkEnable_t(Action<VdscSinkEnable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VdscSinkEnable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "PortId", PortId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Enable", "PortId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Enable;
                case 1:
                    return PortId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VdscSinkEnable_t> m_target;
        #endregion
    }
    public sealed class VdscSourceEnable_t : TraceEvent
    {
        public bool Enable { get { return GetInt32At(0) != 0; } }
        public DD_PORT_TYPES PortId { get { return (DD_PORT_TYPES)GetInt32At(4); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VdscSourceEnable_t(Action<VdscSourceEnable_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VdscSourceEnable_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "PortId", PortId);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Enable", "PortId", "PipeId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Enable;
                case 1:
                    return PortId;
                case 2:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VdscSourceEnable_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceBalance_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint PreviousVtotal { get { return (uint)GetInt32At(4); } }
        public int Direction { get { return GetInt32At(8); } }
        public int Balance { get { return GetInt32At(12); } }
        public int BDF(int arrayIndex) { return GetByteAt(16 + (arrayIndex * HostOffset(1, 0))); }
        public uint EvenFrameCount { get { return (uint)GetInt32At(20); } }
        public uint OddFrameCount { get { return (uint)GetInt32At(24); } }
        public uint EvenLineCount { get { return (uint)GetInt32At(28); } }
        public uint OddLineCount { get { return (uint)GetInt32At(32); } }

        #region Private
        internal VrrAdaptiveBalanceBalance_t(Action<VrrAdaptiveBalanceBalance_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 36));
            Debug.Assert(!(Version > 2 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceBalance_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "PreviousVtotal", PreviousVtotal);
             XmlAttrib(sb, "Direction", Direction);
             XmlAttrib(sb, "Balance", Balance);
             XmlAttrib(sb, "EvenFrameCount", EvenFrameCount);
             XmlAttrib(sb, "OddFrameCount", OddFrameCount);
             XmlAttrib(sb, "EvenLineCount", EvenLineCount);
             XmlAttrib(sb, "OddLineCount", OddLineCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "PreviousVtotal", "Direction", "Balance", "BDF", "EvenFrameCount", "OddFrameCount", "EvenLineCount", "OddLineCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return PreviousVtotal;
                case 2:
                    return Direction;
                case 3:
                    return Balance;
                case 5:
                    return EvenFrameCount;
                case 6:
                    return OddFrameCount;
                case 7:
                    return EvenLineCount;
                case 8:
                    return OddLineCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceBalance_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceApply_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint NumFrames { get { return (uint)GetInt32At(4); } }
        public uint CurrentFrameCount { get { return (uint)GetInt32At(8); } }
        public uint FlipLineValue { get { return (uint)GetInt32At(12); } }
        public uint Vmax { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrAdaptiveBalanceApply_t(Action<VrrAdaptiveBalanceApply_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceApply_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "NumFrames", NumFrames);
             XmlAttrib(sb, "CurrentFrameCount", CurrentFrameCount);
             XmlAttrib(sb, "FlipLineValue", FlipLineValue);
             XmlAttrib(sb, "Vmax", Vmax);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "NumFrames", "CurrentFrameCount", "FlipLineValue", "Vmax", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return NumFrames;
                case 2:
                    return CurrentFrameCount;
                case 3:
                    return FlipLineValue;
                case 4:
                    return Vmax;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceApply_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceCalculate_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public int Balance { get { return GetInt32At(4); } }
        public int NextDirection { get { return GetInt32At(8); } }
        public int Prediction { get { return GetInt32At(12); } }
        public int BlankPercent { get { return GetInt32At(16); } }
        public int GBPercent { get { return GetInt32At(20); } }
        public int GBSlopeFactor { get { return GetInt32At(24); } }
        public int VMaxAdjust { get { return GetInt32At(28); } }
        public int NumFrames { get { return GetInt32At(32); } }
        public int FirstVmin { get { return GetInt32At(36); } }
        public int Nminus1Vmax { get { return GetInt32At(40); } }
        public int FinalVmax { get { return GetInt32At(44); } }
        public long AveragePredictionErrorInUs { get { return GetInt64At(48); } }
        public int BDF(int arrayIndex) { return GetByteAt(56 + (arrayIndex * HostOffset(1, 0))); }
        public uint Nminus1Vmin { get { return (uint)GetInt32At(60); } }

        #region Private
        internal VrrAdaptiveBalanceCalculate_t(Action<VrrAdaptiveBalanceCalculate_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 64));
            Debug.Assert(!(Version > 2 && EventDataLength < 64));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceCalculate_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Balance", Balance);
             XmlAttrib(sb, "NextDirection", NextDirection);
             XmlAttrib(sb, "Prediction", Prediction);
             XmlAttrib(sb, "BlankPercent", BlankPercent);
             XmlAttrib(sb, "GBPercent", GBPercent);
             XmlAttrib(sb, "GBSlopeFactor", GBSlopeFactor);
             XmlAttrib(sb, "VMaxAdjust", VMaxAdjust);
             XmlAttrib(sb, "NumFrames", NumFrames);
             XmlAttrib(sb, "FirstVmin", FirstVmin);
             XmlAttrib(sb, "Nminus1Vmax", Nminus1Vmax);
             XmlAttrib(sb, "FinalVmax", FinalVmax);
             XmlAttrib(sb, "AveragePredictionErrorInUs", AveragePredictionErrorInUs);
             XmlAttrib(sb, "Nminus1Vmin", Nminus1Vmin);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Balance", "NextDirection", "Prediction", "BlankPercent", "GBPercent", "GBSlopeFactor", "VMaxAdjust", "NumFrames", "FirstVmin", "Nminus1Vmax", "FinalVmax", "AveragePredictionErrorInUs", "BDF", "Nminus1Vmin"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Balance;
                case 2:
                    return NextDirection;
                case 3:
                    return Prediction;
                case 4:
                    return BlankPercent;
                case 5:
                    return GBPercent;
                case 6:
                    return GBSlopeFactor;
                case 7:
                    return VMaxAdjust;
                case 8:
                    return NumFrames;
                case 9:
                    return FirstVmin;
                case 10:
                    return Nminus1Vmax;
                case 11:
                    return FinalVmax;
                case 12:
                    return AveragePredictionErrorInUs;
                case 14:
                    return Nminus1Vmin;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceCalculate_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceHwCounterMismatch_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public DDSTATUS Status { get { return (DDSTATUS)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrAdaptiveBalanceHwCounterMismatch_t(Action<VrrAdaptiveBalanceHwCounterMismatch_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 12));
            Debug.Assert(!(Version > 1 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceHwCounterMismatch_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Status", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceHwCounterMismatch_t> m_target;
        #endregion
    }
    public sealed class VrrCertificationParams_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public uint Duration { get { return (uint)GetInt32At(4); } }
        public int BDF(int arrayIndex) { return GetByteAt(8 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrCertificationParams_t(Action<VrrCertificationParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrCertificationParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Duration", Duration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Duration", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Duration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrCertificationParams_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceConfig_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint VMin { get { return (uint)GetInt32At(8); } }
        public uint VMax { get { return (uint)GetInt32At(12); } }
        public uint Sfdit { get { return (uint)GetInt32At(16); } }
        public uint Sfddt { get { return (uint)GetInt32At(20); } }
        public uint Blank { get { return (uint)GetInt32At(24); } }
        public uint Sensitivity { get { return (uint)GetInt32At(28); } }
        public uint Aggressiveness { get { return (uint)GetInt32At(32); } }

        #region Private
        internal VrrAdaptiveBalanceConfig_t(Action<VrrAdaptiveBalanceConfig_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceConfig_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "VMin", VMin);
             XmlAttrib(sb, "VMax", VMax);
             XmlAttrib(sb, "Sfdit", Sfdit);
             XmlAttrib(sb, "Sfddt", Sfddt);
             XmlAttrib(sb, "Blank", Blank);
             XmlAttrib(sb, "Sensitivity", Sensitivity);
             XmlAttrib(sb, "Aggressiveness", Aggressiveness);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "VMin", "VMax", "Sfdit", "Sfddt", "Blank", "Sensitivity", "Aggressiveness"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return VMin;
                case 3:
                    return VMax;
                case 4:
                    return Sfdit;
                case 5:
                    return Sfddt;
                case 6:
                    return Blank;
                case 7:
                    return Sensitivity;
                case 8:
                    return Aggressiveness;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceConfig_t> m_target;
        #endregion
    }
    public sealed class VrrAdaptiveBalanceCalculateV2_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public uint TargetID { get { return (uint)GetInt32At(4); } }
        public uint PredictedFrameInterval { get { return (uint)GetInt32At(8); } }
        public uint NumFrames { get { return (uint)GetInt32At(12); } }
        public uint EarlierFlipLine { get { return (uint)GetInt32At(16); } }
        public uint EarlierVTotal { get { return (uint)GetInt32At(20); } }
        public uint FinalFlipLine { get { return (uint)GetInt32At(24); } }
        public uint FinalVTotal { get { return (uint)GetInt32At(28); } }
        public long AveragePredictionErrorInUs { get { return GetInt64At(32); } }

        #region Private
        internal VrrAdaptiveBalanceCalculateV2_t(Action<VrrAdaptiveBalanceCalculateV2_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrAdaptiveBalanceCalculateV2_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetID", TargetID);
             XmlAttrib(sb, "PredictedFrameInterval", PredictedFrameInterval);
             XmlAttrib(sb, "NumFrames", NumFrames);
             XmlAttrib(sb, "EarlierFlipLine", EarlierFlipLine);
             XmlAttrib(sb, "EarlierVTotal", EarlierVTotal);
             XmlAttrib(sb, "FinalFlipLine", FinalFlipLine);
             XmlAttrib(sb, "FinalVTotal", FinalVTotal);
             XmlAttrib(sb, "AveragePredictionErrorInUs", AveragePredictionErrorInUs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "TargetID", "PredictedFrameInterval", "NumFrames", "EarlierFlipLine", "EarlierVTotal", "FinalFlipLine", "FinalVTotal", "AveragePredictionErrorInUs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return TargetID;
                case 2:
                    return PredictedFrameInterval;
                case 3:
                    return NumFrames;
                case 4:
                    return EarlierFlipLine;
                case 5:
                    return EarlierVTotal;
                case 6:
                    return FinalFlipLine;
                case 7:
                    return FinalVTotal;
                case 8:
                    return AveragePredictionErrorInUs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrAdaptiveBalanceCalculateV2_t> m_target;
        #endregion
    }
    public sealed class VrrDisableParams_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public int BDF(int arrayIndex) { return GetByteAt(4 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrDisableParams_t(Action<VrrDisableParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 8));
            Debug.Assert(!(Version > 1 && EventDataLength < 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrDisableParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrDisableParams_t> m_target;
        #endregion
    }
    public sealed class VrrEnableParams_t : TraceEvent
    {
        public uint VrrMax { get { return (uint)GetInt32At(0); } }
        public uint VrrMin { get { return (uint)GetInt32At(4); } }
        public uint FramestartToPipelineFullLinecount { get { return (uint)GetInt32At(8); } }
        public int VrrMaxShiftIncrement { get { return GetInt16At(12); } }
        public int VrrMaxShiftDecrement { get { return GetInt16At(14); } }
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(16); } }
        public uint VrrFlipLine { get { return (uint)GetInt32At(20); } }
        public int BDF(int arrayIndex) { return GetByteAt(24 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrEnableParams_t(Action<VrrEnableParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrEnableParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VrrMax", VrrMax);
             XmlAttrib(sb, "VrrMin", VrrMin);
             XmlAttrib(sb, "FramestartToPipelineFullLinecount", FramestartToPipelineFullLinecount);
             XmlAttrib(sb, "VrrMaxShiftIncrement", VrrMaxShiftIncrement);
             XmlAttrib(sb, "VrrMaxShiftDecrement", VrrMaxShiftDecrement);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "VrrFlipLine", VrrFlipLine);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VrrMax", "VrrMin", "FramestartToPipelineFullLinecount", "VrrMaxShiftIncrement", "VrrMaxShiftDecrement", "PipeId", "VrrFlipLine", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VrrMax;
                case 1:
                    return VrrMin;
                case 2:
                    return FramestartToPipelineFullLinecount;
                case 3:
                    return VrrMaxShiftIncrement;
                case 4:
                    return VrrMaxShiftDecrement;
                case 5:
                    return PipeId;
                case 6:
                    return VrrFlipLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrEnableParams_t> m_target;
        #endregion
    }
    public sealed class VrrStatusParams_t : TraceEvent
    {
        public uint TargetId { get { return (uint)GetInt32At(0); } }
        public bool Active { get { return GetInt32At(4) != 0; } }
        public uint VrrMax { get { return (uint)GetInt32At(8); } }
        public uint VrrMin { get { return (uint)GetInt32At(12); } }
        public uint VrrFlipLine { get { return (uint)GetInt32At(16); } }
        public int BDF(int arrayIndex) { return GetByteAt(20 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrStatusParams_t(Action<VrrStatusParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrStatusParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "Active", Active);
             XmlAttrib(sb, "VrrMax", VrrMax);
             XmlAttrib(sb, "VrrMin", VrrMin);
             XmlAttrib(sb, "VrrFlipLine", VrrFlipLine);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetId", "Active", "VrrMax", "VrrMin", "VrrFlipLine", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetId;
                case 1:
                    return Active;
                case 2:
                    return VrrMax;
                case 3:
                    return VrrMin;
                case 4:
                    return VrrFlipLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrStatusParams_t> m_target;
        #endregion
    }
    public sealed class VrrUpdateParams_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public uint VrrMax { get { return (uint)GetInt32At(4); } }
        public uint VrrFlipLine { get { return (uint)GetInt32At(8); } }
        public int BDF(int arrayIndex) { return GetByteAt(12 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrUpdateParams_t(Action<VrrUpdateParams_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrUpdateParams_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "VrrMax", VrrMax);
             XmlAttrib(sb, "VrrFlipLine", VrrFlipLine);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "VrrMax", "VrrFlipLine", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return VrrMax;
                case 2:
                    return VrrFlipLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrUpdateParams_t> m_target;
        #endregion
    }
    public sealed class VrrWorking_t : TraceEvent
    {
        public PIPE_ID PipeId { get { return (PIPE_ID)GetInt32At(0); } }
        public long PresentId { get { return GetInt64At(4); } }
        public long DeltaFlipRequestTime { get { return GetInt64At(12); } }
        public long DeltaFlipDoneTime { get { return GetInt64At(20); } }
        public int BDF(int arrayIndex) { return GetByteAt(28 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal VrrWorking_t(Action<VrrWorking_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VrrWorking_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PipeId", PipeId);
             XmlAttrib(sb, "PresentId", PresentId);
             XmlAttrib(sb, "DeltaFlipRequestTime", DeltaFlipRequestTime);
             XmlAttrib(sb, "DeltaFlipDoneTime", DeltaFlipDoneTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PipeId", "PresentId", "DeltaFlipRequestTime", "DeltaFlipDoneTime", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PipeId;
                case 1:
                    return PresentId;
                case 2:
                    return DeltaFlipRequestTime;
                case 3:
                    return DeltaFlipDoneTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VrrWorking_t> m_target;
        #endregion
    }
    public sealed class VsyncTimeoutInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public bool Valid { get { return GetInt32At(4) != 0; } }
        public int SourceId { get { return GetByteAt(8); } }
        public uint TargetId { get { return (uint)GetInt32At(9); } }
        public int LayerIndex { get { return GetByteAt(13); } }
        public long PresentID { get { return GetInt64At(14); } }
        public DD_VSYNC_PROGRAMMING_ERRORS ProgrammingSubCode { get { return (DD_VSYNC_PROGRAMMING_ERRORS)GetInt16At(22); } }
        public DD_VSYNC_REPORTING_ERRORS ReportingSubCode { get { return (DD_VSYNC_REPORTING_ERRORS)GetInt16At(24); } }

        #region Private
        internal VsyncTimeoutInfo_t(Action<VsyncTimeoutInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 26));
            Debug.Assert(!(Version > 0 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<VsyncTimeoutInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Valid", Valid);
             XmlAttrib(sb, "SourceId", SourceId);
             XmlAttrib(sb, "TargetId", TargetId);
             XmlAttrib(sb, "LayerIndex", LayerIndex);
             XmlAttrib(sb, "PresentID", PresentID);
             XmlAttrib(sb, "ProgrammingSubCode", ProgrammingSubCode);
             XmlAttrib(sb, "ReportingSubCode", ReportingSubCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "Valid", "SourceId", "TargetId", "LayerIndex", "PresentID", "ProgrammingSubCode", "ReportingSubCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return Valid;
                case 2:
                    return SourceId;
                case 3:
                    return TargetId;
                case 4:
                    return LayerIndex;
                case 5:
                    return PresentID;
                case 6:
                    return ProgrammingSubCode;
                case 7:
                    return ReportingSubCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VsyncTimeoutInfo_t> m_target;
        #endregion
    }
    public sealed class WakelockInfo_t : TraceEvent
    {
        public int BDF(int arrayIndex) { return GetByteAt(0 + (arrayIndex * HostOffset(1, 0))); }
        public DD_WAKELOCK_REQUEST WakelockReq { get { return (DD_WAKELOCK_REQUEST)GetInt32At(4); } }
        public DD_WAKELOCK_THREAD WakelockThread { get { return (DD_WAKELOCK_THREAD)GetInt32At(8); } }

        #region Private
        internal WakelockInfo_t(Action<WakelockInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WakelockInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "WakelockReq", WakelockReq);
             XmlAttrib(sb, "WakelockThread", WakelockThread);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BDF", "WakelockReq", "WakelockThread"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 1:
                    return WakelockReq;
                case 2:
                    return WakelockThread;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WakelockInfo_t> m_target;
        #endregion
    }
    public sealed class WaterMarkData_t : TraceEvent
    {
        public int Level { get { return GetByteAt(0); } }
        public int Enable { get { return GetByteAt(1); } }
        public int IgnoreLines { get { return GetByteAt(2); } }
        public int Lines { get { return GetInt16At(3); } }
        public int Blocks { get { return GetInt16At(5); } }
        public int BDF(int arrayIndex) { return GetByteAt(7 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal WaterMarkData_t(Action<WaterMarkData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 11));
            Debug.Assert(!(Version > 1 && EventDataLength < 11));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WaterMarkData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Level", Level);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "IgnoreLines", IgnoreLines);
             XmlAttrib(sb, "Lines", Lines);
             XmlAttrib(sb, "Blocks", Blocks);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Level", "Enable", "IgnoreLines", "Lines", "Blocks", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Level;
                case 1:
                    return Enable;
                case 2:
                    return IgnoreLines;
                case 3:
                    return Lines;
                case 4:
                    return Blocks;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WaterMarkData_t> m_target;
        #endregion
    }
    public sealed class WaterMarkInfo_t : TraceEvent
    {
        public PIPE_ID Pipe { get { return (PIPE_ID)GetInt32At(0); } }
        public int PlaneID { get { return GetByteAt(4); } }
        public int EnabledWms { get { return GetByteAt(5); } }
        public int BDF(int arrayIndex) { return GetByteAt(6 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal WaterMarkInfo_t(Action<WaterMarkInfo_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WaterMarkInfo_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Pipe", Pipe);
             XmlAttrib(sb, "PlaneID", PlaneID);
             XmlAttrib(sb, "EnabledWms", EnabledWms);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pipe", "PlaneID", "EnabledWms", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pipe;
                case 1:
                    return PlaneID;
                case 2:
                    return EnabledWms;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WaterMarkInfo_t> m_target;
        #endregion
    }
    public sealed class TransWaterMarkData_t : TraceEvent
    {
        public int PlaneType { get { return GetByteAt(0); } }
        public int Enable { get { return GetByteAt(1); } }
        public int IgnoreLines { get { return GetByteAt(2); } }
        public int Lines { get { return GetInt16At(3); } }
        public int Blocks { get { return GetInt16At(5); } }
        public int BDF(int arrayIndex) { return GetByteAt(7 + (arrayIndex * HostOffset(1, 0))); }

        #region Private
        internal TransWaterMarkData_t(Action<TransWaterMarkData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 11));
            Debug.Assert(!(Version > 1 && EventDataLength < 11));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<TransWaterMarkData_t>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PlaneType", PlaneType);
             XmlAttrib(sb, "Enable", Enable);
             XmlAttrib(sb, "IgnoreLines", IgnoreLines);
             XmlAttrib(sb, "Lines", Lines);
             XmlAttrib(sb, "Blocks", Blocks);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PlaneType", "Enable", "IgnoreLines", "Lines", "Blocks", "BDF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PlaneType;
                case 1:
                    return Enable;
                case 2:
                    return IgnoreLines;
                case 3:
                    return Lines;
                case 4:
                    return Blocks;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TransWaterMarkData_t> m_target;
        #endregion
    }
    public enum BUILD_TYPE
    {
        Release = 0x1,
        ReleaseInternal = 0x2,
        Debug = 0x3,
    }
    public enum CDCLK_CHANGE_TYPE
    {
        DD_CDCLK_CHANGE_NOT_NEEDED = 0x0,
        DD_CDCLK_FULL_CHANGE = 0x1,
        DD_CDLCLK_SEAMLESS_CHANGE = 0x2,
        DD_CDLCLK_2X_DIVIDER_CHANGE = 0x3,
        Default = 0x7fffffff,
    }
    public enum CON_STATE
    {
        UNKNOWN = 0x0,
        PLUG = 0x1,
        UNPLUG = 0x2,
        REPLUG = 0x3,
    }
    public enum D3DDDI_GAMMA_TYPE
    {
        UNINITIALISED = 0x0,
        DEFAULT = 0x1,
        RGB_256x3x16 = 0x2,
        DXGI_1 = 0x3,
        MATRIX_3x4 = 0x4,
        MATRIX_V2 = 0x5,
    }
    [Flags]
    public enum D3DDDI_WIREFORMAT_MASK
    {
        PREFERENCE_UNINITIALIZED = 0x0,
        PREFFERED = 0x1,
        NOT_PREFFERED = 0x2,
        RGB_6BPC = 0x4,
        RGB_8BPC = 0x8,
        RGB_10BPC = 0x10,
        RGB_12BPC = 0x20,
        RGB_14BPC = 0x40,
        RGB_16BPC = 0x80,
        YUV444_6BPC = 0x100,
        YUV444_8BPC = 0x200,
        YUV444_10BPC = 0x400,
        YUV444_12BPC = 0x800,
        YUV444_14BPC = 0x1000,
        YUV444_16BPC = 0x2000,
        YUV422_6BPC = 0x4000,
        YUV422_8BPC = 0x8000,
        YUV422_10BPC = 0x10000,
        YUV422_12BPC = 0x20000,
        YUV422_14BPC = 0x40000,
        YUV422_16BPC = 0x80000,
        YUV420_6BPC = 0x100000,
        YUV420_8BPC = 0x200000,
        YUV420_10BPC = 0x400000,
        YUV420_12BPC = 0x800000,
        YUV420_14BPC = 0x1000000,
        YUV420_16BPC = 0x2000000,
    }
    public enum D3DDDIFORMAT
    {
        R8G8B8 = 0x14,
        A8R8G8B8 = 0x15,
        X8R8G8B8 = 0x16,
        R5G6B5 = 0x17,
        X1R5G5B5 = 0x18,
        A1R5G5B5 = 0x19,
        A4R4G4B4 = 0x1a,
        R3G3B2 = 0x1b,
        A8 = 0x1c,
        A8R3G3B2 = 0x1d,
        X4R4G4B4 = 0x1e,
        A2B10G10R10 = 0x1f,
        A8B8G8R8 = 0x20,
        X8B8G8R8 = 0x21,
        G16R16 = 0x22,
        A2R10G10B10 = 0x23,
        A16B16G16R16 = 0x24,
        R16F = 0x6f,
        G16R16F = 0x70,
        A16B16G16R16F = 0x71,
        A32B32G32R32F = 0x74,
        A2B10G10R10_XR_BIAS = 0x77,
    }
    public enum DD_ASSERT_TYPE
    {
        DD_EXPECT_EQ = 0x1,
        DD_EXPECT_NE = 0x2,
        DD_EXPECT_GT = 0x3,
        DD_EXPECT_GE = 0x4,
        DD_EXPECT_LT = 0x5,
        DD_EXPECT_LE = 0x6,
        DD_UNEXPECTED = 0x7,
        Default = 0x7fffffff,
    }
    public enum DD_BLC_OPERATION
    {
        DISP_PC_BLC_OPERATION_GET_BRIGHTNESS = 0x0,
        DISP_PC_BLC_OPERATION_SET_BRIGHTNESS = 0x1,
        DISP_PC_BLC_OPERATION_SET_AGGRESSIVE_LEVEL = 0x2,
        DISP_PC_BLC_OPERATION_SET_ALS_LUX = 0x3,
        DISP_PC_BLC_OPERATION_RESET_DPST_ADJUST_FACTOR = 0x4,
        DISP_PC_BLC_OPERATION_CHANGE_BRT_OPT_FTR_STATE = 0x5,
        DISP_PC_BLC_OPERATION_PROGRAM_HW_PHASE_IN_PARAMS = 0x6,
        DISP_PC_BLC_OPERATION_D0D3_STATE_CHANGE = 0x7,
        Default = 0x7fffffff,
    }
    public enum DD_BLC_WARNING_TYPE
    {
        BLC_BRIGHTNESS_OUT_OF_BOUND = 0x0,
        BLC_ADJUST_NOT_NEEDED = 0x1,
        Default = 0x7fffffff,
    }
    public enum DD_COLOR_ENCODING
    {
        DD_COLOR_ENCODING_UNKNOWN = 0x0,
        DD_COLOR_ENCODING_LINEAR = 0x1,
        DD_COLOR_ENCODING_SRGB_GAMMA = 0x2,
        DD_COLOR_ENCODING_ST2084 = 0x3,
        DD_COLOR_ENCODING_HLG = 0x4,
        DD_COLOR_ENCODING_MAX = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_COLOR_GAMUT
    {
        DD_COLOR_GAMUT_UNKNOWN = 0x0,
        DD_COLOR_GAMUT_601 = 0x1,
        DD_COLOR_GAMUT_709 = 0x2,
        DD_COLOR_GAMUT_2020 = 0x3,
        DD_COLOR_GAMUT_DCIP3 = 0x4,
        DD_COLOR_GAMUT_CUSTOM = 0x5,
        DD_COLOR_GAMUT_MAX = 0x6,
        Default = 0x7fffffff,
    }
    public enum DD_COLOR_MODEL
    {
        DD_COLOR_MODEL_UNKNOWN = 0x0,
        DD_COLOR_MODEL_RGB = 0x1,
        DD_COLOR_MODEL_YCBCR_601 = 0x2,
        DD_COLOR_MODEL_YCBCR_709 = 0x3,
        DD_COLOR_MODEL_YCBCR_2020 = 0x4,
        DD_COLOR_MODEL_YCBCR_PREFERRED = 0x5,
        DD_COLOR_MODEL_SCRGB = 0x6,
        DD_COLOR_MODEL_INTENSITY_ONLY = 0x7,
        DD_COLOR_MODEL_CUSTOM = 0x8,
        DD_COLOR_MODEL_MAX = 0x9,
        Default = 0x7fffffff,
    }
    public enum DD_COLOR_RANGE_TYPE
    {
        DD_COLOR_RANGE_TYPE_DEFAULT = 0x0,
        DD_COLOR_RANGE_TYPE_LIMITED = 0x1,
        DD_COLOR_RANGE_TYPE_FULL = 0x2,
        DD_COLOR_RANGE_TYPE_MAX = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_COLOR_YCBCR_SUBSAMPLING
    {
        DD_COLOR_SUBSAMPLING_UNKNOWN = 0x0,
        DD_COLOR_SUBSAMPLING_444_PACKED = 0x1,
        DD_COLOR_SUBSAMPLING_422_PACKED = 0x2,
        DD_COLOR_SUBSAMPLING_422_PLANAR = 0x3,
        DD_COLOR_SUBSAMPLING_420_PLANAR = 0x4,
        DD_COLOR_SUBSAMPLING_MAX = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_CONTENT_TYPE
    {
        DD_CONTENT_TYPE_INVALID = 0x0,
        DD_CONTENT_TYPE_SDR = 0x1,
        DD_CONTENT_TYPE_WCG = 0x2,
        DD_CONTENT_TYPE_HDR = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_CPUTYPE
    {
        CORE_i3 = 0x1,
        CORE_i5 = 0x2,
        CORE_i7 = 0x3,
        PENTIUM = 0x4,
        CELERON = 0x5,
        CORE = 0x6,
        VPRO = 0x7,
        SUPER_SKU = 0x8,
        ATOM = 0x9,
    }
    public enum DD_CUI_ESC_COLLAGE_OPERATION
    {
        DD_CUI_ESC_COLLAGE_OPERATION_GET = 0x0,
        DD_CUI_ESC_COLLAGE_OPERATION_VALIDATE = 0x1,
        DD_CUI_ESC_COLLAGE_OPERATION_ENABLE = 0x2,
        DD_CUI_ESC_COLLAGE_OPERATION_DISABLE = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_DC_PWR_STATE
    {
        DC_PWR_STATE_SET_NONE = 0x0,
        DC_PWR_STATE_SET_UPTO_DC3CO = 0x1,
        DC_PWR_STATE_SET_UPTO_DC5 = 0x2,
        DC_PWR_STATE_SET_UPTO_DC6V = 0x3,
        DC_PWR_STATE_SET_UPTO_DC6 = 0x4,
        DC_PWR_STATE_SET_UPTO_DC9 = 0x5,
        DC_PWR_STATE_SET_MAX = 0x6,
        Default = 0x7fffffff,
    }
    public enum DD_DC_STATE_RESTRICTIONS
    {
        DD_DC_STATE_PIPE_CONFIG = 0x0,
        DD_DC_STATE_VSYNC_ENABLED = 0x1,
        DD_DC_STATE_IDLE = 0x2,
        DD_DC_STATE_AUDIO_CODEC_LOADED = 0x3,
        DD_DC_STATE_3D_LUT_INACTIVE = 0x4,
        DD_DC_STATE_LOWPOWER_PIPE = 0x5,
        DD_DC_STATE_POWER_STATE_CHANGE = 0x6,
        DD_DC_STATE_PSR_OR_PR_SUPPORTED = 0x7,
        DD_DC_STATE_LACE_INACTIVE = 0x8,
        DD_DC_STATE_RR_CHANGE_WITH_VBI_MASKED = 0x9,
        DD_DC_STATE_CMTG_ENABLED = 0xa,
        DD_DC_STATE_SCANLINE_INTR = 0xb,
        DD_DC_STATE_ASYNC_FLIP = 0xc,
        DD_DC_STATE_HW_FLIPQ_ENABLED = 0xd,
        DD_DC_STATE_DARK_SCREEN_DETECTION_INACTIVE = 0xe,
        DD_DC_STATE_PSR2_OR_PANELREPLAY_OR_LOBF_ENABLED = 0xf,
        DD_DC_STATE_PHASE_WORKITEM_IN_PROGRESS = 0x10,
        DD_DC_STATE_MAX_RESTRICTIONS = 0x11,
        Default = 0x7fffffff,
    }
    public enum DD_DIAG_FEATURE_STATE_INFO
    {
        DD_DIAG_FEATURE_STATE_ENDURANCE_GAMING = 0x0,
        DD_DIAG_FEATURE_STATE_SMOOTH_SYNC = 0x1,
        DD_DIAG_FEATURE_STATE_SPEED_FRAME = 0x2,
        DD_DIAG_FEATURE_STATE_VSYNC_ON = 0x3,
        DD_DIAG_FEATURE_STATE_VSYNC_OFF = 0x4,
        DD_DIAG_FEATURE_STATE_CAPPED_FPS = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_DIAGNOSTIC_SOURCE
    {
        DD_DIAG_ERR = 0x1,
        DD_DIAG_WRN = 0x2,
        DD_DIAG_INF = 0x3,
        DD_DIAG_CAT_FAIL = 0x4,
        DD_DIAG_ERR_MODESET_FAIL = 0x10000001,
        DD_DIAG_ERR_LINK_TRAINING_FAIL = 0x10000002,
        DD_DIAG_ERR_MMIO_POLLED_READ_FAIL = 0x10000003,
        DD_DIAG_ERR_PCU_MAILBOX_POLLED_READ_FAIL = 0x10000004,
        DD_DIAG_ERR_SCANOUT_HUNG = 0x10000005,
        DD_DIAG_ERR_EMPTY_MODELIST = 0x10000006,
        DD_DIAG_ERR_FLIP_FAILED = 0x10000007,
        DD_DIAG_WRONG_MODE_PINNED = 0x10000008,
        DD_DIAG_ERR_BSOD = 0x10000009,
        DD_DIAG_ERR_LID_STATE_MISMATCH = 0x1000000a,
        DD_DIAG_ERR_INVALID_DDI_IN_LINKLOSS = 0x1000000b,
        DD_DIAG_ERR_INVALID_DDI_ON_INACTIVE_DISPLAY = 0x1000000c,
        DD_DIAG_ERR_LOG_BUFFER_NOT_SET = 0x1000000d,
        DD_DIAG_ERR_DSB_HUNG = 0x1000000e,
        DD_DIAG_ERR_INVALID_PC_DISPLAY_CAPS = 0x1000000f,
        DD_DIAG_ERR_INVALID_DISPLAY_CAPS = 0x10000010,
        DD_DIAG_ERR_FLIP_PENDING_DURING_DARK_SCREEN_DETECTION = 0x10000011,
        DD_DIAG_ERR_BAD_PANEL_RESPONSE = 0x10000012,
        DD_DIAG_ERR_INVALID_WM_LATENCY = 0x10000013,
        DD_DIAG_ERR_XE_FG_FRAME_DELAY_ERROR = 0x10000014,
        DD_DIAG_ERR_XE_FG_INVALID_PENDING_FRAME_COUNT_ERROR = 0x10000015,
        DD_DIAG_WRN_INSUFFICIENT_DBUF = 0x20000001,
        DD_DIAG_WRN_FLIP_DISABLED_TARGET = 0x20000002,
        DD_DIAG_WRN_SCANOUT_DELAYED = 0x20000003,
        DD_DIAG_WRN_FUTURE_TSTAMP_DURING_DRAIN = 0x20000004,
        DD_DIAG_WRN_ISV_NOT_SUPPORTED = 0x20000005,
        DD_DIAG_WRN_INVALID_PSR2_GUARDBAND_INTERRUPT_DELAY = 0x20000006,
        DD_DIAG_WRN_MODES_BFR_SUPPORT = 0x20000007,
        DD_DIAG_WRN_INVALID_RR_OS_REQUEST = 0x20000008,
        DD_DIAG_WRN_XPST_WORKITEM = 0x20000009,
        DD_DIAG_INF_POLLED_READ = 0x30000001,
        DD_DIAG_INF_DELAY_STALL_CPU = 0x30000003,
        DD_DIAG_INF_DELAY_EXECUTION_THREAD = 0x30000004,
        DD_DIAG_INF_DDI_ENTRY = 0x30000005,
        DD_DIAG_INF_DDI_EXIT = 0x30000006,
        DD_DIAG_INF_DPC_ENTRY = 0x30000007,
        DD_DIAG_INF_INSERT_DPC = 0x30000008,
        DD_DIAG_INF_INSERT_WI = 0x30000009,
        DD_DIAG_INF_DPC_EXIT = 0x3000000a,
        DD_DIAG_INF_WI_ENTRY = 0x3000000b,
        DD_DIAG_INF_WI_EXIT = 0x3000000c,
        DD_DIAG_INF_LOCK_ENTRY = 0x3000000d,
        DD_DIAG_INF_LOCK_EXIT = 0x3000000e,
        DD_DIAG_INF_HEADER = 0x3000000f,
        DD_DIAG_INRUMENTATION_HEADER = 0x30000010,
        DD_DIAG_MEM_ALLOC_START = 0x30000011,
        DD_DIAG_MEM_ALLOC_DONE = 0x30000012,
        DD_DIAG_MEM_FREE_START = 0x30000013,
        DD_DIAG_MEM_FREE_DONE = 0x30000014,
        DD_DIAG_MEM_ALLOC_LOOKASIDE_START = 0x30000015,
        DD_DIAG_MEM_ALLOC_LOOKASIDE_DONE = 0x30000016,
        DD_DIAG_WAIT_FOR_VBLANK_ENTRY = 0x30000017,
        DD_DIAG_WAIT_FOR_VBLANK_EXIT = 0x30000018,
        DD_DIAG_WAIT_FOR_SAFE_SCANLINE_ENTRY = 0x30000019,
        DD_DIAG_WAIT_FOR_SAFE_SCANLINE_EXIT = 0x3000001a,
        DD_DIAG_INF_SYNC_EXEC_ENTRY = 0x3000001b,
        DD_DIAG_INF_SYNC_EXEC_EXIT = 0x3000001c,
        DD_DIAG_INF_SWDPST_TIMER_START = 0x3000001d,
        DD_DIAG_INF_SWDPST_TIMER_CANCEL = 0x3000001e,
        DD_DIAG_WAIT_FOR_ACTIVE_SCANLINE_ENTRY = 0x30000021,
        DD_DIAG_WAIT_FOR_ACTIVE_SCANLINE_EXIT = 0x30000022,
        DD_DIAG_INF_MMIO_POLLED_READ_INFO = 0x30000023,
        DD_DIAG_INF_PCU_MAILBOX_POLLED_READ_INFO = 0x30000024,
        DD_DIAG_INF_MMIO_POLLED_READ_SCANLINE_FRAME_COUNT_ENTRY = 0x30000025,
        DD_DIAG_INF_MMIO_POLLED_READ_SCANLINE_FRAME_COUNT_EXIT = 0x30000026,
        DD_DIAG_DSB_WAIT_FOR_IDLE_ENTRY = 0x30000027,
        DD_DIAG_INF_PSR_CAPS_CHANGE_EVENT = 0x30000028,
        DD_DIAG_TRANS_ENABLE = 0x30003001,
        DD_DIAG_TRANS_DISABLE = 0x30003002,
        DD_DIAG_DETECTED_DISPLAY = 0x30003003,
        DD_DIAG_PLL_ENABLE = 0x30003004,
        DD_DIAG_PLL_DISABLE = 0x30003005,
        DD_DIAG_PORT_ENABLE = 0x30003006,
        DD_DIAG_PORT_DISABLE = 0x30003007,
        DD_DIAG_DYNAMIC_RR_SWITCH = 0x30003008,
        DD_DIAG_LINKLOSS_DISP_RESET = 0x30003009,
        DD_DIAG_LINKLOSS_RECOVERY_RESULT = 0x3000300a,
        DD_DIAG_LINKLOSS_OBSERVED = 0x3000300b,
        DD_DIAG_SETTIMING_RESULT = 0x3000300c,
        DD_DIAG_MODEENUM_LENGTH = 0x3000300d,
        DD_DIAG_DISABLE_PROTCOL_COMPLETE = 0x3000300e,
        DD_DIAG_DISPLAY_AUDIO_SLEEP_STATE = 0x3000300f,
        DD_DIAG_DISPLAY_END_OF_SETTIMING = 0x30003010,
        DD_DIAG_TILE_PKG_DETECTED = 0x30003011,
        DD_DIAG_TILES_IN_PKG = 0x30003012,
        DD_DIAG_SECONDARY_TILE = 0x30003013,
        DD_DIAG_PIPE_SWAP = 0x30003014,
        DD_DIAG_SETMODE_ARGS_FILL = 0x30003015,
        DD_DIAG_UPDATE_LINK_PARAM = 0x30003016,
        DD_DIAG_DISPLAY_AUDIO_CONVERTER_OVERLAP = 0x30003017,
        DD_DIAG_DISPLAY_AUDIO_CONVERTER_NOT_FOUND = 0x30003018,
        DD_DIAG_DISPLAY_AUDIO_CONVERTER_MISMATCH = 0x30003019,
        DD_DIAG_INF_CHECK_MPO_PASSED = 0x30010001,
        DD_DIAG_INF_CHECK_MPO_FAILED = 0x30010002,
        DD_DIAG_INF_FLIP_RETRY = 0x30010003,
        DD_DIAG_INF_CANCELLED_ALL_ENTRIES = 0x30010004,
        DD_DIAG_CAT_PIPE_UNDER_RUN = 0x40000001,
        DD_DIAG_CAT_RM_TIMEOUT = 0x40000002,
        Default = 0x7fffffff,
    }
    public enum DD_DIP_TYPE
    {
        DIP_NONE = 0x0,
        DIP_AVI = 0x1,
        DIP_VS = 0x2,
        DIP_GMP = 0x3,
        DIP_SPD = 0x4,
        DIP_VSC = 0x5,
        DIP_PPS = 0x6,
        DIP_DRM = 0x7,
        DIP_VSC_EXT_SDP = 0x8,
        DIP_VRR_SDP = 0x9,
        DIP_VTEM_SDP = 0xa,
        DIP_DYNAMIC_HDR_SDP = 0xb,
        DIP_VSEM_SDP = 0xc,
        DIP_SBTM_EMP = 0xd,
        DIP_ALL = 0x1f,
        Default = 0x7fffffff,
    }
    public enum DD_DISPLAY_CONNECTION_EVENTS
    {
        DD_DISP_CONN_UNKNOWN = 0x0,
        DD_DISP_CONN_PLUG = 0x1,
        DD_DISP_CONN_UNPLUG = 0x2,
        DD_DISP_CONN_REPLUG = 0x3,
        DD_DISP_CONN_MAX_EVENT = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_DISPLAY_LINK_EVENTS
    {
        DD_DISP_LINK_CONFIG_UNDEFINED = 0x0,
        DD_DISP_LINK_CONFIG_SUCCESS = 0x1,
        DD_DISP_LINK_CONFIG_FAILED = 0x2,
        DD_DISP_LINK_LOSS = 0x3,
        DD_DISP_LINK_DISABLED = 0x4,
        DD_DISP_LINK_CONFIG_STARTED = 0x5,
        DD_DISP_LINK_CONFIG_SUCCESS_FAKE_DISPLAY = 0x6,
        DD_DISP_LINK_CONFIG_SUCCESS_PREBOOT_DISPLAY = 0x7,
        DD_DISP_LINK_CONFIG_PENDING_POST_RESUME = 0x8,
        Default = 0x7fffffff,
    }
    public enum DD_DISPLAY_PC_LOBF_RESTRICTION
    {
        DD_DISPLAY_PC_LOBF_RESTRICTION_NONE = 0x0,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_DISABLED = 0x1,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_GAMING_RR_REQUESTED = 0x2,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_DRIVER_UNLOADED = 0x3,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_ASYNC_FLIP = 0x4,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_PIPE_JOINER_MODE = 0x5,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_HDCP_STATUS_CHANGED = 0x6,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_TIMING_NOT_SUPPORTED = 0x7,
        DD_DISPLAY_PC_LOBF_RESTRICTION_PLANE_AUX_TRANSACTION_REQUESTED = 0x8,
        Default = 0x7fffffff,
    }
    public enum DD_DMC_ERROR_CODE
    {
        DD_UNKNOWN_ERROR = 0x0,
        DD_INT_1_INVALID_SCANLINE_COMP_ERROR = 0x1,
        DD_INT_2_DC6V_FLIPQ_OVERLAP_ERROR = 0x2,
        DD_INT_FF_PIPE_DMC_FLIPQ_DONE_INT = 0xff,
        Default = 0x7fffffff,
    }
    public enum DD_DP_AUX_CHANNEL_TYPE
    {
        AUX_CHANNEL_UNDEFINED = unchecked((int)0xffffffff),
        AUX_CHANNEL_A = 0x0,
        AUX_CHANNEL_B = 0x1,
        AUX_CHANNEL_C = 0x2,
        AUX_CHANNEL_D = 0x3,
        AUX_CHANNEL_E = 0x4,
        AUX_CHANNEL_F = 0x5,
        AUX_CHANNEL_G = 0x6,
        AUX_CHANNEL_H = 0x7,
        AUX_CHANNEL_I = 0x8,
        AUX_CHANNEL_MAX = 0x9,
        Default = 0x7fffffff,
    }
    public enum DD_DP_DIAGNOSTIC_SOURCE
    {
        DD_DIAG_LINK_TRAINING_START = 0x0,
        DD_DIAG_CR_START = 0x1,
        DD_DIAG_CR_END = 0x2,
        DD_DIAG_EQ_START = 0x3,
        DD_DIAG_EQ_END = 0x4,
        DD_DIAG_LINK_TRAINING_END = 0x5,
        DD_DIAG_TILE_DISPLAY = 0x6,
        DD_DIAG_DATA_MN_TU = 0x7,
        DD_DIAG_LINK_MN = 0x8,
        DD_DIAG_PLL_CR0_PARAMS = 0x9,
        DD_DIAG_PLL_CR1_PARAMS = 0xa,
        DD_DIAG_TRANS_DDI_CNTL_PARAMS = 0xb,
        DD_MST_VCPAYLOAD_UPDATE = 0xc,
        DD_DIAG_MST_PAYLOAD_RESULT = 0xd,
        DD_DIAG_SINK_POWER_UP_START = 0xe,
        DD_DIAG_SINK_POWER_UP_END = 0xf,
        DD_DIAG_SINK_POWER_DOWN = 0x10,
        DD_DIAG_REMOTE_SINK_POWER_UP_START = 0x11,
        DD_DIAG_REMOTE_SINK_POWER_UP_END = 0x12,
        DD_DIAG_REMOTE_SINK_POWER_DOWN = 0x13,
        DD_DIAG_USB4_BW_ALLOCATION_REQUEST_START = 0x14,
        DD_DIAG_USB4_BW_ALLOCATION_REQUEST_END = 0x15,
        DD_DIAG_CONN_EVENT = 0x16,
        DD_DIAG_MST_ADDED_SINK = 0x17,
        DD_DIAG_MST_ADDED_GUID = 0x18,
        DD_DIAG_MST_ADDED_BRANCH = 0x19,
        DD_DIAG_MST_UNPLUG_LEAF = 0x1a,
        DD_DIAG_MST_REMOVED_BRANCH = 0x1b,
        DD_DIAG_MST_REMOVED_GUID = 0x1c,
        Default = 0x7fffffff,
    }
    public enum DD_DP_PREEMPHASIS_LEVEL
    {
        DP_PREEMP_NO_PREEMPHASIS = 0x0,
        DP_PREEMP_3_5DB = 0x1,
        DP_PREEMP_6DB = 0x2,
        DP_PREEMP_9_5DB = 0x3,
    }
    public enum DD_DP_VOLTAGE_SWING_LEVEL
    {
        DP_VSWING_0_4 = 0x0,
        DP_VSWING_0_6 = 0x1,
        DP_VSWING_0_8 = 0x2,
        DP_VSWING_1_2 = 0x3,
    }
    public enum DD_DPS_PANEL_TYPE
    {
        DPS_PANEL_TYPE_STATIC_DRRS = 0x0,
        DPS_PANEL_TYPE_D2PO = 0x1,
        DPS_PANEL_TYPE_SEAMLESS_DRRS = 0x2,
        DPS_PANEL_TYPE_UNSUPPORTED = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_DPST_ALGORITHM_VERSION
    {
        DD_DPST_VERSION_NONE = 0x0,
        DD_DPST_VERSION_6_3 = 0x3f,
        DD_DPST_VERSION_7_0 = 0x46,
        DD_DPST_VERSION_7_1 = 0x47,
        DD_DPST_VERSION_8_0 = 0x50,
        Default = 0x7fffffff,
    }
    public enum DD_DPST_OPERATION
    {
        DD_DPST_HISTOGRAM_ENABLE = 0x0,
        DD_DPST_HISTOGRAM_DISABLE = 0x1,
        DD_DPST_HISTOGRAM_RESET = 0x2,
        DD_DPST_HISTOGRAM_STATUS = 0x3,
        DD_DPST_HISTOGRAM_UPDATE_GUARDBAND_THRESHOLD = 0x4,
        DD_DPST_PROGRAM_DIET_REGS = 0x5,
        DD_DPST_READ_DIET_REGS = 0x6,
        DD_DPST_HISTOGRAM_INTERRUPT_ENABLE_DISABLE = 0x7,
        DD_DPST_HISTOGRAM_UPDATE_GUARDBAND_DELAY = 0x8,
        DD_DPST_RESTORE_GUARDBAND_INTERRUPT_DELAY_COUNTER = 0x9,
        DD_DPST_SFSU_UPDATE_SEGMENT_SIZE = 0xa,
        DD_DPST_ENABLE_DISABLE_CLOCK_GATING = 0xb,
        DD_DPST_HW_SFSU_ENABLE_DISABLE = 0xc,
        DD_DPST_UPDATE_HW_DPST_PHASE_IN_REGS = 0xd,
        DD_DPST_CONFIGURE_DMC_PHASE_IN_TIMER_EVENT = 0xe,
        DD_DPST_READ_HW_PHASE_IN_STEPS_AND_COUNT = 0xf,
        Default = 0x7fffffff,
    }
    public enum DD_DSI_PACKET_DATA_TYPE
    {
        Default = 0x7fffffff,
    }
    public enum DD_DSM_FUNCTION_CODE
    {
        DD_BIOS_DATA_FUNC_SUPPORT = 0x0,
        DD_SYSTEM_BIOS_GET_HPD_COUNT = 0x12,
        DD_SYSTEM_BIOS_DECREMENT_HPD_COUNT = 0x13,
        DD_SYSTEM_BIOS_DP_IN_SWITCH_NOTIFICATION = 0x14,
        DD_SYSTEM_BIOS_LFP_DISPLAY_MUX_SWITCH = 0x15,
    }
    public enum DD_DXGK_INTERRUPT_TYPE
    {
        DMA_COMPLETE = 0x1,
        DMA_PREEMPTED = 0x2,
        CRTC_VSYNC = 0x3,
        DISPLAYONLY_VSYNC = 0x5,
        CRTC_VSYNC_WITH_MPO = 0x7,
        CRTC_VSYNC_WITH_MPO_2 = 0xa,
        CRTC_VSYNC_WITH_MPO_3 = 0x12,
    }
    public enum DD_EDID_TYPE
    {
        DD_EDID_DEFAULT = 0x0,
        DD_EDID_INF = 0x1,
        DD_EDID_FAKE = 0x2,
        DD_EDID_OS = 0x3,
        DD_EDID_VBT = 0x4,
        DD_EDID_BIOS = 0x5,
        DD_EDID_IGCL_SUPPLIED = 0x6,
        Default = 0x7fffffff,
    }
    public enum DD_FBC_RESTRICTION_TYPE
    {
        UNKNOWN_RESTRICTION = 0x0,
        FBC_PLANE_DISABLED = 0x1,
        PLANE_ORIENTATION_EITHER_90OR270 = 0x2,
        PLANE_IS_NOT_RGB_OR_B8G8R8X8 = 0x3,
        PLANE_LARGER_THAN_SCREEN_RESOLUTION = 0x4,
        PLANE_STRIDE_LARGER_THAN_DISPLAY_STRIDE = 0x5,
        BPP_NOT_SUPPORTED = 0x6,
        LINE_WIDTH_NOT_SUPPORTED = 0x7,
        HEIGHT_NOT_SUPPORTED = 0x8,
        LINEAR_TILE_MEMORY_NOT_SUPPORTED = 0x9,
        PLANE_STRIDE_INCORRECT = 0xa,
        ASYNC_FLIP = 0xb,
        PSR_RESTRICTION = 0xc,
        SINGLE_PLANE_RESTRICTION = 0xd,
        DIRTY_RECTANGLE_AREA_RESTRICTION = 0xe,
        PAVP_ACTIVE_SESSION_RESTRICTION = 0xf,
        Default = 0x7fffffff,
    }
    public enum DD_FBC_STATE_CHANGE
    {
        DISABLE = 0x0,
        ENABLE = 0x1,
        DISABLE_PENDING = 0x2,
        ENABLE_PENDING = 0x3,
        NUKE_PENDING = 0x4,
        NUKE_COMPLETED = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_FLICKER_PROFILE
    {
        DD_FLICKER_PROFILE_NONE = 0x0,
        DD_FLICKER_PROFILE_EXCELLENT = 0x1,
        DD_FLICKER_PROFILE_COMPATIBLE = 0x2,
        DD_FLICKER_PROFILE_GOOD = 0x3,
        DD_FLICKER_PROFILE_CUSTOM = 0x4,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DD_FLIP_DONE_STATUS
    {
        Plane1 = 0x1,
        Plane2 = 0x2,
        Plane3 = 0x4,
        Plane4 = 0x8,
        Plane5 = 0x10,
        Plane6 = 0x20,
        Plane7 = 0x40,
    }
    public enum DD_FLIP_QUEUE_EXEC_TYPE
    {
        DD_FLIP_QUEUE_EXEC_TYPE_UNKNOWN = 0x0,
        DD_FLIP_QUEUE_EXEC_TYPE_SW_QUEUE = 0x1,
        DD_FLIP_QUEUE_EXEC_TYPE_HW_QUEUE = 0x2,
        DD_FLIP_QUEUE_EXEC_TYPE_SW_DRAIN_HW_QUEUE = 0x3,
        DD_FLIP_QUEUE_EXEC_TYPE_MAX = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_FMS_STATUS_REASONS
    {
        DD_FMS_SUCCESS = 0x0,
        DD_FMS_NOT_MODIFIED_TIMING = 0x1,
        DD_FMS_COLLAGE_DISPLAY = 0x2,
        DD_FMS_TARGET_CHANGED = 0x3,
        DD_FMS_NOT_PHYSICAL_PIPE = 0x4,
        DD_FMS_PIPE_CHANGE = 0x5,
        DD_FMS_COLORFORMAT_ENCODING_CHANGED = 0x6,
        DD_FMS_COLORFORMAT_GAMUT_CHANGED = 0x7,
        DD_FMS_COLORFORMAT_CONTENTTYPE_CHANGED = 0x8,
        DD_FMS_COLORFORMAT_BPC_CHANGED = 0x9,
        DD_FMS_COLORFORMAT_MODEL_CHANGED = 0xa,
        DD_FMS_UNSUPPORTED_DISPLAY = 0xb,
        DD_FMS_LINK_NOT_TRAINIED = 0xc,
        DD_FMS_TIMING_CHANGE_REQUIRED = 0xd,
        DD_FMS_CDCLK_CHANGED = 0xe,
        DD_FMS_FEC_DSC_PARAMS_CHANGED = 0xf,
        DD_FMS_EDP_PANELREPLAY_NOT_CONFIGURED = 0x10,
        DD_FMS_EDP_PSR_NOT_CONFIGURED = 0x11,
        DD_FMS_CUSTOM_VSWING_ENABLED_IN_VBT = 0x12,
        Default = 0x7fffffff,
    }
    public enum DD_FTR_BRT_OPTIMIZATION_OPERATION
    {
        DD_FTR_BRT_OPTIMIZATION_OPERATION_INVALID = 0x0,
        DD_FTR_BRT_OPTIMIZATION_OPERATION_GET = 0x1,
        DD_FTR_BRT_OPTIMIZATION_OPERATION_SET = 0x2,
        DD_FTR_BRT_OPTIMIZATION_OPERATION_MAX = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_GAMING_SYNC_MODE
    {
        DD_GAMING_SYNC_MODE_INVALID = 0x0,
        DD_GAMING_SYNC_MODE_APPLICATION_DEFAULT = 0x1,
        DD_GAMING_SYNC_MODE_VSYNC_OFF = 0x2,
        DD_GAMING_SYNC_MODE_VSYNC_ON = 0x3,
        DD_GAMING_SYNC_MODE_SMOOTH_SYNC = 0x4,
        DD_GAMING_SYNC_MODE_SPEED_FRAME = 0x5,
        DD_GAMING_SYNC_MODE_CAPPED_FPS = 0x6,
        Default = 0x7fffffff,
    }
    public enum DD_GETSET_NITS_BRIGHTNESS_OPERATION
    {
        GET_NITS_BRIGHTNESS = 0x0,
        SET_NITS_BRIGHTNESS = 0x1,
        SET_NITS_AGRESSIVENESS_LEVEL = 0x2,
        SET_NITS_BRIGHTNESS_CTRL = 0x3,
        SET_NITS_PANEL_LUMINANCE_OVERRIDE = 0x4,
    }
    public enum DD_HDCP_AUTH_STATUS
    {
        DD_HDCP2_UNAUTHENTICATED = 0x1,
        DD_HDCP2_AUTH_IN_PROGRESS = 0x2,
        DD_HDCP2_AUTH_COMPLETE = 0x3,
        DD_HDCP2_LINKINTEGRITY_FAILED = 0x4,
    }
    public enum DD_HDCP_PORT_ACCESS
    {
        DD_HDCP_PORT_ACCESS_UNKNOWN = 0x0,
        DD_HDCP_PORT_GET_VERSION = 0x1,
        DD_HDCP_PORT_GET_RX_STATUS = 0x2,
        DD_HDCP_PORT_SEND_HDCP2 = 0x3,
        DD_HDCP_PORT_RECEIVE_HDCP2 = 0x4,
        DD_HDCP_PORT_READ_BKSV = 0x5,
        DD_HDCP_PORT_READ_BCAPS = 0x6,
        DD_HDCP_PORT_READ_BSTATUS = 0x7,
        DD_HDCP_PORT_READ_KSVLIST = 0x8,
        DD_HDCP_PORT_READ_PRIMEV = 0x9,
        DD_HDCP_PORT_READ_RI = 0xa,
        DD_HDCP_PORT_READ_BINFO = 0xb,
        DD_HDCP_PORT_SEND_AN = 0xc,
        DD_HDCP_PORT_SEND_AKSV = 0xd,
        DD_HDCP_PORT_ACCESS_MAX = 0xe,
        Default = 0x7fffffff,
    }
    public enum DD_HDCP_PROTOCOL_STATE
    {
        DD_HDCP_PROTOCOL_IDLE = 0x0,
        DD_HDCP_PROTOCOL_WAIT_FOR_RIREADY = 0x1,
        DD_HDCP_PROTOCOL_FIRSTSTEP_DONE = 0x2,
        DD_HDCP_PROTOCOL_SECONDSTEP_PENDING = 0x3,
        DD_HDCP_PROTOCOL_SECOND_STEP_DONE = 0x4,
        DD_HDCP_PROTOCOL_THIRD_STEP_DONE = 0x5,
        DD_HDCP_PROTOCOL2_IDLE = 0xa,
        DD_HDCP_PROTOCOL2_INITIATE_SESSION = 0xb,
        DD_HDCP_PROTOCOL2_WAIT_FOR_RX_CERT = 0xc,
        DD_HDCP_PROTOCOL2_WAIT_FOR_HPRIME_NO_STORED_KM = 0xd,
        DD_HDCP_PROTOCOL2_WAIT_FOR_HPRIME_STORED_KM = 0xe,
        DD_HDCP_PROTOCOL2_GET_PAIRING_INFO = 0xf,
        DD_HDCP_PROTOCOL2_INITIATE_LC_SKE = 0x10,
        DD_HDCP_PROTOCOL2_WAIT_FOR_REPEATER_DEVICE_LIST = 0x11,
        DD_HDCP_PROTOCOL2_MANAGE_STREAM_TRY_ONE = 0x12,
        DD_HDCP_PROTOCOL2_MANAGE_STREAM_TRY_TWO = 0x13,
        DD_HDCP_PROTOCOL2_MANAGE_STREAM_TRY_THREE = 0x14,
        DD_HDCP_PROTOCOL2_WAIT_FOR_STREAM_READY = 0x15,
        DD_HDCP_PROTOCOL2_MANDATORY_WAIT_PHASE = 0x16,
        DD_HDCP_PROTOCOL2_MANDATORY_WAIT_PHASE_COMPLETE = 0x17,
        DD_HDCP_PROTOCOL2_AUTH_COMPLETE = 0x18,
        Default = 0x7fffffff,
    }
    public enum DD_HDCP_VERSION
    {
        DD_INVALIDHDCPVERSION = 0x0,
        DD_HDCP1_4 = 0x1,
        DD_HDCP2_2 = 0x2,
        Default = 0x7fffffff,
    }
    public enum DD_HDMI_DIAGNOSTIC_SOURCE
    {
        DD_DIAG_HDMI_SINK_CONFIG_START = 0x0,
        DD_DIAG_HDMI_SINK_CONFIG_END = 0x1,
        DD_DIAG_FRL_LINK_TRAINING_START = 0x2,
        DD_DIAG_FRL_LTS1_START = 0x3,
        DD_DIAG_FRL_LTS1_END = 0x4,
        DD_DIAG_FRL_LTS2_START = 0x5,
        DD_DIAG_FRL_LTS2_END = 0x6,
        DD_DIAG_FRL_LTS3_START = 0x7,
        DD_DIAG_FRL_LTS3_END = 0x8,
        DD_DIAG_FRL_LTSP_START = 0x9,
        DD_DIAG_FRL_LTSP_END = 0xa,
        DD_DIAG_FRL_LINK_TRAINING_END = 0xb,
        DD_DIAG_HDMI_FALLBACK = 0xc,
        DD_DIAG_DUMP_HDMI_FRL_CAPS = 0xd,
        Default = 0x7fffffff,
    }
    public enum DD_HDMI_VERSION
    {
        HDMI_VERSION_NONE = 0x0,
        HDMI_VERSION_1_4 = 0x1,
        HDMI_VERSION_2_0 = 0x2,
        HDMI_VERSION_2_1 = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_HW_FLIPQ_MODE
    {
        DD_HW_FLIPQ_MODE_UNKNOWN = 0x0,
        DD_HW_FLIPQ_MODE_SYNC = 0x1,
        DD_HW_FLIPQ_MODE_ASYNC = 0x2,
        DD_HW_FLIPQ_MODE_DISABLE = 0x3,
        DD_HW_FLIPQ_MODE_MAX = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_IGCL_DISPLAY_SHIFT_OPERATION
    {
        DD_IGCL_DISPLAY_SHIFT_OP_GET_STATUS = 0x0,
        DD_IGCL_DISPLAY_SHIFT_OP_GET_PANEL_DETAILS = 0x1,
        DD_IGCL_DISPLAY_SHIFT_OP_SET_PANEL_DETAILS = 0x2,
        DD_IGCL_DISPLAY_SHIFT_OP_START = 0x3,
        DD_IGCL_DISPLAY_SHIFT_OP_END = 0x4,
        DD_IGCL_DISPLAY_SHIFT_OP_RESET = 0x5,
        DD_IGCL_DISPLAY_SHIFT_OP_GET_FEATURES = 0x6,
        DD_IGCL_DISPLAY_SHIFT_OP_SET_FEATURES = 0x7,
        DD_IGCL_DISPLAY_SHIFT_OP_MAX = 0x8,
        Default = 0x7fffffff,
    }
    public enum DD_IGCL_EDID_MGMT_ERROR_CODE
    {
        DD_IGCL_EDID_MGMT_NO_ERROR = 0x0,
        DD_IGCL_EDID_MGMT_ERROR_INVALID_PARAM = 0x1,
        DD_IGCL_EDID_MGMT_ERROR_NO_MEMORY = 0x2,
        DD_IGCL_EDID_MGMT_ERROR_NO_EDID = 0x3,
        DD_IGCL_EDID_MGMT_ERROR_CORRUPTED_EDID = 0x4,
        DD_IGCL_EDID_MGMT_ERROR_INVALID_OPERATION = 0x5,
        DD_IGCL_EDID_MGMT_ERROR_UNSUPPORTED_TARGET_TYPE = 0x6,
        DD_IGCL_EDID_MGMT_ERROR_TARGET_DETACHED = 0x7,
        Default = 0x7fffffff,
    }
    public enum DD_IGCL_EDID_MGMT_OP
    {
        DD_IGCL_EDID_OP_UNKNOWN = 0x0,
        DD_IGCL_EDID_LOCK = 0x1,
        DD_IGCL_EDID_UNLOCK = 0x2,
        DD_IGCL_EDID_OVERRIDE = 0x3,
        DD_IGCL_EDID_REMOVE_OVERRIDE = 0x4,
        DD_IGCL_EDID_READ = 0x5,
        DD_IGCL_EDID_OP_MAX = 0x6,
        Default = 0x7fffffff,
    }
    public enum DD_IGCL_EDID_TYPE
    {
        DD_IGCL_EDID_TYPE_NONE = 0x0,
        DD_IGCL_EDID_TYPE_MONITOR = 0x1,
        DD_IGCL_EDID_TYPE_SUPPLIED = 0x2,
        DD_IGCL_EDID_TYPE_CURRENT = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_LACE_OPS
    {
        DD_LACE_ENABLE = 0x0,
        DD_LACE_DISABLE = 0x1,
        DD_LACE_GET_HIST_BINS = 0x2,
        DD_LACE_SET_IE = 0x3,
        DD_LACE_UPDATE_IE_DATA = 0x4,
        DD_LACE_APPLY_IE_DATA = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_LACE_RESTRICTION
    {
        DD_LACE_NO_ACTIVE_LFP = 0x0,
        DD_LACE_INVALID_PIPE = 0x1,
        DD_LACE_INSUFFICIENT_TILE_COUNT = 0x2,
        DD_LACE_UNSUPPORTED_DISPLAY_RESOLUTION = 0x3,
        DD_LACE_ENABLED = 0x4,
        DD_LACE_UNSUPPORTED_SECONDARY_INTERNAL_LFP = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_LANE_WIDTH
    {
        LANE_X0 = 0x0,
        LANE_X1 = 0x1,
        LANE_X2 = 0x2,
        LANE_X3 = 0x3,
        LANE_X4 = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_LID_STATE
    {
        DD_LID_STATE_CLOSE = 0x0,
        DD_LID_STATE_OPEN = 0x1,
        Default = 0x7fffffff,
    }
    public enum DD_LRR_VERSION
    {
        DD_LRR_VERSION_UNSUPPORTED = unchecked((int)0xffffffff),
        DD_LRR_VERSION_INVALID = 0x0,
        DD_LRR_VERSION_1_0 = 0x1,
        DD_LRR_VERSION_2_0 = 0x2,
        DD_LRR_VERSION_2_5 = 0x3,
        DD_LRR_VERSION_ALRR = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_MDM_INFO_POSITION
    {
        DD_MDM_INFO_UNINIT_POSITION = 0x0,
        DD_MDM_INFO_MUX_PRESENCE = 0x1,
        DD_MDM_INFO_INIT = 0x2,
        DD_MDM_INFO_SUPPORT_STATUS = 0x3,
        DD_MDM_INFO_OS_MUX_STATUS_UPDATE = 0x4,
        DD_MDM_INFO_MONITOR_FLAG_UPDATE = 0x5,
        DD_MDM_INFO_SWITCH_START = 0x6,
        DD_MDM_INFO_SWITCH_END = 0x7,
        DD_MDM_INFO_SWITCH_CANCEL = 0x8,
        DD_MDM_INFO_GET_MUX_STATUS = 0x9,
        DD_MDM_INFO_BLOCK_NOTIFICATION_STATUS = 0xa,
        Default = 0x7fffffff,
    }
    public enum DD_MIPI_DSI_LINK_CONFIG
    {
        Default = 0x7fffffff,
    }
    public enum DD_MIPI_DSI_MODE
    {
        Default = 0x7fffffff,
    }
    public enum DD_MODE_ENUM_RESTRICTIONS
    {
        DD_NO_RESTRICTION = 0x0,
        DD_PLATFORM_RESTRICTION = 0x1,
        DD_DONGLE_RESTRICTION = 0x2,
        DD_PIPES_JOINING_UNSUPPORTED = 0x3,
        DD_DSC_RESTRICTION = 0x4,
        DD_PIXEL_CLOCK_UNSUPPORTED = 0x5,
        DD_SAMPLING_MODEYUV420_UNSUPPORTED = 0x6,
        DD_SAMPLING_MODEYUV422_UNSUPPORTED = 0x7,
        DD_RESOLUTION_UNSUPPORTED = 0x8,
        DD_MSO_UNSUPPORTED = 0x9,
        DD_TIMING_UNSUPPORTED = 0xa,
        DD_INTERLACED_UNSUPPORTED = 0xb,
        DD_PROTOCOL_BW_UNSUPPORTED = 0xc,
        DD_BPCMASK_UNSUPPORTED = 0xd,
        DD_VBLANK_RESTRICTION = 0xe,
        DD_HDCP_RESTRICTION = 0xf,
        DD_PROFILE_BASED_REMOVAL = 0x10,
        DD_MODE_ENUM_RESTRICTIONS_MAX = 0x11,
        Default = 0x7fffffff,
    }
    public enum DD_MODE_TYPE
    {
        DD_MODE_TYPE_UNKNOWN = 0x0,
        DD_EDID_MODE = 0x1,
        DD_NO_EDID_DEFAULT_MODE = 0x2,
        DD_MEDIA_RR_MODE = 0x3,
        DD_OS_ADDL_MODE = 0x4,
        DD_PIPE_JOINED_MODE_BIG_JOINER = 0x5,
        DD_PIPE_JOINED_MODE_ULTRA_JOINER = 0x6,
        DD_TILED_MODE = 0x7,
        DD_COLLAGE_MODE = 0x8,
        DD_MODE_TYPE_MAX = 0x9,
        Default = 0x7fffffff,
    }
    public enum DD_MONITOR_CAPABILITIES_ORIGIN
    {
        DD_MCO_UNINITIALIZED = 0x0,
        DD_MCO_DEFAULTMONITORPROFILE = 0x1,
        DD_MCO_MONITORDESCRIPTOR = 0x2,
        DD_MCO_MONITORDESCRIPTOR_REGISTRYOVERRIDE = 0x3,
        DD_MCO_SPECIFICCAP_REGISTRYOVERRIDE = 0x4,
        DD_MCO_DRIVER = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_MPO_HDR_METADATA_TYPE
    {
        DD_MPO_HDR_METADATA_TYPE_NONE = 0x0,
        DD_MPO_HDR_METADATA_TYPE_HDR10 = 0x1,
        DD_MPO_HDR_METADATA_TYPE_DEFAULT = 0x2,
        DD_MPO_HDR_METADATA_TYPE_UMD_ESCAPE = 0x3,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DD_OS_FLAGS
    {
        SrcPinned = 0x1,
        SrcPivot = 0x2,
        TgtPinned = 0x4,
        TgtPivot = 0x8,
        ScalePinned = 0x10,
        ScalePivot = 0x20,
        RotationPinned = 0x40,
        RotationPivot = 0x80,
    }
    [Flags]
    public enum DD_PC_FTR_BRT_OPTIMIZATION_CONCURRENCY_MASK
    {
        NONE = 0x0,
        DPST = 0x1,
        CABC = 0x2,
        OPST = 0x4,
        ELP = 0x8,
        EPSM = 0x10,
        APD = 0x20,
        PixOptix = 0x40,
    }
    public enum DD_PC_FTR_BRT_OPTIMIZATION_INDEX
    {
        DD_PC_FTR_BRT_OPTIMIZATION_DPST = 0x0,
        DD_PC_FTR_BRT_OPTIMIZATION_CABC = 0x1,
        DD_PC_FTR_BRT_OPTIMIZATION_OPST = 0x2,
        DD_PC_FTR_BRT_OPTIMIZATION_ELP = 0x3,
        DD_PC_FTR_BRT_OPTIMIZATION_EPSM = 0x4,
        DD_PC_FTR_BRT_OPTIMIZATION_APD = 0x5,
        DD_PC_FTR_BRT_OPTIMIZATION_PIXOPTIX = 0x6,
        DD_PC_FTR_BRT_OPTIMIZATION_MAX = 0x7,
        Default = 0x7fffffff,
    }
    public enum DD_PCON_DIAG_NAME
    {
        DD_PCON_GET_TX_LINK_STATUS = 0x0,
        DD_PCON_FRL_LT_START = 0x1,
        DD_PCON_FRL_LT_END = 0x2,
        DD_PCON_LT_START = 0x3,
        DD_PCON_LT_END = 0x4,
    }
    public enum DD_PLATFORM_TYPE
    {
        DD_PLATFORM_NONE = 0x0,
        DD_PLATFORM_DESKTOP = 0x1,
        DD_PLATFORM_MOBILE = 0x2,
        DD_PLATFORM_PERFORMANCE = 0x3,
        DD_PLATFORM_ALL = 0xff,
        Default = 0x7fffffff,
    }
    public enum DD_PM_DMD_REQ_TYPE
    {
        DD_PM_DMD_QGV = 0x0,
        DD_PM_DMD_DVFS = 0x1,
        DD_PM_DMD_RES_CONFIG = 0x2,
        DD_PM_DMD_INVALID = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_PORT_TYPES
    {
        PORT_A = 0x0,
        PORT_B = 0x1,
        PORT_C = 0x2,
        PORT_D = 0x3,
        PORT_E = 0x4,
        PORT_F = 0x5,
        PORT_G = 0x6,
        PORT_H = 0x7,
        PORT_I = 0x8,
        MIPI_A = 0x9,
        MIPI_C = 0xa,
        WB = 0xb,
        VIRTUAL = 0xc,
        KVM = 0xd,
        NULL_PORT = 0xff,
    }
    public enum DD_PPS_SIGNAL
    {
        DD_VDD = 0x0,
        DD_DATA = 0x1,
        DD_PWM = 0x2,
        DD_BKLT = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_PROCESS_CONFIG_TABLE_ENTRY_ACTION
    {
        DD_PROCESS_ENTRY_ACTION_UNINITIALIZED = 0x0,
        DD_PROCESS_ENTRY_ACTION_ADD = 0x1,
        DD_PROCESS_ENTRY_ACTION_REMOVE = 0x2,
        DD_PROCESS_ENTRY_ACTION_UPDATE_FLIP_SUBMISSION = 0x3,
        DD_PROCESS_ENTRY_ACTION_UPDATE_SYNC_MODE = 0x4,
        DD_PROCESS_ENTRY_ACTION_NO_ACTION = 0x5,
        DD_PROCESS_ENTRY_ACTION_READ = 0x6,
        DD_PROCESS_ENTRY_ACTION_MAX = 0x7,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DD_PROCESS_FLAGS
    {
        DwmProcess = 0x1,
        MediaProcess = 0x2,
    }
    public enum DD_PROTOCOL_TYPE
    {
        DD_PROTOCOL_UNKNOWN = 0x0,
        DD_PROTOCOL_HDMI = 0x1,
        DD_PROTOCOL_DVI = 0x2,
        DD_PROTOCOL_DISPLAYPORT_SST = 0x3,
        DD_PROTOCOL_DISPLAYPORT_EMBEDDED = 0x4,
        DD_PROTOCOL_DISPLAYPORT_MST = 0x5,
        DD_PROTOCOL_MIPI_DSI = 0x6,
        DD_PROTOCOL_WRITEBACK = 0x7,
        DD_PROTOCOL_VIRTUAL = 0x8,
        DD_PROTOCOL_DYNAMIC_PORT = 0x9,
        Default = 0x7fffffff,
    }
    public enum DD_PSR_PR_COMMAND
    {
        PSR_ENABLE = 0x0,
        PSR_DISABLE = 0x1,
        PSR_ENABLE_SU = 0x2,
        PSR_DISABLE_SU = 0x3,
        PSR_MEDIA_PLAYBACK_MODE = 0x4,
        PSR_ENABLE_IN_TRANSCODER = 0x5,
        PSR_ENABLE_IN_TRANSCODER_SU = 0x6,
        PSR_DISABLE_IN_TRANSCODER = 0x7,
        PSR_DISABLE_IN_TRANSCODER_SU = 0x8,
        PSR_PANELREPLAY_MANUAL_TRACKING_MODE_UPDATE = 0x9,
        PANELREPLAY_ENABLE = 0xa,
        PANELREPLAY_DISABLE = 0xb,
        PANELREPLAY_ENABLE_IN_TRANSCODER = 0xc,
        PANELREPLAY_DISABLE_IN_TRANSCODER = 0xd,
        PSR_ENABLE_SW_MODE = 0xe,
        PSR_DISABLE_SW_MODE = 0xf,
        PSR_UPDATE_IDLE_FRAME_COUNT_IN_TRANSCODER_SU = 0x10,
        PSR_POLL_FOR_EXIT_IN_TRANSCODER_SU = 0x11,
        PSR_POLL_FOR_EXIT_IN_TRANSCODER = 0x12,
        PANELREPLAY_POLL_FOR_EXIT_IN_TRANSCODER = 0x13,
        PSR_PANELREPLAY_MANUAL_TRACKING_ENABLE = 0x14,
        PSR_MAX_COMMAND = 0x15,
        Default = 0x7fffffff,
    }
    public enum DD_PSR_PR_VERSION
    {
        PSR_VERSION_NONE = 0x0,
        PSR_VERSION_1 = 0x1,
        PSR_VERSION_2 = 0x2,
        PANELREPLAY_LINKON = 0x3,
        PANELREPLAY_LINKOFF = 0x4,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DD_PSR2_MODE
    {
        CFF = 0x0,
        SFF = 0x1,
        SFSU = 0x2,
    }
    public enum DD_PWM_CTRL_NUM
    {
        DD_PWM_NUM0 = 0x0,
        DD_PWM_NUM1 = 0x1,
        DD_PWM_NUM_MAX = 0x2,
        Default = 0x7fffffff,
    }
    public enum DD_PWR_SRC_EVENT_ARGS
    {
        DD_PWR_UNKNOWN = 0x0,
        DD_PWR_AC = 0x1,
        DD_PWR_DC = 0x2,
        Default = 0x7fffffff,
    }
    public enum DD_REFRESH_RATE_MODE
    {
        DD_REFRESH_RATE_MODE_NONE = 0x0,
        DD_REFRESH_RATE_MODE_FIXED = 0x1,
        DD_REFRESH_RATE_MODE_VARIABLE = 0x2,
        Default = 0x7fffffff,
    }
    public enum DD_RR_SWITCH_METHOD
    {
        DD_RR_SWITCH_METHOD_NONE = 0x0,
        DD_RR_SWITCH_METHOD_VRR = 0x1,
        DD_RR_SWITCH_METHOD_SW_VTOTAL = 0x2,
        DD_RR_SWITCH_METHOD_PIXEL_CLOCK = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_SCALING
    {
        DD_SCALING_UNINITIALIZED = 0x0,
        DD_SCALING_IDENTITY = 0x1,
        DD_SCALING_CENTERED = 0x2,
        DD_SCALING_STRETCHED = 0x4,
        DD_SCALING_ASPECTRATIOCENTEREDMAX = 0x8,
        DD_SCALING_CUSTOM = 0x10,
        DD_SCALING_FORCED_IS = 0x20,
        DD_SCALING_UNPINNED = 0xfe,
        DD_SCALING_UNSPECIFIED = 0xff,
        Default = 0x7fffffff,
    }
    public enum DD_SELECTIVE_FETCH_RESTRICTION
    {
        DD_SELECTIVE_FETCH_RESTRICTION_NONE = 0x0,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_CONFIG_CHANGE_NEEDED = 0x1,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_SCALING_ENABLED = 0x2,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_POSITION_NON_ZERO = 0x3,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_ORIENTATION_UNSUPPORTED = 0x4,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_FLIP_TYPE_UNSUPPORTED = 0x5,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_COUNT_UNSUPPORTED = 0x6,
        DD_SELECTIVE_FETCH_RESTRICTION_PLANE_NOT_DWM = 0x7,
        Default = 0x7fffffff,
    }
    public enum DD_SET_TIMING_ACTION
    {
        TARGET_UNDEFINED = 0x0,
        TARGET_KEEP_ENABLED = 0x1,
        TARGET_DISABLE = 0x2,
        TARGET_ENABLE_FRESH = 0x3,
        TARGET_ENABLE_MODIFIED_TIMING = 0x4,
        TARGET_ENABLE_PRESERVE_TIMING = 0x5,
        TARGET_KEEP_DISABLED = 0x6,
        TARGET_DISABLE_CONFIG_ERROR = 0x7,
        TARGET_KEEP_DISABLED_CONFIG_ERROR = 0x8,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DD_SET_TIMING_PATH_FLAGS
    {
        ProcessPath = 0x1,
        Modified = 0x2,
        Enabled = 0x4,
        IgnoreConnectivity = 0x8,
        PathHasSrcId = 0x10,
        PreserveBootDisplay = 0x20,
    }
    public enum DD_SPI_EVENTS
    {
        DD_SPI_NONE = 0x0,
        DD_SPI_CONNECTION_EVENT = 0x1,
        DD_SPI_LINK_LOSS_EVENT = 0x2,
        DD_SPI_ATR_EVENT = 0x3,
        DD_SPI_PARTIAL_DETECTION_EVENT = 0x4,
        DD_SPI_CP_EVENT = 0x5,
        DD_SPI_CRC_ERROR_EVENT = 0x6,
        DD_SPI_RESOURCE_CHANGE_EVENT = 0x7,
        DD_SPI_PSR_CAPS_CHANGE_EVENT = 0x8,
        DD_SPI_DSC_SINK_ERROR_EVENT = 0x9,
        DD_SPI_STREAM_REGENERATION_STATUS_CHANGE_EVENT = 0xa,
        DD_SPI_MAX_EVENTS = 0xb,
        Default = 0x7fffffff,
    }
    public enum DD_TARGET_DETECT_TYPE
    {
        DD_TARGET_DETECT_UNINITIALIZED = 0x0,
        DD_TARGET_ENABLE_HPD = 0x1,
        DD_TARGET_DISABLE_HPD = 0x2,
        DD_TARGET_DETECT_ONE = 0x3,
        DD_TARGET_DETECT_ALL = 0x4,
        DD_TARGET_DETECT_ALL_ON_PORT = 0x5,
        Default = 0x7fffffff,
    }
    public enum DD_TILED_SCALING
    {
        TILED_SCALING_UNINITIALIZED = 0x0,
        TILED_SCALING_NO_STRETCH = 0x1,
        TILED_SCALING_STRETCH_ENTIRE_DISPLAY = 0x2,
        TILED_SCALING_CLONE_OTHER_DISPLAYS = 0x3,
        Default = 0x7fffffff,
    }
    public enum DD_UNDERRUN_TYPE
    {
        DD_UNDERRUN_TYPE_UNDEFINED = 0x0,
        DD_UNDERRUN_TYPE_HARDUNDERRUN = 0x1,
        DD_UNDERRUN_TYPE_SOFTUNDERRUN = 0x2,
        DD_UNDERRUN_TYPE_PORTUNDERRUN = 0x3,
        DD_UNDERRUN_TYPE_PAVPTEARDOWN = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_VOT
    {
        VGA = 0x1,
        DVI = 0x2,
        HDMI = 0x3,
        DP = 0x4,
        eDP = 0x5,
        MIPI = 0x6,
        Virtual = 0x7,
        WDE = 0x8,
    }
    public enum DD_VSYNC_PROGRAMMING_ERRORS
    {
        DD_PROG_ERR_UNKNOWN = 0x0,
        DD_PROG_ERR_DRIVER = 0x1,
        DD_PROG_ERR_DMC = 0x2,
        DD_PROG_ERR_HARDWARE = 0x3,
        DD_PROG_ERR_OS = 0x4,
        DD_PROG_ERR_BUCKETING = 0x5,
        DD_PROG_ERR_DRV_FLIP_NOT_SUBMITTED = 0x1000,
        DD_PROG_ERR_DRV_HRR_SUBMISSION = 0x1100,
        DD_PROG_ERR_DRV_HRR_ENABLING = 0x1101,
        DD_PROG_ERR_DRV_HRR_DISABLING = 0x1102,
        DD_PROG_ERR_DRV_FLIPQ_DISABLED = 0x1200,
        DD_PROG_ERR_DRV_FLIPQ_PREEMPTED = 0x1201,
        DD_PROG_ERR_DRV_FLIPQ_INVALID_SCANLINE_RANGE = 0x1202,
        DD_PROG_ERR_DRV_FLIPQ_INVALID_DCSTATE = 0x1203,
        DD_PROG_ERR_DRV_FLIPQ_DRAIN = 0x1204,
        DD_PROG_ERR_DRV_CANCEL_ERROR = 0x1205,
        DD_PROG_ERR_DRV_PIPE_DMC_INTERRUPT_NOT_ENABLED = 0x1206,
        DD_PROG_ERR_DRV_PIPE_DMC_INTERRUPT_REQUEST_NOT_SET = 0x1207,
        DD_PROG_ERR_DRV_PC_INCORRECT_DC_STATE = 0x1300,
        DD_PROG_ERR_DRV_PC_DEEP_SLEEP_ALLOWED = 0x1301,
        DD_PROG_ERR_DRV_INVALID_DMC_VERSION = 0x1302,
        DD_PROG_ERR_DMC_HRR_FLIP_PENDING = 0x2100,
        DD_PROG_ERR_DMC_FLIPQ_EXEC_PENDING = 0x2200,
        DD_PROG_ERR_DMC_FLIPQ_EXEC_ERROR = 0x2201,
        DD_PROG_ERR_DMC_HALTED = 0x2202,
        DD_PROG_ERR_HW_PIPE_HUNG = 0x3000,
        DD_PROG_ERR_HW_PLANE_HUNG = 0x3001,
        DD_PROG_ERR_HW_NV12_PLANE_Y_HUNG = 0x3002,
        DD_PROG_ERR_HW_NV12_PLANE_UV_HUNG = 0x3003,
        DD_PROG_ERR_HW_CMTG_ENABLED_CMTG_HUNG = 0x3004,
        DD_PROG_ERR_HW_CMTG_ENABLED_PIPE_HUNG = 0x3005,
        DD_PROG_ERR_HW_PORT_ENABLE_CMTG_HUNG = 0x3006,
        DD_PROG_ERR_OS_QUEUE_SIZE_EXCEEDED = 0x4200,
        Default = 0x7fffffff,
    }
    public enum DD_VSYNC_REPORTING_ERRORS
    {
        DD_REPORT_ERR_UNKNOWN = 0x0,
        DD_REPORT_ERR_DRIVER = 0x1,
        DD_REPORT_ERR_DMC = 0x2,
        DD_REPORT_ERR_HARDWARE = 0x3,
        DD_REPORT_ERR_OS = 0x4,
        DD_REPORT_ERR_BUCKETING = 0x5,
        DD_REPORT_ERR_DRV_VBI_NOT_ENABLED = 0x1000,
        DD_REPORT_ERR_DRV_VBI_NOT_REPORTED = 0x1001,
        DD_REPORT_ERR_DRV_VBI_WRONG_TARGET_ID_REPORTED = 0x1002,
        DD_REPORT_ERR_HW_VBI_NOT_GENERATED = 0x3000,
        DD_REPORT_ERR_HW_FLIP_DONE_NOT_GENERATED = 0x3001,
        DD_REPORT_ERR_OS_CTRL_INT_DISABLED = 0x4000,
        DD_REPORT_ERR_OS_INT_TARGET_PID_GREATER_THAN_TIMEOUT_PID = 0x4001,
        DD_REPORT_ERR_BUCKETING_MISSING_OS_VSYNC_HISTORY = 0x5000,
        Default = 0x7fffffff,
    }
    public enum DD_WAKELOCK_REQUEST
    {
        DD_WAKELOCK_REQUEST_NONE = 0x0,
        DD_WAKELOCK_REQUEST_ENABLE = 0x1,
        DD_WAKELOCK_REQUEST_DISABLE = 0x2,
        DD_WAKELOCK_REQUEST_ACQUIRE = 0x3,
        DD_WAKELOCK_REQUEST_RELEASE = 0x4,
        Default = 0x7fffffff,
    }
    public enum DD_WAKELOCK_THREAD
    {
        DD_WAKELOCK_THREAD_NONE = 0x0,
        DD_WAKELOCK_THREAD_MODESET = 0x1,
        DD_WAKELOCK_THREAD_WORKITEM = 0x2,
        DD_WAKELOCK_THREAD_ESCAPE = 0x3,
        DD_WAKELOCK_THREAD_BRIGHTNESS_CHANGE = 0x4,
        DD_WAKELOCK_THREAD_AC_DC_POWER_PLAN_CHANGE = 0x5,
        DD_WAKELOCK_THREAD_VSYNC_CONTROL = 0x6,
        DD_WAKELOCK_THREAD_GAMMA = 0x7,
        DD_WAKELOCK_THREAD_CURSOR = 0x8,
        DD_WAKELOCK_THREAD_POWER_EVENTS_UNLOAD = 0x9,
        DD_WAKELOCK_THREAD_VALSIM = 0xa,
        DD_WAKELOCK_THREAD_SCANLINE_INTR_HANDLING = 0xb,
        DD_WAKELOCK_THREAD_PC_HANDLING = 0xc,
        DD_WAKELOCK_THREAD_MAX = 0xd,
        Default = 0x7fffffff,
    }
    public enum DDSTATUS
    {
        DDS_UNSUCCESSFUL = unchecked((int)0x80000000),
        DDS_NO_MEMORY = unchecked((int)0x80000001),
        DDS_INVALID_PARAM = unchecked((int)0x80000002),
        DDS_NULL_PARAM = unchecked((int)0x80000003),
        DDS_TIMEOUT = unchecked((int)0x80000004),
        DDS_I2C_DEVICE_DOES_NOT_EXIST = unchecked((int)0x80000005),
        DDS_I2C_DATA_READ_ERROR = unchecked((int)0x80000006),
        DDS_I2C_DATA_WRITE_ERROR = unchecked((int)0x80000007),
        DDS_BUFFER_TOO_SMALL = unchecked((int)0x80000008),
        DDS_BUFFER_OVERFLOW = unchecked((int)0x80000009),
        DDS_SET_TIMING_MONITOR_NOT_CONNECTED = unchecked((int)0x8000000a),
        DDS_ERROR_UNKNOWN = unchecked((int)0x8000000b),
        DDS_BUSY = unchecked((int)0x8000000c),
        DDS_NOT_SUPPORTED = unchecked((int)0x8000000d),
        DDS_DATA_OVERFLOW = unchecked((int)0x8000000e),
        DDS_DEVICE_NOT_READY = unchecked((int)0x8000000f),
        DDS_MONITOR_NOT_CONNECTED = unchecked((int)0x80000010),
        DDS_INTERFACE_NOT_IMPLEMENTED = unchecked((int)0x80000011),
        DDS_INVALID_DATA = unchecked((int)0x80000012),
        DDS_INVALID_CONTEXT = unchecked((int)0x80000013),
        DDS_DATA_ERROR = unchecked((int)0x80000014),
        DDS_INVALID_LEVEL = unchecked((int)0x80000015),
        DDS_INVALID_OPERATION = unchecked((int)0x80000016),
        DDS_CRC_ERROR = unchecked((int)0x80000017),
        DDS_LOCKING_FAILURE = unchecked((int)0x80000018),
        DDS_NACK_RECVD = unchecked((int)0x80000019),
        DDS_NO_RESOURCE = unchecked((int)0x8000001a),
        DDS_INVALID_ESC_VER = unchecked((int)0x8000001b),
        DDS_INVALID_REQ = unchecked((int)0x8000001c),
        DDS_USER_APC = unchecked((int)0x8000001d),
        DDS_ABANDONED = unchecked((int)0x8000001e),
        DDS_NO_RECOMMEND_FUNCTIONAL_VIDPN = unchecked((int)0x8000001f),
        DDS_MONITOR_NO_MORE_DESCRIPTOR_DATA = unchecked((int)0x80000020),
        DDS_MONITOR_NO_DESCRIPTOR_DATA = unchecked((int)0x80000021),
        DDS_OBJECT_NAME_NOT_FOUND = unchecked((int)0x80000022),
        DDS_FEATURE_SKU_DISABLED = unchecked((int)0x80000023),
        DDS_WRITEBACK_NOT_SUPPORTED = unchecked((int)0x80000024),
        DDS_INVALID_PATH = unchecked((int)0x80000025),
        DDS_INVALID_COLOR_ENCODING = unchecked((int)0x80000026),
        DDS_MPO_ACTIVE_LEGACY_OVERLAY_NOT_SUPPORTED = unchecked((int)0x80000027),
        DDS_VIRTUAL_PIPE_ACTIVE = unchecked((int)0x80000028),
        DDS_3D_LUT_NOT_SUPPORTED_IN_HDR = unchecked((int)0x80000029),
        DDS_CSME_IO_TRANSACTION_FAILURE = unchecked((int)0x8000002a),
        DDS_CSME_IO_OPERATION_FAILURE = unchecked((int)0x8000002b),
        DDS_FORCED_IS_ACTIVE_OVERLAY_NOT_SUPPORTED = unchecked((int)0x8000002c),
        DDS_UNSUPPORTED_SCALING = unchecked((int)0x8000002d),
        DDS_SYNCRONIZATION_FAILED = unchecked((int)0x8000002e),
        DDS_ACCESS_DENIED = unchecked((int)0x8000002f),
        DDS_GENLOCK_NOT_SUPPORTED = unchecked((int)0x80000030),
        DDS_DISPLAY_NOT_ACTIVE = unchecked((int)0x80000031),
        DDS_DMRRS_NOT_POSSIBLE = unchecked((int)0x80000032),
        DDS_VRR_NOT_SUPPORTED = unchecked((int)0x80000033),
        DDS_LRR_NOT_SUPPORTED = unchecked((int)0x80000034),
        DDS_DMRRS_NOT_SUPPORTED = unchecked((int)0x80000035),
        DDS_INVALID_ADAPTER = unchecked((int)0x80000036),
        DDS_HW_CURSOR_NOT_POSSIBLE = unchecked((int)0x80000037),
        DDS_UNSUPPORTED_TARGET = unchecked((int)0x80000038),
        DDS_EDID_CORRUPTED = unchecked((int)0x80000039),
        DDS_GENLOCK_NO_COMMON_MODE = unchecked((int)0x8000003a),
        DDS_GENLOCK_NON_IDENTICAL_DP_SINK_CAPS = unchecked((int)0x8000003b),
        DDS_INVALID_TARGET_ID = unchecked((int)0x8000003c),
        DDS_INVALID_DISPLAY_COUNT_FOR_GENLOCK = unchecked((int)0x8000003d),
        DDS_HDCP_MAX_DEPTH_EXCEEDED = unchecked((int)0x8000003e),
        DDS_HDCP_MAX_DEVICES_EXCEEDED = unchecked((int)0x8000003f),
        DDS_GENLOCK_ESCAPE_INVALID_USER_MEMORY_FOR_TARGET_MODE_LIST = unchecked((int)0x80000040),
        __DD_STATUS_RANGE_GENERIC_FAILURE_MAX = unchecked((int)0x80000041),
        __DD_STATUS_RANGE_OSL_START = unchecked((int)0x80000101),
        DDS_INVALID_PC_EVENT = unchecked((int)0x80000102),
        DDS_MODES_UNSUPPORTED_MODE = unchecked((int)0x80000103),
        DDS_MODES_INVALID_RR_RANGE = unchecked((int)0x80000104),
        DDS_MODES_UNSUPPORTED_FEATURE = unchecked((int)0x80000105),
        __DD_STATUS_RANGE_OSL_FLIP_START = unchecked((int)0x80000201),
        DDS_OSL_VRR_DC_BAL_COUNTER_MISMATCH = unchecked((int)0x80000202),
        DDS_OSL_LAYER_NOT_ACTIVE = unchecked((int)0x80000203),
        __DD_STATUS_RANGE_OSL_FLIP_MAX = unchecked((int)0x80000204),
        __DD_STATUS_RANGE_OSL_DVM_START = unchecked((int)0x80000301),
        DDS_DVM_MPO_ON_COLLAGE_NOT_SUPPORTED = unchecked((int)0x80000302),
        DDS_DVM_MPO_MULTIPIPE_PATH_NOT_SUPPORTED = unchecked((int)0x80000303),
        DDS_DVM_MODE_NOT_FOUND = unchecked((int)0x80000304),
        DDS_DVM_MPO_ON_ROTATION_NOT_SUPPORTED_FOR_MULTIPIPE_DISPLAYS = unchecked((int)0x80000305),
        DDS_DVM_PIPE_NOT_AVAILABLE = unchecked((int)0x80000306),
        DDS_DVM_MPO_NOT_SUPPORTED_FOR_LOCKED_DISPLAY = unchecked((int)0x80000307),
        DDS_DVM_MULTIPLANE_SCALER_NOT_SUPPORTED_FOR_JOINED_DISPLAYS = unchecked((int)0x80000308),
        DDS_DVM_MPO_NOT_SUPPORTED_FOR_PIPE_JOINED_AND_TILED_WITH_YUV420_OUTPUT_FORMAT = unchecked((int)0x80000309),
        __DD_STATUS_RANGE_OSL_DVM_MAX = unchecked((int)0x8000030a),
        __DD_STATUS_RANGE_OSL_MAX = unchecked((int)0x8000030b),
        __DD_STATUS_RANGE_DPL_START = unchecked((int)0x90000001),
        DDS_DPL_VBT_NO_ENCODERS_FOUND = unchecked((int)0x90000002),
        DDS_DPL_VBT_PARSING_ERROR = unchecked((int)0x90000003),
        DDS_DPL_INVALID_MONITOR_DESC_TAG = unchecked((int)0x90000004),
        DDS_DPL_INVALID_VIC_ID = unchecked((int)0x90000005),
        DDS_DPL_INVALID_VBT_VERSION = unchecked((int)0x90000006),
        DDS_DPL_INVALID_VBT_DATA = unchecked((int)0x90000007),
        DDS_DPL_DETECTION_INCOMPLETE = unchecked((int)0x90000008),
        DDS_DPL_INVALID_PORT = unchecked((int)0x90000009),
        DDS_DPL_INVALID_PIPE = unchecked((int)0x9000000a),
        DDS_DPL_INVALID_PROTOCOL = unchecked((int)0x9000000b),
        DDS_DPL_INVALID_CONNECTOR = unchecked((int)0x9000000c),
        DDS_DPL_FAILED_HAL_PROGRAMMING = unchecked((int)0x9000000d),
        DDS_DPL_INVALID_HAL_DATA = unchecked((int)0x9000000e),
        DDS_DPL_FAILED_EDID_READ = unchecked((int)0x9000000f),
        DDS_DPL_EDID_PARSE_ERROR = unchecked((int)0x90000010),
        DDS_DPL_NO_SINK = unchecked((int)0x90000011),
        DDS_DPL_SCANOUT_HUNG = unchecked((int)0x90000012),
        DDS_DPL_BLOCK_NOT_FOUND = unchecked((int)0x90000013),
        DDS_DPL_DSC_INVALID_PARAMS = unchecked((int)0x90000014),
        DDS_DPL_DSC_INVALID_SLICECOUNT = unchecked((int)0x90000015),
        DDS_DPL_DSC_INVALID_SLICEWIDTH = unchecked((int)0x90000016),
        DDS_DPL_DSC_INVALID_BPP = unchecked((int)0x90000017),
        __DD_STATUS_RANGE_DPL_GENERIC_MAX = unchecked((int)0x90000018),
        __DD_STATUS_RANGE_DPL_DP_START = unchecked((int)0x90001389),
        DDS_DPL_DP_AUX_FAILURE = unchecked((int)0x9000138a),
        DDS_DPL_DP_FAILED_BASIC_DPCD_CAPS = unchecked((int)0x9000138b),
        DDS_DPL_DP_FAILED_EXTENDED_DPCD_CAPS = unchecked((int)0x9000138c),
        DDS_DPL_DP_FAILED_EDP_DPCD_CAPS = unchecked((int)0x9000138d),
        DDS_DPL_DP_FAILED_LTTPR_DPCD_CAPS = unchecked((int)0x9000138e),
        DDS_DPL_DP_INVALID_LINK_RATE = unchecked((int)0x9000138f),
        DDS_DPL_DP_INVALID_LANE_COUNT = unchecked((int)0x90001390),
        DDS_DPL_DP_LINK_TRAINING_FAILED = unchecked((int)0x90001391),
        DDS_DPL_DP_LT_CLOCK_RECOVERY_FAILED = unchecked((int)0x90001392),
        DDS_DPL_DP_LT_FAILED_TO_GET_NEXT_LINKRATE = unchecked((int)0x90001393),
        DDS_DPL_DP_LT_MAX_CLK_REC_ITER_REACHED = unchecked((int)0x90001394),
        DDS_DPL_DP_LT_CHAN_EQ_FAILED = unchecked((int)0x90001395),
        DDS_DPL_DP_LT_MAX_EQ_ITER_REACHED = unchecked((int)0x90001396),
        DDS_DPL_DP_GET_REQUESTED_DRIVE_SETTING_FAILED = unchecked((int)0x90001397),
        DDS_DPL_DP_ADJUST_DRIVE_SETTING_FAILED = unchecked((int)0x90001398),
        DDS_DPL_DP_INSUFFICIENT_LINK_BW = unchecked((int)0x90001399),
        DDS_DPL_DP_FAILED_LINK_CONFIG_SET = unchecked((int)0x9000139a),
        DDS_DPL_DP_FAILED_SET_ASSR_CFG = unchecked((int)0x9000139b),
        DDS_DPL_DP_FAILED_DPCD_READ = unchecked((int)0x9000139c),
        DDS_DPL_DP_FAILED_DPCD_WRITE = unchecked((int)0x9000139d),
        DDS_DPL_DP_LINK_LOST = unchecked((int)0x9000139e),
        DDS_DPL_DP_LINK_LOST_POST_MODESET = unchecked((int)0x9000139f),
        DDS_DPL_DP_LQA_FAILED = unchecked((int)0x900013a0),
        DDS_DPL_DP_ACT_HANDLING_ERROR = unchecked((int)0x900013a1),
        DDS_DPL_DP_PREPARE_FOR_ENABLE_FAILED = unchecked((int)0x900013a2),
        DDS_DPL_DP_DSC_CONFIG_ENABLE_FAILED = unchecked((int)0x900013a3),
        DDS_DPL_DP_LTTPR_LINK_TRAIN_FAILED = unchecked((int)0x900013a4),
        DDS_DPL_DP_FAILED_VRR_CONFIG_SET = unchecked((int)0x900013a5),
        DDS_DPL_DP_FEC_ENABLE_FAILED = unchecked((int)0x900013a6),
        DDS_DPL_DP_FEC_STATUS_NOT_UPDATED_BY_DPRX = unchecked((int)0x900013a7),
        DDS_DPL_DP_SIDEBAND_MSG_ID_MISMATCH = unchecked((int)0x900013a8),
        DDS_DPL_DP_SIDEBAND_INVALID_RAD = unchecked((int)0x900013a9),
        DDS_DPL_DP_SIDEBAND_INVALID_HEADER = unchecked((int)0x900013aa),
        DDS_DPL_DP_SIDEBAND_SEND_MSG_FAILURE = unchecked((int)0x900013ab),
        DDS_DPL_DP_SIDEBAND_REPLY_TIMEOUT = unchecked((int)0x900013ac),
        DDS_DPL_DP_SIDEBAND_INVALID_REPLY = unchecked((int)0x900013ad),
        DDS_DPL_DP_SIDEBAND_READ_MSG_FAILURE = unchecked((int)0x900013ae),
        DDS_DPL_DP_SIDEBAND_INVALID_HEADER_CRC = unchecked((int)0x900013af),
        DDS_DPL_DP_SIDEBAND_INVALID_BODY_CRC = unchecked((int)0x900013b0),
        DDS_DPL_FAILED_TO_ENABLE_STREAM = unchecked((int)0x900013b1),
        DDS_DPL_FAILED_SET_BANDWIDTH = unchecked((int)0x900013b2),
        DDS_SINK_PSR_NOTSUPPORTED = unchecked((int)0x900013b3),
        DDS_GTC_SET_CONTROL_FAILED = unchecked((int)0x900013b4),
        DDS_PSR_DISABLE_FAILED = unchecked((int)0x900013b5),
        DDS_PSR_CONTEXT_NOT_INITIALIZED = unchecked((int)0x900013b6),
        DDS_DPL_DP_LT_CLK_REC_SAME_ADJ_MAX_ITER_REACHED = unchecked((int)0x900013b7),
        DDS_DPL_DP_LT_CLK_REC_MAX_VSWING_REACHED = unchecked((int)0x900013b8),
        DDS_DPL_MSO_MODE_NOT_SUPPORTED = unchecked((int)0x900013b9),
        DDS_DPL_DP_INVALID_BRANCH = unchecked((int)0x900013ba),
        DDS_DPL_DP_FAILED_DISABLE_DISPLAY = unchecked((int)0x900013bb),
        DDS_DPL_HDMI_DSC_INVALID_HCTOTAL = unchecked((int)0x900013bc),
        DDS_DPL_DP_TUNNEL_BW_FAILURE = unchecked((int)0x900013bd),
        DDS_DPL_DP_INSUFFICIENT_TUNNEL_BW = unchecked((int)0x900013be),
        DDS_PANELREPLAY_ENABLED = unchecked((int)0x900013bf),
        DDS_PANELREPLAY_DISABLED = unchecked((int)0x900013c0),
        DDS_PANELREPLAY_ENABLE_FAILED = unchecked((int)0x900013c1),
        DDS_DPL_PCON_HDMI_SINK_LT_FAILED = unchecked((int)0x900013c2),
        DDS_DPL_DP_LT_CLOCK_DATA_SWITCH_FAILED = unchecked((int)0x900013c3),
        DDS_DPL_DP_LT_IN_PROGRESS = unchecked((int)0x900013c4),
        __DD_STATUS_RANGE_DPL_DP_MAX = unchecked((int)0x900013c5),
        __DD_STATUS_RANGE_DPL_HDCP_START = unchecked((int)0x90001b59),
        DDS_DPL_HDCP_REVOKED_DEVICE_ATTACHED = unchecked((int)0x90001b5a),
        DDS_DPL_HDCP_INVALID_KSV = unchecked((int)0x90001b5b),
        DDS_DPL_HDCP_SEND_AN_FAILED = unchecked((int)0x90001b5c),
        DDS_DPL_HDCP_RECEIVE_BKSV_FAILED = unchecked((int)0x90001b5d),
        DDS_DPL_HDCP_RECEIVE_RI_FAILED = unchecked((int)0x90001b5e),
        DDS_DPL_HDCP_LINK_INTEGRITY_FAILED = unchecked((int)0x90001b5f),
        DDS_DPL_HDCP_UNSUPPORTED_SINK = unchecked((int)0x90001b60),
        DDS_DPL_HDCP_RI_MISMATCH = unchecked((int)0x90001b61),
        DDS_DPL_HDCP_MAX_TOPOLOGY_EXCEEDED = unchecked((int)0x90001b62),
        DDS_DPL_HDCP_INVALID_SEQ_NUM = unchecked((int)0x90001b63),
        DDS_DPL_HDCP_SEQ_NUM_ROLL_OVER = unchecked((int)0x90001b64),
        __DD_STATUS_RANGE_DPL_HDCP_MAX = unchecked((int)0x90001b65),
        __DD_STATUS_RANGE_DPL_HDMI_START = unchecked((int)0x90001f41),
        DDS_DPL_HDMI_INVALID_SINK_VERSION = unchecked((int)0x90001f42),
        DDS_DPL_HDMI_SCRAMBLING_ENABLE_FAILED = unchecked((int)0x90001f43),
        DDS_DPL_HDMI21_MODE_NOT_SUPPORTED = unchecked((int)0x90001f44),
        DDS_DPL_HDMI_FRL_LINKTRAINING_FAILED = unchecked((int)0x90001f45),
        DDS_DPL_HDMI_PREPARE_FOR_LT_FAILED = unchecked((int)0x90001f46),
        DDS_DPL_HDMI_LT_FAILED_TO_GET_NEXT_LINKRATE = unchecked((int)0x90001f47),
        DDS_DPL_HDMI_INVALID_SINK_PARAMS = unchecked((int)0x90001f48),
        DDS_DPL_HDMI_FRL_LTS2_FAILED = unchecked((int)0x90001f49),
        DDS_DPL_HDMI_FRL_LTS3_FAILED = unchecked((int)0x90001f4a),
        DDS_DPL_HDMI_SUPPORTED_FRL_RATES_EXHAUSTED = unchecked((int)0x90001f4b),
        DDS_DPL_HDMI_LTS3_TIMEOUT = unchecked((int)0x90001f4c),
        DDS_DPL_HDMI_FAILED_TO_GET_NEXT_FRLRATE = unchecked((int)0x90001f4d),
        DDS_DPL_HDMI_SINK_NOT_IN_FLTREADY_STATE = unchecked((int)0x90001f4e),
        DDS_DPL_HDMI_SINK_FFE_UPDATE_FAILED = unchecked((int)0x90001f4f),
        DDS_DPL_HDMI_SINK_FLR_START_FAILED = unchecked((int)0x90001f50),
        DDS_DPL_HDMI_SINK_FLT_UPDATE_FAILED = unchecked((int)0x90001f51),
        DDS_DPL_HDMI_FRL_BW_TBBLANK_EXCEEDS_HBLANK_AUDIOMIN = unchecked((int)0x90001f52),
        DDS_DPL_HDMI_FRL_BW_TBLANK_MIN_EXCEEDS_TBLANK_REF = unchecked((int)0x90001f53),
        DDS_DPL_HDMI_FRL_BW_TB_BORROW_REQ_EXCEEDS_MAX_TB_BORROW_ALLOWED = unchecked((int)0x90001f54),
        DDS_DPL_HDMI_FRL_BW_PAYLOAD_UTILIZATION_EXCEEDS_PAYLOAD_CAPACITY = unchecked((int)0x90001f55),
        DDS_DPL_HDMI_FRL_NOT_SUPPORTED_BY_SINK = unchecked((int)0x90001f56),
        __DD_STATUS_RANGE_DPL_HDMI_MAX = unchecked((int)0x90001f57),
        __DD_STATUS_RANGE_DPL_MIPI_DSI_START = unchecked((int)0x90002329),
        DDS_DPL_MIPI_DSI_INVALID_LINK_RATE = unchecked((int)0x9000232a),
        __DD_STATUS_RANGE_DPL_MIPI_DSI_MAX = unchecked((int)0x9000232b),
        __DD_STATUS_RANGE_DPL_MAX = unchecked((int)0x9000232c),
        __DD_STATUS_RANGE_DHL_START = unchecked((int)0xa0000001),
        DDS_DHL_INTERFACE_UNSUPPORTED_ON_GEN = unchecked((int)0xa0000002),
        DDS_DHL_INVALID_PORT = unchecked((int)0xa0000003),
        DDS_DHL_INVALID_PIPE = unchecked((int)0xa0000004),
        DDS_DHL_INVALID_PLANE = unchecked((int)0xa0000005),
        DDS_DHL_INVALID_TRANSPORT = unchecked((int)0xa0000006),
        DDS_DHL_PPS_ERROR = unchecked((int)0xa0000007),
        DDS_DHL_INVALID_DIP_TYPE = unchecked((int)0xa0000008),
        DDS_DHL_INVALID_CDCLOCK_FREQ = unchecked((int)0xa0000009),
        DDS_DHL_INVALID_VOLTAGE_INFO = unchecked((int)0xa000000a),
        DDS_DHL_INVALID_DMC_FW_SIZE = unchecked((int)0xa000000b),
        DDS_DHL_INVALID_IRQL = unchecked((int)0xa000000c),
        DDS_DHL_INVALID_DC_STATE = unchecked((int)0xa000000d),
        DDS_DHL_AUX_BUSY = unchecked((int)0xa000000e),
        DDS_DHL_AUX_UNKNOWN = unchecked((int)0xa000000f),
        DDS_DHL_AUX_NOTSUPPORTED = unchecked((int)0xa0000010),
        DDS_DHL_AUX_OPEN = unchecked((int)0xa0000011),
        DDS_DHL_AUX_DATA_READ_ERROR = unchecked((int)0xa0000012),
        DDS_DHL_AUX_DATA_WRITE_ERROR = unchecked((int)0xa0000013),
        DDS_DHL_AUX_INVALID_CHANNEL = unchecked((int)0xa0000014),
        DDS_DHL_AUX_MORE_DATA = unchecked((int)0xa0000015),
        DDS_DHL_AUX_DEFER = unchecked((int)0xa0000016),
        DDS_DHL_AUX_TIMEOUT = unchecked((int)0xa0000017),
        DDS_DHL_I2C_BUSY = unchecked((int)0xa0000018),
        DDS_DHL_I2C_NACK_RECIEVED = unchecked((int)0xa0000019),
        DDS_DHL_I2C_TIMEOUT = unchecked((int)0xa000001a),
        DDS_DHL_I2C_NOTSUPPORTED = unchecked((int)0xa000001b),
        DDS_DHL_I2C_ERROR_OPEN = unchecked((int)0xa000001c),
        DDS_DHL_I2C_ERROR_CLOSE = unchecked((int)0xa000001d),
        DDS_DHL_I2C_ERROR_SEGMENT_POINTER_WRITE = unchecked((int)0xa000001e),
        DDS_DHL_I2C_INVALID_PARAM = unchecked((int)0xa000001f),
        DDS_DHL_I2C_ACQUIRE_FAILED = unchecked((int)0xa0000020),
        DDS_DHL_I2C_BITBASHING_READ_DDC_ERROR = unchecked((int)0xa0000021),
        DDS_DHL_I2C_GMBUS_HW_NOT_READY = unchecked((int)0xa0000022),
        DDS_DHL_I2C_GMBUS_HW_NOT_ENTERING_WAIT_PHASE = unchecked((int)0xa0000023),
        DDS_DHL_TRANS_INVALID_TIMINGS = unchecked((int)0xa0000024),
        DDS_DHL_TRANS_INVALID_PARAM = unchecked((int)0xa0000025),
        DDS_DHL_TRANS_TIMEOUT = unchecked((int)0xa0000026),
        DDS_DHL_TRANS_INVALID_STATE = unchecked((int)0xa0000027),
        DDS_DHL_DBUF_PWRSTATE_ERROR = unchecked((int)0xa0000028),
        DDS_PG_DISTRIB_ERROR = unchecked((int)0xa0000029),
        DDS_PG_NOT_POWERED = unchecked((int)0xa000002a),
        DDS_PG_INVALID_PARAM = unchecked((int)0xa000002b),
        DDS_PIPE_INVALID_PIPE_SRCSZ = unchecked((int)0xa000002c),
        DDS_PLL_NOT_LOCKED = unchecked((int)0xa000002d),
        DDS_PLL_NOT_UNLOCKED = unchecked((int)0xa000002e),
        DDS_PLL_POWER_NOT_ENABLED = unchecked((int)0xa000002f),
        DDS_PLL_POWER_NOT_DISABLED = unchecked((int)0xa0000030),
        DDS_PLL_INVALID_LINK_RATE = unchecked((int)0xa0000031),
        DDS_PLL_INVALID_PLL = unchecked((int)0xa0000032),
        DDS_PLL_INVALID_DIVIDERS = unchecked((int)0xa0000033),
        DDS_DHL_PORT_INVALID_PATTERN = unchecked((int)0xa0000034),
        DDS_DHL_PORT_INVALID_DRIVE_SETTING = unchecked((int)0xa0000035),
        DDS_DHL_PORT_DISABLE_TIMEOUT = unchecked((int)0xa0000036),
        DDS_DHL_PORT_BUFFER_IDLE = unchecked((int)0xa0000037),
        DDS_DHL_PORT_INVALID_LANES = unchecked((int)0xa0000038),
        DDS_DHL_PORT_DP_ACT_SENT_ERROR = unchecked((int)0xa0000039),
        DDS_DHL_PORT_DP_ACT_HANDLING_ERROR = unchecked((int)0xa000003a),
        DDS_DHL_PORT_DP_FEC_SENT_ERROR = unchecked((int)0xa000003b),
        DDS_DHL_PORT_DP_FEC_HANDLING_ERROR = unchecked((int)0xa000003c),
        DDS_DHL_PORT_POWERUP_LANE_FAILED = unchecked((int)0xa000003d),
        DDS_DHL_PORT_POWERDOWN_LANE_FAILED = unchecked((int)0xa000003e),
        DDS_DHL_RM_NUM_PLANE_EXCEEDS_LIMIT = unchecked((int)0xa000003f),
        DDS_DHL_RM_NUM_SCALARS_EXCEEDS_LIMIT = unchecked((int)0xa0000040),
        DDS_DHL_RM_INVALID_PIXEL_FORMAT = unchecked((int)0xa0000041),
        DDS_DHL_RM_INVALID_PLANE_INDEX = unchecked((int)0xa0000042),
        DDS_DHL_RM_ASYNC_FLIP_NOT_SUPPORTED = unchecked((int)0xa0000043),
        DDS_DHL_RM_ASYNC_FLIP_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000044),
        DDS_DHL_RM_ALPHA_BLEND_NOT_SUPPORTED = unchecked((int)0xa0000045),
        DDS_DHL_RM_SURF_WIDTH_HEIGHT_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000046),
        DDS_DHL_RM_SURF_SIZE_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000047),
        DDS_DHL_RM_AUX_SURF_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000048),
        DDS_DHL_RM_SURF_OFFSET_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000049),
        DDS_DHL_RM_VFLIP_NOT_SUPPORTED = unchecked((int)0xa000004a),
        DDS_DHL_RM_VFLIP_HW_RESTRICTION_NOT_MET = unchecked((int)0xa000004b),
        DDS_DHL_RM_HFLIP_NOT_SUPPORTED = unchecked((int)0xa000004c),
        DDS_DHL_RM_HFLIP_HW_RESTRICTION_NOT_MET = unchecked((int)0xa000004d),
        DDS_DHL_RM_ROTATION_NOT_SUPPORTED = unchecked((int)0xa000004e),
        DDS_DHL_RM_ROTATION_DISABLED_FOR_RGB_SW_POLICY = unchecked((int)0xa000004f),
        DDS_DHL_RM_ROTATION_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000050),
        DDS_DHL_RM_SCALE_NOT_SUPPORTED = unchecked((int)0xa0000051),
        DDS_DHL_RM_SCALE_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000052),
        DDS_DHL_RM_HIGH_Q_SCALE_NOT_SUPPORTED = unchecked((int)0xa0000053),
        DDS_DHL_RM_BILINEAR_SCALE_NOT_SUPPORTED = unchecked((int)0xa0000054),
        DDS_DHL_RM_HORZ_STRETCH_FACTOR_EXCEEDS_LIMIT = unchecked((int)0xa0000055),
        DDS_DHL_RM_HORZ_SHRINK_FACTOR_EXCEEDS_LIMIT = unchecked((int)0xa0000056),
        DDS_DHL_RM_VERT_STRETCH_FACTOR_EXCEEDS_LIMIT = unchecked((int)0xa0000057),
        DDS_DHL_RM_VERT_SHRINK_FACTOR_EXCEEDS_LIMIT = unchecked((int)0xa0000058),
        DDS_DHL_RM_HW_WA_RESTRICTION_NOT_MET = unchecked((int)0xa0000059),
        DDS_DHL_RM_COLOR_CONFIG_NOT_SUPPORTED = unchecked((int)0xa000005a),
        DDS_DHL_HDCP_AUTH_FAILURE = unchecked((int)0xa000005b),
        DDS_DHL_HDCP_ENCRYPTION_FAILURE = unchecked((int)0xa000005c),
        DDS_DHL_HDCP_KEYLOAD_FAILURE = unchecked((int)0xa000005d),
        DDS_DHL_HDCP_AN_GENERATION_FAILURE = unchecked((int)0xa000005e),
        DDS_DHL_HDCP_BKSV_UPDATE_FAILURE = unchecked((int)0xa000005f),
        DDS_DHL_HDCP_RI_NOT_READY = unchecked((int)0xa0000060),
        DDS_DHL_HDCP_RI_MISMATCH = unchecked((int)0xa0000061),
        DDS_DHL_HDCP_REPEATER_STATE_UPDATE_FAILURE = unchecked((int)0xa0000062),
        DDS_DHL_HDCP_COMPUTE_V_FAILURE = unchecked((int)0xa0000063),
        DDS_DHL_HDCP_VPRIME_MISMATCH = unchecked((int)0xa0000064),
        DDS_DHL_INVALID_PWMCTRL_TYPE = unchecked((int)0xa0000065),
        DDS_DHL_RM_WM_EXCEEDED_FIFO = unchecked((int)0xa0000066),
        DDS_DHL_RM_DBUF_EXCEEDED_PIPE_ALLOC = unchecked((int)0xa0000067),
        DDS_DHL_3D_LUT_INVALID_PIPE = unchecked((int)0xa0000068),
        DDS_DHL_DSI_LINK_READY_TIMEOUT = unchecked((int)0xa0000069),
        DDS_DHL_DCS_HEADER_CREDIT_NOT_AVAILABLE = unchecked((int)0xa000006a),
        DDS_DHL_DCS_PAYLOAD_CREDIT_NOT_AVAILABLE = unchecked((int)0xa000006b),
        DDS_DHL_DSI_BLOCK_CLEAR_TIMEOUT = unchecked((int)0xa000006c),
        DDS_DHL_RM_PIPE_NOT_AVAILABLE = unchecked((int)0xa000006d),
        DDS_DHL_DYNAMICCD_UNSUPPORTED_PIXELCLOCK = unchecked((int)0xa000006e),
        DDS_DHL_INVALID_STREAM_STATUS = unchecked((int)0xa000006f),
        DDS_DHL_RM_BANDWIDTH_EXCEEDED = unchecked((int)0xa0000070),
        DDS_DHL_FLIP_QUEUE_QUEUE_NOT_FOUND = unchecked((int)0xa0000071),
        DDS_DHL_FLIP_QUEUE_FULL = unchecked((int)0xa0000072),
        DDS_DHL_RM_CUS_HW_RESTRICTION_NOT_MET = unchecked((int)0xa0000073),
        DDS_DHL_RM_CUS_MAX_PLANE_SIZE_EXCEEDS_LIMIT = unchecked((int)0xa0000074),
        DDS_DHL_FLIP_QUEUE_QUEUE_NOT_INITIALIZED = unchecked((int)0xa0000075),
        DDS_DHL_AUX_NOT_DONE = unchecked((int)0xa0000076),
        DDS_DHL_FLIP_QUEUE_PREEMPTION_FAILED = unchecked((int)0xa0000077),
        DDS_DHL_VRR_DC_BAL_COUNTER_NOT_READY = unchecked((int)0xa0000078),
        DDS_DHL_RM_PM_DMD_REQ_TIMEOUT = unchecked((int)0xa0000079),
        DDS_DHL_PORT_D2D_LINK_STATE_ERROR = unchecked((int)0xa000007a),
        DDS_DHL_PORT_SOC_PHY_READY_TIMEOUT = unchecked((int)0xa000007b),
        DDS_DHL_PORT_REFCLK_ACK_STATE_TIMEOUT = unchecked((int)0xa000007c),
        DDS_DHL_PORT_POWERDOWN_UPDATE_TIMEOUT = unchecked((int)0xa000007d),
        DDS_DHL_PORT_RESET_STATE_TIMEOUT = unchecked((int)0xa000007e),
        DDS_DHL_PORT_PCLK_PLL_ACK_STATE_TIMEOUT = unchecked((int)0xa000007f),
        DDS_DHL_PORT_MACCLK_TURNON_TIMEOUT = unchecked((int)0xa0000080),
        DDS_DHL_PORT_MACCLK_TURNOFF_TIMEOUT = unchecked((int)0xa0000081),
        DDS_DHL_PORT_RATE_CALIB_DONE_TIMEOUT = unchecked((int)0xa0000082),
        DDS_DHL_PORT_POWERDOWN_TO_RDY_TIMEOUT = unchecked((int)0xa0000083),
        DDS_DHL_PORT_RESET_START_TIMEOUT = unchecked((int)0xa0000084),
        DDS_DHL_RM_DBUF_VALIDATION_FAILED = unchecked((int)0xa0000085),
        DDS_DHL_MSG_BUS_TRANSACTION_PENDING_TIMEOUT = unchecked((int)0xa0000086),
        DDS_DHL_MSG_BUS_RESPONSE_FAILED = unchecked((int)0xa0000087),
        DDS_DHL_INVALID_DSI_PACKET_WORDCOUNT = unchecked((int)0xa0000088),
        DDS_DHL_INVALID_DSI_PACKET_DATATYPE = unchecked((int)0xa0000089),
        DDS_DHL_RM_INVALID_MEM_CHANNELS = unchecked((int)0xa000008a),
        DDS_DHL_RM_INVALID_SAGV_POINTS = unchecked((int)0xa000008b),
        DDS_DHL_DSB_HUNG = unchecked((int)0xa000008c),
        DDS_DHL_PORT_DP_MIN_IDLE_PATTERNS_SENT_ERROR = unchecked((int)0xa000008d),
        DDS_DHL_I2C_AUX_DEFER = unchecked((int)0xa000008e),
        DDS_DHL_DMC_PREEMPT_FAILED = unchecked((int)0xa000008f),
        __DD_STATUS_RANGE_DHL_MAX = unchecked((int)0xa0000090),
        __DD_STATUS_RANGE_INIT_UNINIT_START = unchecked((int)0xb0000000),
        DDS_INIT_HAL_AUDIO_FAILED = unchecked((int)0xb0000001),
        DDS_INIT_HAL_GMBUS_FAILED = unchecked((int)0xb0000002),
        DDS_INIT_HAL_BITBASH_FAILED = unchecked((int)0xb0000003),
        DDS_INIT_HAL_AUX_FAILED = unchecked((int)0xb0000004),
        DDS_INIT_HAL_I2C_FAILED = unchecked((int)0xb0000005),
        DDS_INIT_PG_FAILED = unchecked((int)0xb0000006),
        DDS_INIT_PG_LOCK_ACQUIRE_FAILED = unchecked((int)0xb0000007),
        DDS_INIT_CLOCK_FAILED = unchecked((int)0xb0000008),
        DDS_INIT_DBUF_FAILED = unchecked((int)0xb0000009),
        DDS_UNINIT_CLOCK_FAILED = unchecked((int)0xb000000a),
        DDS_UNINIT_DBUF_FAILED = unchecked((int)0xb000000b),
        DDS_INIT_DMC_VERSION_MISMATCH = unchecked((int)0xb000000c),
        DDS_INIT_MAIN_DMC_LOAD_FAILED = unchecked((int)0xb000000d),
        DDS_INIT_INVALID_LP_WM_LATENCY = unchecked((int)0xb000000e),
        DDS_INIT_DUC_CORE_RESET_FAILED = unchecked((int)0xb000000f),
        DDS_INIT_DUC_CORE_RESUME_FAILED = unchecked((int)0xb0000010),
        __DD_STATUS_RANGE_INIT_UNINT_MAX = unchecked((int)0xb0000011),
        DDS_SUCCESS = 0x0,
        DDS_MORE_ENTRIES = 0x1,
        DDS_NO_ACTION_REQUIRED = 0x2,
        DDS_SUCCESS_ENTRY_EXISTS_NO_UPDATE = 0x3,
        DDS_SUCCESS_ENTRY_EXISTS_MAYBE_REPLACED = 0x4,
        DDS_SUCCESS_ENTRY_EXISTS_REPLACED = 0x5,
        DDS_SUCCESS_ENTRY_NEW_ADDED = 0x6,
        DDS_SUCCESS_MODE_INTERLACE_MODE_REMOVED_BY_OEM = 0x7,
        DDS_SUCCESS_MODE_NO_PIXEL_FORMAT_SUPPORTED = 0x8,
        DDS_CE_EXTN_BLOCK_NOT_FOUND = 0x9,
        DDS_DISPLAY_ID_BLOCK_NOT_FOUND = 0xa,
        DDS_HDMI_VSDB_BLOCK_NOT_FOUND = 0xb,
        DDS_CE_EXTN_DTD_NOT_FOUND = 0xc,
        DDS_CE_EXTN_S3D_MODES_NOT_PRESENT = 0xd,
        DDS_DPL_TIMING_NOT_SUPPORTED = 0xe,
        DDS_DPL_HDMI2_SCDC_NOT_SUPPORTED = 0xf,
        DDS_PSR_ALREADY_ENABLED = 0x10,
        DDS_PSR_ALREADY_DISABLED = 0x11,
        DDS_STATUS_PENDING = 0x12,
        DDS_HDCP1_ENCRYPTING_RI_YET_TO_MATCH = 0x13,
        DDS_DPST_UNSUPPORTED_CONFIGURATION = 0x14,
        DDS_INVALID_NUM_OF_COLLAGE_DISPLAYS = 0x15,
        DDS_UNSUPPORTED_COLLAGE_DISPLAY = 0x16,
        DDS_DISSIMILAR_COLLAGE_DISPLAYS = 0x17,
        DDS_SUCCESS_DATA_UPDATED = 0x18,
        DDS_SUCCESS_MODE_NOT_SUPPORTED_BY_PLATFORM = 0x19,
        DDS_DPL_HDMI2_SCDC_RR_NOT_SUPPORTED = 0x1a,
        DDS_STATUS_RETRY = 0x1b,
        DDS_DPL_HDMI_LINK_TRAINING_PASSED = 0x1c,
        DDS_SFSU_DPST_UNSUPPORTED_CONFIGURATION = 0x1d,
        DDS_SUCCESS_INTERLACE_MODE_NOT_SUPPORTED_BY_PLATFORM = 0x1e,
        DDS_DETECTION_PENDING_POST_RESUME = 0x1f,
        DDS_INVALID_NUM_OF_INTERNAL_DISPLAYS = 0x20,
        DDS_DPL_HDMI_FRL_LTS3_UPDATE_LINKRATE = 0x21,
        DDS_DPL_HDMI_SINK_REQUESTED_FRL_RETRAIN_W_SAME_FRL_RATE = 0x22,
        DDS_HDR10PLUS_VSVDB_NOT_FOUND = 0x23,
        DDS_PRLOBF_TIMING_NOT_SUPPORTED = 0x24,
        DDS_VFDB_BLOCK_NOT_FOUND = 0x25,
        __DD_STATUS_RANGE_GENERIC_SUCCESS_MAX = 0x26,
        Default = 0x7fffffff,
    }
    public enum DISPLAY_BLC_OS_OPTIMIZATION
    {
        DISPLAY_BLC_OPTIMIZATION_OFF = 0x0,
        DISPLAY_BLC_OPTIMIZATION_LOW = 0x1,
        DISPLAY_BLC_OPTIMIZATION_EDR = 0x2,
        DISPLAY_BLC_OPTIMIZATION_HIGH = 0x3,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DISPLAY_CAPS_EDID_MGMT_FLAGS
    {
        NONE = 0x0,
        EdidMgmtEdidLocked = 0x1,
        EdidMgmtEdidOverride = 0x2,
        EdidMgmtCapsOverridden = 0x4,
    }
    [Flags]
    public enum DISPLAY_DC_STATE_RESTRICTION
    {
        PostModeSet = 0x1,
        VSyncEnabled = 0x2,
        Idle = 0x4,
        AudioCodecLoaded = 0x8,
        _3DLutInactive = 0x10,
        LowPowerPipe = 0x20,
        PowerStateChange = 0x40,
        PmfunctionEnabled = 0x80,
        LaceInactive = 0x100,
        VbiUnmasked = 0x200,
        CmtgEnabled = 0x400,
        ScanlineInterruptDisabled = 0x800,
        AsyncFlipDisabled = 0x1000,
        HwFlipQEnabled = 0x2000,
        DarkScreenDetectionInactive = 0x4000,
        Psr2Enabled = 0x8000,
        PrLobfEnabled = 0x10000,
    }
    public enum DISPLAY_DCSTATE_EVENT
    {
        DISPLAY_DCSTATE_EVENT_NONE = 0x0,
        DISPLAY_DCSTATE_EVENT_PSR2_PR = 0x1,
        DISPLAY_DCSTATE_EVENT_D0D3 = 0x2,
        DISPLAY_DCSTATE_EVENT_AUDIO_CODEC_EN = 0x3,
        DISPLAY_DCSTATE_EVENT_LACE = 0x4,
        DISPLAY_DCSTATE_TOTAL_EVENTS = 0x5,
        Default = 0x7fffffff,
    }
    public enum DISPLAY_PC_EVENT_NOTIFICATION_OPERATION
    {
        DISPLAY_PC_OPERATION_EVENT_UNKNOWN_EVENT = 0x0,
        DISPLAY_PC_OPERATION_EVENT_SPRITE_FLIP = 0x1,
        DISPLAY_PC_OPERATION_EVENT_MEDIA_CONTEXT_EVENT = 0x2,
        DISPLAY_PC_OPERATION_EVENT_MEDIA_WORKLOAD_PROCESSED = 0x3,
        DISPLAY_PC_OPERATION_EVENT_MEDIA_PLAYBACK_STATE = 0x4,
        DISPLAY_PC_OPERATION_EVENT_HDR = 0x5,
        DISPLAY_PC_OPERATION_EVENT_POWER_SOURCE = 0x6,
        DISPLAY_PC_OPERATION_EVENT_PLANE_EVENT = 0x7,
        DISPLAY_PC_OPERATION_EVENT_PIPE_CONF_CHANGE_EVENT = 0x8,
        DISPLAY_PC_OPERATION_EVENT_PRESENT_BLT = 0x9,
        DISPLAY_PC_OPERATION_EVENT_SWITCHABLE_GFX_EVENT = 0xa,
        DISPLAY_PC_OPERATION_EVENT_VBLANK_COMPLETE = 0xb,
        DISPLAY_PC_OPERATION_EVENT_PAVP = 0xc,
        DISPLAY_PC_OPERATION_EVENT_D0D3_FEATURE_EVENT_HANDLE = 0xd,
        DISPLAY_PC_OPERATION_EVENT_VBI_ENABLE_DISABLE_REPORTING_EVENT = 0xe,
        DISPLAY_PC_OPERATION_EVENT_ALS_CHANGE = 0xf,
        DISPLAY_PC_OPERATION_EVENT_CURSOR_CHANGE = 0x10,
        DISPLAY_PC_OPERATION_EVENT_COLOR_CHANGE = 0x11,
        DISPLAY_PC_OPERATION_EVENT_PRESENT_FLIP = 0x12,
        DISPLAY_PC_OPERATION_EVENT_DPPE_POWER_PLAN_CHANGE = 0x13,
        DISPLAY_PC_OPERATION_EVENT_CUI_POWER_PLAN_CHANGE = 0x14,
        DISPLAY_PC_OPERATION_EVENT_CUI_FEATURE_POLICY_CHANGE = 0x15,
        DISPLAY_PC_OPERATION_EVENT_PROCESS_EVENT_FLAGS = 0x16,
        DISPLAY_PC_OPERATION_EVENT_RR_CHANGE_EVENT = 0x17,
        DISPLAY_PC_OPERATION_EVENT_CLIENT_EVENT = 0x18,
        DISPLAY_PC_OPERATION_AUDIO_MAILBOX_EVENT = 0x19,
        DISPLAY_PC_OPERATION_EVENT_ADVANCED_COLOR_PROCESSING = 0x1a,
        DISPLAY_PC_OPERATION_EVENT_FBR_EVENT = 0x1b,
        DISPLAY_PC_OPERATION_EVENT_SW_PSR_STATUS_CHANGE = 0x1c,
        DISPLAY_PC_OPERATION_EVENT_SCANLINE_INTR = 0x1d,
        DISPLAY_PC_OPERATION_EVENT_ASYNC_FLIP = 0x1e,
        DISPLAY_PC_OPERATION_EVENT_HW_FLIP_QUEUE = 0x1f,
        DISPLAY_PC_OPERATION_EVENT_DARK_SCREEN_DETECTION = 0x20,
        DISPLAY_PC_OPERATION_EVENT_AUX_TRANSACTION = 0x21,
        DISPLAY_PC_OPERATION_EVENT_EDID_OVERRIDE = 0x22,
        DISPLAY_PC_OPERATION_EVENT_PHASE_IN_WORKITEM_IN_PROGRESS = 0x23,
        DISPLAY_PC_OPERATION_EVENT_HDCP_STATUS_CHANGE = 0x24,
        DISPLAY_PC_OPERATION_EVENT_STREAM_REGENERATION_STATUS_CHANGE = 0x25,
        DISPLAY_PC_OPERATION_EVENT_MAX_EVENTS = 0x26,
        Default = 0x7fffffff,
    }
    public enum DISPLAY_PWRCON_FEATURE
    {
        DD_DISP_PC_FTR_BLC = 0x0,
        DD_DISP_PC_FTR_DPST = 0x1,
        DD_DISP_PC_FTR_LACE = 0x2,
        DD_DISP_PC_FTR_CXSR = 0x3,
        DD_DISP_PC_FTR_FBC = 0x4,
        DD_DISP_PC_FTR_DPS = 0x5,
        DD_DISP_PC_FTR_PSR = 0x6,
        DD_DISP_PC_FTR_PWRWELL = 0x7,
        DD_DISP_PC_FTR_DCSTATE = 0x8,
        DD_DISP_PC_FTR_GHE = 0x9,
        DD_DISP_PC_FTR_LOBF = 0xa,
        DD_DISP_PC_FTR_MAX = 0xb,
        DD_DISP_PC_FTR_GLOBAL = 0xc,
        Default = 0x7fffffff,
    }
    public enum DISPLAYAUDIO_LINK_HANDLING_EVENT
    {
        DISPLAYAUDIO_LINK_HANDLING_EVENT_PRE_SGPC_F0 = 0x0,
        DISPLAYAUDIO_LINK_HANDLING_EVENT_POST_SGPC_F1 = 0x1,
        DISPLAYAUDIO_LINK_HANDLING_EVENT_POST_POWERWELL_OFF = 0x2,
        DISPLAYAUDIO_LINK_HANDLING_EVENT_POST_POWERWELL_ON = 0x3,
        DISPLAYAUDIO_LINK_HANDLING_EVENT_PRE_MODE_SET = 0x4,
        Default = 0x7fffffff,
    }
    public enum DP_DEVICE_TYPE
    {
        NONE = 0x0,
        SST_SINK = 0x1,
        SST_BRANCH = 0x2,
        MST_BRANCH = 0x3,
        DP2LEGACY_CONVERTER = 0x4,
        DP2WIRELESS_CONVERTER = 0x5,
    }
    public enum DP_MST_PATH_DSC_INFO
    {
        DP_DSC_NOT_SUPPORTED = 0x0,
        DP_DSC_SUPPORTED_BY_DP_SST_SINK_DEVICE = 0x1,
        DP_DSC_SUPPORTED_BY_VIRTUAL_DP_SINK_PEER_DEVICE = 0x2,
        DP_DSC_SUPPORTED_BY_VIRTUAL_DP2DP_PEER_DEVICE = 0x3,
        DP_DSC_SUPPORTED_BY_VIRTUAL_DP2PROTOCOL_CONVERTER_PEER_DEVICE = 0x4,
        DP_DSC_SUPPORTED_BY_IMMEDIATE_DP_BRANCH_DEVICE = 0x5,
        DP_DSC_SUPPORTED_BY_LAST_DP_BRANCH_DEVICE = 0x6,
        DP_DSC_SUPPORTED_BY_HDMI_2_1_SINK_DEVICE = 0x7,
        Default = 0x7fffffff,
    }
    public enum DP_MST_PATH_PANEL_REPLAY_INFO
    {
        DP_PANELREPLAY_NOT_SUPPORTED = 0x0,
        DP_PANELREPLAY_SUPPORTED_BY_LAST_SINK_DEVICE = 0x1,
        DP_PANELREPLAY_SUPPORTED_BY_VIRTUAL_DP_SINK_PEER_DEVICE = 0x2,
        Default = 0x7fffffff,
    }
    public enum DP_MST_PATH_VRR_INFO
    {
        DP_VRR_NOT_SUPPORTED = 0x0,
        DP_VRR_SUPPORTED_BY_DP_SST_SINK_DEVICE = 0x1,
        DP_VRR_SUPPORTED_BY_VIRTUAL_DP_SINK_PEER_DEVICE = 0x2,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum DP_SPI_REASON
    {
        NONE = 0x0,
        ATR = 0x1,
        HDCP = 0x2,
        DWN_REPLY = 0x4,
        UP_REQ = 0x8,
        LINK_LOSS = 0x10,
        DETECT = 0x20,
        MCCS = 0x40,
        CrcError = 0x80,
        PSRCapsChanged = 0x100,
        PanelReplayError = 0x200,
        DSCError = 0x400,
        TunnelBWFailed = 0x800,
        TunnelBWChanged = 0x1000,
    }
    public enum DPL_ACTIVE_DETECTION_STATUS_EN
    {
        DPL_DETECTION_UNKNOWN = 0x0,
        DPL_DETECTION_SCHEDULED = 0x1,
        DPL_DETECTION_IN_PROGRESS = 0x2,
        DPL_DETECTION_COMPLETED = 0x3,
        Default = 0x7fffffff,
    }
    public enum DPL_DETECTION_REQUIRED_EN
    {
        DPL_DETECT_RETURN_LAST_STATUS = 0x0,
        DPL_DETECT_NEED_ACTIVE_DETECTION = 0x1,
        DPL_DETECT_PARTIAL_TOPOLOGY_DETECTION = 0x2,
        DPL_DETECT_NO_ACTION_REQUIRED = 0x3,
        Default = 0x7fffffff,
    }
    public enum DXGK_BACKLIGHT_OPTIMIZATION_LEVEL
    {
        Disable = 0x0,
        Desktop = 0x1,
        Dynamic = 0x2,
        Dimmed = 0x3,
        EDR = 0x4,
    }
    public enum DXGK_EVENT_TYPE
    {
        Undefined = 0x0,
        ACPI = 0x1,
        PowerState = 0x2,
        Docking = 0x3,
    }
    [Flags]
    public enum DXGK_PLANE_SPECIFIC_INPUT_FLAGS
    {
        Enabled = 0x1,
        FlipImmediate = 0x2,
        FlipOnNextVSync = 0x4,
        SharedPrimaryTransition = 0x8,
        IndependentFlipExclusive = 0x10,
        FlipImmediateNoTearing = 0x20,
    }
    [Flags]
    public enum DXGK_SETVIDPNSOURCEADDRESS_INPUT_FLAGS
    {
        FlipStereo = 0x1,
        FlipStereoTemporaryMono = 0x2,
        FlipStereoPreferRight = 0x4,
        RetryAtLowerIrql = 0x8,
    }
    [Flags]
    public enum DXGK_SETVIDPNSOURCEADDRESS_OUTPUT_FLAGS
    {
        PrePresentNeeded = 0x1,
    }
    [Flags]
    public enum DXGKCB_NOTIFY_INTERRUPT_DATA_FLAGS
    {
        ValidPhysicalAdapterMask = 0x1,
        HsyncFlipCompletion = 0x2,
    }
    [Flags]
    public enum DXGKCB_NOTIFY_MPO_VSYNC_FLAGS
    {
        NEED_POST_PRESENT = 0x1,
    }
    [Flags]
    public enum EDID_MGMT_OUT_FLAGS
    {
        NONE = 0x0,
        OsConnNotification = 0x1,
        IsDisplayConnected = 0x2,
    }
    public enum EVCM_PIVOT_TYPE
    {
        UNINITIALIZED = 0x0,
        VIDPNSOURCE = 0x1,
        VIDPNTARGET = 0x2,
        SCALING = 0x3,
        ROTATION = 0x4,
        NOPIVOT = 0x5,
    }
    public enum FUNCTION_STAGE
    {
        FUNCTION_ENTRY = 0x0,
        FUNCTION_EXIT = 0x1,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum GENERAL_QUEUE_INSERT_FLAG
    {
        AllParamFlip = 0x1,
        Cursor = 0x2,
        Csc = 0x4,
        SfUpdate = 0x8,
        FbcUpdate = 0x10,
        Sff = 0x20,
    }
    [Flags]
    public enum GENLOCK_TRANSCODER_PROGRAM
    {
        GenlockModeLocalSlave = 0x0,
        GenlockModeRemoteSlave = 0x1,
        GenlockModeMaster = 0x2,
    }
    public enum GHE_TRIGGER
    {
        GHE_TRIGGER_INVALID = 0x0,
        GHE_TRIGGER_AMBIENT_LIGHT = 0x1,
        GHE_TRIGGER_FIXED_AGGRESSIVENESS = 0x2,
        Default = 0x7fffffff,
    }
    public enum HDCP_TYPE
    {
        HDCP_OFF = 0x0,
        HDCP_ON_TYPE0 = 0x1,
        HDCP_ON_TYPE1 = 0x2,
    }
    public enum HDMI_ADAPTER_TYPE
    {
        INVALID_TYPE = 0x0,
        DVI_ADAPTER = 0x1,
        NATIVE_HDMI = 0x2,
        TYPE1_ADAPTER = 0x3,
        TYPE2_ADAPTER = 0x4,
        TYPE2_ADAPTER_MBDOWN = 0x5,
        LSPCON_ADAPTER = 0x6,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum HPD_EVENT
    {
        NONE = 0x0,
        SHORT_PULSE = 0x1,
        LONG_PULSE = 0x2,
    }
    public enum INTERRUPT_EVENT_MESSAGE
    {
        DXGKDDIINTERRUPTROUTINE_ENTRY = 0x0,
        XE_HP_TILE_MASTER_INTERRUPT_REGISTER_MSB_DISABLE = 0x1,
        XE_HP_TILE_MASTER_INTERRUPT_REGISTER_TILE_BITS_CLEAR = 0x2,
        XE_HP_PER_TILE_INTERRUPT_REGISTER_DW_BITS_CLEAR = 0x3,
        GEN11_MASTER_INTERRUPT_REGISTER_MSB_DISABLE = 0x4,
        GEN11_MASTER_INTERRUPT_REGISTER_CHECK_DW_BITS = 0x5,
        GEN11_PENDING_INTERRUPT_BIT_POSITION = 0x6,
        GEN11_DW_OFFSET = 0x7,
        GEN11_DW_VALUE = 0x8,
        GEN11_INTERRUPT_IDENTITY_SELECT_REGISTER = 0x9,
        INTERRUPT_IDENTITY_REGISTER = 0xa,
        INTERRUPT_IDENTITY_REGISTER_CLEAR = 0xb,
        GEN11_DW_RESET = 0xc,
        GEN11_MASTER_INTERRUPT_REGISTER_INTERRUPT_BITS_CLEAR = 0xd,
        GEN11_MASTER_INTERRUPT_REGISTER_MSB_ENABLE = 0xe,
        XE_HP_TILE_MASTER_INTERRUPT_REGISTER_MSB_ENABLE = 0xf,
        DXGKDDIINTERRUPTROUTINE_EXIT = 0x10,
    }
    public enum MIPI_PACKET_TRANSMISSION_MODE
    {
        LP_MODE = 0x0,
        HS_MODE = 0x1,
    }
    public enum MODE_PREFERENCE
    {
        UNINITIALIZED = 0x0,
        PREFERRED = 0x1,
        NOTPREFERRED = 0x2,
    }
    [Flags]
    public enum MONITOR_LINK_INFO_CAPS
    {
        Stereo = 0x1,
        WideColorSpace = 0x2,
        HighColorSpace = 0x4,
        DynamicColorSpace = 0x8,
        DynamicBitsPerColorChannel = 0x10,
        DynamicColorEncodingFormat = 0x20,
        DedicatedTimingGeneration = 0x40,
        TargetIndependentPrimary = 0x80,
        SyncLockIdentical = 0x100,
        Hdr10Plus = 0x200,
        DolbyVisionLowLatency = 0x400,
        VariableRefresh = 0x800,
    }
    public enum MSG_BUS_CONTEX_TYPE
    {
        CONTEXT_A = 0x0,
        CONTEXT_B = 0x1,
        NA = 0xff,
    }
    public enum MSG_BUS_LANE_TYPE
    {
        MSG_BUS_LANE0 = 0x0,
        MSG_BUS_LANE1 = 0x1,
    }
    public enum OFF_ON
    {
        OFF = 0x0,
        ON = 0x1,
    }
    public enum OPST_ALGORITHM_VERSION
    {
        Default = 0x7fffffff,
    }
    public enum PC_FEATURE_STATE
    {
        INACTIVE = 0x0,
        WAITING = 0x1,
        ACTIVE = 0x2,
        Default = 0x7fffffff,
    }
    public enum PIPE_ID
    {
        PIPE_A = 0x0,
        PIPE_B = 0x1,
        PIPE_C = 0x2,
        PIPE_D = 0x3,
        VIRTUAL_PIPE_START = 0x10,
        VIRTUAL_PIPE_B = 0x11,
        VIRTUAL_PIPE_C = 0x12,
        VIRTUAL_PIPE_D = 0x13,
        VIRTUAL_PIPE_MAX = 0x14,
        PIPE_ANY = 0x7e,
        NULL_PIPE = 0x7f,
        Default = 0x7fffffff,
    }
    public enum PIXEL_FMT
    {
        INDEXED_8BPP = 0x0,
        B5G6R5X0 = 0x1,
        B8G8R8X8 = 0x2,
        R8G8B8X8 = 0x3,
        B10G10R10X2 = 0x4,
        R10G10B10X2 = 0x5,
        R10G10B10X2_XR_BIAS = 0x6,
        R16G16B16X16F = 0x7,
        YUV422_8 = 0x8,
        YUV422_10 = 0x9,
        YUV422_12 = 0xa,
        YUV422_16 = 0xb,
        YUV444_8 = 0xc,
        YUV444_10 = 0xd,
        YUV444_12 = 0xe,
        YUV444_16 = 0xf,
        NV12YUV420 = 0x10,
        P010YUV420 = 0x11,
        P012YUV420 = 0x12,
        P016YUV420 = 0x13,
        PIXEL_FMT_MAX = 0x14,
    }
    [Flags]
    public enum PLANE_CAPS
    {
        Rotation = 0x1,
        VerticalFlip = 0x2,
        HorizontalFlip = 0x4,
        StretchRGB = 0x8,
        StretchYUV = 0x10,
        BilinearFilter = 0x20,
        HighFilter = 0x40,
        Shared = 0x80,
        Immediate = 0x100,
    }
    [Flags]
    public enum PLANE_IN_FLAGS
    {
        AlphaBlend = 0x1,
        Decryption = 0x2,
        RendDecomp = 0x4,
        MediaDecomp = 0x8,
        ClearColorEn = 0x10,
        StoutKey = 0x20,
    }
    public enum PLANE_ORIENTATION
    {
        ORIENTATION_0 = 0x0,
        ORIENTATION_90 = 0x1,
        ORIENTATION_180 = 0x2,
        ORIENTATION_270 = 0x3,
        ORIENTATION_MAX = 0x4,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum PLANE_OUT_FLAGS
    {
        SubmittedToSwQueue = 0x1,
        SubmittedToHwQueue = 0x2,
        SubmittedAsCpuMmio = 0x4,
        SubmittedToDmcHrr = 0x8,
        SubmittedOnCpuDsb = 0x10,
        SubmittedInVblank = 0x20,
    }
    public enum PLANE_TYPE
    {
        PLANE_VGA = 0x0,
        PLANE_A = 0x1,
        PLANE_B = 0x2,
        PLANE_C = 0x3,
        PLANE_D = 0x4,
        PLANE_SPRITE_A = 0x5,
        PLANE_SPRITE_B = 0x6,
        PLANE_SPRITE_C = 0x7,
        PLANE_SPRITE_D = 0x8,
        PLANE_SPRITE_E = 0x9,
        PLANE_SPRITE_F = 0xa,
        PLANE_SPRITE_G = 0xb,
        PLANE_SPRITE_H = 0xc,
        CURSORPLANE_A = 0xd,
        CURSORPLANE_B = 0xe,
        CURSORPLANE_C = 0xf,
        CURSORPLANE_D = 0x10,
        PLANE_OVERLAY = 0x11,
        PLANE_ALL = 0x14,
        PLANE_1_A = 0x15,
        PLANE_2_A = 0x16,
        PLANE_3_A = 0x17,
        PLANE_4_A = 0x18,
        PLANE_5_A = 0x19,
        PLANE_1_B = 0x1f,
        PLANE_2_B = 0x20,
        PLANE_3_B = 0x21,
        PLANE_4_B = 0x22,
        PLANE_5_B = 0x23,
        PLANE_1_C = 0x29,
        PLANE_2_C = 0x2a,
        PLANE_3_C = 0x2b,
        PLANE_4_C = 0x2c,
        PLANE_5_C = 0x2d,
        PLANE_1_D = 0x33,
        PLANE_2_D = 0x34,
        PLANE_3_D = 0x35,
        PLANE_4_D = 0x36,
        PLANE_5_D = 0x37,
        TPV_PLANE = 0x3c,
        NULL_PLANE = 0x7f,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum PORT_CONNECTOR_TYPE
    {
        NATIVEPORT = 0x0,
        TYPECPORT = 0x1,
        TBTPORT = 0x2,
    }
    [Flags]
    public enum POWERWELL_STATES_FUSE
    {
        POWER_WELL_1_STATE = 0x1,
        POWER_WELL_2_STATE = 0x4,
        POWER_WELL_3_STATE = 0x10,
        POWER_WELL_4_STATE = 0x40,
        POWER_WELL_5_STATE = 0x100,
        PG5_FUSE_DISTRIB_STATUS = 0x400000,
        PG4_FUSE_DISTRIB_STATUS = 0x800000,
        PG3_FUSE_DISTRIB_STATUS = 0x1000000,
        PG2_FUSE_DISTRIB_STATUS = 0x2000000,
        PG1_FUSE_DISTRIB_STATUS = 0x4000000,
        PG0_FUSE_DISTRIB_STATUS = 0x8000000,
    }
    public enum POWERWELL_TYPE
    {
        POWERWELL_PIPE = 0x1,
        POWERWELL_AUX = 0x2,
        POWERWELL_DDI = 0x3,
    }
    public enum PRODUCT_FAMILY
    {
        IGFX_UNKNOWN = 0x0,
        IGFX_GRANTSDALE_G = 0x1,
        IGFX_ALVISO_G = 0x2,
        IGFX_LAKEPORT_G = 0x3,
        IGFX_CALISTOGA_G = 0x4,
        IGFX_BROADWATER_G = 0x5,
        IGFX_CRESTLINE_G = 0x6,
        IGFX_BEARLAKE_G = 0x7,
        IGFX_CANTIGA_G = 0x8,
        IGFX_CEDARVIEW_G = 0x9,
        IGFX_EAGLELAKE_G = 0xa,
        IGFX_IRONLAKE_G = 0xb,
        IGFX_GT = 0xc,
        IGFX_IVYBRIDGE = 0xd,
        IGFX_HASWELL = 0xe,
        IGFX_VALLEYVIEW = 0xf,
        IGFX_BROADWELL = 0x10,
        IGFX_CHERRYVIEW = 0x11,
        IGFX_SKYLAKE = 0x12,
        IGFX_KABYLAKE = 0x13,
        IGFX_COFFEELAKE = 0x14,
        IGFX_WILLOWVIEW = 0x15,
        IGFX_BROXTON = 0x16,
        IGFX_GEMINILAKE = 0x17,
        IGFX_GLENVIEW = 0x18,
        IGFX_GOLDWATERLAKE = 0x19,
        IGFX_CANNONLAKE = 0x1a,
        IGFX_CNX_G = 0x1b,
        IGFX_ICELAKE = 0x1c,
        IGFX_ICELAKE_LP = 0x1d,
        IGFX_LAKEFIELD = 0x1e,
        IGFX_JASPERLAKE = 0x1f,
        IGFX_LAKEFIELD_R = 0x20,
        IGFX_TIGERLAKE_LP = 0x21,
        IGFX_RYEFIELD = 0x22,
        IGFX_ROCKETLAKE = 0x23,
        IGFX_ALDERLAKE_S = 0x24,
        IGFX_ALDERLAKE_P = 0x25,
        IGFX_ALDERLAKE_N = 0x26,
        IGFX_DG1 = 0x4ba,
        IGFX_XE_HP_SDV = 0x4e2,
        IGFX_DG2 = 0x4f6,
        IGFX_PVC = 0x4f7,
        IGFX_METEORLAKE = 0x4f8,
        IGFX_ARROWLAKE = 0x4f9,
        IGFX_BMG = 0x4fa,
        IGFX_LUNARLAKE = 0x4fb,
        IGFX_LUNARLAKE_M = 0x4fc,
        IGFX_RLT = 0x500,
        IGFX_PTL = 0x514,
        IGFX_NVL_XE3G = 0x53c,
        IGFX_FCS = 0x546,
        IGFX_NVL = 0x550,
        IGFX_NVL_AX = 0x555,
        IGFX_CLS = 0x55a,
        IGFX_JGS = 0x578,
        IGFX_XE4V1 = 0x582,
        IGFX_MAX_PRODUCT = 0x583,
        Default = 0x7ffffff0,
        IGFX_GENNEXT = 0x7ffffffe,
        PRODUCT_FAMILY_FORCE_ULONG = 0x7fffffff,
    }
    public enum PSR_EVENT_TYPE
    {
        PSR_DPST_SW_ASSISTED_PHASE_IN_EVENT = 0x0,
        PSR_BRIGHTNESS_CHANGE_EVENT = 0x1,
        PSR_LACE_EVENT = 0x2,
        PSR_DPST_ALGORITHM_EVENT = 0x3,
        PSR_INVOKE_SW_DPST_EVENT = 0x4,
        PSR_ENABLE_HW_SFSU_DPST_EVENT = 0x5,
        PSR_GET_VSYNC_STATE = 0x6,
        PSR_DPST_HW_ASSISTED_PHASE_IN_EVENT = 0x7,
        Default = 0x7fffffff,
    }
    [Flags]
    public enum PSR_SUPPORT
    {
        NA = 0x0,
        PSR = 0x1,
        SU = 0x2,
        SFU = 0x4,
    }
    [Flags]
    public enum SAMPLING_MODE_BIT_MASK
    {
        DEFAULT = 0x0,
        RGB = 0x1,
        YUV420 = 0x2,
        YUV422 = 0x4,
        YUV444 = 0x8,
    }
    public enum SHARED_GFX_POWER_COMPONENT_FSTATE
    {
        SGPC_FSTATE_UNKNOWN = unchecked((int)0xffffffff),
        SGPC_FSTATE_F0 = 0x0,
        SGPC_FSTATE_F1 = 0x1,
        Default = 0x7fffffff,
    }
    public enum SIDEBAND_MSG_ID
    {
        MSG_VERSION = 0x0,
        LINK_ADDRESS = 0x1,
        CONNECTION_STATUS_NOTIFY = 0x2,
        ENUM_PATH_RESOURCES = 0x10,
        ALLOCATE_PAYLOAD = 0x11,
        QUERY_PAYLOAD = 0x12,
        RESOURCE_STATUS_NOTIFY = 0x13,
        CLEAR_PAYLOAD_ID_TABLE = 0x14,
        REMOTE_DPCD_READ = 0x20,
        REMOTE_DPCD_WRITE = 0x21,
        REMOTE_I2C_READ = 0x22,
        REMOTE_I2C_WRITE = 0x23,
        POWER_UP_PHY = 0x24,
        POWER_DOWN_PHY = 0x25,
    }
    public enum SIDEBAND_MSG_TYPE
    {
        UP_REQ = 0x0,
        UP_REPLY = 0x1,
        DOWN_REQ = 0x2,
        DOWN_REPLY = 0x3,
    }
    [Flags]
    public enum SUPPORTED_BPC_BIT_MASK
    {
        RGB565 = 0x1,
        _6_BPC = 0x2,
        _6_BITS_LOOSLY_PACKED = 0x4,
        _8_BPC = 0x8,
        _10_BPC = 0x10,
        _12_BPC = 0x20,
        _14_BPC = 0x40,
        _16_BPC = 0x80,
        SUPPORT_COMPRESSED_BITS = 0x100,
    }
    [Flags]
    public enum TIMING_FEATURE_SUPPORT
    {
        FlipQInVBlank = 0x1,
        Psr2 = 0x2,
    }
    public enum UNCORE_INIT_EVENT_TYPE
    {
        GSC_BOOT_TYPE_STEP = 0x1,
        MRC_INIT_STEP = 0x2,
    }
    public enum VIDEO_SIGNAL_SCANLINE_ORDERING
    {
        UNINITIALIZED = 0x0,
        PROGRESSIVE = 0x1,
        INTERLACED_UPPERFIELDFIRST = 0x2,
        INTERLACED_LOWERFIELDFIRST = 0x3,
        VSSLO_OTHER = 0xff,
    }
    public enum VIDEO_SIGNAL_STANDARD
    {
        VESA_DMT = 0x1,
        VESA_GTF = 0x2,
        VESA_CVT = 0x3,
        EIA_861 = 0x19,
        EIA_861A = 0x1a,
        EIA_861B = 0x1b,
        VSS_OTHER = 0xff,
    }
    public enum XPST_EVENT
    {
        XPST_EVENT_DPST_PHASEOUT_STARTED = 0x1,
        XPST_EVENT_NO_PHASEOUT = 0x2,
        XPST_EVENT_DPST_PHASEOUT_COMPLETED = 0x3,
        XPST_EVENT_ENABLED = 0x4,
        XPST_EVENT_NO_ALGO_RUN_REQUIRED = 0x5,
        XPST_EVENT_NO_CHNAGE_IN_GAMMA_ADJUST = 0x6,
        Default = 0x7fffffff,
    }
    public enum XPST_OPERATION
    {
        XPST_OPERATION_UNKNOWN = 0x0,
        XPST_OPERATION_ALS = 0x2,
        XPST_OPERATON_BLC = 0x3,
        XPST_OPERATION_SET_GUARDBAND_INTERRUPT_DELAY = 0x4,
        XPST_OPERATION_BLC_OPTIMIZATION_CHANGE = 0x5,
        XPST_OPERATION_RESTORE_GUARDBAND_INTERRUPT_DELAY_COUNTER = 0x6,
        XPST_OPERATION_SW_TRIGGERED = 0x7,
        XPST_OPERATION_UPDATE_SFSU_DPST_HANDLING = 0x8,
        XPST_OPERATION_GHE = 0x9,
        XPST_OPERATION_DPST = 0xa,
        XPST_OPERATION_HISTOGRAM_INTERRUPT_TOGGLE = 0xb,
        XPST_OPERATION_MAX = 0xc,
        Default = 0x7fffffff,
    }
    public enum XPST_WARNING
    {
        XPST_WARNING_INVALID_CONTEXT = 0x0,
        XPST_WARNING_INVALID_IMAGE_SIZE_OR_AGGR_LEVEL = 0x1,
        XPST_WARNING_INVALID_PIXEL_COUNT = 0x2,
        XPST_WARNING_NO_ACTIVE_LFP = 0x3,
        XPST_WARNING_PANEL_DOES_NOT_SUPPORT_DPST = 0x4,
        XPST_WARNING_FAILED_TO_GET_HISTOGRAM = 0x5,
        XPST_WARNING_SYSTEM_IN_TDR = 0x6,
        XPST_WARNING_LOCKING_FAILURE = 0x7,
        XPST_WARNING_GHE_PANEL_NOT_SUPPORTED = 0x8,
        XPST_WARNING_PSR_NOT_IN_IDLE_STATE = 0x9,
        Default = 0x7fffffff,
    }
}
