using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present
#pragma warning disable 114, 108    // disable warnings on hiding inhertiting variable names

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverPerfAnalysis;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IntelGfxDriverPerfAnalysisTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "Intel-Gfx-Driver-Perf-Analysis";
        public static Guid ProviderGuid = new Guid(unchecked((int)0x90f8afc2), unchecked((short)0x3f92), unchecked((short)0x4da3), 0xa4, 0xc1, 0xc9, 0x33, 0xa7, 0x4d, 0x2a, 0xec);
        public enum Keywords : long
        {
            Heap = 0x4,
            Mmio = 0x8,
        };

        public IntelGfxDriverPerfAnalysisTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<MmioPrint_t> MmioStartTrackRead
        {
            add
            {
                source.RegisterEventTemplate(MmioStartTrackReadTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<MmioPrint_t> MmioStartTrackWrite
        {
            add
            {
                source.RegisterEventTemplate(MmioStartTrackWriteTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<OSAllocData_t> OSAllocateTrackAllocate
        {
            add
            {
                source.RegisterEventTemplate(OSAllocateTrackAllocateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<OSAllocData_t> OSAllocateTrackFree
        {
            add
            {
                source.RegisterEventTemplate(OSAllocateTrackFreeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<OSAllocData_t> OSAllocateTrackReAllocate
        {
            add
            {
                source.RegisterEventTemplate(OSAllocateTrackReAllocateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private MmioPrint_t MmioStartTrackReadTemplate(Action<MmioPrint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MmioPrint_t(action, 8, 4, "MmioStartTrack", Guid.Empty, 13, "Read", ProviderGuid, ProviderName);
        }
        static private MmioPrint_t MmioStartTrackWriteTemplate(Action<MmioPrint_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MmioPrint_t(action, 9, 4, "MmioStartTrack", Guid.Empty, 14, "Write", ProviderGuid, ProviderName);
        }
        static private OSAllocData_t OSAllocateTrackAllocateTemplate(Action<OSAllocData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OSAllocData_t(action, 5, 3, "OSAllocateTrack", Guid.Empty, 10, "Allocate", ProviderGuid, ProviderName);
        }
        static private OSAllocData_t OSAllocateTrackFreeTemplate(Action<OSAllocData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OSAllocData_t(action, 6, 3, "OSAllocateTrack", Guid.Empty, 11, "Free", ProviderGuid, ProviderName);
        }
        static private OSAllocData_t OSAllocateTrackReAllocateTemplate(Action<OSAllocData_t> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OSAllocData_t(action, 7, 3, "OSAllocateTrack", Guid.Empty, 12, "ReAllocate", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[5];
                templates[0] = OSAllocateTrackAllocateTemplate(null);
                templates[1] = OSAllocateTrackFreeTemplate(null);
                templates[2] = OSAllocateTrackReAllocateTemplate(null);
                templates[3] = MmioStartTrackReadTemplate(null);
                templates[4] = MmioStartTrackWriteTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IntelGfxDriverPerfAnalysis
{
    public sealed class MmioPrint_t : TraceEvent
    {
        public uint Offset { get { return (uint)GetInt32At(0); } }

        #region Private
        internal MmioPrint_t(Action<MmioPrint_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MmioPrint_t>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Offset", Offset);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Offset" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Offset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MmioPrint_t> m_target;
        #endregion
    }
    public sealed class OSAllocData_t : TraceEvent
    {
        public int IRQL { get { return GetByteAt(0); } }
        public int Size { get { return GetInt32At(1); } }
        public bool Paged { get { return GetInt32At(5) != 0; } }
        public Address VirtualAddress { get { return GetAddressAt(9); } }
        public int Tag { get { return GetInt32At(HostOffset(13, 1)); } }
        public string FileName { get { return GetUTF8StringAt(HostOffset(17, 1)); } }
        public string FunctionName { get { return GetUTF8StringAt(SkipUTF8String(HostOffset(17, 1))); } }
        public int LineNo { get { return GetInt32At(SkipUTF8String(SkipUTF8String(HostOffset(17, 1)))); } }

        #region Private
        internal OSAllocData_t(Action<OSAllocData_t> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(HostOffset(17, 1))) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(HostOffset(17, 1))) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OSAllocData_t>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "IRQL", IRQL);
            XmlAttrib(sb, "Size", Size);
            XmlAttrib(sb, "Paged", Paged);
            XmlAttribHex(sb, "VirtualAddress", VirtualAddress);
            XmlAttrib(sb, "Tag", Tag);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "FunctionName", FunctionName);
            XmlAttrib(sb, "LineNo", LineNo);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IRQL", "Size", "Paged", "VirtualAddress", "Tag", "FileName", "FunctionName", "LineNo" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IRQL;
                case 1:
                    return Size;
                case 2:
                    return Paged;
                case 3:
                    return VirtualAddress;
                case 4:
                    return Tag;
                case 5:
                    return FileName;
                case 6:
                    return FunctionName;
                case 7:
                    return LineNo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OSAllocData_t> m_target;
        #endregion
    }
}
