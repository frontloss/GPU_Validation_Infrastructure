#######################################################################################################################
# @file         etl_parser.py
# @brief        A helper library to get required data from JSON reports generated by EtlParser from ETL file
# @details      EtlParser generates JSON reports for a given ETL file. These JSON files can easily be
#               parsed using python to use the data present in ETL for validation purpose. @ref etl_parser.py contains
#               APIs to retrieve data from JSON report. Below are some examples of data that can be fetched:
#                   1. All the debug messages
#                   2. A list of called DDIs with execution data
#                   3. All the DPCD transactions
#                   4. All the MMIO transactions
#                   5. Flip data, with all incoming flips with details, flip notifications and VBI
#                   6. List of called functions (given ENTRY/EXIT tags have been added within the function)
#               Apart from above data, user can request for a timeline. Timeline is represented as a dictionary with
#               time stamps as keys and operations as value. It indicates which operation happened at what time. User
#               can filter the timeline output for some particular DDIs/MMIO offsets/DPCD offsets etc.
#               For this library a customized EtlParser version is used, which directly dumps the data in multiple json
#               files without using any intelligence.
#               <b>How to use</b>
#               generate_report() is the first API to be called in this library to generate json reports.
#               After generating the reports, user can use any of the below APIs to get the required data.
#               <ul>
#                   <li>get_ddi_list() : get a list of DDIs with call entries in ETL</li>
#                   <li>get_ddi_data() : get execution data for any given DDI</li>
#                   <li>get_function_data() : get execution data for any given function</li>
#                   <li>get_mmio_data(): get transaction data for any given MMIO offset</li>
#                   <li>get_dpcd_data(): get transaction data for any given DPCD offset</li>
#                   <li>get_dbg_msg_data(): get all the debug messages</li>
#                   <li>get_vbi_data(): get VBI details</li>
#                   <li>get_event_data(): get data about any custom trace event</li>
#                   <li>get_flip_data(): get incoming and submitted flip data</li>
#               </ul>
#               Example:
#               <pre>
#               import etl_parser
#               etl_parser.generate_report("Logs\\GfxTrace.etl")
#               message_list = etl_parser.get_dbg_msg_data()
#               for msg in message_list:
#                   print msg
#               </pre>
#               <b>How to add new events</b>
#               After updating the EtlParser.exe by adding event callback and data class (for more information about how
#               to update EtlParser.exe, see Src/EtlParser/MasterHandler.cs documentation), follow the below steps
#               to update this library.
#               Step 1: Define event data fields under a new class in Yangra or Legacy data object sections
#               Step 2: Update Events object class adding your queue name with a new event name. Please make sure you
#                       add the event name in ALL list.
#               Step 3: Now you can call get_event_data() with the new event code to get the required data
# @author       Rohit Kumar
########################################################################################################################

import ctypes
import enum
import json
import logging
import os
import subprocess
import time

from Libs.Core.logger import gdhm
from Libs.Core.test_env import test_context

FILE_PATH_ETL_PARSER = os.path.join(test_context.BIN_FOLDER, r"EtlParser\EtlParser.exe")
DEFAULT_ETL_PARSER_CONFIG = 0xFFFF

# Module level object to store report data to avoid reloading for each function call
__report = {
    'commonData': None,
    'dbgMsgData': None,
    'displayDiagnosticsData': None,
    'dpcdData': None,
    'flipData': None,
    'functionData': None,
    'mmioData': None,
    'vbiData': None,
    'interruptData': None,
    'dpstData': None,
    'i2cData': None,
    'psrData': None,
    'displayDetectData': None,
}


##
# @brief        Ddi Enum
class Ddi(enum.Enum):
    DDI_START_DEVICE = 0x186a0
    DDI_STOP_DEVICE = 0x186a1
    DDI_REMOVE_DEVICE = 0x186a2
    DDI_DISPATCH_IO_REQUEST = 0x186a3
    DDI_INTERRUPT_ROUTINE = 0x186a4
    DDI_DPC_ROUTINE = 0x186a5
    DDI_QUERY_CHILD_RELATIONS = 0x186a6
    DDI_QUERY_CHILD_STATUS = 0x186a7
    DDI_QUERY_DEVICE_DESCRIPTOR = 0x186a8
    DDI_SET_POWER_STATE = 0x186a9
    DDI_NOTIFY_ACPI_EVENT = 0x186aa
    DDI_RESET_DEVICE = 0x186ab
    DDI_UNLOAD = 0x186ac
    DDI_QUERY_INTERFACE = 0x186ad
    DDI_CONTROL_ETW_LOGGING = 0x186ae
    DDI_QUERYADAPTERINFO = 0x186af
    DDI_CREATEDEVICE = 0x186b0
    DDI_CREATEALLOCATION = 0x186b1
    DDI_DESTROYALLOCATION = 0x186b2
    DDI_DESCRIBEALLOCATION = 0x186b3
    DDI_GETSTANDARDALLOCATIONDRIVERDATA = 0x186b4
    DDI_ACQUIRESWIZZLINGRANGE = 0x186b5
    DDI_RELEASESWIZZLINGRANGE = 0x186b6
    DDI_PATCH = 0x186b7
    DDI_SUBMITCOMMAND = 0x186b8
    DDI_PREEMPTCOMMAND = 0x186b9
    DDI_BUILDPAGINGBUFFER = 0x186ba
    DDI_SETPALETTE = 0x186bb
    DDI_SETPOINTERPOSITION = 0x186bc
    DDI_SETPOINTERSHAPE = 0x186bd
    DDI_RESETFROMTIMEOUT = 0x186be
    DDI_RESTARTFROMTIMEOUT = 0x186bf
    DDI_ESCAPE = 0x186c0
    DDI_COLLECTDBGINFO = 0x186c1
    DDI_QUERYCURRENTFENCE = 0x186c2
    DDI_ISSUPPORTEDVIDPN = 0x186c3
    DDI_RECOMMENDFUNCTIONALVIDPN = 0x186c4
    DDI_ENUMVIDPNCOFUNCMODALITY = 0x186c5
    DDI_SETVIDPNSOURCEADDRESS = 0x186c6
    DDI_SETVIDPNSOURCEVISIBILITY = 0x186c7
    DDI_COMMITVIDPN = 0x186c8
    DDI_UPDATEACTIVEVIDPNPRESENTPATH = 0x186c9
    DDI_RECOMMENDMONITORMODES = 0x186ca
    DDI_RECOMMENDVIDPNTOPOLOGY = 0x186cb
    DDI_GETSCANLINE = 0x186cc
    DDI_STOPCAPTURE = 0x186cd
    DDI_CONTROLINTERRUPT = 0x186ce
    DDI_CREATEOVERLAY = 0x186cf
    DDI_DESTROYDEVICE = 0x186d0
    DDI_OPENALLOCATIONINFO = 0x186d1
    DDI_CLOSEALLOCATION = 0x186d2
    DDI_RENDER = 0x186d3
    DDI_PRESENT = 0x186d4
    DDI_UPDATEOVERLAY = 0x186d5
    DDI_FLIPOVERLAY = 0x186d6
    DDI_DESTROYOVERLAY = 0x186d7
    DDI_CREATECONTEXT = 0x186d8
    DDI_DESTROYCONTEXT = 0x186d9
    DDI_LINK_DEVICE = 0x186da
    DDI_SETDISPLAYPRIVATEDRIVERFORMAT = 0x186db
    DDI_RENDERKM = 0x186dc
    DDI_QUERYVIDPNHWCAPABILITY = 0x186dd
    DDISETPOWERCOMPONENTFSTATE = 0x186de
    DDI_QUERYDEPENDENTENGINEGROUP = 0x186df
    DDI_QUERYENGINESTATUS = 0x186e0
    DDI_RESETENGINE = 0x186e1
    DDI_STOP_DEVICE_AND_RELEASE_POST_DISPLAY_OWNERSHIP = 0x186e2
    DDI_SYSTEM_DISPLAY_ENABLE = 0x186e3
    DDI_SYSTEM_DISPLAY_WRITE = 0x186e4
    DDI_CANCELCOMMAND = 0x186e5
    DDI_GET_CHILD_CONTAINER_ID = 0x186e6
    DDIPOWERRUNTIMECONTROLREQUEST = 0x186e7
    DDI_SETVIDPNSOURCEADDRESSWITHMULTIPLANEOVERLAY = 0x186e8
    DDI_NOTIFY_SURPRISE_REMOVAL = 0x186e9
    DDI_GETNODEMETADATA = 0x186ea
    DDISETPOWERPSTATE = 0x186eb
    DDI_CONTROLINTERRUPT2 = 0x186ec
    DDI_CHECKMULTIPLANEOVERLAYSUPPORT = 0x186ed
    DDI_CALIBRATEGPUCLOCK = 0x186ee
    DDI_FORMATHISTORYBUFFER = 0x186ef
    DDI_RENDERGDI = 0x186f0
    DDI_SUBMITCOMMANDVIRTUAL = 0x186f1
    DDI_SETROOTPAGETABLE = 0x186f2
    DDI_GETROOTPAGETABLESIZE = 0x186f3
    DDI_MAPCPUHOSTAPERTURE = 0x186f4
    DDI_UNMAPCPUHOSTAPERTURE = 0x186f5
    DDI_CHECKMULTIPLANEOVERLAYSUPPORT2 = 0x186f6
    DDI_CREATEPROCESS = 0x186f7
    DDI_DESTROYPROCESS = 0x186f8
    DDI_SETVIDPNSOURCEADDRESSWITHMULTIPLANEOVERLAY2 = 0x186f9
    DDI_POWERRUNTIMESETDEVICEHANDLE = 0x186fa
    DDI_SETSTABLEPOWERSTATE = 0x186fb
    DDI_SETVIDEOPROTECTEDREGION = 0x186fc
    DDI_CHECKMULTIPLANEOVERLAYSUPPORT3 = 0x186fd
    DDI_SETVIDPNSOURCEADDRESSWITHMULTIPLANEOVERLAY3 = 0x186fe
    DDI_POSTMULTIPLANEOVERLAYPRESENT = 0x186ff
    DDI_VALIDATEUPDATEALLOCATIONPROPERTY = 0x18700
    DDI_CONTROLMODEBEHAVIOR = 0x18701
    DDI_UPDATEMONITORLINKINFO = 0x18702
    DDI_CREATEHWCONTEXT = 0x18703
    DDI_DESTROYHWCONTEXT = 0x18704
    DDI_CREATEHWQUEUE = 0x18705
    DDI_DESTROYHWQUEUE = 0x18706
    DDI_SUBMITCOMMANDTOHWQUEUE = 0x18707
    DDI_SWITCHTOHWCONTEXTLIST = 0x18708
    DDI_RESETHWENGINE = 0x18709
    DDI_CREATEPERIODICFRAMENOTIFICATION = 0x1870a
    DDI_DESTROYPERIODICFRAMENOTIFICATION = 0x1870b
    DDI_SETTIMINGSFROMVIDPN = 0x1870c
    DDI_SETTARGETGAMMA = 0x1870d
    DDI_SETTARGETCONTENTTYPE = 0x1870e
    DDI_SETTARGETANALOGCOPYPROTECTION = 0x1870f
    DDI_SETTARGETADJUSTEDCOLORIMETRY = 0x18710
    DDI_DISPLAYDETECTCONTROL = 0x18711
    DDI_QUERYCONNECTIONCHANGE = 0x18712
    DDI_EXCHANGEPRESTARTINFO = 0x18713
    DDI_GETMULTIPLANEOVERLAYCAPS = 0x18714
    DDI_GETPOSTCOMPOSITIONCAPS = 0x18715
    DDI_OPM_GET_CERTIFICATESIZE = 0x18716
    DDI_OPM_GET_CERTIFICATE = 0x18717
    DDI_OPM_CREATEPROTECTEDOUTPUT = 0x18718
    DDI_OPM_CREATEPROTECTEDOUTPUTFORNONLOCALDISPLAY = 0x18719
    DDI_OPM_GET_RANDOMNUMBER = 0x1871A
    DDI_OPM_SET_SIGNINGKEYANDSEQUENCENUMBERS = 0x1871B
    DDI_OPM_GET_INFO = 0x1871C
    DDI_OPM_GET_COPPCOMPATIBLEINFO = 0x1871D
    DDI_OPM_CONFIGURE_PROTECTEDOUTPUT = 0x1871E
    DDI_OPM_DESTROY_PROTECTEDOUTPUT = 0x1871F
    DDI_I2C_TRANSMITDATATODISPLAY = 0x18720
    DDI_I2C_RECEIVEDATAFROMDISPLAY = 0x18721
    DDI_BLC_GETPOSSIBLEBRIGHTNESS = 0x18722
    DDI_BLC_SET_BRIGHTNESS = 0x18723
    DDI_BLC_GET_BRIGHTNESS = 0x18724
    DDI_BLC_GET_BRIGHTNESS_CAPS = 0x18725
    DDI_BLC_SET_BRIGHTNESS_STATE = 0x18726
    DDI_BLC_GET_BACKLIGHT_REDUCTION = 0x18727
    DDI_BLC_SET_BACKLIGHT_OPTIMIZATION = 0x18728
    DDI_BLC_GET_NITRANGES = 0x18729
    DDI_BLC_GET_BRIGHTNESS_CAPS3 = 0x1872A
    DDI_BLC_GET_BRIGHTNESS3 = 0x1872B
    DDI_BLC_SET_BRIGHTNESS3 = 0x1872C
    DDI_BLC_SET_BACKLIGHT_OPTIMIZATION3 = 0x1872D
    DDI_PRESENT_DISPLAY_ONLY = 0x1872E
    DDI_CONTROLINTERRUPT3 = 0x1872F
    DDI_SCANLINEINTERRUPT = 0x18730
    DDI_WORK_ITEM = 0x1000
    DDI_DPC = 0x1001
    DDI_ORPHAN_THREADS = 0x1002
    DDISETPOWERSTATE = 0x1003


##
# @brief        EtlParserConfigFields Structure
class EtlParserConfigFields(ctypes.LittleEndianStructure):
    _fields_ = [
        ('commonData', ctypes.c_uint32, 1),  # Bit 0
        ('dbgMsgData', ctypes.c_uint32, 1),
        ('displayDiagnosticsData', ctypes.c_uint32, 1),
        ('dpcdData', ctypes.c_uint32, 1),
        ('flipData', ctypes.c_uint32, 1),
        ('functionData', ctypes.c_uint32, 1),
        ('interruptData', ctypes.c_uint32, 1),
        ('mmioData', ctypes.c_uint32, 1),
        ('vbiData', ctypes.c_uint32, 1),
        ('dpstData', ctypes.c_uint32, 1),
        ('i2cData', ctypes.c_uint32, 1),
        ('psrData', ctypes.c_uint32, 1),
        ('displayDetectData', ctypes.c_uint32, 1),
        ('reserved_1', ctypes.c_uint32, 19)  # Bit 13:31
    ]


##
# @brief        EtlParserConfig Union
class EtlParserConfig(ctypes.Union):
    _anonymous_ = ("u",)
    _fields_ = [
        ("u", EtlParserConfigFields),
        ("value", ctypes.c_uint32)
    ]


##
# @brief        __ReportNames class
# @details      Internal object class containing name of all the reports
class __ReportNames(object):
    COMMON = "commonData"
    DBG_MSG = "dbgMsgData"
    DISPLAY_DIAG = "displayDiagnosticsData"
    DPCD = "dpcdData"
    FLIP = "flipData"
    FUNCTION = "functionData"
    MMIO = "mmioData"
    VBI = "vbiData"
    INTERRUPT = "interruptData"
    DPST = "dpstData"
    I2C = 'i2cData'
    PSR = 'psrData'
    DISPLAY_DETECT = "displayDetectData"
    ALL = [COMMON, DBG_MSG, DISPLAY_DIAG, DPCD, FLIP, FUNCTION, MMIO, VBI, INTERRUPT, DPST, I2C, PSR, DISPLAY_DETECT]

    ##
    # @brief        Get File Path
    # @param[in]    name - File name
    # @return       str - Report file name if exists, None otherwise
    @classmethod
    def get_file_path(cls, name):
        return {
            cls.COMMON: "commonData.json",
            cls.DBG_MSG: "dbgMsgData.json",
            cls.DISPLAY_DIAG: "displayDiagnosticsData.json",
            cls.DPCD: "dpcdData.json",
            cls.FLIP: "flipData.json",
            cls.FUNCTION: "functionData.json",
            cls.MMIO: "mmioData.json",
            cls.VBI: "vbiData.json",
            cls.INTERRUPT: "interruptData.json",
            cls.DPST: "dpstData.json",
            cls.I2C: "I2cData.json",
            cls.PSR: "PsrData.json",
            cls.DISPLAY_DETECT: "DisplayDetectData.json"
        }.get(name, None)


##
# @brief        Events class
# @details      Exposed object class containing name of all the events and respective queues present in commonData.json
#               report
class Events(object):
    # Common
    MSG = "messageQueue"
    ETL_DETAILS = "EtlDetailsQueue"

    # Yangra Events
    DISPLAY_ASSERT = "displayAssertDataQueue"
    SELECTIVE_FETCH_INFO = "selectiveFetchDataQueue"
    SET_TIMING = "setTimingDataQueue"
    VRR_ENABLE = "vrrEnableDataQueue"
    VRR_DISABLE = "vrrDisableDataQueue"
    VRR_STATUS_INFO = "VrrStatusDataQueue"
    VRR_ADAPTIVE_BALANCE_BALANCE = "vrrAdaptiveBalanceBalanceDataQueue"
    VRR_ADAPTIVE_BALANCE_APPLY = "vrrAdaptiveBalanceApplyDataQueue"
    VRR_ADAPTIVE_BALANCE_HW_COUNTER_MISMATCH = "vrrAdaptiveBalanceHwCounterMismatchDataQueue"
    DPST_PHASE_IN = "dpstPhaseInDataQueue"
    SET_TIMING_COLOR = "setTimingColorQueue"
    DISPLAY_BRIGHTNESS3 = "displayBrightness3Queue"
    SET_ADJUSTED_COLORIMETRY_INFO = "setAdjustedColorimetryInfoQueue"
    HDR_DISPLAY_CAPS = "hdrDisplayCapsQueue"
    OS_GIVEN_1D_LUT = "osGivenOneDLUTQueue"
    OS_1D_LUT_PARAM = "osOneDLUTParamQueue"
    OS_GIVEN_CSC = "osGivenCSCQueue"
    DSB_HDR_GAMMA = "dsbDataQueue"
    DEFAULT_HDR_METADATA = "defaultHdrMetadataQueue"
    FLIP_HDR_METADATA = "flipHdrMetadataQueue"
    START_DEVICE = "gfxStartDeviceStopDataQueue"
    DFT_FLIP_SYNC_ADDRESS = "dftFlipAddressQueue"
    DC_STATE_DATA = "dcStateDataQueue"
    PPS_DATA = "ppsDataQueue"
    DPST_PROGRAM_START = "dpstDataQueue"
    PSR_DPST_PHASE_EVENT = "PsrDpstEventQueue"
    INFO_FRAME_DATA = "SendInfoFrameQueue"
    TRANSLATED_OS_MODE = "OsTargetModeQueue"
    FEATURE_STATUS = "featureStatusQueue"
    SPI_DATA = "SpiDataQueue"
    CANCEL_FLIP = "cancelFlipQueue"
    BLC_DDI3_OPTIMIZATION = "blcDdi3OptimizationQueue"
    DISPLAY_PWR_CONS_D0_D3_STATE_CHANGE = "displayPwrConsD0D3StateChangeEventQueue"
    TARGET_MODE = "TargetModeQueue"
    HPD_LIVE_STATE = "hotPlugDetectLiveStateQueue"
    DP_RX_CAPS = "dpRxCapsQueue"
    SET_INTERRUPT_TARGET_PRESENT_ID = "setInterruptTargetPresentIdQueue"
    NOTIFY_VSYNC_LOG_BUFFER_EXT = "notifyVSyncLogBufferPlaneExtQueue"
    NOTIFY_VSYNC_LOG_BUFFER_PLANE = "notifyVSyncLogBufferPlaneQueue"
    RR_SWITCH_CAPS_FIXED_RXCAPS = "RrSwitchCapsFixedRxCapsDataQueue"
    HW_FLIPQ_MODE = "hwFlipQModeQueue"
    RR_SWITCH_INFO = "rrSwitchInfoQueue"
    RR_SWITCH_PROGRAM = "rrSwitchProgramQueue"
    FMS_STATUS_INFO = "fmsStatusInfoQueue"
    PROCESS_CONFIG_TABLE = "processConfigTableQueue"
    FLIP_PROCESS_DETAILS = "flipProcessDetailsQueue"
    HW_PLANE_LAYER_INDEX = "hwPlaneToLayerIndexQueue"
    FEATURE_CONTROL = "featureControlQueue"
    DFT_FLIP_ALL_PARAM = "dftFlipAllParamQueue"
    SYSTEM_DETAILS_TRANSCODER = "SystemInfoTranscoderDataQueue"
    DISPLAY_PC_PSR_PR_PROCESS = "DisplayPcPsrPrProcessQueue"
    SCALER_INFO = "scalerQueue"
    SCALER_PLANE = "scalerPlaneQueue"

    # Legacy events
    DP_FAST_LINK_TRAINING = "dpFastLinkTrainingDataQueue"
    DP_LINK_TRAINING = "dpLinkTrainingDataQueue"
    CHECK_PRESENT_DURATION_SUPPORT = "gfxCheckPresentDurationSupportDataQueue"
    QUERY_CONNECTION_CHANGE_EVENT = "queryConnectionChangeEventQueue"

    CURSOR_POS = "CursorPosQueue"
    CURSOR_SHAPE = "CursorShapeQueue"

    ALL = [MSG, ETL_DETAILS, DISPLAY_ASSERT, SELECTIVE_FETCH_INFO, SET_TIMING, VRR_ENABLE, VRR_DISABLE, VRR_STATUS_INFO,
           VRR_ADAPTIVE_BALANCE_APPLY, VRR_ADAPTIVE_BALANCE_BALANCE,
           VRR_ADAPTIVE_BALANCE_HW_COUNTER_MISMATCH, DP_FAST_LINK_TRAINING,
           DP_LINK_TRAINING, CHECK_PRESENT_DURATION_SUPPORT, DPST_PHASE_IN, SET_TIMING_COLOR,
           SET_ADJUSTED_COLORIMETRY_INFO, DISPLAY_BRIGHTNESS3, HDR_DISPLAY_CAPS, OS_GIVEN_1D_LUT, OS_1D_LUT_PARAM,
           OS_GIVEN_CSC, DSB_HDR_GAMMA, DEFAULT_HDR_METADATA, FLIP_HDR_METADATA, START_DEVICE, DFT_FLIP_SYNC_ADDRESS,
           DC_STATE_DATA, PPS_DATA, DPST_PROGRAM_START, PSR_DPST_PHASE_EVENT, QUERY_CONNECTION_CHANGE_EVENT,
           INFO_FRAME_DATA, TRANSLATED_OS_MODE, FEATURE_STATUS, SPI_DATA, CANCEL_FLIP, BLC_DDI3_OPTIMIZATION,
           DISPLAY_PWR_CONS_D0_D3_STATE_CHANGE, TARGET_MODE, HPD_LIVE_STATE, DP_RX_CAPS,
           SET_INTERRUPT_TARGET_PRESENT_ID, NOTIFY_VSYNC_LOG_BUFFER_EXT, NOTIFY_VSYNC_LOG_BUFFER_PLANE,
           RR_SWITCH_CAPS_FIXED_RXCAPS, HW_FLIPQ_MODE, RR_SWITCH_INFO, RR_SWITCH_PROGRAM, FMS_STATUS_INFO,
           PROCESS_CONFIG_TABLE, FLIP_PROCESS_DETAILS, HW_PLANE_LAYER_INDEX, FEATURE_CONTROL, DFT_FLIP_ALL_PARAM,
           CURSOR_POS, CURSOR_SHAPE, SYSTEM_DETAILS_TRANSCODER, DISPLAY_PC_PSR_PR_PROCESS, SCALER_INFO, SCALER_PLANE]


##
# @brief         Functions Class
# @details       Exposed object class containing name of all the functions used by different features for verification
class Functions(object):
    # Yangra
    DP_FLT = "DpProtocolFastTrainLink"
    DP_FULL_LINK_TRAINING = "DpProtocolFullTrainLink"
    FLIPQ_SUBMISSION_POSSIBLE = "CcdIsFlipQueueSubmissionPossible"
    NOTIFY_FBR_STATUS_CHANGE = "CcdNotifyFbrStatusChange"


##
# @brief        CrtcVsyncState class
# @details      Exposed object containing all CRTC VSYNC STATES
class CrtcVsyncState(object):
    ENABLE = "ENABLE"
    DISABLE_KEEP_PHASE = "DISABLE_KEEP_PHASE"
    DISABLE_NO_PHASE = "DISABLE_NO_PHASE"
    UNKNOWN = 2


##
# @brief        InterruptType Class
# @details      Exposed object containing all available interrupt types
class InterruptType(object):
    DMA_COMPLETED = "DMA_COMPLETED"
    DMA_PREEMPTED = "DMA_PREEMPTED"
    CRTC_VSYNC = "CRTC_VSYNC"
    DMA_FAULTED = "DMA_FAULTED"
    DISPLAYONLY_VSYNC = "DISPLAYONLY_VSYNC"
    DISPLAYONLY_PRESENT_PROGRESS = "DISPLAYONLY_PRESENT_PROGRESS"
    CRTC_VSYNC_WITH_MULTIPLANE_OVERLAY = "CRTC_VSYNC_WITH_MULTIPLANE_OVERLAY"
    MICACAST_CHUNK_PROCESSING_COMPLETE = "MICACAST_CHUNK_PROCESSING_COMPLETE"


##
# @brief        __CommonData Class
# @details      Internal object class containing common fields for Data classes
class __CommonData(object):
    TimeStamp = None  # Float : Time in ms
    Level = None  # String
    TaskName = None  # String
    OpCode = None  # String
    ThreadId = None  # Int


##
# @brief        HwFlipQMode Class
# @details      Exposed object containing all available HwFlipQMode types
class DD_HW_FLIPQ_MODE(object):
    DD_HW_FLIPQ_MODE_UNKNOWN = 0x0
    DD_HW_FLIPQ_MODE_SYNC = 0x1
    DD_HW_FLIPQ_MODE_ASYNC = 0x2
    DD_HW_FLIPQ_MODE_DISABLE = 0x3
    DD_HW_FLIPQ_MODE_MAX = 0x4
    Default = 0x7fffffff


##################################################################################
# Yangra Data objects
##################################################################################

##
# @brief        __CommonData Class
# @details      Exposed object for storing Debug Message data
class DbgMsgData(__CommonData):
    Message = None  # String
    Function = None  # String
    Line = None  # int

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       String representation of DbgMsgData class
    def __repr__(self):
        return "{0} : {1} {2}".format(self.Function, self.Line, self.Message)


##
# @brief        DisplayAssertData Class
# @details      Exposed object for storing Display Assert event data
class DisplayAssertData(__CommonData):
    Function = None  # String
    Assert = None  # String
    Line = None  # Number
    File = None  # String

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DisplayAssertData class
    def __repr__(self):
        return "DDASSERT: {0:32}:{1} {2:32} {3}".format(self.File, self.Line, self.Function, self.Assert)


##
# @brief        DdiEExecutionData Class
# @details      Exposed object for storing DDI execution data
class DdiExecutionData(object):
    Ddi = None  # string: Ddi Name
    ExecTime = None  # float : Time in ms
    Irql = None  # int
    EndTime = None  # float : Time in ms
    StartTime = None  # float : Time in ms
    ThreadID = None  # int
    SwappedTime = None  # int
    CPUStall = None  # int
    ThreadSleep = None  # int
    Status = None  # int
    PrimaryFunction = None  # string: primary function name

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DdiExecutionData class
    def __repr__(self):
        return "DdiData(Ddi={0}, StartTime={1}, EndTime={2}, ThreadID={3})".format(
            self.Ddi, self.StartTime, self.EndTime, self.ThreadID)


##
# @brief        DpcdData Class
# @details      Exposed object for storing DPCD operation data
class DpcdData(__CommonData):
    IsWrite = None  # Boolean
    Data = None  # Byte []
    Status = None  # String : "SUCCESS"/"ERROR"
    Size = None  # Int : size of bytes in Data
    Channel = None  # String : AUX_A-AUX_I
    Address = None  # String : DpcdAddress

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DpcdData class
    def __repr__(self):
        return \
            "DpcdData(IsWrite= {0}, Data= {1}, Status= {2}, Size= {3}, Channel= {4}, Address= {5}, Timestamp= {6})".format(
                self.IsWrite, self.Data, self.Status, self.Size, self.Channel, self.Address, self.TimeStamp)


##
# @brief        I2cData Class
# @details      Exposed object for storing I2C operation data
class I2cData(__CommonData):
    IsWrite = None  # Boolean
    Data = None  # Byte []
    Port = None  # String : PORT_C
    Size = None  # Int : size of bytes in Data
    Slave = None  # Int : I2C Slave ID
    Index = None  # Int : Offset
    Flags = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of I2cData class
    def __repr__(self):
        return \
            "I2cData(IsWrite= {0}, Data= {1}, Port= {2}, Size= {3}, Slave= {4}, Index= {5}, Flags= {6})".format(
                self.IsWrite, self.Data, self.Port, self.Size, self.Slave, self.Index, self.Flags)


##
# @brief        PlaneInfo Class
# @details      Exposed object for storing Plane Info
class PlaneInfo(object):
    LayerIndex = None
    Flags = None  # DXGK_PLANE_SPECIFIC_INPUT_FLAGS
    PresentId = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            if k == 'Flags' and data_dict[k] == 0:
                self.Flags = ""
            else:
                self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of PlaneInfo class
    def __repr__(self):
        return "PlaneInfo(LayerIndex= {0}, Flags= {1}, PresentId= {2})".format(
            self.LayerIndex, self.Flags, self.PresentId)


##
# @brief        PlaneDetails class
class PlaneDetails(object):
    MaxImmFlipLine = None
    PlaneAttribFlag = None
    Blend = None
    ClrSpace = None
    Rotation = None
    StretchQuality = None
    SDRWhiteLevel = None
    SrcLeft = None
    SrcTop = None
    SrcRight = None
    SrcBottom = None
    DestLeft = None
    DestTop = None
    DestRight = None
    DestBottom = None
    ClipLeft = None
    ClipTop = None
    ClipRight = None
    ClipBottom = None
    DirtyRectLeft = None
    DirtyRectTop = None
    DirtyRectRight = None
    DirtyRectBottom = None
    hAllocation = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of PlaneDetails class
    def __repr__(self):
        return "PlaneDetails(MaxImmFlipLine= {}, PlaneAttribFlag= {}, Blend= {}, ClrSpace= {}, Rotation= {}, " \
               "StretchQuality= {}, SDRWhiteLevel= {}, SrcLeft= {}, SrcTop= {}, SrcRight= {}, SrcBottom= {}, " \
               "DestLeft= {}, DestTop= {}, DestRight= {}, DestBottom= {}, ClipLeft= {}, ClipTop= {}, " \
               "ClipRight= {}, ClipBottom= {}, DirtyRectLeft= {}, DirtyRectTop= {}, DirtyRectRight= {}, " \
               "DirtyRectBottom= {}, hAllocation = {})".format(self.MaxImmFlipLine, self.PlaneAttribFlag,
                                                               self.Blend, self.ClrSpace,
                                                               self.Rotation, self.StretchQuality, self.SDRWhiteLevel,
                                                               self.SrcLeft,
                                                               self.SrcTop, self.SrcRight, self.SrcBottom,
                                                               self.DestLeft, self.DestTop,
                                                               self.DestRight, self.DestBottom, self.ClipLeft,
                                                               self.ClipTop,
                                                               self.ClipRight, self.ClipBottom, self.DirtyRectLeft,
                                                               self.DirtyRectTop,
                                                               self.DirtyRectRight, self.DirtyRectBottom,
                                                               self.hAllocation)


##
# @brief        FlipAllParam class
class FlipAllParam(object):
    Pipe = None
    PlaneID = None
    Enabled = None
    PixelFmt = None
    SurfMemType = None
    ScanX = None
    ScanY = None
    Orientation = None
    PosX = None
    PosY = None
    Address = None
    Rsvd = None
    FeatureFlags = None
    ScanLineCount = None
    FrameCount = None
    AddressUv = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of FlipAllParam class
    def __repr__(self):
        return \
            "FlipAllParam(Pipe= {0}, PlaneID= {1}, Enabled= {2}, PixelFmt= {3}, SurfMemType= {4}, ScanX= {5}, " \
            "ScanY= {6}, Orientation= {7}, PosX= {8}, PosY= {9}, Address= {10}, FeatureFlags= {11}, " \
            "ScanLineCount= {12}, FrameCount= {13}, AddressUv = {14})".format(
                self.Pipe, self.PlaneID, self.Enabled, self.PixelFmt, self.SurfMemType, self.ScanX, self.ScanY,
                self.Orientation, self.PosX, self.PosY, self.Address, self.FeatureFlags, self.ScanLineCount,
                self.FrameCount, self.AddressUv
            )


##
# @brief        FlipAddress class
class FlipAddress(object):
    Pipe = None
    PlaneID = None
    Async = None
    Address = None
    ScanLineCount = None
    FrameCount = None
    FeatureFlags = None
    DisplayTime = None
    AddressUv = None
    OutFlags = None
    PresentationTimeStamp = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of FlipAddress class
    def __repr__(self):
        return \
            "FlipAddress(Pipe= {0}, PlaneID= {1}, Async= {2}, Address= {3}, ScanLineCount= {4}, FrameCount= {5}, " \
            " FeatureFlags= {6}, DisplayTime= {7}, AddressUv= {8}, OutFlags= {9}, PresentationTimeStamp= {10})" \
                .format(self.Pipe, self.PlaneID, self.Async, self.Address, self.ScanLineCount, self.FrameCount,
                        self.FeatureFlags, self.DisplayTime, self.AddressUv, self.OutFlags, self.PresentationTimeStamp)


##
# @brief        NotifyVSyncInfo class
class NotifyVSyncInfo(object):
    Type = None
    TargetID = None
    Flags = None
    DataCount = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of NotifyVSyncInfo class
    def __repr__(self):
        return \
            "NotifyVSyncInfo(Type= {0}, TargetID= {1}, Flags= {2}, DataCount= {3})".format(
                self.Type, self.TargetID, self.Flags, self.DataCount)


##
# @brief        NotifyVSyncLayer Class
class NotifyVSyncLayer(object):
    LayerIndex = None
    PresentID = None
    Flags = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of NotifyVSyncLayer class
    def __repr__(self):
        return \
            "NotifyVSyncLayer(LayerIndex= {0}, PresentID= {1}, Flags= {2})".format(
                self.LayerIndex, self.PresentID, self.Flags)


##
# @brief        FlipData Class
# @details      Exposed object for storing Flip data
class FlipData(object):
    SourceId = None
    Pipe = None
    PlaneCount = None
    Duration = None
    TimeStamp = None

    SoftwareOverhead = None
    FlipDoneTime = None

    IsAllParam = None
    IsAddressOnly = None

    InputFlags = None
    OutputFlags = None

    TargetFlipTime = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        self.PlaneInfoList = []
        self.PlaneDetailsList = []
        self.FlipAllParamList = []
        self.FlipAddressList = []
        self.NotifyVSyncInfoList = []
        self.NotifyVSyncLayerList = []
        self.MmioDataList = []

        for k in data_dict.keys():
            if 'List' not in k:
                self.__setattr__(k, data_dict[k])
            else:
                for data in data_dict[k]:
                    list_element = eval("{0}(data)".format(k.split('List')[0]))
                    eval('self.{0}.append(list_element)'.format(k))

    ##
    # @brief        overridden repr method
    # @return       str - String representation of FlipData class
    def __repr__(self):
        return \
            "FlipData(SourceId= {0}, Pipe= {1}, PlaneCount= {2}, Duration= {3}, SoftwareOverhead= {4}, " \
            "FlipDoneTime= {5}, IsAllParam= {6}, IsAddressOnly= {7}, InputFlags= {8}, OutputFlags= {9}, " \
            "PlaneInfoList= {10}, PlaneDetailsList= {11}, FlipAllParamList= {12}, FlipAddressList= {13}, " \
            "NotifyVSyncInfoList= {14}, NotifyVSyncLayerList= {15}, TargetFlipTime= {16})".format(
                self.SourceId, self.Pipe, self.PlaneCount, self.Duration, self.SoftwareOverhead, self.FlipDoneTime,
                self.IsAllParam, self.IsAddressOnly, self.InputFlags, self.OutputFlags, self.PlaneInfoList,
                self.PlaneDetailsList, self.FlipAllParamList, self.FlipAddressList, self.NotifyVSyncInfoList,
                self.NotifyVSyncLayerList, self.TargetFlipTime
            )


##
# @brief        FunctionData Class
# @details      Exposed object for storing Function execution data
class FunctionData(__CommonData):
    Name = None  # String
    Stage = None  # int   0: Entry, 1: Exit
    ErrorCode = None  # int
    Data = None  # Dictionary

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])


##
# @brief        MmioData Class
# @details      Exposed object for storing MMIO operation data
class MmioData(__CommonData):
    IsWrite = None  # Boolean
    Offset = None  # int
    Data = None  # int
    IsCpuMmio = None  # Boolean

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of MmioData Class
    def __repr__(self):
        return "MmioData(IsWrite= {0}, Offset= {1}, Data= {2}, Timestamp= {3}, IsCpuMmio= {4})".format(
            self.IsWrite, self.Offset, self.Data, self.TimeStamp, self.IsCpuMmio)


##
# @brief        SelectiveFetchData Class
# @details      Exposed object for storing SelectiveFetch data
class SelectiveFetchData(__CommonData):
    PipeId = None
    PlaneId = None
    SFScanX = None
    SFScanY = None
    SFPosX = None
    SFPosY = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of SelectiveFetchData Class
    def __repr__(self):
        return "SelectiveFetchData(Pipe= {0}, Plane= {1}, Scan= ({2}, {3}), Pos= ({4}, {5}))".format(
            self.PipeId, self.PlaneId, self.SFScanX, self.SFScanY, self.SFPosX, self.SFPosY)


##
# @brief        DpstPhaseIn Class
# @details      Exposed object for storing DpstPhasing Data
class DpstPhaseIn(__CommonData):
    PipeId = None
    DpstPhaseAdjustInfo = None
    BlcUserAdjustInfo = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DpstPhasingData Class
    def __repr__(self):
        return "DpstPhasingData(Pipe= {0}, DpstPhaseAdjust= {1}, BlcUserAdjust= {2})".format(
            self.PipeId, self.DpstPhaseAdjustInfo, self.BlcUserAdjustInfo)


##
# @brief        Exposed object for storing Dpst program start event data
class DpstProgramData(__CommonData):
    PipeId = None
    Adjust = None
    Feature = None
    Immediate = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of SetTimingData class
    def __repr__(self):
        return \
            "DPstProgramData( PipeId={0}, Adjust={1}, Feature={2}, Immediate={3})".format(
                self.PipeId, self.Adjust, self.Feature, self.Immediate)


##
# @brief        PsrEvent Class
# @details      Exposed object for storing PsrDpstEventQueue data
class PsrClientEventData(__CommonData):
    PipeId = None
    Operation = None
    Field1 = None
    Field2 = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of PsrClientEventData Class
    def __repr__(self):
        return f"PsrDpstEventQueue(Pipe= {self.PipeId}, Operation= {self.Operation}, Field1= {self.Field1}, " \
               f"Field2= {self.Field2})"


##
# @brief        SetTimingData Class
# @details      Exposed object for storing SetTiming data
class SetTimingData(__CommonData):
    Port = None  # String
    Pipe = None  # String
    SinkIndex = None  # int
    VOT = None  # String
    Enable = None  # Boolean
    SrcX = None  # int
    SrcY = None  # int
    PixelFmt = None  # String
    HActive = None  # int
    VActive = None  # int
    HTotal = None  # int
    VTotal = None  # int
    RR = None  # int
    DotClock = None  # int
    Scaling = None  # String
    FMS = None  # Boolean

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of SetTimingData class
    def __repr__(self):
        return \
            "SetTiming @ {0}:{1}:Sink_{2}_{3} Src {4}x{5} : {7} {8} Active {9}x{10} @ {6} Hz : Total {11}x{12} @ {13}" \
            " Hz as {14} (TimeStamp= {15})".format(
                self.Port, self.Pipe, self.SinkIndex, self.VOT, self.SrcX, self.SrcY, self.RR, self.PixelFmt,
                self.Scaling, self.HActive, self.VActive, self.HTotal, self.VTotal, self.DotClock,
                "FMS" if self.FMS else "FullModeSet", self.TimeStamp)


##
# @brief        VbiData Class
# @details      Exposed object for storing VBI data
class VbiData(__CommonData):
    Pipe = None  # String
    CrcCtl = None
    CrcResult = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])


##
# @brief        VrrDisableData Class
# @details      Exposed object for storing VrrDisable event data
class VrrDisableData(__CommonData):
    PipeId = None  # String

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrDisabledData Class
    def __repr__(self):
        return "VrrDisableData(Pipe={0}, TimeStamp={1})".format(self.PipeId, self.TimeStamp)

    ##
    # @brief        overridden cmp method
    # @param[in]    other - Comparison object
    # @return       int - 1 if comparison is unsuccessful, None otherwise
    def __cmp__(self, other):
        if not isinstance(other, VrrDisableData):
            return 1

        if self.PipeId == other.PipeId:
            return 0
        return 1


##
# @brief        VrrEnableData class
# @details      Exposed object for storing VrrEnable event data
class VrrEnableData(__CommonData):
    VrrMax = None  # int
    VrrMin = None  # int
    FrameStartToPipelineFullLineCount = None  # int
    VrrMaxShiftIncrement = None  # int
    VrrMaxShiftDecrement = None  # int
    PipeId = None  # String
    VrrFlipLine = None  # int

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrEnableData class
    def __repr__(self):
        return \
            "VrrEnableData(Pipe={0}, VrrMin={1}, VrrMax={2}, VrrMaxShiftIncrement={3}, VrrMaxShiftDecrement={4}, " \
            "VrrFlipLine={5}, FrameStartToPipelineFullLineCount={6}, TimeStamp={7})".format(
                self.PipeId, self.VrrMin, self.VrrMax, self.VrrMaxShiftIncrement, self.VrrMaxShiftDecrement,
                self.VrrFlipLine, self.FrameStartToPipelineFullLineCount, self.TimeStamp)

    ##
    # @brief        overridden cmp method
    # @param[in]    other - Comparison object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, VrrEnableData):
            return 1

        if self.PipeId == other.PipeId and self.VrrMin == other.VrrMin and self.VrrMax == other.VrrMax and \
                self.FrameStartToPipelineFullLineCount == other.FrameStartToPipelineFullLineCount and \
                self.VrrMaxShiftDecrement == other.VrrMaxShiftDecrement and \
                self.VrrMaxShiftIncrement == other.VrrMaxShiftIncrement and self.VrrFlipLine == other.VrrFlipLine:
            return 0

        return 1


##
# @brief        VrrStatusData class
# @details      Exposed object for storing VrrEnable event data
class VrrStatusData(__CommonData):
    TargetId = None  # int
    Active = None  # Boolean
    VrrMax = None  # int
    VrrMin = None  # int
    VrrFlipLine = None  # int

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrStatusData class
    def __repr__(self):
        return \
            "VrrStatusData(TargetId={0}, Active={1}, VrrMin={2}, VrrMax={3},VrrFlipLine={4}, TimeStamp={5})".format(
                self.TargetId, self.Active, self.VrrMin, self.VrrMax, self.VrrFlipLine, self.TimeStamp)

    ##
    # @brief        overridden cmp method
    # @param[in]    other - Comparison object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, VrrStatusData):
            return 1

        if self.TargetId == other.TargetId and self.Active is other.Active and self.VrrMin == other.VrrMin and \
                self.VrrMax == other.VrrMax and self.VrrFlipLine == other.VrrFlipLine:
            return 0

        return 1


##
# @brief        VrrAdaptiveBalanceBalanceData Class
class VrrAdaptiveBalanceBalanceData(__CommonData):
    TargetId = None  # int
    PreviousVtotal = None  # int
    Direction = None  # int
    Balance = None  # int

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrAdaptiveBalanceBalanceData Class
    def __repr__(self):
        return \
            "VrrAdaptiveBalanceBalanceData(TargetId={0}, PreviousVtotal={1}, Direction={2}, Balance={3}, TimeStamp={4})".format(
                self.TargetId, self.PreviousVtotal, self.Direction, self.Balance, self.TimeStamp)


##
# @brief        VrrAdaptiveBalanceApplyData class
class VrrAdaptiveBalanceApplyData(__CommonData):
    TargetId = None
    NumFrames = None
    CurrentFrameCount = None
    FlipLineValue = None
    Vmax = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrAdaptiveBalanceApplyData class
    def __repr__(self):
        return \
            "VrrAdaptiveBalanceApplyData(TargetId={0}, NumFrames={1}, CurrentFrameCount={2}, FlipLineValue={3}, " \
            "Vmax={4}, TimeStamp={5})".format(
                self.TargetId, self.NumFrames, self.CurrentFrameCount, self.FlipLineValue, self.Vmax, self.TimeStamp)


##
# @brief        VrrAdaptiveBalanceHwCounterMismatchData class
class VrrAdaptiveBalanceHwCounterMismatchData(__CommonData):
    TargetId = None
    Status = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of VrrAdaptiveBalanceHardwareCounterMismatchData class
    def __repr__(self):
        return \
            "VrrAdaptiveBalanceHwCounterMismatchData(TargetId={0}, Status={1}, TimeStamp={2})".format(
                self.TargetId, self.Status, self.TimeStamp)


##
# @brief        OsTargetMode class
class OsTargetMode(__CommonData):
    TargetId = 0
    ModeId = 0
    HActive = 0
    VActive = 0
    HTotal = 0
    VTotal = 0
    DotClock = 0
    IsInterlaced = 0
    IsPreferred = 0
    WireFormatPref = 0
    IsVirtualRRSupported = False
    VSyncMinRR = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overriden repr method
    # @return       None
    def __repr__(self):
        return \
            "TargetId(Model={0}, ModeId={1}, HActive={2}, VActive={3}, HTotal={4}, VTotal={5}, DotClock={6}, " \
            "IsInterlaced={7}, IsPreferred={8} " \
            "WireFormatPref={9}, IsVirtualRRSupported={10}, VSyncMinRR={11})".format(
                self.TargetId, self.ModeId, self.HActive, self.VActive, self.HTotal, self.VTotal, self.DotClock,
                self.IsInterlaced, self.IsPreferred, self.WireFormatPref, self.IsVirtualRRSupported, self.VSyncMinRR)

    ##
    # @brief        Overridden cmp Method
    # @param[in]    other - Other Instance
    # @return       int - 1/0
    def __cmp__(self, other):
        if not isinstance(other, OsTargetMode):
            return 1
        if self.TargetId == other.TargetId and \
                self.ModeId == other.ModeId and \
                self.HActive == other.HActive and \
                self.VActive == other.VActive and \
                self.HTotal == other.HTotal and \
                self.VTotal == other.VTotal and \
                self.DotClock == other.DotClock and \
                self.IsInterlaced == other.IsInterlaced and \
                self.IsPreferred == other.IsPreferred and \
                self.WireFormatPref == other.WireFormatPref and \
                self.IsVirtualRRSupported == other.IsVirtualRRSupported and \
                self.VSyncMinRR == other.VSyncMinRR:
            return 0
        return 1


##
# @brief    Exposed object for storing SetTimingColor event data
class SetTimingColor(__CommonData):
    Model = 0
    RangeType = 0
    Encoding = 0
    Gamut = 0
    BPC = 0
    YCBCR_Subsampling = 0
    Pipe = 0
    ContentType = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overriden repr method
    # @return       None
    def __repr__(self):
        return \
            "SetTimingColor(Model={0}, RangeType={1}, Encoding={2}, Gamut={3}, BPC={4}, YCbCr_Subsampling={5}, Pipe={6}, ContentType{7}, TimeStamp{8})".format(
                self.Model, self.RangeType, self.Encoding, self.Gamut, self.BPC, self.YCBCR_Subsampling, self.Pipe,
                self.ContentType, self.TimeStamp)

    ##
    # @brief        Overridden cmp Method
    # @param[in]    other - Other Instance
    # @return       int - 1/0
    def __cmp__(self, other):
        if not isinstance(other, SetTimingColor):
            return 1
        if self.Model == other.Model and \
                self.RangeType == other.RangeType and \
                self.Encoding == other.Encoding and \
                self.Gamut == other.Gamut and \
                self.BPC == other.BPC and \
                self.YCBCR_Subsampling == other.YCBCR_Subsampling and \
                self.Pipe == other.Pipe and \
                self.ContentType == other.ContentType:
            return 0
        return 1


##
# @brief        SetAdjustedColorimetryInfo Class
# @details      Exposed object for storing SetAdjustedColorimetryInfo event data
class SetAdjustedColorimetryInfo(__CommonData):
    TargetId = 0
    SdrWhiteLevel = 0
    RedPointcx = 0
    RedPointcy = 0
    GreenPointcx = 0
    GreenPointcy = 0
    BluePointcx = 0
    BluePointcy = 0
    WhitePointcx = 0
    WhitePointcy = 0
    MinLuminance = 0
    MaxLuminance = 0
    MaxFullFrameLuminance = 0
    FormatBitDepths = 0
    StandardColorimetryFlags = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of SetAdjustedColorimetryInfo class
    def __repr__(self):
        return \
            "SetAdjustedColorimetryInfo(TargetID={0},SdrWhiteLevel={1}, RedPointcx={2}, RedPointcy={3}, GreenPointcx={4}, GreenPointcy={5}, " \
            "BluePointcx={6}, BluePointcy={7}, WhitePointcx={8}, WhitePointcy={9}, MinLuminance={10}, MaxLuminance={11},  " \
            "MaxFullFrameLuminance={12}, FormatBitDepths={13}, StandardColorimetryFlags={14}, TimeStamp={15})".format(
                self.TargetId, self.SdrWhiteLevel, self.RedPointcx, self.RedPointcy, self.GreenPointcx,
                self.GreenPointcy,
                self.BluePointcx, self.BluePointcy, self.WhitePointcx,
                self.WhitePointcy, self.MinLuminance, self.MaxLuminance, self.MaxFullFrameLuminance,
                self.FormatBitDepths, self.StandardColorimetryFlags, self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - Comparison object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, SetAdjustedColorimetryInfo):
            return 1
        if self.TargetId == other.TargetId and \
                self.SdrWhiteLevel == other.SdrWhiteLevel and \
                self.RedPointcx == other.RedPointcx and \
                self.RedPointcy == other.RedPointcy and \
                self.GreenPointcx == other.GreenPointcx and \
                self.GreenPointcy == other.GreenPointcy and \
                self.BluePointcx == other.BluePointcx and \
                self.BluePointcy == other.BluePointcy and \
                self.WhitePointcx == other.WhitePointcx and \
                self.WhitePointcy == other.WhitePointcy and \
                self.MinLuminance == other.MinLuminance and \
                self.MaxLuminance == other.MaxLuminance and \
                self.MaxFullFrameLuminance == other.MaxFullFrameLuminance and \
                self.FormatBitDepths == other.FormatBitDepths and \
                self.StandardColorimetryFlags == other.StandardColorimetryFlags:
            return 0
        return 1


##
# @brief        HDRDisplayCaps class
# @details      Exposed object for storing SetAdjustedColorimetryInfo event data
class HDRDisplayCaps(__CommonData):
    HDRMetadataBlockFound = 0
    EOTFSupported = 0
    HdrStaticMetaDataType = 0
    DesiredMaxCLL = 0
    DesiredMaxFALL = 0
    DesiredMinCLL = 0
    Port = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - The Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of HDRDisplayCaps class
    def __repr__(self):
        return \
            "HDRDisplayCaps(HDRMetadataBlockFound={0},EOTFSupported={1}, HdrStaticMetaDataType={2}, DesiredMaxCLL={3}, DesiredMaxFALL={4}, DesiredMinCLL={5},Port={6}, \
            TimeStamp={7})".format(
                self.HDRMetadataBlockFound, self.EOTFSupported, self.HdrStaticMetaDataType, self.DesiredMaxCLL,
                self.DesiredMaxFALL, self.DesiredMinCLL, self.Port,
                self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - Comparison object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, HDRDisplayCaps):
            return 1
        if self.HDRMetadataBlockFound == other.HDRMetadataBlockFound and \
                self.EOTFSupported == other.EOTFSupported and \
                self.HdrStaticMetaDataType == other.HdrStaticMetaDataType and \
                self.DesiredMaxCLL == other.DesiredMaxCLL and \
                self.DesiredMaxFALL == other.DesiredMaxFALL and \
                self.DesiredMinCLL == other.DesiredMinCLL and \
                self.Port == other.Port:
            return 0
        return 1


##
# @brief        DisplayBrightness3 class
# @details      Exposed object for storing DisplayBrightness3 event data
class DisplayBrightness3(__CommonData):
    TargetId = 0
    BrightnessMillinits = 0
    TransitionTimeMs = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - The Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DisplayBrightness3 Class
    def __repr__(self):
        return \
            "DisplayBrightness3(TargetId={0},BrightnessMillinits={1}, TransitionTimeMs={2},TimeStamp={3})".format(
                self.TargetId, self.BrightnessMillinits, self.TransitionTimeMs, self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - comparison DisplayBrightness3 object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, DisplayBrightness3):
            return 1
        if self.TargetId == other.TargetId and \
                self.BrightnessMillinits == other.BrightnessMillinits and \
                self.TransitionTimeMs == other.TransitionTimeMs:
            return 0
        return 1


##
# @brief        OSGiven1DLUT class
# @details      Exposed object for storing DisplayBrightness3 event data
class OSGiven1DLUT(__CommonData):
    TargetId = 0
    GammaRampType = 0
    GammaLUTSize = 0
    GammaLUTData = [0]

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of OSGiven1DLUT class
    def __repr__(self):
        return \
            "OSGiven1DLUT(TargetId={0},GammaRampType={1}, GammaLUTSize={2},GammaLUTData={3},TimeStamp={4})".format(
                self.TargetId, self.GammaRampType, self.GammaLUTSize, self.GammaLUTData, self.TimeStamp)

    ##
    # @brief         Overridden cmp method
    # @param[in]     other - comparison OSGiven1DLUT object
    # @return        int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, OSGiven1DLUT):
            return 1
        if self.TargetId == other.TargetId and \
                self.GammaRampType == other.GammaRampType and \
                self.GammaLUTSize == other.GammaLUTSize and \
                self.GammaLUTData == other.GammaLUTData:
            return 0
        return 1


##
# @brief        OS1DLUTParam class
# @details      Exposed object for storing OS1DLUTParam event data
class OS1DLUTParam(__CommonData):
    Type = 0
    Operation = 0
    Num_Samples = 0
    Enable = 0
    Config_Flag = 0
    TargetID = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of OS1DLUTParam class
    def __repr__(self):
        return \
            "OS1DLUTParam(TargetID={0}, Type={1}, Operation={2}, Num_Samples={3}, Enable={4}, Config_Flag={5}, TimeStamp={6})".format(
                self.TargetID, self.Type, self.Operation, self.Num_Samples, self.Enable, self.Config_Flag,
                self.TimeStamp)

    ##
    # @brief         Overridden cmp method
    # @param[in]     other - comparison OS1DLUTParam object
    # @return        int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, OS1DLUTParam):
            return 1
        if self.TargetID == other.TargetID and \
                self.Type == other.Type and \
                self.Operation == other.Operation and \
                self.Num_Samples == other.Num_Samples and \
                self.Enable == other.Enable and \
                self.Config_Flag == other.Config_Flag:
            return 0
        return 1


##
# @brief        OSGivenCSC class
class OSGivenCSC(__CommonData):
    TargetId = 0
    GammaRampType = 0
    ScalarMultiplier = 0.0
    Matrix3x4Size = 0
    Matrix3x4Data = [0]

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief       Overridden repr method
    # @return      str - String representation of OSGivenCSC class
    def __repr__(self):
        return \
            "OSGivenCSC(TargetId={0},GammaRampType={1}, ScalarMultiplier={2},Matrix3x4Size={3},Matrix3x4Data={4}, TimeStamp={5})".format(
                self.TargetId, self.GammaRampType, self.ScalarMultiplier, self.Matrix3x4Size, self.Matrix3x4Data,
                self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - comparison OSGivenCSC object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, OSGivenCSC):
            return 1
        if self.TargetId == other.TargetId and \
                self.GammaRampType == other.GammaRampType and \
                self.ScalarMultiplier == other.ScalarMultiplier and \
                self.Matrix3x4Size == other.Matrix3x4Size and \
                self.Matrix3x4Data == other.Matrix3x4Data:
            return 0
        return 1


##
# @brief        DSBHDRGGamma class
# @details      Exposed object for storing DisplayStateBufferHDRGamma event data
class DSBHDRGamma(__CommonData):
    PipeID = 0
    SelectedDsb = 0
    DsbCtrlValue = 0
    HeadPtr = 0
    TailPtr = 0
    BufferDataSize = 0
    BufferData = [0]

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DSBHDRGamma class
    def __repr__(self):
        return \
            "DSBHDRGamma(PipeID={0},SelectedDsb={1}, DsbCtrlValue={2},HeadPtr={3}, TailPtr={4}, BufferDataSize={5}, BufferData={6}, TimeStamp={7})".format(
                self.PipeID, self.SelectedDsb, self.DsbCtrlValue, self.HeadPtr, self.TailPtr, self.BufferDataSize,
                self.BufferData, self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - comparison DSBHDRGamma object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, DSBHDRGamma):
            return 1
        if self.PipeID == other.PipeID and \
                self.SelectedDsb == other.SelectedDsb and \
                self.DsbCtrlValue == other.DsbCtrlValue and \
                self.HeadPtr == other.HeadPtr and \
                self.TailPtr == other.TailPtr and \
                self.BufferDataSize == other.BufferDataSize and \
                self.BufferData == other.BufferData:
            return 0
        return 1


##
# @brief        HDRMetadata class
# @details      Exposed object for storing HDRMetadata event data
class HDRMetadata(__CommonData):
    TargetID = 0
    HDRType = 0
    EOTF = 0
    DisplayPrimariesX0 = 0
    DisplayPrimariesX1 = 0
    DisplayPrimariesX2 = 0
    DisplayPrimariesY0 = 0
    DisplayPrimariesY1 = 0
    DisplayPrimariesY2 = 0
    WhitePointX = 0
    WhitePointY = 0
    MaxMasteringLuminance = 0
    MinMasteringluminance = 0
    MaxCLL = 0
    MaxFALL = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - string representation of HDRMetadata class
    def __repr__(self):
        return \
            "HDRMetadata(TargetID={0},HDRType={1}, EOTF={2}, DisplayPrimariesX0={3}, DisplayPrimariesX1={4}, DisplayPrimariesX2={5}, " \
            "DisplayPrimariesY0={6}, DisplayPrimariesY1={7}, DisplayPrimariesY2={8}, WhitePointX={9}, WhitePointY={10}, MaxMasteringLuminance={11},  " \
            "MinMasteringluminance={12}, MaxCLL={13}, MaxFALL={14}, TimeStamp={15})".format(
                self.TargetID, self.HDRType, self.EOTF, self.DisplayPrimariesX0, self.DisplayPrimariesX1,
                self.DisplayPrimariesX2,
                self.DisplayPrimariesY0, self.DisplayPrimariesY1, self.DisplayPrimariesY2,
                self.WhitePointX, self.WhitePointY, self.MaxMasteringLuminance, self.MinMasteringluminance,
                self.MaxCLL, self.MaxFALL, self.TimeStamp)

    ##
    # @brief        Overridden cmp method
    # @param[in]    other - comparison HDRMetadata object
    # @return       int - 1 if comparison is unsuccessful, 0 if successful
    def __cmp__(self, other):
        if not isinstance(other, HDRMetadata):
            return 1
        if self.TargetID == other.TargetID and \
                self.HDRType == other.HDRType and \
                self.EOTF == other.EOTF and \
                self.DisplayPrimariesX0 == other.DisplayPrimariesX0 and \
                self.DisplayPrimariesX1 == other.DisplayPrimariesX1 and \
                self.DisplayPrimariesX2 == other.DisplayPrimariesX2 and \
                self.DisplayPrimariesY0 == other.DisplayPrimariesY0 and \
                self.DisplayPrimariesY1 == other.DisplayPrimariesY1 and \
                self.DisplayPrimariesY2 == other.DisplayPrimariesY2 and \
                self.WhitePointX == other.WhitePointX and \
                self.WhitePointY == other.WhitePointY and \
                self.MaxMasteringLuminance == other.MaxMasteringLuminance and \
                self.MinMasteringluminance == other.MinMasteringluminance and \
                self.MaxCLL == other.MaxCLL and \
                self.MaxFALL == other.MaxFALL:
            return 0
        return 1


##
# @brief        StartDeviceStopData class
# @details      Exposed object for storing StartDeviceStopData event data
class StartDeviceStopData(__CommonData):
    Status = 0
    VideoPresentSources = 0
    NumberOfChildren = 0

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of StartDeviceStopData Class
    def __repr__(self):
        return \
            "StartDeviceStopData(Status={0}, VideoPresentSources={1}, NumberOfChildren={2})".format(
                self.Status, self.VideoPresentSources, self.NumberOfChildren)


##
# @brief        DFTFlipAddress class
# @details      Exposed object for storing DFTFlipAddress event data
class DFTFlipAddress(object):
    Pipe = None
    PlaneID = None
    Address = None
    ScanLineCount = None
    FrameCount = None
    DisplayTime = None
    AddressUv = None
    OutFlags = None
    PresentationTimeStamp = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DFTFlipAddress Class
    def __repr__(self):
        return \
            "DFTFlipAddress(Pipe= {0}, PlaneID= {1}, Address= {2}, ScanLineCount= {3}, FrameCount= {4}, " \
            "DisplayTime= {5}, AddressUv= {6}, OutFlags= {7}, PresentationTimeStamp= {8})" \
            "".format(self.Pipe, self.PlaneID, self.Address, self.ScanLineCount, self.FrameCount,
                      self.DisplayTime, self.AddressUv, self.OutFlags, self.PresentationTimeStamp)


##
# @brief        DcStateData class
# @brief        Exposed object for storing DcStateData event data
class DcStateData(__CommonData):
    DcStateRequested = None
    DcStateRestriction = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DcStateData Class
    def __repr__(self):
        return \
            "DcStateData(DcStateRequested={0}, DcStateRestriction={1})".format(
                self.DcStateRequested, self.DcStateRestriction)


##
# @brief        SpiData class
# @brief        Exposed object for storing SPI event data
class SpiData(__CommonData):
    SpiReasons = None
    Port = None
    SPIIRQReasons = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of SpiDataData Class
    def __repr__(self):
        return \
            "SPIData(Port={0}, SPIIRQReasons={1}, SpiReasons={2}, TaskName={3}, TimeStamp={4})".format(
                self.Port, self.SPIIRQReasons, self.SpiReasons, self.TaskName, self.TimeStamp)


##
# @brief        PpsData class
# @brief        Exposed object for storing PpsData event data
class PpsData(__CommonData):
    PpsSignal = None
    PpsState = None
    Port = None
    TimeStamp = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DcStateData Class
    def __repr__(self):
        return \
            "PpsData(PpsSignal={0}, PpsState={1})".format(
                self.PpsSignal, self.PpsState)


##
# @brief        FeatureStatus class
# @details      Exposed object for storing FeatureStatus event data
class FeatureStatus(object):
    Feature = None
    Enable = None
    Param1 = None
    Param2 = None
    Param3 = None
    Param4 = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FeatureStatus Class
    def __repr__(self):
        return \
            "FeatureStatus(Feature= {0}, Enable= {1}, Param1= {2}, Param2= {3}, Param3= {4}, " \
            "Param4= {5}" \
            "".format(self.Feature, self.Enable, self.Param1, self.Param2, self.Param3,
                      self.Param4)


##
# @brief        CancelFlip class
# @details      Exposed object for storing CancelFlip event data
class CancelFlip(object):
    EntryTimeStamp = None
    SourceId = None
    LayerIndex = None
    PresentIdCancelRequested = None
    PresentIdCancelled = None
    HwAddressBase = None
    HwAddressBaseCancelled = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FeatureStatus Class
    def __repr__(self):
        return \
            "CancelFlip(EntryTimeStamp= {0}, SourceId= {1}, LayerIndex= {2}, PresentIdCancelRequested= {3}," \
            " PresentIdCancelled= {4}, HwAddressBase= {5}, HwAddressBaseCancelled= {6}" \
            "".format(self.EntryTimeStamp, self.SourceId, self.LayerIndex, self.PresentIdCancelRequested,
                      self.PresentIdCancelled, self.HwAddressBase, self.HwAddressBaseCancelled)


##
# @brief        TargetMode class
# @details      Exposed object for storing TargetMode event data
class TargetMode(object):
    TargetId = None
    H_Active = None
    V_Active = None
    H_Total = None
    V_Total = None
    RR = None
    DeprecatedDotClock = None
    IsInterlaced = None
    IsPreferred = None
    Origin = None
    SamplingMode = None
    BpcSupported = None
    DotClock = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FeatureStatus Class
    def __repr__(self):
        return \
            "TargetMode(TargetId= {0}, H_Active= {1}, V_Active= {2}, H_Total= {3},V_Total= {4}, RR= {5}," \
            "DeprecatedDotClock= {6} , IsInterlaced= {7}, IsPreferred= {8}, Origin={9}, SamplingMode= {10}, " \
            "BPCSupported= {11}, DotClock= {12} ".format(self.TargetId, self.H_Active, self.V_Active, self.H_Total,
                                                         self.V_Total, self.RR, self.DeprecatedDotClock,
                                                         self.IsInterlaced, self.IsPreferred, self.Origin,
                                                         self.SamplingMode, self.BpcSupported, self.DotClock)


##
# @brief        NotifyVSyncLogBufferPlaneExt Class
class NotifyVSyncLogBufferPlaneExt(object):
    TargetID = None
    LayerIndex = None
    LogBufferIndex = None
    PresentID = None
    NotifyTimeStamp = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of NotifyVsyncLogBufferPlaneExt class
    def __repr__(self):
        return \
            "NotifyVSyncLogBufferPlaneExt(TargetID= {0}, LayerIndex= {1}, LogBufferIndex= {2}, PresentID= {3}, " \
            "NotifyTimeStamp= {4})".format(self.TargetID, self.LayerIndex, self.LogBufferIndex, self.PresentID,
                                           self.NotifyTimeStamp)


##
# @brief        NotifyVSyncLogBufferPlane Class
class NotifyVSyncLogBufferPlane(object):
    TargetID = None
    LayerIndex = None
    FirstFreeIndex = None
    IsNotifyVSync = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of NotifyVsyncLogBufferPlane class
    def __repr__(self):
        return \
            "NotifyVSyncLogBufferPlane(TargetID= {0}, LayerIndex= {1}, FirstFreeIndex= {2}, " \
            "IsNotifyVSync= {3})".format(
                self.TargetID, self.LayerIndex, self.FirstFreeIndex, self.IsNotifyVSync)


##
# @brief        SetInterruptTargetPresentId class
# @details      Exposed object for storing SetInterruptTargetPresentId event data
class SetInterruptTargetPresentId(object):
    EntryTimeStamp = None
    SourceId = None
    LayerIndex = None
    InterruptTargetPresentId = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of SetInterruptTargetPresentId Class
    def __repr__(self):
        return \
            "SetInterruptTargetPresentId(EntryTimeStamp= {0}, SourceId= {1}, LayerIndex= {2}, " \
            "InterruptTargetPresentId= {3},".format(
                self.EntryTimeStamp, self.SourceId, self.LayerIndex, self.InterruptTargetPresentId)


##
# @brief        HWFlipQMode Class
class HWFlipQMode(object):
    TargetId = None
    FlipQMode = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of HWFlipQMode class
    def __repr__(self):
        return \
            "HWFlipQMode(TargetId= {0}, FlipQMode= {1})".format(self.TargetId, self.FlipQMode)


##
# @brief        RrSwitchInfo Class
class RrSwitchInfo(__CommonData):
    TargetId = None
    IsCurrent = None
    RrMode = None
    RrSwitchMethod = None
    FixedRr1000 = None
    VbiMasking = None
    VbiMaskingFactor = None
    VariableMinRr1000 = None
    VariableMaxRr1000 = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of HWFlipQMode class
    def __repr__(self):
        return \
            "RrSwitchInfo(TargetId= {0}, IsCurrent= {1}, RrMode= {2}, RrSwitchMethod= {3}, FixedRr1000= {4}, " \
            "VbiMasking= {5}, VbiMaskingFactor= {6}, VariableMinRr1000= {7}, VariableMaxRr1000= {8}, " \
            "TimeStamp= {9})".format(self.TargetId, self.IsCurrent, self.RrMode, self.RrSwitchMethod, self.FixedRr1000,
                                     self.VbiMasking, self.VbiMaskingFactor, self.VariableMinRr1000,
                                     self.VariableMaxRr1000, self.TimeStamp)


##
# @brief        RrSwitchProgram Class
class RrSwitchProgram(__CommonData):
    Port = None
    SinkType = None
    SinkIndex = None
    RrSwitchMethod = None
    LinkM = None
    VTotal = None
    VSyncStart = None
    VSyncEnd = None
    VrrEnable = None
    VrrVmin = None
    VrrVmax = None
    VrrFlipLine = None
    FrameFillTime = None
    GuardBand = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of HWFlipQMode class
    def __repr__(self):
        return \
            "RrSwitchProgram(Port= {0}, SinkType= {1}, SinkIndex= {2}, RrSwitchMethod= {3}, LinkM= {4}, " \
            "VTotal= {5}, VSyncStart= {6}, VSyncEnd= {7}, VrrEnable= {8}, VrrVmin= {9}, VrrVmax= {10}, " \
            "VrrFlipLine= {11}, FrameFillTime= {12}, GuardBand= {13}, TimeStamp= {14})" \
                .format(
                self.Port, self.SinkType, self.SinkIndex, self.RrSwitchMethod, self.LinkM, self.VTotal,
                self.VSyncStart, self.VSyncEnd, self.VrrEnable, self.VrrVmin, self.VrrVmax, self.VrrFlipLine,
                self.FrameFillTime, self.GuardBand, self.TimeStamp)


##
# @brief        FmsStatusInfo class
# @details      Exposed object for storing FmsStatusInfo event data
class FmsStatusInfo(object):
    TargetId = None
    Status = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FmsStatusInfo Class
    def __repr__(self):
        return \
            "FmsStatusInfo(TargetId= {0}, FmsStatus= {1}".format(self.TargetId, self.Status)


##
# @brief        ProcessConfigTable class
# @details      Exposed object for storing ProcessConfigTable event data
class ProcessConfigTable(object):
    ProcessName = None
    ProcessId = None
    GamingSyncMode = None
    HeadIndex = None
    RefCount = None
    FlipSubmissionDone = None
    NumValidEntries = None
    Action = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ProcessConfigTable Class
    def __repr__(self):
        return \
            "ProcessConfigTable(ProcessName= {0}, ProcessId= {1}, GamingSyncMode= {2}, HeadIndex= {3}, RefCount= {4}, " \
            "FlipSubmissionDone= {5}, NumValidEntries= {6}, Action= {7}".format(self.ProcessName, self.ProcessId,
                                                                                self.GamingSyncMode, self.HeadIndex,
                                                                                self.RefCount, self.FlipSubmissionDone,
                                                                                self.NumValidEntries, self.Action)


##
# @brief        FlipProcessDetails class
# @details      Exposed object for storing FlipProcessDetails event data
class FlipProcessDetails(object):
    ProcessName = None
    ProcessId = None
    ProcessFlags = None
    LayerIndex = None
    hAllocation = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FlipProcessDetails Class
    def __repr__(self):
        return \
            "FlipProcessDetails(ProcessName= {0}, ProcessId= {1}, ProcessFlags= {2}, " \
            "LayerIndex = {3}, hAllocation= {4}".format(self.ProcessName, self.ProcessId, self.ProcessFlags,
                                                        self.LayerIndex, self.hAllocation)


##
# @brief        HwPlaneToLayerIndex class
# @details      Exposed object for storing HwPlaneToLayerIndex event data
class HwPlaneToLayerIndex(object):
    HwPlaneIndexMap = None
    LayerIndexMap = None
    PipeId = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of HwPlaneToLayerIndex Class
    def __repr__(self):
        return \
            "HwPlaneToLayerIndex(HwPlaneIndexMap= {0}, LayerIndexMap= {1}, PipeId= {2}".format(
                self.HwPlaneIndexMap, self.LayerIndexMap, self.PipeId)


##
# @brief        FeatureControl class
# @details      Exposed object for storing FeatureControl event data
class FeatureControl(object):
    Display = None
    PowerConservation = None
    SkuTableSize = None
    SkuData = None
    WaTableSize = None
    WaData = None
    OsFtrTableSize = None
    OsFtrTable = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of FeatureControl Class
    def __repr__(self):
        return \
            "FeatureControl(Display= {0}, PowerConservation= {1}, SkuTableSize= {2}, SkuData= {3}, WaTableSize= {4}," \
            "WaData= {5}, OsFtrTableSize= {6}, OsFtrTable= {7}".format(self.Display, self.PowerConservation,
                                                                       self.SkuTableSize, self.SkuData,
                                                                       self.WaTableSize, self.WaData,
                                                                       self.OsFtrTableSize, self.OsFtrTable)


##
# @brief        DFTFlipAllParam class
# @details      Exposed object for storing DFTFlipAllParam event data
class DFTFlipAllParam(object):
    Pipe = None
    PlaneID = None
    Enabled = None
    PixelFmt = None
    SurfMemType = None
    ScanX = None
    ScanY = None
    Orientation = None
    PosX = None
    PosY = None
    Address = None
    Rsvd = None
    FeatureFlags = None
    ScanLineCount = None
    FrameCount = None
    AddressUv = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of DFTFlipAllParam class
    def __repr__(self):
        return \
            "DFTFlipAllParam(Pipe= {0}, PlaneID= {1}, Enabled= {2}, PixelFmt= {3}, SurfMemType= {4}, ScanX= {5}, " \
            "ScanY= {6}, Orientation= {7}, PosX= {8}, PosY= {9}, Address= {10}, FeatureFlags= {11}, " \
            "ScanLineCount= {12}, FrameCount= {13}, AddressUv = {14})".format(
                self.Pipe, self.PlaneID, self.Enabled, self.PixelFmt, self.SurfMemType, self.ScanX, self.ScanY,
                self.Orientation, self.PosX, self.PosY, self.Address, self.FeatureFlags, self.ScanLineCount,
                self.FrameCount, self.AddressUv
            )


##
# @brief        SystemDetailsTranscoderInfo class
# @details      Exposed object for storing SystemDetailsTranscoderInfo event data
class SystemDetailsTranscoderInfo(object):
    Port = None
    Pipe = None
    TargetID = None
    Vot = None
    Enable = None
    SrcX = None
    SrcY = None
    PixelFmt = None
    HActive = None
    VActive = None
    HTotal = None
    VTotal = None
    RR = None
    DotClock = None
    Scaling = None
    FMS = None
    IsInterlaced = None
    IsS3DMode = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of SystemDetailsTranscoderInfo Class
    def __repr__(self):
        return \
            "SystemDetailsTranscoderInfo(Port= {0}, Pipe= {1}, TargetID= {2}, Vot= {3}, Enable= {4}, SrcX= {5}, " \
            "SrcY= {6}, PixelFmt= {7}, HActive= {8}, VActive= {9}, HTotal= {10}, VTotal= {11}, RR= {12}, " \
            "DotClock= {13}, Scaling= {14}, FMS= {15}, IsInterlaced= {16}, IsS3DMode= {17}" \
                .format(self.Port, self.Pipe, self.TargetID, self.Vot, self.Enable, self.SrcX, self.SrcY, self.PixelFmt,
                        self.HActive, self.VActive, self.HTotal, self.VTotal, self.RR, self.DotClock, self.Scaling,
                        self.FMS, self.IsInterlaced, self.IsS3DMode)


##
# @brief        PcPsrPr Class
class DisplayPcPsrPrProcess(__CommonData):
    PipeId = None
    Operation = None
    Field1 = None
    Field2 = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of PcPsrPr class
    def __repr__(self):
        return \
            "DisplayPcPsrPrProcess(PipeId= {0}, Operation= {1}, Field1= {2}, Field2= {3}, TimeStamp= {4} ".format(
                self.PipeId, self.Operation, self.Field1, self.Field2, self.TimeStamp)


##
# @brief        ScalerInfo class
# @details      Exposed object for storing ScalerInfo event data
class ScalerInfo(object):
    Index = None
    Plane = None
    Pipe = None
    EnableFlag = None
    PosX = None
    PosY = None
    ScaledX = None
    ScaledY = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ScalerInfo Class
    def __repr__(self):
        return \
            "ScalerInfo(Index= {0}, Plane= {1}, Pipe= {2}, EnableFlag= {3}, PosX= {4}, PosY= {5}, " \
            "ScaledX= {6}, ScaledY= {7})".format(self.Index, self.Plane, self.Pipe, self.EnableFlag, self.PosX,
                                                 self.PosY, self.ScaledX, self.ScaledY)


##
# @brief        ScalerPlane class
# @details      Exposed object for storing ScalerPlane event data
class ScalerPlane(object):
    Pipe = None
    EnableFlag = None
    ScalingType = None
    PosX = None
    PosY = None
    ScaledX = None
    ScaledY = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ScalerPlane Class
    def __repr__(self):
        return \
            "ScalerPlane(Pipe= {0}, EnableFlag= {1}, ScalingType= {2} PosX= {3}, PosY= {4}, " \
            "ScaledX= {5}, ScaledY= {6})".format(self.Pipe, self.EnableFlag, self.ScalingType, self.PosX, self.PosY,
                                                 self.ScaledX, self.ScaledY)


##################################################################################
# Legacy Data objects
##################################################################################


##
# @brief        DpFastLinkTrainingData class
# @details      Exposed object for storing DpFastLinkTraining event data
class DpFastLinkTrainingData(__CommonData):
    Port = None  # String
    LinkRate = None  # Int
    NumLanes = None  # Int
    MSTMode = None  # Boolean
    LinkTrained = None  # Boolean
    SwingLevel = None  # String
    PreEmpLevel = None  # String
    Return = None  # String

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DpFastLinkTrainingData class
    def __repr__(self):
        return "DpLinkTraining: Port= {0}, LinkRate= {1}, NumLanes= {2}, MSTMode= {3}, LinkTrained= {4}, " \
               "SwingLevel= {5}, PreEmpLevel= {6}".format(self.Port, self.LinkRate, self.NumLanes, self.MSTMode,
                                                          self.LinkTrained, self.SwingLevel, self.PreEmpLevel)


##
# @brief        DpLinkTrainingData class
# @details      Exposed object for storing DpLinkTraining event data
class DpLinkTrainingData(DpFastLinkTrainingData):
    LinkTrainingTime = None  # Double

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        super(DpLinkTrainingData, self).__init__(data_dict)
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of DpLinkTrainingData Class
    def __repr__(self):
        return \
            "DpLinkTraining: Port= {0}, LinkRate= {1}, NumLanes= {2}, MSTMode= {3}, LinkTrained= {4}, " \
            "SwingLevel= {5}, PreEmpLevel= {6}, LinkTrainingTime= {7}ms".format(
                self.Port, self.LinkRate, self.NumLanes, self.MSTMode, self.LinkTrained, self.SwingLevel,
                self.PreEmpLevel, self.LinkTrainingTime)


##
# @brief        ControlInterrupt1Data class
# @details      Exposed object for storing ControlInterrupt event data
class ControlInterrupt1Data(__CommonData):
    InterruptType = None
    Enable = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ControlInterrupt1Data Class
    def __repr__(self):
        return "ControlInterrupt1Data(TimeStamp={0}, InterruptType={1}, Enable={2})".format(
            self.TimeStamp, self.InterruptType, self.Enable)


##
# @brief        ControlInterrupt2Data class
# @details      Exposed object for storing ControlInterrupt2 event data
class ControlInterrupt2Data(__CommonData):
    InterruptType = None
    InterruptState = None
    CrtVsyncState = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ControlInterrupt2Data Class
    def __repr__(self):
        return "ControlInterrupt2Data(TimeStamp={0}, InterruptType={1}, InterruptState={2}, CrtVsyncState={3})".format(
            self.TimeStamp, self.InterruptType, self.InterruptType, self.CrtVsyncState)


##
# @brief        ControlInterrupt3Data class
# @details      Exposed object for storing ControlInterrupt3 event data
class ControlInterrupt3Data(ControlInterrupt2Data):
    SourceId = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        super(ControlInterrupt3Data, self).__init__(data_dict)
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ControlInterrupt3Data Class
    def __repr__(self):
        return "ControlInterrupt2Data(TimeStamp={0}, InterruptType={1}, InterruptState={2}, CrtVsyncState={3}, " \
               "SourceId={4})".format(self.TimeStamp, self.InterruptType, self.InterruptType, self.CrtVsyncState,
                                      self.SourceId)


##
# @brief        ScanlineInterruptData class
# @details      Exposed object for storing ScanlineInterrupt event data
class ScanlineInterruptData(__CommonData):
    Pipe = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of ScanlineInterruptData Class
    def __repr__(self):
        return "ScanlineInterruptData(TimeStamp={0}, Pipe={1})".format(self.TimeStamp, self.Pipe)


##
# @brief        CheckPresentDurationSupportData class
# @details      Exposed object for storing GfxCheckPresentDurationSupport event data
class CheckPresentDurationSupportData(__CommonData):
    SourceId = None  # uint
    DesiredPresentDuration = None  # uint
    ClosestSmallerDuration = None  # uint
    ClosestLargerDuration = None  # uint
    IsDataProvided = None  # Boolean

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of CheckPresentDurationSupportData Class
    def __repr__(self):
        return "CheckPresentDurationSupportData(SourceId={0}, DesiredPresentDuration={1}, ClosestSmallerDuration={2}," \
               " ClosestLargerDuration={3}, IsDataProvided={4}, TimeStamp={5})" \
               "".format(self.SourceId, self.DesiredPresentDuration, self.ClosestSmallerDuration,
                         self.ClosestLargerDuration, self.IsDataProvided, self.TimeStamp)


##
# @brief        QueryConnectionChangeData class
# @brief        Exposed object for storing QueryConnectionChangeData event data
class QueryConnectionChangeData(__CommonData):
    ConnectionChangeId = None
    TargetId = None
    ConnectionState = None
    MonitorConnectLinkTargetType = None
    TargetConnectBaseTargetType = None
    TargetConnectNewTargetId = None
    TargetJoinBaseTargetType = None
    TargetJoinNewTargetId = None
    MonitorConnectMonitorConnectFlags = None
    Usb4MonitorInfoDPInAdapterNumber = None
    Usb4MonitorInfoUSB4DriverID = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of QueryConnectionChangeData Class
    def __repr__(self):
        return \
            "QueryConnectionChangeData(ConnectionChangeId={0}, TargetId={1}. ConnectionState={2}, " \
            "MonitorConnectLinkTargetType={3}, TargetConnectBaseTargetType={4}, TargetConnectNewTargetId={5}, " \
            "TargetJoinBaseTargetType={6}, TargetJoinNewTargetId={7},MonitorConnectMonitorConnectFlags={8}, " \
            "Usb4MonitorInfoDPInAdapterNumber={9}, Usb4MonitorInfoUSB4DriverID={10})".format(self.ConnectionChangeId,
                                                                                             self.TargetId,
                                                                                             self.ConnectionState,
                                                                                             self.MonitorConnectLinkTargetType,
                                                                                             self.TargetConnectBaseTargetType,
                                                                                             self.TargetConnectNewTargetId,
                                                                                             self.TargetJoinBaseTargetType,
                                                                                             self.TargetJoinNewTargetId,
                                                                                             self.MonitorConnectMonitorConnectFlags,
                                                                                             self.Usb4MonitorInfoDPInAdapterNumber,
                                                                                             self.Usb4MonitorInfoUSB4DriverID)


##
# @brief        InfoFrameData class
# @details      Exposed object for storing InfoFrame event data
class InfoFrameData(__CommonData):
    Port = None
    Pipe = None
    Protocol = None
    DipType = None
    DipSize = None
    DipData = None
    Enable = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of InfoFrameData Class
    def __repr__(self):
        return \
            "InfoFrameData: Port= {0}, Pipe= {1}, Display Protocol= {2}, DipType= {3}, DipSize= {4}, " \
            "DipData= {5}, Enable= {6}".format(
                self.Port, self.Pipe, self.Protocol, self.DipType, self.DipSize, self.DipData, self.Enable)


##
# @brief        BlcDDI3Optimization class
# @details      Exposed object for storing BlcDDI3Optimization event data
class BlcDDI3Optimization(__CommonData):
    TargetId = None
    OptimizationLevel = None
    IsNitsBased = None
    AggrLevel = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of InfoFrameData Class
    def __repr__(self):
        return \
            "BlcDDI3Optimization: TargetId = {0}, OptimizationLevel = {1}, IsNitsBased = {2}, AggrLevel = {3}".format(
                self.TargetId, self.OptimizationLevel, self.IsNitsBased, self.AggrLevel)


##
# @brief        PwrConsD0D3StateChangeData class
# @details      Exposed object for storing PwrConsD0D3StateChangeData event data
class PwrConsD0D3StateChangeData(__CommonData):
    IsD0 = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief       Overridden repr method
    # @return      str - String representation of OSGivenCSC class
    def __repr__(self):
        return "PwrConsD0D3StateChangeData(IsD0= {0})".format(self.IsD0)


##
# @brief        HPDLiveStateData class
# @details      Exposed object for storing HPD live state event data
class HPDLiveStateData(__CommonData):
    Port = None
    Attached = None
    PortConnectorType = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        Overridden repr method
    # @return       str - String representation of HPDLiveStateData Class
    def __repr__(self):
        return "HPDLiveStateData: Port= {0}, Attached= {1}, PortConnectorType= {2}, TimeStamp= {3}".format(
            self.Port, self.Attached, self.PortConnectorType, self.TimeStamp)


##
# @brief        DpRxCaps class
# @details      Exposed object for storing DpRxCaps event data
class DpRxCaps(__CommonData):
    MaxLinkRate = None
    MaxLanes = None
    FastLinkTraining = None
    TrainingPattern = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief       Overridden repr method
    # @return      str - String representation of OSGivenCSC class
    def __repr__(self):
        return "DpRxCaps(MaxLinkRate= {0}, MaxLanes= {1}, FastLinkTraining= {2}, TrainingPattern= {3} )" \
            .format(self.MaxLinkRate, self.MaxLanes, self.FastLinkTraining, self.TrainingPattern)


##
# @brief        EtlDetails class
# @details      Exposed object for etl details
class EtlDetails(object):
    EndTime = None
    SessionStartTime = None
    SessionEndTime = None
    SessionDuration = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - Data Dictionary List
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief       Overridden repr method
    # @return      str - String representation of EtlDetails class
    def __repr__(self):
        return "EtlDetails(EndTime= {0}, SessionStartTime= {1}, SessionEndTime= {2}, SessionDuration= {3})".format(
            self.EndTime, self.SessionStartTime, self.SessionEndTime, self.SessionDuration)


##
# @brief    RrSwitchCapsFixedRxCapsData class
# @details Exposed object for storing RrSwitchCapsFixedRxCapsData event data
class RrSwitchCapsFixedRxCapsData(__CommonData):
    VbiMaskingFactor = None  # int
    VbiMasking = None  # boolean
    Port = None  # string
    SinkType = None  # string
    SinkIndex = None  # int
    ActiveCaps = None  # boolean
    FixedRrSwitching = None  # boolean
    FullRrRange = None  # boolean
    MinRr = None  # int
    MaxRr = None  # int
    NumSupportedRr = None  # boolean
    RrSwitchMethod = None  # int
    DrrsPanelType = None  # string
    VirtualRr = None  # bool
    VSyncMinRr1000 = None  # int

    ##
    # @brief    Constructor
    # @param[in]    data_dict - Data dictionary list
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief    Overridden repr method
    # @return    str - String representation of RrSwitchCapsFixedRxCapsData class
    def __repr__(self):
        return \
            "RrSwitchCapsFixedRxCaps: VbiMaskingFactor={0}, VbiMasking={1}, Port={2}, SinkType={3}, " \
            "SinkIndex={4}, ActiveCaps={5}, FixedRrSwitching={6}, FullRrRange={7}, MinRr={8}, MaxRr={9}, " \
            "NumSupportedRr={10}, RrSwitchMethod={11}, DrrsPanelType={12}, VirtualRr={13}, VSyncMinRr1000={14}".format(
                self.VbiMaskingFactor, self.VbiMasking, self.Port, self.SinkType, self.SinkIndex, self.ActiveCaps,
                self.FixedRrSwitching, self.FullRrRange, self.MinRr, self.MaxRr, self.NumSupportedRr,
                self.RrSwitchMethod,
                self.DrrsPanelType, self.VirtualRr, self.VSyncMinRr1000
            )


##
# @brief        CursorPosition Class
# @details      Exposed object for storing CursorPositionEvent data
class CursorPositionData(__CommonData):
    SourceId = None
    x = None
    y = None
    PointerPositionFlag = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of CursorPositionEventData Class
    def __repr__(self):
        return f"CursorPositionEventQueue(SourceId= {self.SourceId}, X Pos= {self.x}, Y Pos= {self.y}, " \
               f"PostionFlags= {self.PointerPositionFlag})"


##
# @brief        CursorShape Class
# @details      Exposed object for storing CursorShapeEvent data
class CursorShapeData(__CommonData):
    SourceId = None
    Width = None
    Height = None
    PointerPositionFlag = None
    Pitch = None
    XHot = None
    YHot = None

    ##
    # @brief        Constructor
    # @param[in]    data_dict - data dictionary
    def __init__(self, data_dict):
        for k in data_dict.keys():
            self.__setattr__(k, data_dict[k])

    ##
    # @brief        overridden repr method
    # @return       str - String representation of CursorShapeEventData Class
    def __repr__(self):
        return f"CursorShapeEventQueue(SourceId= {self.SourceId}, Width= {self.Width}, Height= {self.Height}, " \
               f"PostionFlags= {self.PointerPositionFlag})"


##################################################################################
# Helper APIs
##################################################################################

##
# @brief        Internal API to get report
# @details      If report is already present in cache dictionary, it will be returned from cache otherwise required
#               report will be loaded first before returning
# @param[in]    report_name - report name from ReportNames class
# @return       dict - JSON report data
def __get_report(report_name):
    global __report

    # Validate arguments
    if report_name not in __ReportNames.ALL:
        logging.warning("Invalid arguments: report_name= {0}".format(report_name))
        return None

    # Check if report is already loaded, if yes return from cache
    if __report[report_name] is not None:
        return __report[report_name]

    # If report is not loaded, load first and then return
    reload_report(report_name)
    return __report[report_name]


##
# @brief        Internal API to remove the report from disk
# @return       None
def __remove_reports():
    for report in __ReportNames.ALL:
        file_path = __ReportNames.get_file_path(report)
        # Delete the given file if exists
        if os.path.exists(file_path):
            logging.debug("\tRemoving existing report: {0}".format(file_path))
            os.unlink(file_path)

    for report in __ReportNames.ALL:
        # Warn if unable to delete existing report
        if os.path.exists(__ReportNames.get_file_path(report)):
            logging.warning("\tUnable to delete existing report: {0}".format(__ReportNames.get_file_path(report)))


##################################################################################
# Exposed APIs
##################################################################################

##
# @brief        Exposed API to reload data from report
# @param[in]    report_name - __ReportName object
# @return       bool - True if reloading is successful, False otherwise
def reload_report(report_name):
    global __report

    # Validate arguments
    if report_name not in __ReportNames.ALL:
        logging.warning("Invalid arguments: report_name= {0}".format(report_name))
        return False

    try:
        with open(__ReportNames.get_file_path(report_name)) as f:
            __report[report_name] = json.load(f)
    except Exception as e:
        logging.warning(e)
        return False

    return True


##
# @brief        Exposed API to generate report
# @param[in]    etl_path - complete .etl file path
# @param[in]    config - EtlParserConfig Object
# @return       bool - True if report generation and loading is successful, False otherwise
def generate_report(etl_path, config=None):
    global __report

    if config is None:
        config = EtlParserConfig()
        config.value = DEFAULT_ETL_PARSER_CONFIG

    # Make sure etl_file exists
    if not os.path.exists(etl_path):
        logging.error("{0} not found".format(etl_path))
        return False

    # Delete any existing report
    __remove_reports()

    # Clear cache
    __report = {
        'commonData': None,
        'dbgMsgData': None,
        'displayDiagnosticsData': None,
        'dpcdData': None,
        'flipData': None,
        'functionData': None,
        'mmioData': None,
        'vbiData': None,
        'interruptData': None,
        'dpstData': None,
        'i2cData': None,
        'psrData': None,
        'displayDetectData': None
    }

    # Sometime EtlParser may dump a lot of data on console. Printing on console consumes a lot of time hence dumping the
    # data in text file to reduce the test execution time
    cmd = "{0} {1} {2} > console_dump_{3}.txt".format(FILE_PATH_ETL_PARSER, etl_path, config.value, time.time())
    subprocess.Popen(cmd, shell=True).wait()

    # Check if reports got generated or not
    for report in __ReportNames.ALL:
        if eval('config.{0} != 1'.format(report)):
            continue

        if not os.path.exists(__ReportNames.get_file_path(report)):
            # For larger JSON files, OS may take some time to reflect the file existence
            time.sleep(5)

            if not os.path.exists(__ReportNames.get_file_path(report)):
                logging.error("Failed to generate report: {0}".format(__ReportNames.get_file_path(report)))
                gdhm.report_bug(
                    title="[EtlParserLib] Failed to generate ETL report",
                    problem_classification=gdhm.ProblemClassification.FUNCTIONALITY,
                    component=gdhm.Component.Test.DISPLAY_INTERFACES,
                    priority=gdhm.Priority.P2,
                    exposure=gdhm.Exposure.E2
                )
                return False

    return True


##
# @brief        Exposed API to get a list of DDIs with call entries in ETL
# @return       output - a list of DDI names if successful, None otherwise
def get_ddi_list():
    report = __get_report(__ReportNames.DISPLAY_DIAG)
    if report is None:
        return None

    if "ddiHandler" not in report.keys() or "ddiDataQueue" not in report["ddiHandler"].keys():
        return None

    output = []
    for ddi_entry in report["ddiHandler"]["ddiDataQueue"]:
        if ddi_entry["Ddi"] not in output:
            output.append(ddi_entry["Ddi"])
    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get execution data for any given DDI
# @param[in]    target_ddi -  DDI name
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit -  maximum number of records in output
# @return       output - a list of DdiExecutionData objects if successful, None otherwise
def get_ddi_data(target_ddi, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.DISPLAY_DIAG)
    if report is None:
        return None

    if "ddiHandler" not in report.keys() or "ddiDataQueue" not in report["ddiHandler"].keys():
        return None

    ddi_name = Ddi(target_ddi).name
    output = []
    for ddi_entry in report["ddiHandler"]["ddiDataQueue"]:
        if ddi_entry["Ddi"] == ddi_name:
            if start_time is not None and ddi_entry['StartTime'] < start_time:
                continue
            if end_time is not None and ddi_entry['StartTime'] > end_time:
                break
            output.append(DdiExecutionData(ddi_entry))
            if limit is not None and limit == len(output):
                break
    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get execution data of any function
# @details      Note: In EtlParser, function tracking is not supported for legacy driver
# @param[in]    target_function - target function to be executed
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit -  maximum number of records in output
# @return       output - a list of FunctionData objects if successful, None otherwise
def get_function_data(target_function, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.FUNCTION)
    if report is None:
        return None

    if "functionDataQueue" not in report.keys():
        return None

    output = []
    for function_entry in report["functionDataQueue"]:
        if function_entry["Name"] == target_function:
            if start_time is not None and function_entry['TimeStamp'] < start_time:
                continue
            if end_time is not None and function_entry['TimeStamp'] > end_time:
                break
            output.append(FunctionData(function_entry))
            if limit is not None and limit == len(output):
                break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get mmio data for any given offset
# @param[in]    offset - targeted MMIO offset
# @param[in]    is_write - True or False to filter out read or write operations
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @param[in]    is_cpu_mmio - True or False to filter DSB writes or CPU writes
# @return       output - a list of MmioData objects if successful, None otherwise
def get_mmio_data(offset, is_write=None, start_time=None, end_time=None, limit=None, is_cpu_mmio=None):
    report = __get_report(__ReportNames.MMIO)

    if "mmioDataQueue" not in report.keys():
        return None

    output = []
    for mmio_entry in report["mmioDataQueue"]:
        if mmio_entry["Offset"] == offset:
            if is_write is not None and mmio_entry["IsWrite"] != is_write:
                continue
            if is_cpu_mmio is not None and mmio_entry["IsCpuMmio"] != is_cpu_mmio:
                continue
            if start_time is not None and mmio_entry['TimeStamp'] < start_time:
                continue
            if end_time is not None and mmio_entry['TimeStamp'] > end_time:
                break
            output.append(MmioData(mmio_entry))
            if limit is not None and limit == len(output):
                break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get change history of any DPCD offset
# @param[in]    target_dpcd_offset - DPCD offset
# @param[in]    channel - String representation of channel ('AUX_A'-'AUX_I')
# @param[in]    is_write - True for only write operations, False for only read operations
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of DpcdData objects if successful, None otherwise
def get_dpcd_data(target_dpcd_offset, channel=None, is_write=None, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.DPCD)

    if "dpcdDataQueue" not in report.keys():
        return None

    output = []
    for dpcd_entry in report["dpcdDataQueue"]:
        if dpcd_entry["Address"] == target_dpcd_offset:
            if channel is not None and dpcd_entry['Channel'] != channel:
                continue
            if is_write is not None and dpcd_entry['IsWrite'] != is_write:
                continue
            if start_time is not None and dpcd_entry['TimeStamp'] < start_time:
                continue
            if end_time is not None and dpcd_entry['TimeStamp'] > end_time:
                break
            output.append(DpcdData(dpcd_entry))
            if limit is not None and limit == len(output):
                break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get change history of any I2C offset
# @param[in]    port - String representation of target_i2c_port (e.g PORT_C)
# @param[in]    slave - I2c salve Id (ex: 0x74 for HDCP)
# @param[in]    index - offset value
# @param[in]    is_write - True for only write operations, False for only read operations
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of I2cData objects if successful, None otherwise
def get_i2c_data(port, slave=None, index=None, is_write=None, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.I2C)

    if "i2cDataQueue" not in report.keys():
        return None

    output = []
    for i2c_entry in report["i2cDataQueue"]:
        if i2c_entry["Port"] == port:
            if slave is not None and i2c_entry['Slave'] != slave:
                continue
            if index is not None and i2c_entry['Index'] != index:
                continue
            if is_write is not None and i2c_entry['IsWrite'] != is_write:
                continue
            if start_time is not None and i2c_entry['TimeStamp'] < start_time:
                continue
            if end_time is not None and i2c_entry['TimeStamp'] > end_time:
                break
            output.append(I2cData(i2c_entry))
            if limit is not None and limit == len(output):
                break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get VBI data
# @param[in]    pipe - target pipe
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of VbiData objects if successful, None otherwise
def get_vbi_data(pipe=None, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.VBI)

    output = []
    for vbi_entry in report:
        if pipe is not None and vbi_entry["Pipe"] != pipe:
            continue
        if start_time is not None and vbi_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and vbi_entry['TimeStamp'] > end_time:
            break
        output.append(VbiData(vbi_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get DPST data
# @param[in]    event - of type Events
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of DPSTData objects if successful, None otherwise
def get_dpst_data(event, start_time=None, end_time=None, limit=None):
    # Validate arguments
    if event not in Events.ALL:
        logging.warning("Invalid arguments: queue_name= {0}".format(event))
        return None

    report = __get_report(__ReportNames.DPST)
    if report is None:
        return None

    if event not in report.keys():
        return None

    output = []
    for event_entry in report[event]:
        if start_time is not None and event_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and event_entry['TimeStamp'] > end_time:
            break

        if event == Events.DPST_PHASE_IN:
            output.append(DpstPhaseIn(event_entry))
        if event == Events.DPST_PROGRAM_START:
            output.append(DpstProgramData(event_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get a list of all debug messages from ETL
# @param[in]    level - Logging level
# @param[in]    search_string - string to be searched
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of DbgMsgData objects if successful, None otherwise
def get_dbg_msg(level=None, search_string=None, start_time=None, end_time=None, limit=None):
    report = __get_report(__ReportNames.DBG_MSG)
    if report is None:
        return None

    output = []
    for msg_entry in report:
        if level is not None and msg_entry['Level'] != level:
            continue
        if search_string is not None and search_string not in msg_entry['Message']:
            continue
        if start_time is not None and msg_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and msg_entry['TimeStamp'] > end_time:
            break
        output.append(DbgMsgData(msg_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get any custom event data
# @param[in]    event - of type Events
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @param[in]    event_filter - filter for events
# @return       output - a list of respective event objects if successful, None otherwise
def get_event_data(event, start_time=None, end_time=None, limit=None, event_filter=None):
    # Validate arguments
    if event not in Events.ALL:
        logging.warning("Invalid arguments: queue_name= {0}".format(event))
        return None

    report = __get_report(__ReportNames.COMMON)
    if report is None:
        return None

    if event not in report.keys():
        return None

    output = []
    for event_entry in report[event]:
        if start_time is not None and event_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and event_entry['TimeStamp'] > end_time:
            break

        # Common Events
        if event == Events.MSG:
            output.append(event_entry)
        if event == Events.ETL_DETAILS:
            output.append(EtlDetails(event_entry))

        # Yangra Events
        if event == Events.DISPLAY_ASSERT:
            output.append(DisplayAssertData(event_entry))
        if event == Events.SELECTIVE_FETCH_INFO:
            output.append(SelectiveFetchData(event_entry))
        if event == Events.SET_TIMING:
            if event_filter is None:
                if event_entry['SrcX'] != 0 and event_entry['SrcY'] != 0:
                    output.append(SetTimingData(event_entry))
            else:
                # Add all set timing events
                output.append(SetTimingData(event_entry))
        if event == Events.VRR_DISABLE:
            output.append(VrrDisableData(event_entry))
        if event == Events.VRR_ENABLE:
            vrr_enable_event = VrrEnableData(event_entry)
            # Driver is dumping VrrEnable event for all targets during ETL start. Check for all 0 values to avoid
            # adding unnecessary events to output
            if (vrr_enable_event.VrrMax == 0) and (vrr_enable_event.VrrMin == 0) and (
                    vrr_enable_event.VrrFlipLine == 0):
                continue
            output.append(vrr_enable_event)
        if event == Events.VRR_STATUS_INFO:
            output.append(VrrStatusData(event_entry))
        if event == Events.VRR_ADAPTIVE_BALANCE_BALANCE:
            output.append(VrrAdaptiveBalanceBalanceData(event_entry))
        if event == Events.VRR_ADAPTIVE_BALANCE_APPLY:
            output.append(VrrAdaptiveBalanceApplyData(event_entry))
        if event == Events.VRR_ADAPTIVE_BALANCE_HW_COUNTER_MISMATCH:
            output.append(VrrAdaptiveBalanceHwCounterMismatchData(event_entry))
        if event == Events.SET_TIMING_COLOR:
            output.append(SetTimingColor(event_entry))
        if event == Events.DISPLAY_BRIGHTNESS3:
            output.append(DisplayBrightness3(event_entry))
        if event == Events.SET_ADJUSTED_COLORIMETRY_INFO:
            output.append(SetAdjustedColorimetryInfo(event_entry))
        if event == Events.HDR_DISPLAY_CAPS:
            output.append(HDRDisplayCaps(event_entry))
        if event == Events.OS_GIVEN_1D_LUT:
            output.append(OSGiven1DLUT(event_entry))
        if event == Events.OS_1D_LUT_PARAM:
            output.append(OS1DLUTParam(event_entry))
        if event == Events.OS_GIVEN_CSC:
            output.append(OSGivenCSC(event_entry))
        if event == Events.DSB_HDR_GAMMA:
            output.append(DSBHDRGamma(event_entry))
        if event == Events.DEFAULT_HDR_METADATA:
            output.append(HDRMetadata(event_entry))
        if event == Events.FLIP_HDR_METADATA:
            output.append(HDRMetadata(event_entry))
        if event == Events.START_DEVICE:
            output.append(StartDeviceStopData(event_entry))
        if event == Events.DFT_FLIP_SYNC_ADDRESS:
            output.append(DFTFlipAddress(event_entry))
        if event == Events.DC_STATE_DATA:
            output.append(DcStateData(event_entry))
        if event == Events.PPS_DATA:
            output.append(PpsData(event_entry))
        if event == Events.INFO_FRAME_DATA:
            output.append(InfoFrameData(event_entry))
        if event == Events.FEATURE_STATUS:
            output.append(FeatureStatus(event_entry))
        if event == Events.SPI_DATA:
            output.append(SpiData(event_entry))
        if event == Events.CANCEL_FLIP:
            output.append(CancelFlip(event_entry))
        if event == Events.BLC_DDI3_OPTIMIZATION:
            output.append(BlcDDI3Optimization(event_entry))
        if event == Events.DISPLAY_PWR_CONS_D0_D3_STATE_CHANGE:
            output.append(PwrConsD0D3StateChangeData(event_entry))
        if event == Events.TARGET_MODE:
            output.append(TargetMode(event_entry))
        if event == Events.DP_RX_CAPS:
            output.append(DpRxCaps(event_entry))
        if event == Events.SET_INTERRUPT_TARGET_PRESENT_ID:
            output.append(SetInterruptTargetPresentId(event_entry))
        if event == Events.NOTIFY_VSYNC_LOG_BUFFER_EXT:
            output.append(NotifyVSyncLogBufferPlaneExt(event_entry))
        if event == Events.NOTIFY_VSYNC_LOG_BUFFER_PLANE:
            output.append(NotifyVSyncLogBufferPlane(event_entry))
        if event == Events.RR_SWITCH_CAPS_FIXED_RXCAPS:
            output.append(RrSwitchCapsFixedRxCapsData(event_entry))
        if event == Events.FMS_STATUS_INFO:
            output.append(FmsStatusInfo(event_entry))
        if event == Events.PROCESS_CONFIG_TABLE:
            output.append(ProcessConfigTable(event_entry))
        if event == Events.FLIP_PROCESS_DETAILS:
            output.append(FlipProcessDetails(event_entry))
        if event == Events.HW_PLANE_LAYER_INDEX:
            output.append(HwPlaneToLayerIndex(event_entry))
        if event == Events.FEATURE_CONTROL:
            output.append(FeatureControl(event_entry))
        if event == Events.DFT_FLIP_ALL_PARAM:
            output.append(DFTFlipAllParam(event_entry))
        if event == Events.CURSOR_POS:
            output.append(CursorPositionData(event_entry))
        if event == Events.CURSOR_SHAPE:
            output.append(CursorShapeData(event_entry))
        if event == Events.SCALER_INFO:
            output.append(ScalerInfo(event_entry))
        if event == Events.SCALER_PLANE:
            output.append(ScalerPlane(event_entry))

        # Legacy Events
        if event == Events.DP_LINK_TRAINING:
            output.append(DpLinkTrainingData(event_entry))
        if event == Events.DP_FAST_LINK_TRAINING:
            output.append(DpFastLinkTrainingData(event_entry))
        if event == Events.CHECK_PRESENT_DURATION_SUPPORT:
            output.append(CheckPresentDurationSupportData(event_entry))
        if event == Events.TRANSLATED_OS_MODE:
            output.append(OsTargetMode(event_entry))
        if event == Events.HW_FLIPQ_MODE:
            output.append(HWFlipQMode(event_entry))
        if event == Events.RR_SWITCH_INFO:
            output.append(RrSwitchInfo(event_entry))
        if event == Events.RR_SWITCH_PROGRAM:
            output.append(RrSwitchProgram(event_entry))
        if event == Events.SYSTEM_DETAILS_TRANSCODER:
            output.append(SystemDetailsTranscoderInfo(event_entry))

        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get flip data
# @param[in]    pipe - pipe name (Ex: 'PIPE_A')
# @param[in]    sourceid - SourceId
# @param[in]    async_flip - True if only async flips are required in output list
# @param[in]    vrr_flip - True if only vrr flips are required in output list
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @return       output - list of FlipData objects if successful, None otherwise
def get_flip_data(pipe=None, async_flip=None, vrr_flip=None, start_time=None, end_time=None, sourceid=None):
    report = __get_report(__ReportNames.FLIP)
    if report is None:
        logging.warning(f"Flip report not found")
        return None
    output = []
    for mpo3_flip in report:
        flip_data = FlipData(mpo3_flip)
        # filters
        if pipe is not None and flip_data.Pipe != pipe:
            continue
        if sourceid is not None and flip_data.SourceId != sourceid:
            continue
        if start_time is not None and mpo3_flip['TimeStamp'] < start_time:
            continue
        if end_time is not None and mpo3_flip['TimeStamp'] > end_time:
            break

        if async_flip is not None or vrr_flip is not None:
            is_async_flip = False
            is_vrr_flip = False
            for plane_info in flip_data.PlaneInfoList:
                # Consider all the flips with Enabled flag and MAX duration as VRR flips.
                if "Enabled" in plane_info.Flags and mpo3_flip['Duration'] == 4294967295:
                    is_vrr_flip = True
                if "FlipImmediate" in plane_info.Flags:
                    if "FlipImmediateNoTearing" in plane_info.Flags:
                        is_vrr_flip = True
                    else:
                        is_async_flip = True

            if not any([is_vrr_flip == vrr_flip, is_async_flip == async_flip]):
                continue
        output.append(flip_data)

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get interrupt data
# @param[in]    interrupt - ControlInterrupt or 2 or 3 from DDI class
# @param[in]    interrupt_type - InterruptType
# @param[in]    start_timestamp - start time in ms
# @param[in]    end_timestamp - end time in ms
# @return       output - list of ControlInterruptData objects if successful, None otherwise
def get_interrupt_data(interrupt, interrupt_type=None, start_timestamp=None, end_timestamp=None):
    if interrupt not in [Ddi.DDI_CONTROLINTERRUPT, Ddi.DDI_CONTROLINTERRUPT2, Ddi.DDI_CONTROLINTERRUPT3,
                         Ddi.DDI_SCANLINEINTERRUPT]:
        logging.error("Invalid interrupt: {0}".format(interrupt))
        return None

    report = __get_report(__ReportNames.INTERRUPT)
    if report is None:
        return None

    output = []

    if interrupt == Ddi.DDI_CONTROLINTERRUPT:
        if "controlInterrupt1DataQueue" not in report.keys():
            return None
        for interrupt_entry in report["controlInterrupt1DataQueue"]:
            if interrupt_entry['InterruptType'] != interrupt_type:
                continue
            output.append(ControlInterrupt1Data(interrupt_entry))

    if interrupt == Ddi.DDI_CONTROLINTERRUPT2:
        if "controlInterrupt2DataQueue" not in report.keys():
            return None
        for interrupt_entry in report["controlInterrupt2DataQueue"]:
            if interrupt_entry['InterruptType'] != interrupt_type:
                continue
            logging.debug(
                f"Interrupt Type : {interrupt_entry['InterruptType']}, Timestamp: {interrupt_entry['TimeStamp']}")
            if start_timestamp is not None and interrupt_entry['TimeStamp'] < start_timestamp:
                continue
            if end_timestamp is not None and interrupt_entry['TimeStamp'] > end_timestamp:
                continue
            output.append(ControlInterrupt2Data(interrupt_entry))

    if interrupt == Ddi.DDI_CONTROLINTERRUPT3:
        if "controlInterrupt3DataQueue" not in report.keys():
            return None
        for interrupt_entry in report["controlInterrupt3DataQueue"]:
            if interrupt_entry['InterruptType'] != interrupt_type:
                continue
            output.append(ControlInterrupt3Data(interrupt_entry))

    if interrupt == Ddi.DDI_SCANLINEINTERRUPT:
        if "scanlineInterruptDataQueue" not in report.keys():
            return None
        for interrupt_entry in report["scanlineInterruptDataQueue"]:
            logging.debug(
                f"Pipe : {interrupt_entry['PipeId']}, Timestamp: {interrupt_entry['TimeStamp']}")
            if start_timestamp is not None and interrupt_entry['TimeStamp'] < start_timestamp:
                continue
            if end_timestamp is not None and interrupt_entry['TimeStamp'] > end_timestamp:
                continue
            output.append(ScanlineInterruptData(interrupt_entry))

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get PSR event data
# @param[in]    event - of type Events
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of PSRData objects if successful, None otherwise
def get_psr_event_data(event, start_time=None, end_time=None, limit=None):
    # Validate arguments
    if event not in Events.ALL:
        logging.warning("Invalid arguments: queue_name= {0}".format(event))
        return None

    report = __get_report(__ReportNames.PSR)
    if report is None:
        return None

    if event not in report.keys():
        return None

    output = []
    for event_entry in report[event]:
        if start_time is not None and event_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and event_entry['TimeStamp'] > end_time:
            break

        if event == Events.PSR_DPST_PHASE_EVENT:
            output.append(PsrClientEventData(event_entry))
        if event == Events.DISPLAY_PC_PSR_PR_PROCESS:
            output.append(DisplayPcPsrPrProcess(event_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get QueryConnectionChange event data
# @param[in]    event - of type Events
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of QueryConnecionChangeData objects if successful, None otherwise
def get_query_connection_change_event_data(event, start_time=None, end_time=None, limit=None):
    # Validate arguments
    if event not in Events.ALL:
        logging.warning("Invalid arguments: queue_name= {0}".format(event))
        return None

    report = __get_report(__ReportNames.DISPLAY_DETECT)
    if report is None:
        return None

    if event not in report.keys():
        return None

    output = []
    for event_entry in report[event]:
        if start_time is not None and event_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and event_entry['TimeStamp'] > end_time:
            break

        if event == Events.QUERY_CONNECTION_CHANGE_EVENT:
            output.append(QueryConnectionChangeData(event_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output


##
# @brief        Exposed API to get HPD event data
# @param[in]    event - of type Events
# @param[in]    start_time - start time in ms
# @param[in]    end_time - end time in ms
# @param[in]    limit - maximum number of records in output
# @return       output - a list of objects of HPD or HPDLiveStateData if successful, None otherwise
def get_HPD_data(event, start_time=None, end_time=None, limit=None):
    # Validate arguments
    if event not in Events.ALL:
        logging.warning("Invalid arguments: queue_name= {0}".format(event))
        return None
    report = __get_report(__ReportNames.DISPLAY_DETECT)
    if report is None:
        return None

    if event not in report.keys():
        return None

    output = []
    for event_entry in report[event]:
        if start_time is not None and event_entry['TimeStamp'] < start_time:
            continue
        if end_time is not None and event_entry['TimeStamp'] > end_time:
            break

        if event == Events.HPD_LIVE_STATE:
            output.append(HPDLiveStateData(event_entry))
        if limit is not None and limit == len(output):
            break

    if len(output) == 0:
        return None
    return output
